
snes_gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d8  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0801a7d8  0801a7d8  0002a7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab38  0801ab38  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab38  0801ab38  0002ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab40  0801ab40  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab40  0801ab40  0002ab40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ab44  0801ab44  0002ab44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801ab48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e62c  20000078  0801abc0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e6a4  0801abc0  0003e6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228f8  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000462d  00000000  00000000  000529a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001818  00000000  00000000  00056fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  000587e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005b6f  00000000  00000000  00059e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016333  00000000  00000000  0005f99f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000988a5  00000000  00000000  00075cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e577  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  0010e5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000078 	.word	0x20000078
 801001c:	00000000 	.word	0x00000000
 8010020:	0801a7c0 	.word	0x0801a7c0

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000007c 	.word	0x2000007c
 801003c:	0801a7c0 	.word	0x0801a7c0

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr
	...

08010070 <memchr>:
 8010070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010074:	2a10      	cmp	r2, #16
 8010076:	db2b      	blt.n	80100d0 <memchr+0x60>
 8010078:	f010 0f07 	tst.w	r0, #7
 801007c:	d008      	beq.n	8010090 <memchr+0x20>
 801007e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010082:	3a01      	subs	r2, #1
 8010084:	428b      	cmp	r3, r1
 8010086:	d02d      	beq.n	80100e4 <memchr+0x74>
 8010088:	f010 0f07 	tst.w	r0, #7
 801008c:	b342      	cbz	r2, 80100e0 <memchr+0x70>
 801008e:	d1f6      	bne.n	801007e <memchr+0xe>
 8010090:	b4f0      	push	{r4, r5, r6, r7}
 8010092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801009a:	f022 0407 	bic.w	r4, r2, #7
 801009e:	f07f 0700 	mvns.w	r7, #0
 80100a2:	2300      	movs	r3, #0
 80100a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80100a8:	3c08      	subs	r4, #8
 80100aa:	ea85 0501 	eor.w	r5, r5, r1
 80100ae:	ea86 0601 	eor.w	r6, r6, r1
 80100b2:	fa85 f547 	uadd8	r5, r5, r7
 80100b6:	faa3 f587 	sel	r5, r3, r7
 80100ba:	fa86 f647 	uadd8	r6, r6, r7
 80100be:	faa5 f687 	sel	r6, r5, r7
 80100c2:	b98e      	cbnz	r6, 80100e8 <memchr+0x78>
 80100c4:	d1ee      	bne.n	80100a4 <memchr+0x34>
 80100c6:	bcf0      	pop	{r4, r5, r6, r7}
 80100c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80100cc:	f002 0207 	and.w	r2, r2, #7
 80100d0:	b132      	cbz	r2, 80100e0 <memchr+0x70>
 80100d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100d6:	3a01      	subs	r2, #1
 80100d8:	ea83 0301 	eor.w	r3, r3, r1
 80100dc:	b113      	cbz	r3, 80100e4 <memchr+0x74>
 80100de:	d1f8      	bne.n	80100d2 <memchr+0x62>
 80100e0:	2000      	movs	r0, #0
 80100e2:	4770      	bx	lr
 80100e4:	3801      	subs	r0, #1
 80100e6:	4770      	bx	lr
 80100e8:	2d00      	cmp	r5, #0
 80100ea:	bf06      	itte	eq
 80100ec:	4635      	moveq	r5, r6
 80100ee:	3803      	subeq	r0, #3
 80100f0:	3807      	subne	r0, #7
 80100f2:	f015 0f01 	tst.w	r5, #1
 80100f6:	d107      	bne.n	8010108 <memchr+0x98>
 80100f8:	3001      	adds	r0, #1
 80100fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80100fe:	bf02      	ittt	eq
 8010100:	3001      	addeq	r0, #1
 8010102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010106:	3001      	addeq	r0, #1
 8010108:	bcf0      	pop	{r4, r5, r6, r7}
 801010a:	3801      	subs	r0, #1
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop

08010110 <__aeabi_uldivmod>:
 8010110:	b953      	cbnz	r3, 8010128 <__aeabi_uldivmod+0x18>
 8010112:	b94a      	cbnz	r2, 8010128 <__aeabi_uldivmod+0x18>
 8010114:	2900      	cmp	r1, #0
 8010116:	bf08      	it	eq
 8010118:	2800      	cmpeq	r0, #0
 801011a:	bf1c      	itt	ne
 801011c:	f04f 31ff 	movne.w	r1, #4294967295
 8010120:	f04f 30ff 	movne.w	r0, #4294967295
 8010124:	f000 b972 	b.w	801040c <__aeabi_idiv0>
 8010128:	f1ad 0c08 	sub.w	ip, sp, #8
 801012c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010130:	f000 f806 	bl	8010140 <__udivmoddi4>
 8010134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801013c:	b004      	add	sp, #16
 801013e:	4770      	bx	lr

08010140 <__udivmoddi4>:
 8010140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010144:	9e08      	ldr	r6, [sp, #32]
 8010146:	4604      	mov	r4, r0
 8010148:	4688      	mov	r8, r1
 801014a:	2b00      	cmp	r3, #0
 801014c:	d14b      	bne.n	80101e6 <__udivmoddi4+0xa6>
 801014e:	428a      	cmp	r2, r1
 8010150:	4615      	mov	r5, r2
 8010152:	d967      	bls.n	8010224 <__udivmoddi4+0xe4>
 8010154:	fab2 f282 	clz	r2, r2
 8010158:	b14a      	cbz	r2, 801016e <__udivmoddi4+0x2e>
 801015a:	f1c2 0720 	rsb	r7, r2, #32
 801015e:	fa01 f302 	lsl.w	r3, r1, r2
 8010162:	fa20 f707 	lsr.w	r7, r0, r7
 8010166:	4095      	lsls	r5, r2
 8010168:	ea47 0803 	orr.w	r8, r7, r3
 801016c:	4094      	lsls	r4, r2
 801016e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010172:	0c23      	lsrs	r3, r4, #16
 8010174:	fbb8 f7fe 	udiv	r7, r8, lr
 8010178:	fa1f fc85 	uxth.w	ip, r5
 801017c:	fb0e 8817 	mls	r8, lr, r7, r8
 8010180:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010184:	fb07 f10c 	mul.w	r1, r7, ip
 8010188:	4299      	cmp	r1, r3
 801018a:	d909      	bls.n	80101a0 <__udivmoddi4+0x60>
 801018c:	18eb      	adds	r3, r5, r3
 801018e:	f107 30ff 	add.w	r0, r7, #4294967295
 8010192:	f080 811b 	bcs.w	80103cc <__udivmoddi4+0x28c>
 8010196:	4299      	cmp	r1, r3
 8010198:	f240 8118 	bls.w	80103cc <__udivmoddi4+0x28c>
 801019c:	3f02      	subs	r7, #2
 801019e:	442b      	add	r3, r5
 80101a0:	1a5b      	subs	r3, r3, r1
 80101a2:	b2a4      	uxth	r4, r4
 80101a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80101a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80101ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80101b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80101b4:	45a4      	cmp	ip, r4
 80101b6:	d909      	bls.n	80101cc <__udivmoddi4+0x8c>
 80101b8:	192c      	adds	r4, r5, r4
 80101ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80101be:	f080 8107 	bcs.w	80103d0 <__udivmoddi4+0x290>
 80101c2:	45a4      	cmp	ip, r4
 80101c4:	f240 8104 	bls.w	80103d0 <__udivmoddi4+0x290>
 80101c8:	3802      	subs	r0, #2
 80101ca:	442c      	add	r4, r5
 80101cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80101d0:	eba4 040c 	sub.w	r4, r4, ip
 80101d4:	2700      	movs	r7, #0
 80101d6:	b11e      	cbz	r6, 80101e0 <__udivmoddi4+0xa0>
 80101d8:	40d4      	lsrs	r4, r2
 80101da:	2300      	movs	r3, #0
 80101dc:	e9c6 4300 	strd	r4, r3, [r6]
 80101e0:	4639      	mov	r1, r7
 80101e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e6:	428b      	cmp	r3, r1
 80101e8:	d909      	bls.n	80101fe <__udivmoddi4+0xbe>
 80101ea:	2e00      	cmp	r6, #0
 80101ec:	f000 80eb 	beq.w	80103c6 <__udivmoddi4+0x286>
 80101f0:	2700      	movs	r7, #0
 80101f2:	e9c6 0100 	strd	r0, r1, [r6]
 80101f6:	4638      	mov	r0, r7
 80101f8:	4639      	mov	r1, r7
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	fab3 f783 	clz	r7, r3
 8010202:	2f00      	cmp	r7, #0
 8010204:	d147      	bne.n	8010296 <__udivmoddi4+0x156>
 8010206:	428b      	cmp	r3, r1
 8010208:	d302      	bcc.n	8010210 <__udivmoddi4+0xd0>
 801020a:	4282      	cmp	r2, r0
 801020c:	f200 80fa 	bhi.w	8010404 <__udivmoddi4+0x2c4>
 8010210:	1a84      	subs	r4, r0, r2
 8010212:	eb61 0303 	sbc.w	r3, r1, r3
 8010216:	2001      	movs	r0, #1
 8010218:	4698      	mov	r8, r3
 801021a:	2e00      	cmp	r6, #0
 801021c:	d0e0      	beq.n	80101e0 <__udivmoddi4+0xa0>
 801021e:	e9c6 4800 	strd	r4, r8, [r6]
 8010222:	e7dd      	b.n	80101e0 <__udivmoddi4+0xa0>
 8010224:	b902      	cbnz	r2, 8010228 <__udivmoddi4+0xe8>
 8010226:	deff      	udf	#255	; 0xff
 8010228:	fab2 f282 	clz	r2, r2
 801022c:	2a00      	cmp	r2, #0
 801022e:	f040 808f 	bne.w	8010350 <__udivmoddi4+0x210>
 8010232:	1b49      	subs	r1, r1, r5
 8010234:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010238:	fa1f f885 	uxth.w	r8, r5
 801023c:	2701      	movs	r7, #1
 801023e:	fbb1 fcfe 	udiv	ip, r1, lr
 8010242:	0c23      	lsrs	r3, r4, #16
 8010244:	fb0e 111c 	mls	r1, lr, ip, r1
 8010248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801024c:	fb08 f10c 	mul.w	r1, r8, ip
 8010250:	4299      	cmp	r1, r3
 8010252:	d907      	bls.n	8010264 <__udivmoddi4+0x124>
 8010254:	18eb      	adds	r3, r5, r3
 8010256:	f10c 30ff 	add.w	r0, ip, #4294967295
 801025a:	d202      	bcs.n	8010262 <__udivmoddi4+0x122>
 801025c:	4299      	cmp	r1, r3
 801025e:	f200 80cd 	bhi.w	80103fc <__udivmoddi4+0x2bc>
 8010262:	4684      	mov	ip, r0
 8010264:	1a59      	subs	r1, r3, r1
 8010266:	b2a3      	uxth	r3, r4
 8010268:	fbb1 f0fe 	udiv	r0, r1, lr
 801026c:	fb0e 1410 	mls	r4, lr, r0, r1
 8010270:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010274:	fb08 f800 	mul.w	r8, r8, r0
 8010278:	45a0      	cmp	r8, r4
 801027a:	d907      	bls.n	801028c <__udivmoddi4+0x14c>
 801027c:	192c      	adds	r4, r5, r4
 801027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010282:	d202      	bcs.n	801028a <__udivmoddi4+0x14a>
 8010284:	45a0      	cmp	r8, r4
 8010286:	f200 80b6 	bhi.w	80103f6 <__udivmoddi4+0x2b6>
 801028a:	4618      	mov	r0, r3
 801028c:	eba4 0408 	sub.w	r4, r4, r8
 8010290:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010294:	e79f      	b.n	80101d6 <__udivmoddi4+0x96>
 8010296:	f1c7 0c20 	rsb	ip, r7, #32
 801029a:	40bb      	lsls	r3, r7
 801029c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80102a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80102a4:	fa01 f407 	lsl.w	r4, r1, r7
 80102a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80102ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80102b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80102b4:	4325      	orrs	r5, r4
 80102b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80102ba:	0c2c      	lsrs	r4, r5, #16
 80102bc:	fb08 3319 	mls	r3, r8, r9, r3
 80102c0:	fa1f fa8e 	uxth.w	sl, lr
 80102c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80102c8:	fb09 f40a 	mul.w	r4, r9, sl
 80102cc:	429c      	cmp	r4, r3
 80102ce:	fa02 f207 	lsl.w	r2, r2, r7
 80102d2:	fa00 f107 	lsl.w	r1, r0, r7
 80102d6:	d90b      	bls.n	80102f0 <__udivmoddi4+0x1b0>
 80102d8:	eb1e 0303 	adds.w	r3, lr, r3
 80102dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80102e0:	f080 8087 	bcs.w	80103f2 <__udivmoddi4+0x2b2>
 80102e4:	429c      	cmp	r4, r3
 80102e6:	f240 8084 	bls.w	80103f2 <__udivmoddi4+0x2b2>
 80102ea:	f1a9 0902 	sub.w	r9, r9, #2
 80102ee:	4473      	add	r3, lr
 80102f0:	1b1b      	subs	r3, r3, r4
 80102f2:	b2ad      	uxth	r5, r5
 80102f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80102f8:	fb08 3310 	mls	r3, r8, r0, r3
 80102fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8010300:	fb00 fa0a 	mul.w	sl, r0, sl
 8010304:	45a2      	cmp	sl, r4
 8010306:	d908      	bls.n	801031a <__udivmoddi4+0x1da>
 8010308:	eb1e 0404 	adds.w	r4, lr, r4
 801030c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010310:	d26b      	bcs.n	80103ea <__udivmoddi4+0x2aa>
 8010312:	45a2      	cmp	sl, r4
 8010314:	d969      	bls.n	80103ea <__udivmoddi4+0x2aa>
 8010316:	3802      	subs	r0, #2
 8010318:	4474      	add	r4, lr
 801031a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801031e:	fba0 8902 	umull	r8, r9, r0, r2
 8010322:	eba4 040a 	sub.w	r4, r4, sl
 8010326:	454c      	cmp	r4, r9
 8010328:	46c2      	mov	sl, r8
 801032a:	464b      	mov	r3, r9
 801032c:	d354      	bcc.n	80103d8 <__udivmoddi4+0x298>
 801032e:	d051      	beq.n	80103d4 <__udivmoddi4+0x294>
 8010330:	2e00      	cmp	r6, #0
 8010332:	d069      	beq.n	8010408 <__udivmoddi4+0x2c8>
 8010334:	ebb1 050a 	subs.w	r5, r1, sl
 8010338:	eb64 0403 	sbc.w	r4, r4, r3
 801033c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8010340:	40fd      	lsrs	r5, r7
 8010342:	40fc      	lsrs	r4, r7
 8010344:	ea4c 0505 	orr.w	r5, ip, r5
 8010348:	e9c6 5400 	strd	r5, r4, [r6]
 801034c:	2700      	movs	r7, #0
 801034e:	e747      	b.n	80101e0 <__udivmoddi4+0xa0>
 8010350:	f1c2 0320 	rsb	r3, r2, #32
 8010354:	fa20 f703 	lsr.w	r7, r0, r3
 8010358:	4095      	lsls	r5, r2
 801035a:	fa01 f002 	lsl.w	r0, r1, r2
 801035e:	fa21 f303 	lsr.w	r3, r1, r3
 8010362:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010366:	4338      	orrs	r0, r7
 8010368:	0c01      	lsrs	r1, r0, #16
 801036a:	fbb3 f7fe 	udiv	r7, r3, lr
 801036e:	fa1f f885 	uxth.w	r8, r5
 8010372:	fb0e 3317 	mls	r3, lr, r7, r3
 8010376:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801037a:	fb07 f308 	mul.w	r3, r7, r8
 801037e:	428b      	cmp	r3, r1
 8010380:	fa04 f402 	lsl.w	r4, r4, r2
 8010384:	d907      	bls.n	8010396 <__udivmoddi4+0x256>
 8010386:	1869      	adds	r1, r5, r1
 8010388:	f107 3cff 	add.w	ip, r7, #4294967295
 801038c:	d22f      	bcs.n	80103ee <__udivmoddi4+0x2ae>
 801038e:	428b      	cmp	r3, r1
 8010390:	d92d      	bls.n	80103ee <__udivmoddi4+0x2ae>
 8010392:	3f02      	subs	r7, #2
 8010394:	4429      	add	r1, r5
 8010396:	1acb      	subs	r3, r1, r3
 8010398:	b281      	uxth	r1, r0
 801039a:	fbb3 f0fe 	udiv	r0, r3, lr
 801039e:	fb0e 3310 	mls	r3, lr, r0, r3
 80103a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80103a6:	fb00 f308 	mul.w	r3, r0, r8
 80103aa:	428b      	cmp	r3, r1
 80103ac:	d907      	bls.n	80103be <__udivmoddi4+0x27e>
 80103ae:	1869      	adds	r1, r5, r1
 80103b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80103b4:	d217      	bcs.n	80103e6 <__udivmoddi4+0x2a6>
 80103b6:	428b      	cmp	r3, r1
 80103b8:	d915      	bls.n	80103e6 <__udivmoddi4+0x2a6>
 80103ba:	3802      	subs	r0, #2
 80103bc:	4429      	add	r1, r5
 80103be:	1ac9      	subs	r1, r1, r3
 80103c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80103c4:	e73b      	b.n	801023e <__udivmoddi4+0xfe>
 80103c6:	4637      	mov	r7, r6
 80103c8:	4630      	mov	r0, r6
 80103ca:	e709      	b.n	80101e0 <__udivmoddi4+0xa0>
 80103cc:	4607      	mov	r7, r0
 80103ce:	e6e7      	b.n	80101a0 <__udivmoddi4+0x60>
 80103d0:	4618      	mov	r0, r3
 80103d2:	e6fb      	b.n	80101cc <__udivmoddi4+0x8c>
 80103d4:	4541      	cmp	r1, r8
 80103d6:	d2ab      	bcs.n	8010330 <__udivmoddi4+0x1f0>
 80103d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80103dc:	eb69 020e 	sbc.w	r2, r9, lr
 80103e0:	3801      	subs	r0, #1
 80103e2:	4613      	mov	r3, r2
 80103e4:	e7a4      	b.n	8010330 <__udivmoddi4+0x1f0>
 80103e6:	4660      	mov	r0, ip
 80103e8:	e7e9      	b.n	80103be <__udivmoddi4+0x27e>
 80103ea:	4618      	mov	r0, r3
 80103ec:	e795      	b.n	801031a <__udivmoddi4+0x1da>
 80103ee:	4667      	mov	r7, ip
 80103f0:	e7d1      	b.n	8010396 <__udivmoddi4+0x256>
 80103f2:	4681      	mov	r9, r0
 80103f4:	e77c      	b.n	80102f0 <__udivmoddi4+0x1b0>
 80103f6:	3802      	subs	r0, #2
 80103f8:	442c      	add	r4, r5
 80103fa:	e747      	b.n	801028c <__udivmoddi4+0x14c>
 80103fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8010400:	442b      	add	r3, r5
 8010402:	e72f      	b.n	8010264 <__udivmoddi4+0x124>
 8010404:	4638      	mov	r0, r7
 8010406:	e708      	b.n	801021a <__udivmoddi4+0xda>
 8010408:	4637      	mov	r7, r6
 801040a:	e6e9      	b.n	80101e0 <__udivmoddi4+0xa0>

0801040c <__aeabi_idiv0>:
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop

08010410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010414:	f002 fea0 	bl	8013158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010418:	f000 f81c 	bl	8010454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801041c:	f000 f92a 	bl	8010674 <MX_GPIO_Init>
  MX_DMA_Init();
 8010420:	f000 f900 	bl	8010624 <MX_DMA_Init>
  MX_TIM1_Init();
 8010424:	f000 f8ae 	bl	8010584 <MX_TIM1_Init>
  MX_I2C1_Init();
 8010428:	f000 f87e 	bl	8010528 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 801042c:	f006 fffe 	bl	801742c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8010430:	4a05      	ldr	r2, [pc, #20]	; (8010448 <main+0x38>)
 8010432:	2100      	movs	r1, #0
 8010434:	4805      	ldr	r0, [pc, #20]	; (801044c <main+0x3c>)
 8010436:	f007 f863 	bl	8017500 <osThreadNew>
 801043a:	4602      	mov	r2, r0
 801043c:	4b04      	ldr	r3, [pc, #16]	; (8010450 <main+0x40>)
 801043e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8010440:	f007 f828 	bl	8017494 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010444:	e7fe      	b.n	8010444 <main+0x34>
 8010446:	bf00      	nop
 8010448:	0801aabc 	.word	0x0801aabc
 801044c:	080107a5 	.word	0x080107a5
 8010450:	2000a9f8 	.word	0x2000a9f8

08010454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b094      	sub	sp, #80	; 0x50
 8010458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801045a:	f107 0320 	add.w	r3, r7, #32
 801045e:	2230      	movs	r2, #48	; 0x30
 8010460:	2100      	movs	r1, #0
 8010462:	4618      	mov	r0, r3
 8010464:	f009 fd9f 	bl	8019fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010468:	f107 030c 	add.w	r3, r7, #12
 801046c:	2200      	movs	r2, #0
 801046e:	601a      	str	r2, [r3, #0]
 8010470:	605a      	str	r2, [r3, #4]
 8010472:	609a      	str	r2, [r3, #8]
 8010474:	60da      	str	r2, [r3, #12]
 8010476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010478:	2300      	movs	r3, #0
 801047a:	60bb      	str	r3, [r7, #8]
 801047c:	4b28      	ldr	r3, [pc, #160]	; (8010520 <SystemClock_Config+0xcc>)
 801047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010480:	4a27      	ldr	r2, [pc, #156]	; (8010520 <SystemClock_Config+0xcc>)
 8010482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010486:	6413      	str	r3, [r2, #64]	; 0x40
 8010488:	4b25      	ldr	r3, [pc, #148]	; (8010520 <SystemClock_Config+0xcc>)
 801048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801048c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010490:	60bb      	str	r3, [r7, #8]
 8010492:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8010494:	2300      	movs	r3, #0
 8010496:	607b      	str	r3, [r7, #4]
 8010498:	4b22      	ldr	r3, [pc, #136]	; (8010524 <SystemClock_Config+0xd0>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80104a0:	4a20      	ldr	r2, [pc, #128]	; (8010524 <SystemClock_Config+0xd0>)
 80104a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104a6:	6013      	str	r3, [r2, #0]
 80104a8:	4b1e      	ldr	r3, [pc, #120]	; (8010524 <SystemClock_Config+0xd0>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80104b0:	607b      	str	r3, [r7, #4]
 80104b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80104b4:	2301      	movs	r3, #1
 80104b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80104b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80104bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80104be:	2302      	movs	r3, #2
 80104c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80104c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80104c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80104c8:	2319      	movs	r3, #25
 80104ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80104cc:	2390      	movs	r3, #144	; 0x90
 80104ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80104d0:	2302      	movs	r3, #2
 80104d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80104d4:	2305      	movs	r3, #5
 80104d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80104d8:	f107 0320 	add.w	r3, r7, #32
 80104dc:	4618      	mov	r0, r3
 80104de:	f005 ff4d 	bl	801637c <HAL_RCC_OscConfig>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d001      	beq.n	80104ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80104e8:	f000 f97b 	bl	80107e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80104ec:	230f      	movs	r3, #15
 80104ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80104f0:	2302      	movs	r3, #2
 80104f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80104f4:	2300      	movs	r3, #0
 80104f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80104f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80104fe:	2300      	movs	r3, #0
 8010500:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8010502:	f107 030c 	add.w	r3, r7, #12
 8010506:	2102      	movs	r1, #2
 8010508:	4618      	mov	r0, r3
 801050a:	f006 f9a7 	bl	801685c <HAL_RCC_ClockConfig>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d001      	beq.n	8010518 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8010514:	f000 f965 	bl	80107e2 <Error_Handler>
  }
}
 8010518:	bf00      	nop
 801051a:	3750      	adds	r7, #80	; 0x50
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	40023800 	.word	0x40023800
 8010524:	40007000 	.word	0x40007000

08010528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801052c:	4b12      	ldr	r3, [pc, #72]	; (8010578 <MX_I2C1_Init+0x50>)
 801052e:	4a13      	ldr	r2, [pc, #76]	; (801057c <MX_I2C1_Init+0x54>)
 8010530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8010532:	4b11      	ldr	r3, [pc, #68]	; (8010578 <MX_I2C1_Init+0x50>)
 8010534:	4a12      	ldr	r2, [pc, #72]	; (8010580 <MX_I2C1_Init+0x58>)
 8010536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010538:	4b0f      	ldr	r3, [pc, #60]	; (8010578 <MX_I2C1_Init+0x50>)
 801053a:	2200      	movs	r2, #0
 801053c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801053e:	4b0e      	ldr	r3, [pc, #56]	; (8010578 <MX_I2C1_Init+0x50>)
 8010540:	2200      	movs	r2, #0
 8010542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010544:	4b0c      	ldr	r3, [pc, #48]	; (8010578 <MX_I2C1_Init+0x50>)
 8010546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801054a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801054c:	4b0a      	ldr	r3, [pc, #40]	; (8010578 <MX_I2C1_Init+0x50>)
 801054e:	2200      	movs	r2, #0
 8010550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8010552:	4b09      	ldr	r3, [pc, #36]	; (8010578 <MX_I2C1_Init+0x50>)
 8010554:	2200      	movs	r2, #0
 8010556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010558:	4b07      	ldr	r3, [pc, #28]	; (8010578 <MX_I2C1_Init+0x50>)
 801055a:	2200      	movs	r2, #0
 801055c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801055e:	4b06      	ldr	r3, [pc, #24]	; (8010578 <MX_I2C1_Init+0x50>)
 8010560:	2200      	movs	r2, #0
 8010562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010564:	4804      	ldr	r0, [pc, #16]	; (8010578 <MX_I2C1_Init+0x50>)
 8010566:	f003 fee5 	bl	8014334 <HAL_I2C_Init>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d001      	beq.n	8010574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8010570:	f000 f937 	bl	80107e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010574:	bf00      	nop
 8010576:	bd80      	pop	{r7, pc}
 8010578:	2000aa5c 	.word	0x2000aa5c
 801057c:	40005400 	.word	0x40005400
 8010580:	000186a0 	.word	0x000186a0

08010584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b086      	sub	sp, #24
 8010588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801058a:	f107 0308 	add.w	r3, r7, #8
 801058e:	2200      	movs	r2, #0
 8010590:	601a      	str	r2, [r3, #0]
 8010592:	605a      	str	r2, [r3, #4]
 8010594:	609a      	str	r2, [r3, #8]
 8010596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010598:	463b      	mov	r3, r7
 801059a:	2200      	movs	r2, #0
 801059c:	601a      	str	r2, [r3, #0]
 801059e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80105a0:	4b1e      	ldr	r3, [pc, #120]	; (801061c <MX_TIM1_Init+0x98>)
 80105a2:	4a1f      	ldr	r2, [pc, #124]	; (8010620 <MX_TIM1_Init+0x9c>)
 80105a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80105a6:	4b1d      	ldr	r3, [pc, #116]	; (801061c <MX_TIM1_Init+0x98>)
 80105a8:	2247      	movs	r2, #71	; 0x47
 80105aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80105ac:	4b1b      	ldr	r3, [pc, #108]	; (801061c <MX_TIM1_Init+0x98>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 80105b2:	4b1a      	ldr	r3, [pc, #104]	; (801061c <MX_TIM1_Init+0x98>)
 80105b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80105b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80105ba:	4b18      	ldr	r3, [pc, #96]	; (801061c <MX_TIM1_Init+0x98>)
 80105bc:	2200      	movs	r2, #0
 80105be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80105c0:	4b16      	ldr	r3, [pc, #88]	; (801061c <MX_TIM1_Init+0x98>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80105c6:	4b15      	ldr	r3, [pc, #84]	; (801061c <MX_TIM1_Init+0x98>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80105cc:	4813      	ldr	r0, [pc, #76]	; (801061c <MX_TIM1_Init+0x98>)
 80105ce:	f006 fb2f 	bl	8016c30 <HAL_TIM_Base_Init>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80105d8:	f000 f903 	bl	80107e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80105dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80105e2:	f107 0308 	add.w	r3, r7, #8
 80105e6:	4619      	mov	r1, r3
 80105e8:	480c      	ldr	r0, [pc, #48]	; (801061c <MX_TIM1_Init+0x98>)
 80105ea:	f006 fc9c 	bl	8016f26 <HAL_TIM_ConfigClockSource>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d001      	beq.n	80105f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80105f4:	f000 f8f5 	bl	80107e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80105f8:	2300      	movs	r3, #0
 80105fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80105fc:	2300      	movs	r3, #0
 80105fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8010600:	463b      	mov	r3, r7
 8010602:	4619      	mov	r1, r3
 8010604:	4805      	ldr	r0, [pc, #20]	; (801061c <MX_TIM1_Init+0x98>)
 8010606:	f006 fe87 	bl	8017318 <HAL_TIMEx_MasterConfigSynchronization>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8010610:	f000 f8e7 	bl	80107e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8010614:	bf00      	nop
 8010616:	3718      	adds	r7, #24
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	2000aab0 	.word	0x2000aab0
 8010620:	40010000 	.word	0x40010000

08010624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801062a:	2300      	movs	r3, #0
 801062c:	607b      	str	r3, [r7, #4]
 801062e:	4b10      	ldr	r3, [pc, #64]	; (8010670 <MX_DMA_Init+0x4c>)
 8010630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010632:	4a0f      	ldr	r2, [pc, #60]	; (8010670 <MX_DMA_Init+0x4c>)
 8010634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010638:	6313      	str	r3, [r2, #48]	; 0x30
 801063a:	4b0d      	ldr	r3, [pc, #52]	; (8010670 <MX_DMA_Init+0x4c>)
 801063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801063e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010642:	607b      	str	r3, [r7, #4]
 8010644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8010646:	2200      	movs	r2, #0
 8010648:	2105      	movs	r1, #5
 801064a:	200b      	movs	r0, #11
 801064c:	f002 fe7e 	bl	801334c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8010650:	200b      	movs	r0, #11
 8010652:	f002 fe97 	bl	8013384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8010656:	2200      	movs	r2, #0
 8010658:	2105      	movs	r1, #5
 801065a:	2011      	movs	r0, #17
 801065c:	f002 fe76 	bl	801334c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8010660:	2011      	movs	r0, #17
 8010662:	f002 fe8f 	bl	8013384 <HAL_NVIC_EnableIRQ>

}
 8010666:	bf00      	nop
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	40023800 	.word	0x40023800

08010674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b08a      	sub	sp, #40	; 0x28
 8010678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801067a:	f107 0314 	add.w	r3, r7, #20
 801067e:	2200      	movs	r2, #0
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	605a      	str	r2, [r3, #4]
 8010684:	609a      	str	r2, [r3, #8]
 8010686:	60da      	str	r2, [r3, #12]
 8010688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801068a:	2300      	movs	r3, #0
 801068c:	613b      	str	r3, [r7, #16]
 801068e:	4b41      	ldr	r3, [pc, #260]	; (8010794 <MX_GPIO_Init+0x120>)
 8010690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010692:	4a40      	ldr	r2, [pc, #256]	; (8010794 <MX_GPIO_Init+0x120>)
 8010694:	f043 0304 	orr.w	r3, r3, #4
 8010698:	6313      	str	r3, [r2, #48]	; 0x30
 801069a:	4b3e      	ldr	r3, [pc, #248]	; (8010794 <MX_GPIO_Init+0x120>)
 801069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801069e:	f003 0304 	and.w	r3, r3, #4
 80106a2:	613b      	str	r3, [r7, #16]
 80106a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80106a6:	2300      	movs	r3, #0
 80106a8:	60fb      	str	r3, [r7, #12]
 80106aa:	4b3a      	ldr	r3, [pc, #232]	; (8010794 <MX_GPIO_Init+0x120>)
 80106ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ae:	4a39      	ldr	r2, [pc, #228]	; (8010794 <MX_GPIO_Init+0x120>)
 80106b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106b4:	6313      	str	r3, [r2, #48]	; 0x30
 80106b6:	4b37      	ldr	r3, [pc, #220]	; (8010794 <MX_GPIO_Init+0x120>)
 80106b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106be:	60fb      	str	r3, [r7, #12]
 80106c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80106c2:	2300      	movs	r3, #0
 80106c4:	60bb      	str	r3, [r7, #8]
 80106c6:	4b33      	ldr	r3, [pc, #204]	; (8010794 <MX_GPIO_Init+0x120>)
 80106c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ca:	4a32      	ldr	r2, [pc, #200]	; (8010794 <MX_GPIO_Init+0x120>)
 80106cc:	f043 0301 	orr.w	r3, r3, #1
 80106d0:	6313      	str	r3, [r2, #48]	; 0x30
 80106d2:	4b30      	ldr	r3, [pc, #192]	; (8010794 <MX_GPIO_Init+0x120>)
 80106d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d6:	f003 0301 	and.w	r3, r3, #1
 80106da:	60bb      	str	r3, [r7, #8]
 80106dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80106de:	2300      	movs	r3, #0
 80106e0:	607b      	str	r3, [r7, #4]
 80106e2:	4b2c      	ldr	r3, [pc, #176]	; (8010794 <MX_GPIO_Init+0x120>)
 80106e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e6:	4a2b      	ldr	r2, [pc, #172]	; (8010794 <MX_GPIO_Init+0x120>)
 80106e8:	f043 0302 	orr.w	r3, r3, #2
 80106ec:	6313      	str	r3, [r2, #48]	; 0x30
 80106ee:	4b29      	ldr	r3, [pc, #164]	; (8010794 <MX_GPIO_Init+0x120>)
 80106f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f2:	f003 0302 	and.w	r3, r3, #2
 80106f6:	607b      	str	r3, [r7, #4]
 80106f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDpin_Pin|X2_Max_Pin, GPIO_PIN_RESET);
 80106fa:	2200      	movs	r2, #0
 80106fc:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8010700:	4825      	ldr	r0, [pc, #148]	; (8010798 <MX_GPIO_Init+0x124>)
 8010702:	f003 fdfd 	bl	8014300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SNES_Latch_Pin|SNES_Clock_Pin, GPIO_PIN_RESET);
 8010706:	2200      	movs	r2, #0
 8010708:	2130      	movs	r1, #48	; 0x30
 801070a:	4824      	ldr	r0, [pc, #144]	; (801079c <MX_GPIO_Init+0x128>)
 801070c:	f003 fdf8 	bl	8014300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X1_Center_Pin|X1_Max_Pin|Y1_Center_Pin|Button1_Pin
 8010710:	2200      	movs	r2, #0
 8010712:	f24f 41cf 	movw	r1, #62671	; 0xf4cf
 8010716:	4822      	ldr	r0, [pc, #136]	; (80107a0 <MX_GPIO_Init+0x12c>)
 8010718:	f003 fdf2 	bl	8014300 <HAL_GPIO_WritePin>
                          |Button2_Pin|Button3_Pin|Button4_Pin|X2_Center_Pin
                          |Y1_Max_Pin|Y2_Center_Pin|Y2_Max_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LEDpin_Pin X2_Max_Pin */
  GPIO_InitStruct.Pin = LEDpin_Pin|X2_Max_Pin;
 801071c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8010720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8010722:	2311      	movs	r3, #17
 8010724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010726:	2300      	movs	r3, #0
 8010728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801072a:	2300      	movs	r3, #0
 801072c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801072e:	f107 0314 	add.w	r3, r7, #20
 8010732:	4619      	mov	r1, r3
 8010734:	4818      	ldr	r0, [pc, #96]	; (8010798 <MX_GPIO_Init+0x124>)
 8010736:	f003 fc49 	bl	8013fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SNES_Latch_Pin SNES_Clock_Pin */
  GPIO_InitStruct.Pin = SNES_Latch_Pin|SNES_Clock_Pin;
 801073a:	2330      	movs	r3, #48	; 0x30
 801073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801073e:	2301      	movs	r3, #1
 8010740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010742:	2300      	movs	r3, #0
 8010744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010746:	2303      	movs	r3, #3
 8010748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801074a:	f107 0314 	add.w	r3, r7, #20
 801074e:	4619      	mov	r1, r3
 8010750:	4812      	ldr	r0, [pc, #72]	; (801079c <MX_GPIO_Init+0x128>)
 8010752:	f003 fc3b 	bl	8013fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SNES_Data_Pin */
  GPIO_InitStruct.Pin = SNES_Data_Pin;
 8010756:	2340      	movs	r3, #64	; 0x40
 8010758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801075a:	2300      	movs	r3, #0
 801075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801075e:	2301      	movs	r3, #1
 8010760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SNES_Data_GPIO_Port, &GPIO_InitStruct);
 8010762:	f107 0314 	add.w	r3, r7, #20
 8010766:	4619      	mov	r1, r3
 8010768:	480c      	ldr	r0, [pc, #48]	; (801079c <MX_GPIO_Init+0x128>)
 801076a:	f003 fc2f 	bl	8013fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : X1_Center_Pin X1_Max_Pin Y1_Center_Pin Button1_Pin
                           Button2_Pin Button3_Pin Button4_Pin X2_Center_Pin
                           Y1_Max_Pin Y2_Center_Pin Y2_Max_Pin */
  GPIO_InitStruct.Pin = X1_Center_Pin|X1_Max_Pin|Y1_Center_Pin|Button1_Pin
 801076e:	f24f 43cf 	movw	r3, #62671	; 0xf4cf
 8010772:	617b      	str	r3, [r7, #20]
                          |Button2_Pin|Button3_Pin|Button4_Pin|X2_Center_Pin
                          |Y1_Max_Pin|Y2_Center_Pin|Y2_Max_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8010774:	2311      	movs	r3, #17
 8010776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010778:	2300      	movs	r3, #0
 801077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801077c:	2300      	movs	r3, #0
 801077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010780:	f107 0314 	add.w	r3, r7, #20
 8010784:	4619      	mov	r1, r3
 8010786:	4806      	ldr	r0, [pc, #24]	; (80107a0 <MX_GPIO_Init+0x12c>)
 8010788:	f003 fc20 	bl	8013fcc <HAL_GPIO_Init>

}
 801078c:	bf00      	nop
 801078e:	3728      	adds	r7, #40	; 0x28
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	40023800 	.word	0x40023800
 8010798:	40020800 	.word	0x40020800
 801079c:	40020000 	.word	0x40020000
 80107a0:	40020400 	.word	0x40020400

080107a4 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  snesMain(&hi2c1,&htim1);
 80107ac:	4903      	ldr	r1, [pc, #12]	; (80107bc <StartDefaultTask+0x18>)
 80107ae:	4804      	ldr	r0, [pc, #16]	; (80107c0 <StartDefaultTask+0x1c>)
 80107b0:	f002 fc5e 	bl	8013070 <snesMain>
  /* USER CODE END 5 */
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	2000aab0 	.word	0x2000aab0
 80107c0:	2000aa5c 	.word	0x2000aa5c

080107c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107d4:	d101      	bne.n	80107da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80107d6:	f002 fce1 	bl	801319c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80107da:	bf00      	nop
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80107e2:	b480      	push	{r7}
 80107e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80107e6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80107e8:	e7fe      	b.n	80107e8 <Error_Handler+0x6>
	...

080107ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80107f2:	2300      	movs	r3, #0
 80107f4:	607b      	str	r3, [r7, #4]
 80107f6:	4b12      	ldr	r3, [pc, #72]	; (8010840 <HAL_MspInit+0x54>)
 80107f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107fa:	4a11      	ldr	r2, [pc, #68]	; (8010840 <HAL_MspInit+0x54>)
 80107fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010800:	6453      	str	r3, [r2, #68]	; 0x44
 8010802:	4b0f      	ldr	r3, [pc, #60]	; (8010840 <HAL_MspInit+0x54>)
 8010804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801080a:	607b      	str	r3, [r7, #4]
 801080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801080e:	2300      	movs	r3, #0
 8010810:	603b      	str	r3, [r7, #0]
 8010812:	4b0b      	ldr	r3, [pc, #44]	; (8010840 <HAL_MspInit+0x54>)
 8010814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010816:	4a0a      	ldr	r2, [pc, #40]	; (8010840 <HAL_MspInit+0x54>)
 8010818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801081c:	6413      	str	r3, [r2, #64]	; 0x40
 801081e:	4b08      	ldr	r3, [pc, #32]	; (8010840 <HAL_MspInit+0x54>)
 8010820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010826:	603b      	str	r3, [r7, #0]
 8010828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801082a:	2200      	movs	r2, #0
 801082c:	210f      	movs	r1, #15
 801082e:	f06f 0001 	mvn.w	r0, #1
 8010832:	f002 fd8b 	bl	801334c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010836:	bf00      	nop
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	40023800 	.word	0x40023800

08010844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08a      	sub	sp, #40	; 0x28
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801084c:	f107 0314 	add.w	r3, r7, #20
 8010850:	2200      	movs	r2, #0
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	605a      	str	r2, [r3, #4]
 8010856:	609a      	str	r2, [r3, #8]
 8010858:	60da      	str	r2, [r3, #12]
 801085a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4a50      	ldr	r2, [pc, #320]	; (80109a4 <HAL_I2C_MspInit+0x160>)
 8010862:	4293      	cmp	r3, r2
 8010864:	f040 8099 	bne.w	801099a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010868:	2300      	movs	r3, #0
 801086a:	613b      	str	r3, [r7, #16]
 801086c:	4b4e      	ldr	r3, [pc, #312]	; (80109a8 <HAL_I2C_MspInit+0x164>)
 801086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010870:	4a4d      	ldr	r2, [pc, #308]	; (80109a8 <HAL_I2C_MspInit+0x164>)
 8010872:	f043 0302 	orr.w	r3, r3, #2
 8010876:	6313      	str	r3, [r2, #48]	; 0x30
 8010878:	4b4b      	ldr	r3, [pc, #300]	; (80109a8 <HAL_I2C_MspInit+0x164>)
 801087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801087c:	f003 0302 	and.w	r3, r3, #2
 8010880:	613b      	str	r3, [r7, #16]
 8010882:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8010884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801088a:	2312      	movs	r3, #18
 801088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801088e:	2301      	movs	r3, #1
 8010890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010892:	2303      	movs	r3, #3
 8010894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010896:	2304      	movs	r3, #4
 8010898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801089a:	f107 0314 	add.w	r3, r7, #20
 801089e:	4619      	mov	r1, r3
 80108a0:	4842      	ldr	r0, [pc, #264]	; (80109ac <HAL_I2C_MspInit+0x168>)
 80108a2:	f003 fb93 	bl	8013fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80108a6:	2300      	movs	r3, #0
 80108a8:	60fb      	str	r3, [r7, #12]
 80108aa:	4b3f      	ldr	r3, [pc, #252]	; (80109a8 <HAL_I2C_MspInit+0x164>)
 80108ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ae:	4a3e      	ldr	r2, [pc, #248]	; (80109a8 <HAL_I2C_MspInit+0x164>)
 80108b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108b4:	6413      	str	r3, [r2, #64]	; 0x40
 80108b6:	4b3c      	ldr	r3, [pc, #240]	; (80109a8 <HAL_I2C_MspInit+0x164>)
 80108b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80108be:	60fb      	str	r3, [r7, #12]
 80108c0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80108c2:	4b3b      	ldr	r3, [pc, #236]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108c4:	4a3b      	ldr	r2, [pc, #236]	; (80109b4 <HAL_I2C_MspInit+0x170>)
 80108c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80108c8:	4b39      	ldr	r3, [pc, #228]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80108ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80108d0:	4b37      	ldr	r3, [pc, #220]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80108d6:	4b36      	ldr	r3, [pc, #216]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108d8:	2200      	movs	r2, #0
 80108da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80108dc:	4b34      	ldr	r3, [pc, #208]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80108e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80108e4:	4b32      	ldr	r3, [pc, #200]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80108ea:	4b31      	ldr	r3, [pc, #196]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108ec:	2200      	movs	r2, #0
 80108ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80108f0:	4b2f      	ldr	r3, [pc, #188]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80108f6:	4b2e      	ldr	r3, [pc, #184]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80108fc:	4b2c      	ldr	r3, [pc, #176]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 80108fe:	2200      	movs	r2, #0
 8010900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8010902:	482b      	ldr	r0, [pc, #172]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 8010904:	f002 fd4c 	bl	80133a0 <HAL_DMA_Init>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 801090e:	f7ff ff68 	bl	80107e2 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4a26      	ldr	r2, [pc, #152]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 8010916:	639a      	str	r2, [r3, #56]	; 0x38
 8010918:	4a25      	ldr	r2, [pc, #148]	; (80109b0 <HAL_I2C_MspInit+0x16c>)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 801091e:	4b26      	ldr	r3, [pc, #152]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010920:	4a26      	ldr	r2, [pc, #152]	; (80109bc <HAL_I2C_MspInit+0x178>)
 8010922:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8010924:	4b24      	ldr	r3, [pc, #144]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801092a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801092c:	4b22      	ldr	r3, [pc, #136]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 801092e:	2240      	movs	r2, #64	; 0x40
 8010930:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010932:	4b21      	ldr	r3, [pc, #132]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010934:	2200      	movs	r2, #0
 8010936:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010938:	4b1f      	ldr	r3, [pc, #124]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 801093a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801093e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010940:	4b1d      	ldr	r3, [pc, #116]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010942:	2200      	movs	r2, #0
 8010944:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010946:	4b1c      	ldr	r3, [pc, #112]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010948:	2200      	movs	r2, #0
 801094a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 801094c:	4b1a      	ldr	r3, [pc, #104]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 801094e:	2200      	movs	r2, #0
 8010950:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010952:	4b19      	ldr	r3, [pc, #100]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010954:	2200      	movs	r2, #0
 8010956:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010958:	4b17      	ldr	r3, [pc, #92]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 801095a:	2200      	movs	r2, #0
 801095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 801095e:	4816      	ldr	r0, [pc, #88]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010960:	f002 fd1e 	bl	80133a0 <HAL_DMA_Init>
 8010964:	4603      	mov	r3, r0
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 801096a:	f7ff ff3a 	bl	80107e2 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4a11      	ldr	r2, [pc, #68]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010972:	635a      	str	r2, [r3, #52]	; 0x34
 8010974:	4a10      	ldr	r2, [pc, #64]	; (80109b8 <HAL_I2C_MspInit+0x174>)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 801097a:	2200      	movs	r2, #0
 801097c:	2105      	movs	r1, #5
 801097e:	201f      	movs	r0, #31
 8010980:	f002 fce4 	bl	801334c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8010984:	201f      	movs	r0, #31
 8010986:	f002 fcfd 	bl	8013384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 801098a:	2200      	movs	r2, #0
 801098c:	2105      	movs	r1, #5
 801098e:	2020      	movs	r0, #32
 8010990:	f002 fcdc 	bl	801334c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8010994:	2020      	movs	r0, #32
 8010996:	f002 fcf5 	bl	8013384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801099a:	bf00      	nop
 801099c:	3728      	adds	r7, #40	; 0x28
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	40005400 	.word	0x40005400
 80109a8:	40023800 	.word	0x40023800
 80109ac:	40020400 	.word	0x40020400
 80109b0:	2000aaf0 	.word	0x2000aaf0
 80109b4:	40026010 	.word	0x40026010
 80109b8:	2000a9fc 	.word	0x2000a9fc
 80109bc:	400260a0 	.word	0x400260a0

080109c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4a0b      	ldr	r2, [pc, #44]	; (80109fc <HAL_TIM_Base_MspInit+0x3c>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d10d      	bne.n	80109ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80109d2:	2300      	movs	r3, #0
 80109d4:	60fb      	str	r3, [r7, #12]
 80109d6:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <HAL_TIM_Base_MspInit+0x40>)
 80109d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109da:	4a09      	ldr	r2, [pc, #36]	; (8010a00 <HAL_TIM_Base_MspInit+0x40>)
 80109dc:	f043 0301 	orr.w	r3, r3, #1
 80109e0:	6453      	str	r3, [r2, #68]	; 0x44
 80109e2:	4b07      	ldr	r3, [pc, #28]	; (8010a00 <HAL_TIM_Base_MspInit+0x40>)
 80109e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109e6:	f003 0301 	and.w	r3, r3, #1
 80109ea:	60fb      	str	r3, [r7, #12]
 80109ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80109ee:	bf00      	nop
 80109f0:	3714      	adds	r7, #20
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	40010000 	.word	0x40010000
 8010a00:	40023800 	.word	0x40023800

08010a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b08c      	sub	sp, #48	; 0x30
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8010a14:	2200      	movs	r2, #0
 8010a16:	6879      	ldr	r1, [r7, #4]
 8010a18:	201c      	movs	r0, #28
 8010a1a:	f002 fc97 	bl	801334c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010a1e:	201c      	movs	r0, #28
 8010a20:	f002 fcb0 	bl	8013384 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8010a24:	2300      	movs	r3, #0
 8010a26:	60fb      	str	r3, [r7, #12]
 8010a28:	4b20      	ldr	r3, [pc, #128]	; (8010aac <HAL_InitTick+0xa8>)
 8010a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2c:	4a1f      	ldr	r2, [pc, #124]	; (8010aac <HAL_InitTick+0xa8>)
 8010a2e:	f043 0301 	orr.w	r3, r3, #1
 8010a32:	6413      	str	r3, [r2, #64]	; 0x40
 8010a34:	4b1d      	ldr	r3, [pc, #116]	; (8010aac <HAL_InitTick+0xa8>)
 8010a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a38:	f003 0301 	and.w	r3, r3, #1
 8010a3c:	60fb      	str	r3, [r7, #12]
 8010a3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010a40:	f107 0210 	add.w	r2, r7, #16
 8010a44:	f107 0314 	add.w	r3, r7, #20
 8010a48:	4611      	mov	r1, r2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f006 f8be 	bl	8016bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010a50:	f006 f8a8 	bl	8016ba4 <HAL_RCC_GetPCLK1Freq>
 8010a54:	4603      	mov	r3, r0
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	4a14      	ldr	r2, [pc, #80]	; (8010ab0 <HAL_InitTick+0xac>)
 8010a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a62:	0c9b      	lsrs	r3, r3, #18
 8010a64:	3b01      	subs	r3, #1
 8010a66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8010a68:	4b12      	ldr	r3, [pc, #72]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010a6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8010a70:	4b10      	ldr	r3, [pc, #64]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010a76:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8010a78:	4a0e      	ldr	r2, [pc, #56]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8010a7e:	4b0d      	ldr	r3, [pc, #52]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a80:	2200      	movs	r2, #0
 8010a82:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010a84:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a86:	2200      	movs	r2, #0
 8010a88:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8010a8a:	480a      	ldr	r0, [pc, #40]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a8c:	f006 f8d0 	bl	8016c30 <HAL_TIM_Base_Init>
 8010a90:	4603      	mov	r3, r0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d104      	bne.n	8010aa0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8010a96:	4807      	ldr	r0, [pc, #28]	; (8010ab4 <HAL_InitTick+0xb0>)
 8010a98:	f006 f919 	bl	8016cce <HAL_TIM_Base_Start_IT>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	e000      	b.n	8010aa2 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8010aa0:	2301      	movs	r3, #1
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3730      	adds	r7, #48	; 0x30
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	40023800 	.word	0x40023800
 8010ab0:	431bde83 	.word	0x431bde83
 8010ab4:	2000ab50 	.word	0x2000ab50

08010ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010abc:	e7fe      	b.n	8010abc <NMI_Handler+0x4>

08010abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010abe:	b480      	push	{r7}
 8010ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010ac2:	e7fe      	b.n	8010ac2 <HardFault_Handler+0x4>

08010ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010ac8:	e7fe      	b.n	8010ac8 <MemManage_Handler+0x4>

08010aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010aca:	b480      	push	{r7}
 8010acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010ace:	e7fe      	b.n	8010ace <BusFault_Handler+0x4>

08010ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010ad4:	e7fe      	b.n	8010ad4 <UsageFault_Handler+0x4>

08010ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010ad6:	b480      	push	{r7}
 8010ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010ada:	bf00      	nop
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8010ae8:	4802      	ldr	r0, [pc, #8]	; (8010af4 <DMA1_Stream0_IRQHandler+0x10>)
 8010aea:	f002 fd81 	bl	80135f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8010aee:	bf00      	nop
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	2000aaf0 	.word	0x2000aaf0

08010af8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8010afc:	4802      	ldr	r0, [pc, #8]	; (8010b08 <DMA1_Stream6_IRQHandler+0x10>)
 8010afe:	f002 fd77 	bl	80135f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8010b02:	bf00      	nop
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	2000a9fc 	.word	0x2000a9fc

08010b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010b10:	4802      	ldr	r0, [pc, #8]	; (8010b1c <TIM2_IRQHandler+0x10>)
 8010b12:	f006 f900 	bl	8016d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8010b16:	bf00      	nop
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	2000ab50 	.word	0x2000ab50

08010b20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8010b24:	4802      	ldr	r0, [pc, #8]	; (8010b30 <I2C1_EV_IRQHandler+0x10>)
 8010b26:	f003 fe53 	bl	80147d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8010b2a:	bf00      	nop
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	2000aa5c 	.word	0x2000aa5c

08010b34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8010b38:	4802      	ldr	r0, [pc, #8]	; (8010b44 <I2C1_ER_IRQHandler+0x10>)
 8010b3a:	f003 ffb6 	bl	8014aaa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8010b3e:	bf00      	nop
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	2000aa5c 	.word	0x2000aa5c

08010b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b086      	sub	sp, #24
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010b50:	4a14      	ldr	r2, [pc, #80]	; (8010ba4 <_sbrk+0x5c>)
 8010b52:	4b15      	ldr	r3, [pc, #84]	; (8010ba8 <_sbrk+0x60>)
 8010b54:	1ad3      	subs	r3, r2, r3
 8010b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010b5c:	4b13      	ldr	r3, [pc, #76]	; (8010bac <_sbrk+0x64>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d102      	bne.n	8010b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010b64:	4b11      	ldr	r3, [pc, #68]	; (8010bac <_sbrk+0x64>)
 8010b66:	4a12      	ldr	r2, [pc, #72]	; (8010bb0 <_sbrk+0x68>)
 8010b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010b6a:	4b10      	ldr	r3, [pc, #64]	; (8010bac <_sbrk+0x64>)
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4413      	add	r3, r2
 8010b72:	693a      	ldr	r2, [r7, #16]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d207      	bcs.n	8010b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010b78:	f009 f9e0 	bl	8019f3c <__errno>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	230c      	movs	r3, #12
 8010b80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010b82:	f04f 33ff 	mov.w	r3, #4294967295
 8010b86:	e009      	b.n	8010b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010b88:	4b08      	ldr	r3, [pc, #32]	; (8010bac <_sbrk+0x64>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010b8e:	4b07      	ldr	r3, [pc, #28]	; (8010bac <_sbrk+0x64>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4413      	add	r3, r2
 8010b96:	4a05      	ldr	r2, [pc, #20]	; (8010bac <_sbrk+0x64>)
 8010b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	20010000 	.word	0x20010000
 8010ba8:	00000400 	.word	0x00000400
 8010bac:	20000094 	.word	0x20000094
 8010bb0:	2000e6a8 	.word	0x2000e6a8

08010bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010bb8:	4b08      	ldr	r3, [pc, #32]	; (8010bdc <SystemInit+0x28>)
 8010bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bbe:	4a07      	ldr	r2, [pc, #28]	; (8010bdc <SystemInit+0x28>)
 8010bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010bc8:	4b04      	ldr	r3, [pc, #16]	; (8010bdc <SystemInit+0x28>)
 8010bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010bce:	609a      	str	r2, [r3, #8]
#endif
}
 8010bd0:	bf00      	nop
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	e000ed00 	.word	0xe000ed00

08010be0 <getDataProfileOffset>:

uint16_t data[DATA_INIT_SIZE];
uint8_t currentProfileIndex = 0;

struct rebindEntry* getDataProfileOffset(uint8_t profileIndex) //RW
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	71fb      	strb	r3, [r7, #7]
	struct rebindEntry* retVal = (struct rebindEntry*)data + ((PROFILE_SIZE * profileIndex)/2);
 8010bea:	79fa      	ldrb	r2, [r7, #7]
 8010bec:	4613      	mov	r3, r2
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	021b      	lsls	r3, r3, #8
 8010bf4:	085a      	lsrs	r2, r3, #1
 8010bf6:	4613      	mov	r3, r2
 8010bf8:	005b      	lsls	r3, r3, #1
 8010bfa:	4413      	add	r3, r2
 8010bfc:	005b      	lsls	r3, r3, #1
 8010bfe:	461a      	mov	r2, r3
 8010c00:	4b04      	ldr	r3, [pc, #16]	; (8010c14 <getDataProfileOffset+0x34>)
 8010c02:	4413      	add	r3, r2
 8010c04:	60fb      	str	r3, [r7, #12]
	return retVal;
 8010c06:	68fb      	ldr	r3, [r7, #12]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3714      	adds	r7, #20
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr
 8010c14:	2000ab90 	.word	0x2000ab90

08010c18 <profileSave>:



void profileSave(uint8_t newProfileIndex) {
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	71fb      	strb	r3, [r7, #7]
	if (newProfileIndex != currentProfileIndex) //If we're saving to a new profile
 8010c22:	4b1c      	ldr	r3, [pc, #112]	; (8010c94 <profileSave+0x7c>)
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	79fa      	ldrb	r2, [r7, #7]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d020      	beq.n	8010c6e <profileSave+0x56>
			{
		struct rebindEntry *newProfile = getDataProfileOffset(newProfileIndex); //Pointer to new profile
 8010c2c:	79fb      	ldrb	r3, [r7, #7]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7ff ffd6 	bl	8010be0 <getDataProfileOffset>
 8010c34:	60f8      	str	r0, [r7, #12]
		memcpy(newProfile, currentProfile, PROFILE_SIZE); //Save current profile to new slot
 8010c36:	4b18      	ldr	r3, [pc, #96]	; (8010c98 <profileSave+0x80>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8010c3e:	4619      	mov	r1, r3
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f009 f9a5 	bl	8019f90 <memcpy>
		flashReadData((uint16_t*)currentProfile,PROFILE_SIZE,(PROFILE_SIZE * currentProfileIndex));//Reload current profile from flash so it isn't overwritten on save
 8010c46:	4b14      	ldr	r3, [pc, #80]	; (8010c98 <profileSave+0x80>)
 8010c48:	6818      	ldr	r0, [r3, #0]
 8010c4a:	4b12      	ldr	r3, [pc, #72]	; (8010c94 <profileSave+0x7c>)
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	4613      	mov	r3, r2
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	4413      	add	r3, r2
 8010c56:	021b      	lsls	r3, r3, #8
 8010c58:	461a      	mov	r2, r3
 8010c5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8010c5e:	f001 f853 	bl	8011d08 <flashReadData>
		currentProfile = newProfile; //Point rebind to the new profile
 8010c62:	4a0d      	ldr	r2, [pc, #52]	; (8010c98 <profileSave+0x80>)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6013      	str	r3, [r2, #0]
		currentProfileIndex = newProfileIndex; //Update selected profile number
 8010c68:	4a0a      	ldr	r2, [pc, #40]	; (8010c94 <profileSave+0x7c>)
 8010c6a:	79fb      	ldrb	r3, [r7, #7]
 8010c6c:	7013      	strb	r3, [r2, #0]
	}
	flashWriteData((uint16_t*)currentProfile,PROFILE_SIZE,(PROFILE_SIZE * currentProfileIndex)); //Save profile
 8010c6e:	4b0a      	ldr	r3, [pc, #40]	; (8010c98 <profileSave+0x80>)
 8010c70:	6818      	ldr	r0, [r3, #0]
 8010c72:	4b08      	ldr	r3, [pc, #32]	; (8010c94 <profileSave+0x7c>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	461a      	mov	r2, r3
 8010c78:	4613      	mov	r3, r2
 8010c7a:	005b      	lsls	r3, r3, #1
 8010c7c:	4413      	add	r3, r2
 8010c7e:	021b      	lsls	r3, r3, #8
 8010c80:	461a      	mov	r2, r3
 8010c82:	f44f 7140 	mov.w	r1, #768	; 0x300
 8010c86:	f001 f86a 	bl	8011d5e <flashWriteData>
}
 8010c8a:	bf00      	nop
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	20000098 	.word	0x20000098
 8010c98:	2000db90 	.word	0x2000db90

08010c9c <profileSelect>:

void profileSelect(uint8_t newProfileIndex) {
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	71fb      	strb	r3, [r7, #7]
	//Load profile from flash
	flashReadData((uint16_t*)getDataProfileOffset(newProfileIndex),PROFILE_SIZE,(PROFILE_SIZE * newProfileIndex)); //Copy data for this profile in from flash, this discards any changes
 8010ca6:	79fb      	ldrb	r3, [r7, #7]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff ff99 	bl	8010be0 <getDataProfileOffset>
 8010cae:	79fa      	ldrb	r2, [r7, #7]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	005b      	lsls	r3, r3, #1
 8010cb4:	4413      	add	r3, r2
 8010cb6:	021b      	lsls	r3, r3, #8
 8010cb8:	461a      	mov	r2, r3
 8010cba:	f44f 7140 	mov.w	r1, #768	; 0x300
 8010cbe:	f001 f823 	bl	8011d08 <flashReadData>
	currentProfileIndex = newProfileIndex;
 8010cc2:	4a07      	ldr	r2, [pc, #28]	; (8010ce0 <profileSelect+0x44>)
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	7013      	strb	r3, [r2, #0]
	currentProfile = getDataProfileOffset(currentProfileIndex);
 8010cc8:	4b05      	ldr	r3, [pc, #20]	; (8010ce0 <profileSelect+0x44>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7ff ff87 	bl	8010be0 <getDataProfileOffset>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	4b03      	ldr	r3, [pc, #12]	; (8010ce4 <profileSelect+0x48>)
 8010cd6:	601a      	str	r2, [r3, #0]
}
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	20000098 	.word	0x20000098
 8010ce4:	2000db90 	.word	0x2000db90

08010ce8 <profileGetSelectedIndex>:

uint8_t profileGetSelectedIndex() {
 8010ce8:	b480      	push	{r7}
 8010cea:	af00      	add	r7, sp, #0
	return currentProfileIndex;
 8010cec:	4b03      	ldr	r3, [pc, #12]	; (8010cfc <profileGetSelectedIndex+0x14>)
 8010cee:	781b      	ldrb	r3, [r3, #0]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	20000098 	.word	0x20000098

08010d00 <bindGetBindCount>:

uint8_t bindGetBindCount() {
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
	int i = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	607b      	str	r3, [r7, #4]
	for (i = 0; i < REBIND_COUNT; i++)
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	607b      	str	r3, [r7, #4]
 8010d0e:	e01a      	b.n	8010d46 <bindGetBindCount+0x46>
		if (currentProfile[i].buttonsPressed == 0 || currentProfile[i].buttonsPressed == 65535)
 8010d10:	4b12      	ldr	r3, [pc, #72]	; (8010d5c <bindGetBindCount+0x5c>)
 8010d12:	6819      	ldr	r1, [r3, #0]
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	4613      	mov	r3, r2
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	4413      	add	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	440b      	add	r3, r1
 8010d20:	881b      	ldrh	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d012      	beq.n	8010d4c <bindGetBindCount+0x4c>
 8010d26:	4b0d      	ldr	r3, [pc, #52]	; (8010d5c <bindGetBindCount+0x5c>)
 8010d28:	6819      	ldr	r1, [r3, #0]
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	4413      	add	r3, r2
 8010d32:	005b      	lsls	r3, r3, #1
 8010d34:	440b      	add	r3, r1
 8010d36:	881b      	ldrh	r3, [r3, #0]
 8010d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d005      	beq.n	8010d4c <bindGetBindCount+0x4c>
	for (i = 0; i < REBIND_COUNT; i++)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	3301      	adds	r3, #1
 8010d44:	607b      	str	r3, [r7, #4]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2b7f      	cmp	r3, #127	; 0x7f
 8010d4a:	dde1      	ble.n	8010d10 <bindGetBindCount+0x10>
			break;
	return i;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	b2db      	uxtb	r3, r3
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr
 8010d5c:	2000db90 	.word	0x2000db90

08010d60 <bindKey>:

void bindKey(uint16_t buttonsPressed, uint16_t buttonsToPress,
		uint8_t rapidFire) {
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	80fb      	strh	r3, [r7, #6]
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	80bb      	strh	r3, [r7, #4]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	70fb      	strb	r3, [r7, #3]
	uint8_t rebindPos = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	73fb      	strb	r3, [r7, #15]
	for (rebindPos = 0; rebindPos < bindGetBindCount(); rebindPos++)
 8010d76:	2300      	movs	r3, #0
 8010d78:	73fb      	strb	r3, [r7, #15]
 8010d7a:	e00e      	b.n	8010d9a <bindKey+0x3a>
		if (currentProfile[rebindPos].buttonsPressed == buttonsPressed)
 8010d7c:	4b1c      	ldr	r3, [pc, #112]	; (8010df0 <bindKey+0x90>)
 8010d7e:	6819      	ldr	r1, [r3, #0]
 8010d80:	7bfa      	ldrb	r2, [r7, #15]
 8010d82:	4613      	mov	r3, r2
 8010d84:	005b      	lsls	r3, r3, #1
 8010d86:	4413      	add	r3, r2
 8010d88:	005b      	lsls	r3, r3, #1
 8010d8a:	440b      	add	r3, r1
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	88fa      	ldrh	r2, [r7, #6]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d00a      	beq.n	8010daa <bindKey+0x4a>
	for (rebindPos = 0; rebindPos < bindGetBindCount(); rebindPos++)
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	3301      	adds	r3, #1
 8010d98:	73fb      	strb	r3, [r7, #15]
 8010d9a:	f7ff ffb1 	bl	8010d00 <bindGetBindCount>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	461a      	mov	r2, r3
 8010da2:	7bfb      	ldrb	r3, [r7, #15]
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d3e9      	bcc.n	8010d7c <bindKey+0x1c>
 8010da8:	e000      	b.n	8010dac <bindKey+0x4c>
			break;
 8010daa:	bf00      	nop
	currentProfile[rebindPos].buttonsPressed = buttonsPressed;
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <bindKey+0x90>)
 8010dae:	6819      	ldr	r1, [r3, #0]
 8010db0:	7bfa      	ldrb	r2, [r7, #15]
 8010db2:	4613      	mov	r3, r2
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	4413      	add	r3, r2
 8010db8:	005b      	lsls	r3, r3, #1
 8010dba:	440b      	add	r3, r1
 8010dbc:	88fa      	ldrh	r2, [r7, #6]
 8010dbe:	801a      	strh	r2, [r3, #0]
	currentProfile[rebindPos].buttonsToPress = buttonsToPress;
 8010dc0:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <bindKey+0x90>)
 8010dc2:	6819      	ldr	r1, [r3, #0]
 8010dc4:	7bfa      	ldrb	r2, [r7, #15]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	4413      	add	r3, r2
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	440b      	add	r3, r1
 8010dd0:	88ba      	ldrh	r2, [r7, #4]
 8010dd2:	805a      	strh	r2, [r3, #2]
	currentProfile[rebindPos].rapidFire = rapidFire;
 8010dd4:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <bindKey+0x90>)
 8010dd6:	6819      	ldr	r1, [r3, #0]
 8010dd8:	7bfa      	ldrb	r2, [r7, #15]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	440b      	add	r3, r1
 8010de4:	78fa      	ldrb	r2, [r7, #3]
 8010de6:	711a      	strb	r2, [r3, #4]
}
 8010de8:	bf00      	nop
 8010dea:	3710      	adds	r7, #16
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	2000db90 	.word	0x2000db90

08010df4 <bindClearAll>:

void bindClearAll() {
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
	for (int i = 0; i < REBIND_COUNT; i++) {
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	607b      	str	r3, [r7, #4]
 8010dfe:	e022      	b.n	8010e46 <bindClearAll+0x52>
		currentProfile[i].buttonsPressed = 65535;
 8010e00:	4b15      	ldr	r3, [pc, #84]	; (8010e58 <bindClearAll+0x64>)
 8010e02:	6819      	ldr	r1, [r3, #0]
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	4613      	mov	r3, r2
 8010e08:	005b      	lsls	r3, r3, #1
 8010e0a:	4413      	add	r3, r2
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	440b      	add	r3, r1
 8010e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e14:	801a      	strh	r2, [r3, #0]
		currentProfile[i].buttonsToPress = 65535;
 8010e16:	4b10      	ldr	r3, [pc, #64]	; (8010e58 <bindClearAll+0x64>)
 8010e18:	6819      	ldr	r1, [r3, #0]
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	005b      	lsls	r3, r3, #1
 8010e20:	4413      	add	r3, r2
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	440b      	add	r3, r1
 8010e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e2a:	805a      	strh	r2, [r3, #2]
		currentProfile[i].rapidFire = 255;
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	; (8010e58 <bindClearAll+0x64>)
 8010e2e:	6819      	ldr	r1, [r3, #0]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	4613      	mov	r3, r2
 8010e34:	005b      	lsls	r3, r3, #1
 8010e36:	4413      	add	r3, r2
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	440b      	add	r3, r1
 8010e3c:	22ff      	movs	r2, #255	; 0xff
 8010e3e:	711a      	strb	r2, [r3, #4]
	for (int i = 0; i < REBIND_COUNT; i++) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	3301      	adds	r3, #1
 8010e44:	607b      	str	r3, [r7, #4]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2b7f      	cmp	r3, #127	; 0x7f
 8010e4a:	ddd9      	ble.n	8010e00 <bindClearAll+0xc>
	}
}
 8010e4c:	bf00      	nop
 8010e4e:	370c      	adds	r7, #12
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr
 8010e58:	2000db90 	.word	0x2000db90

08010e5c <bindCycleRapidFire>:

void bindCycleRapidFire(struct rebindEntry *entry) {
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
	entry->rapidFire++;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	791b      	ldrb	r3, [r3, #4]
 8010e68:	3301      	adds	r3, #1
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	711a      	strb	r2, [r3, #4]
	entry->rapidFire %= 5;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	791a      	ldrb	r2, [r3, #4]
 8010e74:	4b08      	ldr	r3, [pc, #32]	; (8010e98 <bindCycleRapidFire+0x3c>)
 8010e76:	fba3 1302 	umull	r1, r3, r3, r2
 8010e7a:	0899      	lsrs	r1, r3, #2
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	440b      	add	r3, r1
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	711a      	strb	r2, [r3, #4]
}
 8010e8a:	bf00      	nop
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	cccccccd 	.word	0xcccccccd

08010e9c <buttonsGPIODefaultState>:

//End Rebinds

//Set pins to default state (axis centered, no buttons pressed)
void buttonsGPIODefaultState() {
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	4825      	ldr	r0, [pc, #148]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010ea6:	f003 fa2b 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 8010eaa:	2201      	movs	r2, #1
 8010eac:	2104      	movs	r1, #4
 8010eae:	4823      	ldr	r0, [pc, #140]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010eb0:	f003 fa26 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010eba:	4820      	ldr	r0, [pc, #128]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010ebc:	f003 fa20 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	2140      	movs	r1, #64	; 0x40
 8010ec4:	481d      	ldr	r0, [pc, #116]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010ec6:	f003 fa1b 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 8010eca:	2201      	movs	r2, #1
 8010ecc:	2102      	movs	r1, #2
 8010ece:	481b      	ldr	r0, [pc, #108]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010ed0:	f003 fa16 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	2108      	movs	r1, #8
 8010ed8:	4818      	ldr	r0, [pc, #96]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010eda:	f003 fa11 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010ee4:	4816      	ldr	r0, [pc, #88]	; (8010f40 <buttonsGPIODefaultState+0xa4>)
 8010ee6:	f003 fa0b 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 8010eea:	2201      	movs	r2, #1
 8010eec:	2180      	movs	r1, #128	; 0x80
 8010eee:	4813      	ldr	r0, [pc, #76]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010ef0:	f003 fa06 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_SET);
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010efa:	4810      	ldr	r0, [pc, #64]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010efc:	f003 fa00 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_SET);
 8010f00:	2201      	movs	r2, #1
 8010f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010f06:	480d      	ldr	r0, [pc, #52]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010f08:	f003 f9fa 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_SET);
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010f12:	480a      	ldr	r0, [pc, #40]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010f14:	f003 f9f4 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_SET);
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010f1e:	4807      	ldr	r0, [pc, #28]	; (8010f3c <buttonsGPIODefaultState+0xa0>)
 8010f20:	f003 f9ee 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_RESET);
 8010f24:	2200      	movs	r2, #0
 8010f26:	2110      	movs	r1, #16
 8010f28:	4806      	ldr	r0, [pc, #24]	; (8010f44 <buttonsGPIODefaultState+0xa8>)
 8010f2a:	f003 f9e9 	bl	8014300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_SET);
 8010f2e:	2201      	movs	r2, #1
 8010f30:	2120      	movs	r1, #32
 8010f32:	4804      	ldr	r0, [pc, #16]	; (8010f44 <buttonsGPIODefaultState+0xa8>)
 8010f34:	f003 f9e4 	bl	8014300 <HAL_GPIO_WritePin>
}
 8010f38:	bf00      	nop
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	40020400 	.word	0x40020400
 8010f40:	40020800 	.word	0x40020800
 8010f44:	40020000 	.word	0x40020000

08010f48 <bindProcess>:

//Main Loop Processing Functions
void bindProcess(uint16_t *buttons) {
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
	//Process button rebinds
	uint16_t realButtons = *buttons;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	81fb      	strh	r3, [r7, #14]
	uint16_t bindButtonsToPress = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < REBIND_COUNT; i++) {
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	613b      	str	r3, [r7, #16]
 8010f5e:	e07b      	b.n	8011058 <bindProcess+0x110>
		if (currentProfile[i].buttonsPressed == 0 || currentProfile[i].buttonsPressed == 65535) //Bail at the first empty entry
 8010f60:	4b44      	ldr	r3, [pc, #272]	; (8011074 <bindProcess+0x12c>)
 8010f62:	6819      	ldr	r1, [r3, #0]
 8010f64:	693a      	ldr	r2, [r7, #16]
 8010f66:	4613      	mov	r3, r2
 8010f68:	005b      	lsls	r3, r3, #1
 8010f6a:	4413      	add	r3, r2
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	440b      	add	r3, r1
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d073      	beq.n	801105e <bindProcess+0x116>
 8010f76:	4b3f      	ldr	r3, [pc, #252]	; (8011074 <bindProcess+0x12c>)
 8010f78:	6819      	ldr	r1, [r3, #0]
 8010f7a:	693a      	ldr	r2, [r7, #16]
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	4413      	add	r3, r2
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	440b      	add	r3, r1
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d066      	beq.n	801105e <bindProcess+0x116>
				{
			break;
		}

		if ((realButtons & currentProfile[i].buttonsPressed)
 8010f90:	4b38      	ldr	r3, [pc, #224]	; (8011074 <bindProcess+0x12c>)
 8010f92:	6819      	ldr	r1, [r3, #0]
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	4613      	mov	r3, r2
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	440b      	add	r3, r1
 8010fa0:	881a      	ldrh	r2, [r3, #0]
				== currentProfile[i].buttonsPressed) {
 8010fa2:	89fb      	ldrh	r3, [r7, #14]
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	b299      	uxth	r1, r3
 8010fa8:	4b32      	ldr	r3, [pc, #200]	; (8011074 <bindProcess+0x12c>)
 8010faa:	6818      	ldr	r0, [r3, #0]
 8010fac:	693a      	ldr	r2, [r7, #16]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	005b      	lsls	r3, r3, #1
 8010fb2:	4413      	add	r3, r2
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	4403      	add	r3, r0
 8010fb8:	881b      	ldrh	r3, [r3, #0]
		if ((realButtons & currentProfile[i].buttonsPressed)
 8010fba:	4299      	cmp	r1, r3
 8010fbc:	d149      	bne.n	8011052 <bindProcess+0x10a>
			*buttons = *buttons ^ currentProfile[i].buttonsPressed; //Remove the pressed buttons from buttons
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	8819      	ldrh	r1, [r3, #0]
 8010fc2:	4b2c      	ldr	r3, [pc, #176]	; (8011074 <bindProcess+0x12c>)
 8010fc4:	6818      	ldr	r0, [r3, #0]
 8010fc6:	693a      	ldr	r2, [r7, #16]
 8010fc8:	4613      	mov	r3, r2
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	4413      	add	r3, r2
 8010fce:	005b      	lsls	r3, r3, #1
 8010fd0:	4403      	add	r3, r0
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	404b      	eors	r3, r1
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	801a      	strh	r2, [r3, #0]
			if (currentProfile[i].rapidFire != 0) {
 8010fdc:	4b25      	ldr	r3, [pc, #148]	; (8011074 <bindProcess+0x12c>)
 8010fde:	6819      	ldr	r1, [r3, #0]
 8010fe0:	693a      	ldr	r2, [r7, #16]
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	4413      	add	r3, r2
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	440b      	add	r3, r1
 8010fec:	791b      	ldrb	r3, [r3, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d023      	beq.n	801103a <bindProcess+0xf2>
				uint32_t ticks = HAL_GetTick()
 8010ff2:	f002 f8e7 	bl	80131c4 <HAL_GetTick>
						/ (RAPID_FIRE_BASE_TIME * currentProfile[i].rapidFire);
 8010ff6:	4b1f      	ldr	r3, [pc, #124]	; (8011074 <bindProcess+0x12c>)
 8010ff8:	6819      	ldr	r1, [r3, #0]
 8010ffa:	693a      	ldr	r2, [r7, #16]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	4413      	add	r3, r2
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	440b      	add	r3, r1
 8011006:	791b      	ldrb	r3, [r3, #4]
 8011008:	461a      	mov	r2, r3
 801100a:	2396      	movs	r3, #150	; 0x96
 801100c:	fb03 f302 	mul.w	r3, r3, r2
				uint32_t ticks = HAL_GetTick()
 8011010:	fbb0 f3f3 	udiv	r3, r0, r3
 8011014:	60bb      	str	r3, [r7, #8]
				if ((ticks % 2) == 1) {
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	f003 0301 	and.w	r3, r3, #1
 801101c:	2b00      	cmp	r3, #0
 801101e:	d018      	beq.n	8011052 <bindProcess+0x10a>
					bindButtonsToPress |= currentProfile[i].buttonsToPress; //Store the buttons to press in another variable so they don't get cleared by other binds
 8011020:	4b14      	ldr	r3, [pc, #80]	; (8011074 <bindProcess+0x12c>)
 8011022:	6819      	ldr	r1, [r3, #0]
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	4613      	mov	r3, r2
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	4413      	add	r3, r2
 801102c:	005b      	lsls	r3, r3, #1
 801102e:	440b      	add	r3, r1
 8011030:	885a      	ldrh	r2, [r3, #2]
 8011032:	8afb      	ldrh	r3, [r7, #22]
 8011034:	4313      	orrs	r3, r2
 8011036:	82fb      	strh	r3, [r7, #22]
 8011038:	e00b      	b.n	8011052 <bindProcess+0x10a>
				}
			} else {
				bindButtonsToPress |= currentProfile[i].buttonsToPress; //Store the buttons to press in another variable so they don't get cleared by other binds
 801103a:	4b0e      	ldr	r3, [pc, #56]	; (8011074 <bindProcess+0x12c>)
 801103c:	6819      	ldr	r1, [r3, #0]
 801103e:	693a      	ldr	r2, [r7, #16]
 8011040:	4613      	mov	r3, r2
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	4413      	add	r3, r2
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	440b      	add	r3, r1
 801104a:	885a      	ldrh	r2, [r3, #2]
 801104c:	8afb      	ldrh	r3, [r7, #22]
 801104e:	4313      	orrs	r3, r2
 8011050:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < REBIND_COUNT; i++) {
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	3301      	adds	r3, #1
 8011056:	613b      	str	r3, [r7, #16]
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	2b7f      	cmp	r3, #127	; 0x7f
 801105c:	dd80      	ble.n	8010f60 <bindProcess+0x18>
			}
		}
	}

	*buttons |= bindButtonsToPress; //Add buttonsToPress to buttons
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	881a      	ldrh	r2, [r3, #0]
 8011062:	8afb      	ldrh	r3, [r7, #22]
 8011064:	4313      	orrs	r3, r2
 8011066:	b29a      	uxth	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	801a      	strh	r2, [r3, #0]
}
 801106c:	bf00      	nop
 801106e:	3718      	adds	r7, #24
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	2000db90 	.word	0x2000db90

08011078 <buttonsProcess>:

void buttonsProcess(uint16_t buttons) {
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	4603      	mov	r3, r0
 8011080:	80fb      	strh	r3, [r7, #6]
	//4 Buttons
	if (buttons & (1)) // B button
 8011082:	88fb      	ldrh	r3, [r7, #6]
 8011084:	f003 0301 	and.w	r3, r3, #1
 8011088:	2b00      	cmp	r3, #0
 801108a:	d006      	beq.n	801109a <buttonsProcess+0x22>
		HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_RESET);
 801108c:	2200      	movs	r2, #0
 801108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011092:	4879      	ldr	r0, [pc, #484]	; (8011278 <buttonsProcess+0x200>)
 8011094:	f003 f934 	bl	8014300 <HAL_GPIO_WritePin>
 8011098:	e005      	b.n	80110a6 <buttonsProcess+0x2e>
	else
		HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_SET);
 801109a:	2201      	movs	r2, #1
 801109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80110a0:	4875      	ldr	r0, [pc, #468]	; (8011278 <buttonsProcess+0x200>)
 80110a2:	f003 f92d 	bl	8014300 <HAL_GPIO_WritePin>
	if (buttons & (1 << 1)) // Y button
 80110a6:	88fb      	ldrh	r3, [r7, #6]
 80110a8:	f003 0302 	and.w	r3, r3, #2
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d006      	beq.n	80110be <buttonsProcess+0x46>
		HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_RESET);
 80110b0:	2200      	movs	r2, #0
 80110b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80110b6:	4870      	ldr	r0, [pc, #448]	; (8011278 <buttonsProcess+0x200>)
 80110b8:	f003 f922 	bl	8014300 <HAL_GPIO_WritePin>
 80110bc:	e005      	b.n	80110ca <buttonsProcess+0x52>
	else
		HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_SET);
 80110be:	2201      	movs	r2, #1
 80110c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80110c4:	486c      	ldr	r0, [pc, #432]	; (8011278 <buttonsProcess+0x200>)
 80110c6:	f003 f91b 	bl	8014300 <HAL_GPIO_WritePin>
	if (buttons & (1 << 8)) // A button
 80110ca:	88fb      	ldrh	r3, [r7, #6]
 80110cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d006      	beq.n	80110e2 <buttonsProcess+0x6a>
		HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_RESET);
 80110d4:	2200      	movs	r2, #0
 80110d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80110da:	4867      	ldr	r0, [pc, #412]	; (8011278 <buttonsProcess+0x200>)
 80110dc:	f003 f910 	bl	8014300 <HAL_GPIO_WritePin>
 80110e0:	e005      	b.n	80110ee <buttonsProcess+0x76>
	else
		HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_SET);
 80110e2:	2201      	movs	r2, #1
 80110e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80110e8:	4863      	ldr	r0, [pc, #396]	; (8011278 <buttonsProcess+0x200>)
 80110ea:	f003 f909 	bl	8014300 <HAL_GPIO_WritePin>
	if (buttons & (1 << 9)) // X button
 80110ee:	88fb      	ldrh	r3, [r7, #6]
 80110f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d006      	beq.n	8011106 <buttonsProcess+0x8e>
		HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_RESET);
 80110f8:	2200      	movs	r2, #0
 80110fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80110fe:	485e      	ldr	r0, [pc, #376]	; (8011278 <buttonsProcess+0x200>)
 8011100:	f003 f8fe 	bl	8014300 <HAL_GPIO_WritePin>
 8011104:	e005      	b.n	8011112 <buttonsProcess+0x9a>
	else
		HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_SET);
 8011106:	2201      	movs	r2, #1
 8011108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801110c:	485a      	ldr	r0, [pc, #360]	; (8011278 <buttonsProcess+0x200>)
 801110e:	f003 f8f7 	bl	8014300 <HAL_GPIO_WritePin>

	//4 Axis
	////X2
	if (buttons & (1 << 2)) // Select button
 8011112:	88fb      	ldrh	r3, [r7, #6]
 8011114:	f003 0304 	and.w	r3, r3, #4
 8011118:	2b00      	cmp	r3, #0
 801111a:	d00c      	beq.n	8011136 <buttonsProcess+0xbe>
			{

		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 801111c:	2201      	movs	r2, #1
 801111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011122:	4855      	ldr	r0, [pc, #340]	; (8011278 <buttonsProcess+0x200>)
 8011124:	f003 f8ec 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_RESET);
 8011128:	2200      	movs	r2, #0
 801112a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801112e:	4853      	ldr	r0, [pc, #332]	; (801127c <buttonsProcess+0x204>)
 8011130:	f003 f8e6 	bl	8014300 <HAL_GPIO_WritePin>
 8011134:	e01d      	b.n	8011172 <buttonsProcess+0xfa>
	} else if (buttons & (1 << 3)) // Start Button
 8011136:	88fb      	ldrh	r3, [r7, #6]
 8011138:	f003 0308 	and.w	r3, r3, #8
 801113c:	2b00      	cmp	r3, #0
 801113e:	d00c      	beq.n	801115a <buttonsProcess+0xe2>
			{

		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 8011140:	2201      	movs	r2, #1
 8011142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011146:	484c      	ldr	r0, [pc, #304]	; (8011278 <buttonsProcess+0x200>)
 8011148:	f003 f8da 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 801114c:	2201      	movs	r2, #1
 801114e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011152:	484a      	ldr	r0, [pc, #296]	; (801127c <buttonsProcess+0x204>)
 8011154:	f003 f8d4 	bl	8014300 <HAL_GPIO_WritePin>
 8011158:	e00b      	b.n	8011172 <buttonsProcess+0xfa>

	} else // X2 Centered
	{
		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_RESET);
 801115a:	2200      	movs	r2, #0
 801115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011160:	4845      	ldr	r0, [pc, #276]	; (8011278 <buttonsProcess+0x200>)
 8011162:	f003 f8cd 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 8011166:	2201      	movs	r2, #1
 8011168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801116c:	4843      	ldr	r0, [pc, #268]	; (801127c <buttonsProcess+0x204>)
 801116e:	f003 f8c7 	bl	8014300 <HAL_GPIO_WritePin>
	}

	////Y1
	if (buttons & (1 << 4)) // Up button
 8011172:	88fb      	ldrh	r3, [r7, #6]
 8011174:	f003 0310 	and.w	r3, r3, #16
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00a      	beq.n	8011192 <buttonsProcess+0x11a>
			{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 801117c:	2201      	movs	r2, #1
 801117e:	2104      	movs	r1, #4
 8011180:	483d      	ldr	r0, [pc, #244]	; (8011278 <buttonsProcess+0x200>)
 8011182:	f003 f8bd 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_RESET);
 8011186:	2200      	movs	r2, #0
 8011188:	2108      	movs	r1, #8
 801118a:	483b      	ldr	r0, [pc, #236]	; (8011278 <buttonsProcess+0x200>)
 801118c:	f003 f8b8 	bl	8014300 <HAL_GPIO_WritePin>
 8011190:	e019      	b.n	80111c6 <buttonsProcess+0x14e>
	} else if (buttons & (1 << 5)) // Down Button
 8011192:	88fb      	ldrh	r3, [r7, #6]
 8011194:	f003 0320 	and.w	r3, r3, #32
 8011198:	2b00      	cmp	r3, #0
 801119a:	d00a      	beq.n	80111b2 <buttonsProcess+0x13a>
			{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 801119c:	2201      	movs	r2, #1
 801119e:	2104      	movs	r1, #4
 80111a0:	4835      	ldr	r0, [pc, #212]	; (8011278 <buttonsProcess+0x200>)
 80111a2:	f003 f8ad 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	2108      	movs	r1, #8
 80111aa:	4833      	ldr	r0, [pc, #204]	; (8011278 <buttonsProcess+0x200>)
 80111ac:	f003 f8a8 	bl	8014300 <HAL_GPIO_WritePin>
 80111b0:	e009      	b.n	80111c6 <buttonsProcess+0x14e>
	} else // Y1 Centered
	{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_RESET);
 80111b2:	2200      	movs	r2, #0
 80111b4:	2104      	movs	r1, #4
 80111b6:	4830      	ldr	r0, [pc, #192]	; (8011278 <buttonsProcess+0x200>)
 80111b8:	f003 f8a2 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 80111bc:	2201      	movs	r2, #1
 80111be:	2108      	movs	r1, #8
 80111c0:	482d      	ldr	r0, [pc, #180]	; (8011278 <buttonsProcess+0x200>)
 80111c2:	f003 f89d 	bl	8014300 <HAL_GPIO_WritePin>
	}

	////X1
	if (buttons & (1 << 6)) // Left button
 80111c6:	88fb      	ldrh	r3, [r7, #6]
 80111c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00a      	beq.n	80111e6 <buttonsProcess+0x16e>
			{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 80111d0:	2201      	movs	r2, #1
 80111d2:	2101      	movs	r1, #1
 80111d4:	4828      	ldr	r0, [pc, #160]	; (8011278 <buttonsProcess+0x200>)
 80111d6:	f003 f893 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_RESET);
 80111da:	2200      	movs	r2, #0
 80111dc:	2102      	movs	r1, #2
 80111de:	4826      	ldr	r0, [pc, #152]	; (8011278 <buttonsProcess+0x200>)
 80111e0:	f003 f88e 	bl	8014300 <HAL_GPIO_WritePin>
 80111e4:	e019      	b.n	801121a <buttonsProcess+0x1a2>
	} else if (buttons & (1 << 7)) // Right Button
 80111e6:	88fb      	ldrh	r3, [r7, #6]
 80111e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00a      	beq.n	8011206 <buttonsProcess+0x18e>
			{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 80111f0:	2201      	movs	r2, #1
 80111f2:	2101      	movs	r1, #1
 80111f4:	4820      	ldr	r0, [pc, #128]	; (8011278 <buttonsProcess+0x200>)
 80111f6:	f003 f883 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 80111fa:	2201      	movs	r2, #1
 80111fc:	2102      	movs	r1, #2
 80111fe:	481e      	ldr	r0, [pc, #120]	; (8011278 <buttonsProcess+0x200>)
 8011200:	f003 f87e 	bl	8014300 <HAL_GPIO_WritePin>
 8011204:	e009      	b.n	801121a <buttonsProcess+0x1a2>
	} else // X1 Centered
	{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_RESET);
 8011206:	2200      	movs	r2, #0
 8011208:	2101      	movs	r1, #1
 801120a:	481b      	ldr	r0, [pc, #108]	; (8011278 <buttonsProcess+0x200>)
 801120c:	f003 f878 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 8011210:	2201      	movs	r2, #1
 8011212:	2102      	movs	r1, #2
 8011214:	4818      	ldr	r0, [pc, #96]	; (8011278 <buttonsProcess+0x200>)
 8011216:	f003 f873 	bl	8014300 <HAL_GPIO_WritePin>
	}

	////Y2
	if (buttons & (1 << 10)) // Left Shoulder button
 801121a:	88fb      	ldrh	r3, [r7, #6]
 801121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011220:	2b00      	cmp	r3, #0
 8011222:	d00a      	beq.n	801123a <buttonsProcess+0x1c2>
			{
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 8011224:	2201      	movs	r2, #1
 8011226:	2140      	movs	r1, #64	; 0x40
 8011228:	4813      	ldr	r0, [pc, #76]	; (8011278 <buttonsProcess+0x200>)
 801122a:	f003 f869 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_RESET);
 801122e:	2200      	movs	r2, #0
 8011230:	2180      	movs	r1, #128	; 0x80
 8011232:	4811      	ldr	r0, [pc, #68]	; (8011278 <buttonsProcess+0x200>)
 8011234:	f003 f864 	bl	8014300 <HAL_GPIO_WritePin>
	} else // Y2 Centered
	{
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
	}
}
 8011238:	e019      	b.n	801126e <buttonsProcess+0x1f6>
	} else if (buttons & (1 << 11)) // Right Shoulder Button
 801123a:	88fb      	ldrh	r3, [r7, #6]
 801123c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011240:	2b00      	cmp	r3, #0
 8011242:	d00a      	beq.n	801125a <buttonsProcess+0x1e2>
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 8011244:	2201      	movs	r2, #1
 8011246:	2140      	movs	r1, #64	; 0x40
 8011248:	480b      	ldr	r0, [pc, #44]	; (8011278 <buttonsProcess+0x200>)
 801124a:	f003 f859 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 801124e:	2201      	movs	r2, #1
 8011250:	2180      	movs	r1, #128	; 0x80
 8011252:	4809      	ldr	r0, [pc, #36]	; (8011278 <buttonsProcess+0x200>)
 8011254:	f003 f854 	bl	8014300 <HAL_GPIO_WritePin>
}
 8011258:	e009      	b.n	801126e <buttonsProcess+0x1f6>
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_RESET);
 801125a:	2200      	movs	r2, #0
 801125c:	2140      	movs	r1, #64	; 0x40
 801125e:	4806      	ldr	r0, [pc, #24]	; (8011278 <buttonsProcess+0x200>)
 8011260:	f003 f84e 	bl	8014300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 8011264:	2201      	movs	r2, #1
 8011266:	2180      	movs	r1, #128	; 0x80
 8011268:	4803      	ldr	r0, [pc, #12]	; (8011278 <buttonsProcess+0x200>)
 801126a:	f003 f849 	bl	8014300 <HAL_GPIO_WritePin>
}
 801126e:	bf00      	nop
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	40020400 	.word	0x40020400
 801127c:	40020800 	.word	0x40020800

08011280 <buttonsToString>:

void buttonsToString(char *stringBuffer, uint16_t buttons, char *prefix) {
 8011280:	b580      	push	{r7, lr}
 8011282:	b08e      	sub	sp, #56	; 0x38
 8011284:	af00      	add	r7, sp, #0
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	460b      	mov	r3, r1
 801128a:	607a      	str	r2, [r7, #4]
 801128c:	817b      	strh	r3, [r7, #10]
	char buffer[32] = { 0 };
 801128e:	f107 0310 	add.w	r3, r7, #16
 8011292:	2220      	movs	r2, #32
 8011294:	2100      	movs	r1, #0
 8011296:	4618      	mov	r0, r3
 8011298:	f008 fe85 	bl	8019fa6 <memset>
	strcpy(buffer, prefix);
 801129c:	f107 0310 	add.w	r3, r7, #16
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f008 fea8 	bl	8019ff8 <strcpy>
	uint8_t offset = strlen(buffer);
 80112a8:	f107 0310 	add.w	r3, r7, #16
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fe fed1 	bl	8010054 <strlen>
 80112b2:	4603      	mov	r3, r0
 80112b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t written = 0;
 80112b8:	2300      	movs	r3, #0
 80112ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (int i = 0; i < 12; i++) {
 80112be:	2300      	movs	r3, #0
 80112c0:	633b      	str	r3, [r7, #48]	; 0x30
 80112c2:	e0c4      	b.n	801144e <buttonsToString+0x1ce>
		if (buttons & (1 << i)) {
 80112c4:	897a      	ldrh	r2, [r7, #10]
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	fa42 f303 	asr.w	r3, r2, r3
 80112cc:	f003 0301 	and.w	r3, r3, #1
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f000 80b9 	beq.w	8011448 <buttonsToString+0x1c8>
			written = 1;
 80112d6:	2301      	movs	r3, #1
 80112d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			switch (i) {
 80112dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112de:	2b0b      	cmp	r3, #11
 80112e0:	f200 80a3 	bhi.w	801142a <buttonsToString+0x1aa>
 80112e4:	a201      	add	r2, pc, #4	; (adr r2, 80112ec <buttonsToString+0x6c>)
 80112e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ea:	bf00      	nop
 80112ec:	08011333 	.word	0x08011333
 80112f0:	0801135f 	.word	0x0801135f
 80112f4:	08011413 	.word	0x08011413
 80112f8:	080113f9 	.word	0x080113f9
 80112fc:	08011375 	.word	0x08011375
 8011300:	08011387 	.word	0x08011387
 8011304:	0801139d 	.word	0x0801139d
 8011308:	080113b3 	.word	0x080113b3
 801130c:	0801131d 	.word	0x0801131d
 8011310:	08011349 	.word	0x08011349
 8011314:	080113cd 	.word	0x080113cd
 8011318:	080113e3 	.word	0x080113e3
			case 8:
				sprintf(buffer + offset, "A+");
 801131c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011320:	f107 0210 	add.w	r2, r7, #16
 8011324:	4413      	add	r3, r2
 8011326:	4a5b      	ldr	r2, [pc, #364]	; (8011494 <buttonsToString+0x214>)
 8011328:	8811      	ldrh	r1, [r2, #0]
 801132a:	7892      	ldrb	r2, [r2, #2]
 801132c:	8019      	strh	r1, [r3, #0]
 801132e:	709a      	strb	r2, [r3, #2]
				break;
 8011330:	e07b      	b.n	801142a <buttonsToString+0x1aa>
			case 0:
				sprintf(buffer + offset, "B+");
 8011332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011336:	f107 0210 	add.w	r2, r7, #16
 801133a:	4413      	add	r3, r2
 801133c:	4a56      	ldr	r2, [pc, #344]	; (8011498 <buttonsToString+0x218>)
 801133e:	8811      	ldrh	r1, [r2, #0]
 8011340:	7892      	ldrb	r2, [r2, #2]
 8011342:	8019      	strh	r1, [r3, #0]
 8011344:	709a      	strb	r2, [r3, #2]
				break;
 8011346:	e070      	b.n	801142a <buttonsToString+0x1aa>
			case 9:
				sprintf(buffer + offset, "X+");
 8011348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801134c:	f107 0210 	add.w	r2, r7, #16
 8011350:	4413      	add	r3, r2
 8011352:	4a52      	ldr	r2, [pc, #328]	; (801149c <buttonsToString+0x21c>)
 8011354:	8811      	ldrh	r1, [r2, #0]
 8011356:	7892      	ldrb	r2, [r2, #2]
 8011358:	8019      	strh	r1, [r3, #0]
 801135a:	709a      	strb	r2, [r3, #2]
				break;
 801135c:	e065      	b.n	801142a <buttonsToString+0x1aa>
			case 1:
				sprintf(buffer + offset, "Y+");
 801135e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011362:	f107 0210 	add.w	r2, r7, #16
 8011366:	4413      	add	r3, r2
 8011368:	4a4d      	ldr	r2, [pc, #308]	; (80114a0 <buttonsToString+0x220>)
 801136a:	8811      	ldrh	r1, [r2, #0]
 801136c:	7892      	ldrb	r2, [r2, #2]
 801136e:	8019      	strh	r1, [r3, #0]
 8011370:	709a      	strb	r2, [r3, #2]
				break;
 8011372:	e05a      	b.n	801142a <buttonsToString+0x1aa>
			case 4:
				sprintf(buffer + offset, "Up+");
 8011374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011378:	f107 0210 	add.w	r2, r7, #16
 801137c:	4413      	add	r3, r2
 801137e:	4a49      	ldr	r2, [pc, #292]	; (80114a4 <buttonsToString+0x224>)
 8011380:	6810      	ldr	r0, [r2, #0]
 8011382:	6018      	str	r0, [r3, #0]
				break;
 8011384:	e051      	b.n	801142a <buttonsToString+0x1aa>
			case 5:
				sprintf(buffer + offset, "Down+");
 8011386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801138a:	f107 0210 	add.w	r2, r7, #16
 801138e:	4413      	add	r3, r2
 8011390:	4a45      	ldr	r2, [pc, #276]	; (80114a8 <buttonsToString+0x228>)
 8011392:	6810      	ldr	r0, [r2, #0]
 8011394:	6018      	str	r0, [r3, #0]
 8011396:	8892      	ldrh	r2, [r2, #4]
 8011398:	809a      	strh	r2, [r3, #4]
				break;
 801139a:	e046      	b.n	801142a <buttonsToString+0x1aa>
			case 6:
				sprintf(buffer + offset, "Left+");
 801139c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113a0:	f107 0210 	add.w	r2, r7, #16
 80113a4:	4413      	add	r3, r2
 80113a6:	4a41      	ldr	r2, [pc, #260]	; (80114ac <buttonsToString+0x22c>)
 80113a8:	6810      	ldr	r0, [r2, #0]
 80113aa:	6018      	str	r0, [r3, #0]
 80113ac:	8892      	ldrh	r2, [r2, #4]
 80113ae:	809a      	strh	r2, [r3, #4]
				break;
 80113b0:	e03b      	b.n	801142a <buttonsToString+0x1aa>
			case 7:
				sprintf(buffer + offset, "Right+");
 80113b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113b6:	f107 0210 	add.w	r2, r7, #16
 80113ba:	4413      	add	r3, r2
 80113bc:	4a3c      	ldr	r2, [pc, #240]	; (80114b0 <buttonsToString+0x230>)
 80113be:	6810      	ldr	r0, [r2, #0]
 80113c0:	6018      	str	r0, [r3, #0]
 80113c2:	8891      	ldrh	r1, [r2, #4]
 80113c4:	7992      	ldrb	r2, [r2, #6]
 80113c6:	8099      	strh	r1, [r3, #4]
 80113c8:	719a      	strb	r2, [r3, #6]
				break;
 80113ca:	e02e      	b.n	801142a <buttonsToString+0x1aa>
			case 10:
				sprintf(buffer + offset, "L+");
 80113cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113d0:	f107 0210 	add.w	r2, r7, #16
 80113d4:	4413      	add	r3, r2
 80113d6:	4a37      	ldr	r2, [pc, #220]	; (80114b4 <buttonsToString+0x234>)
 80113d8:	8811      	ldrh	r1, [r2, #0]
 80113da:	7892      	ldrb	r2, [r2, #2]
 80113dc:	8019      	strh	r1, [r3, #0]
 80113de:	709a      	strb	r2, [r3, #2]
				break;
 80113e0:	e023      	b.n	801142a <buttonsToString+0x1aa>
			case 11:
				sprintf(buffer + offset, "R+");
 80113e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113e6:	f107 0210 	add.w	r2, r7, #16
 80113ea:	4413      	add	r3, r2
 80113ec:	4a32      	ldr	r2, [pc, #200]	; (80114b8 <buttonsToString+0x238>)
 80113ee:	8811      	ldrh	r1, [r2, #0]
 80113f0:	7892      	ldrb	r2, [r2, #2]
 80113f2:	8019      	strh	r1, [r3, #0]
 80113f4:	709a      	strb	r2, [r3, #2]
				break;
 80113f6:	e018      	b.n	801142a <buttonsToString+0x1aa>
			case 3:
				sprintf(buffer + offset, "Start+");
 80113f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113fc:	f107 0210 	add.w	r2, r7, #16
 8011400:	4413      	add	r3, r2
 8011402:	4a2e      	ldr	r2, [pc, #184]	; (80114bc <buttonsToString+0x23c>)
 8011404:	6810      	ldr	r0, [r2, #0]
 8011406:	6018      	str	r0, [r3, #0]
 8011408:	8891      	ldrh	r1, [r2, #4]
 801140a:	7992      	ldrb	r2, [r2, #6]
 801140c:	8099      	strh	r1, [r3, #4]
 801140e:	719a      	strb	r2, [r3, #6]
				break;
 8011410:	e00b      	b.n	801142a <buttonsToString+0x1aa>
			case 2:
				sprintf(buffer + offset, "Select+");
 8011412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011416:	f107 0210 	add.w	r2, r7, #16
 801141a:	4413      	add	r3, r2
 801141c:	4928      	ldr	r1, [pc, #160]	; (80114c0 <buttonsToString+0x240>)
 801141e:	461a      	mov	r2, r3
 8011420:	460b      	mov	r3, r1
 8011422:	cb03      	ldmia	r3!, {r0, r1}
 8011424:	6010      	str	r0, [r2, #0]
 8011426:	6051      	str	r1, [r2, #4]
				break;
 8011428:	bf00      	nop
			}
			offset += strlen(buffer + offset);
 801142a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801142e:	f107 0210 	add.w	r2, r7, #16
 8011432:	4413      	add	r3, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f7fe fe0d 	bl	8010054 <strlen>
 801143a:	4603      	mov	r3, r0
 801143c:	b2da      	uxtb	r2, r3
 801143e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011442:	4413      	add	r3, r2
 8011444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (int i = 0; i < 12; i++) {
 8011448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144a:	3301      	adds	r3, #1
 801144c:	633b      	str	r3, [r7, #48]	; 0x30
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	2b0b      	cmp	r3, #11
 8011452:	f77f af37 	ble.w	80112c4 <buttonsToString+0x44>
		}
	}
	if (written)
 8011456:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801145a:	2b00      	cmp	r3, #0
 801145c:	d00c      	beq.n	8011478 <buttonsToString+0x1f8>
		buffer[strlen(buffer) - 1] = 0; //Remove the final plus
 801145e:	f107 0310 	add.w	r3, r7, #16
 8011462:	4618      	mov	r0, r3
 8011464:	f7fe fdf6 	bl	8010054 <strlen>
 8011468:	4603      	mov	r3, r0
 801146a:	3b01      	subs	r3, #1
 801146c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011470:	4413      	add	r3, r2
 8011472:	2200      	movs	r2, #0
 8011474:	f803 2c28 	strb.w	r2, [r3, #-40]
	buffer[16] = 0; //Cap length at 16 chars
 8011478:	2300      	movs	r3, #0
 801147a:	f887 3020 	strb.w	r3, [r7, #32]
	memcpy(stringBuffer, buffer, 17); //Copy 16 chars + terminator
 801147e:	f107 0310 	add.w	r3, r7, #16
 8011482:	2211      	movs	r2, #17
 8011484:	4619      	mov	r1, r3
 8011486:	68f8      	ldr	r0, [r7, #12]
 8011488:	f008 fd82 	bl	8019f90 <memcpy>
}
 801148c:	bf00      	nop
 801148e:	3738      	adds	r7, #56	; 0x38
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	0801a7e4 	.word	0x0801a7e4
 8011498:	0801a7e8 	.word	0x0801a7e8
 801149c:	0801a7ec 	.word	0x0801a7ec
 80114a0:	0801a7f0 	.word	0x0801a7f0
 80114a4:	0801a7f4 	.word	0x0801a7f4
 80114a8:	0801a7f8 	.word	0x0801a7f8
 80114ac:	0801a800 	.word	0x0801a800
 80114b0:	0801a808 	.word	0x0801a808
 80114b4:	0801a810 	.word	0x0801a810
 80114b8:	0801a814 	.word	0x0801a814
 80114bc:	0801a818 	.word	0x0801a818
 80114c0:	0801a820 	.word	0x0801a820

080114c4 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08a      	sub	sp, #40	; 0x28
 80114c8:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80114ca:	2306      	movs	r3, #6
 80114cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80114ce:	2306      	movs	r3, #6
 80114d0:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80114d2:	2300      	movs	r3, #0
 80114d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	83fb      	strh	r3, [r7, #30]
 80114da:	2300      	movs	r3, #0
 80114dc:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80114de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114e2:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80114e4:	2300      	movs	r3, #0
 80114e6:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80114e8:	4ba0      	ldr	r3, [pc, #640]	; (801176c <EE_Init+0x2a8>)
 80114ea:	881b      	ldrh	r3, [r3, #0]
 80114ec:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80114ee:	4ba0      	ldr	r3, [pc, #640]	; (8011770 <EE_Init+0x2ac>)
 80114f0:	881b      	ldrh	r3, [r3, #0]
 80114f2:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80114f4:	2300      	movs	r3, #0
 80114f6:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80114f8:	2302      	movs	r3, #2
 80114fa:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80114fc:	2301      	movs	r3, #1
 80114fe:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011500:	2302      	movs	r3, #2
 8011502:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8011504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011506:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801150a:	4293      	cmp	r3, r2
 801150c:	d057      	beq.n	80115be <EE_Init+0xfa>
 801150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011512:	4293      	cmp	r3, r2
 8011514:	d003      	beq.n	801151e <EE_Init+0x5a>
 8011516:	2b00      	cmp	r3, #0
 8011518:	f000 80f5 	beq.w	8011706 <EE_Init+0x242>
 801151c:	e190      	b.n	8011840 <EE_Init+0x37c>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801151e:	8c3b      	ldrh	r3, [r7, #32]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d116      	bne.n	8011552 <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8011524:	4891      	ldr	r0, [pc, #580]	; (801176c <EE_Init+0x2a8>)
 8011526:	f000 f9ab 	bl	8011880 <EE_VerifyPageFullyErased>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	f040 8191 	bne.w	8011854 <EE_Init+0x390>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011532:	f107 0214 	add.w	r2, r7, #20
 8011536:	463b      	mov	r3, r7
 8011538:	4611      	mov	r1, r2
 801153a:	4618      	mov	r0, r3
 801153c:	f002 fc24 	bl	8013d88 <HAL_FLASHEx_Erase>
 8011540:	4603      	mov	r3, r0
 8011542:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8011544:	7efb      	ldrb	r3, [r7, #27]
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 8184 	beq.w	8011854 <EE_Init+0x390>
          {
            return FlashStatus;
 801154c:	7efb      	ldrb	r3, [r7, #27]
 801154e:	b29b      	uxth	r3, r3
 8011550:	e188      	b.n	8011864 <EE_Init+0x3a0>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8011552:	8c3b      	ldrh	r3, [r7, #32]
 8011554:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011558:	4293      	cmp	r3, r2
 801155a:	d125      	bne.n	80115a8 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801155c:	4883      	ldr	r0, [pc, #524]	; (801176c <EE_Init+0x2a8>)
 801155e:	f000 f98f 	bl	8011880 <EE_VerifyPageFullyErased>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10e      	bne.n	8011586 <EE_Init+0xc2>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011568:	f107 0214 	add.w	r2, r7, #20
 801156c:	463b      	mov	r3, r7
 801156e:	4611      	mov	r1, r2
 8011570:	4618      	mov	r0, r3
 8011572:	f002 fc09 	bl	8013d88 <HAL_FLASHEx_Erase>
 8011576:	4603      	mov	r3, r0
 8011578:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801157a:	7efb      	ldrb	r3, [r7, #27]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <EE_Init+0xc2>
          {
            return FlashStatus;
 8011580:	7efb      	ldrb	r3, [r7, #27]
 8011582:	b29b      	uxth	r3, r3
 8011584:	e16e      	b.n	8011864 <EE_Init+0x3a0>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8011586:	f04f 0200 	mov.w	r2, #0
 801158a:	f04f 0300 	mov.w	r3, #0
 801158e:	4978      	ldr	r1, [pc, #480]	; (8011770 <EE_Init+0x2ac>)
 8011590:	2001      	movs	r0, #1
 8011592:	f002 faaf 	bl	8013af4 <HAL_FLASH_Program>
 8011596:	4603      	mov	r3, r0
 8011598:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801159a:	7efb      	ldrb	r3, [r7, #27]
 801159c:	2b00      	cmp	r3, #0
 801159e:	f000 8159 	beq.w	8011854 <EE_Init+0x390>
        {
          return FlashStatus;
 80115a2:	7efb      	ldrb	r3, [r7, #27]
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	e15d      	b.n	8011864 <EE_Init+0x3a0>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80115a8:	f000 f9fc 	bl	80119a4 <EE_Format>
 80115ac:	4603      	mov	r3, r0
 80115ae:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80115b0:	7efb      	ldrb	r3, [r7, #27]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f000 814e 	beq.w	8011854 <EE_Init+0x390>
        {
          return FlashStatus;
 80115b8:	7efb      	ldrb	r3, [r7, #27]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	e152      	b.n	8011864 <EE_Init+0x3a0>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80115be:	8c3b      	ldrh	r3, [r7, #32]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d164      	bne.n	801168e <EE_Init+0x1ca>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80115c4:	2300      	movs	r3, #0
 80115c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80115c8:	e030      	b.n	801162c <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80115ca:	4b6a      	ldr	r3, [pc, #424]	; (8011774 <EE_Init+0x2b0>)
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80115d2:	4969      	ldr	r1, [pc, #420]	; (8011778 <EE_Init+0x2b4>)
 80115d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d101      	bne.n	80115e0 <EE_Init+0x11c>
          {
            x = VarIdx;
 80115dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80115de:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80115e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80115e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d01d      	beq.n	8011626 <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80115ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80115ec:	4a62      	ldr	r2, [pc, #392]	; (8011778 <EE_Init+0x2b4>)
 80115ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115f2:	4962      	ldr	r1, [pc, #392]	; (801177c <EE_Init+0x2b8>)
 80115f4:	4618      	mov	r0, r3
 80115f6:	f000 f969 	bl	80118cc <EE_ReadVariable>
 80115fa:	4603      	mov	r3, r0
 80115fc:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80115fe:	8bbb      	ldrh	r3, [r7, #28]
 8011600:	2b01      	cmp	r3, #1
 8011602:	d010      	beq.n	8011626 <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011606:	4a5c      	ldr	r2, [pc, #368]	; (8011778 <EE_Init+0x2b4>)
 8011608:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801160c:	4b5b      	ldr	r3, [pc, #364]	; (801177c <EE_Init+0x2b8>)
 801160e:	881b      	ldrh	r3, [r3, #0]
 8011610:	4619      	mov	r1, r3
 8011612:	4610      	mov	r0, r2
 8011614:	f000 fa5e 	bl	8011ad4 <EE_VerifyPageFullWriteVariable>
 8011618:	4603      	mov	r3, r0
 801161a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 801161c:	8bfb      	ldrh	r3, [r7, #30]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <EE_Init+0x162>
              {
                return EepromStatus;
 8011622:	8bfb      	ldrh	r3, [r7, #30]
 8011624:	e11e      	b.n	8011864 <EE_Init+0x3a0>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011628:	3301      	adds	r3, #1
 801162a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801162c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801162e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011632:	d3ca      	bcc.n	80115ca <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8011634:	f04f 0200 	mov.w	r2, #0
 8011638:	f04f 0300 	mov.w	r3, #0
 801163c:	494b      	ldr	r1, [pc, #300]	; (801176c <EE_Init+0x2a8>)
 801163e:	2001      	movs	r0, #1
 8011640:	f002 fa58 	bl	8013af4 <HAL_FLASH_Program>
 8011644:	4603      	mov	r3, r0
 8011646:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8011648:	7efb      	ldrb	r3, [r7, #27]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <EE_Init+0x190>
        {
          return FlashStatus;
 801164e:	7efb      	ldrb	r3, [r7, #27]
 8011650:	b29b      	uxth	r3, r3
 8011652:	e107      	b.n	8011864 <EE_Init+0x3a0>
        }
        pEraseInit.Sector = PAGE1_ID;
 8011654:	2303      	movs	r3, #3
 8011656:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8011658:	2301      	movs	r3, #1
 801165a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801165c:	2302      	movs	r3, #2
 801165e:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8011660:	4843      	ldr	r0, [pc, #268]	; (8011770 <EE_Init+0x2ac>)
 8011662:	f000 f90d 	bl	8011880 <EE_VerifyPageFullyErased>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	f040 80f5 	bne.w	8011858 <EE_Init+0x394>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801166e:	f107 0214 	add.w	r2, r7, #20
 8011672:	463b      	mov	r3, r7
 8011674:	4611      	mov	r1, r2
 8011676:	4618      	mov	r0, r3
 8011678:	f002 fb86 	bl	8013d88 <HAL_FLASHEx_Erase>
 801167c:	4603      	mov	r3, r0
 801167e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8011680:	7efb      	ldrb	r3, [r7, #27]
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 80e8 	beq.w	8011858 <EE_Init+0x394>
          {
            return FlashStatus;
 8011688:	7efb      	ldrb	r3, [r7, #27]
 801168a:	b29b      	uxth	r3, r3
 801168c:	e0ea      	b.n	8011864 <EE_Init+0x3a0>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801168e:	8c3b      	ldrh	r3, [r7, #32]
 8011690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011694:	4293      	cmp	r3, r2
 8011696:	d12b      	bne.n	80116f0 <EE_Init+0x22c>
      {
        pEraseInit.Sector = PAGE1_ID;
 8011698:	2303      	movs	r3, #3
 801169a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 801169c:	2301      	movs	r3, #1
 801169e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80116a0:	2302      	movs	r3, #2
 80116a2:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80116a4:	4832      	ldr	r0, [pc, #200]	; (8011770 <EE_Init+0x2ac>)
 80116a6:	f000 f8eb 	bl	8011880 <EE_VerifyPageFullyErased>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d10e      	bne.n	80116ce <EE_Init+0x20a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80116b0:	f107 0214 	add.w	r2, r7, #20
 80116b4:	463b      	mov	r3, r7
 80116b6:	4611      	mov	r1, r2
 80116b8:	4618      	mov	r0, r3
 80116ba:	f002 fb65 	bl	8013d88 <HAL_FLASHEx_Erase>
 80116be:	4603      	mov	r3, r0
 80116c0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80116c2:	7efb      	ldrb	r3, [r7, #27]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d002      	beq.n	80116ce <EE_Init+0x20a>
          {
            return FlashStatus;
 80116c8:	7efb      	ldrb	r3, [r7, #27]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	e0ca      	b.n	8011864 <EE_Init+0x3a0>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80116ce:	f04f 0200 	mov.w	r2, #0
 80116d2:	f04f 0300 	mov.w	r3, #0
 80116d6:	4925      	ldr	r1, [pc, #148]	; (801176c <EE_Init+0x2a8>)
 80116d8:	2001      	movs	r0, #1
 80116da:	f002 fa0b 	bl	8013af4 <HAL_FLASH_Program>
 80116de:	4603      	mov	r3, r0
 80116e0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80116e2:	7efb      	ldrb	r3, [r7, #27]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f000 80b7 	beq.w	8011858 <EE_Init+0x394>
        {
          return FlashStatus;
 80116ea:	7efb      	ldrb	r3, [r7, #27]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	e0b9      	b.n	8011864 <EE_Init+0x3a0>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80116f0:	f000 f958 	bl	80119a4 <EE_Format>
 80116f4:	4603      	mov	r3, r0
 80116f6:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80116f8:	7efb      	ldrb	r3, [r7, #27]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 80ac 	beq.w	8011858 <EE_Init+0x394>
        {
          return FlashStatus;
 8011700:	7efb      	ldrb	r3, [r7, #27]
 8011702:	b29b      	uxth	r3, r3
 8011704:	e0ae      	b.n	8011864 <EE_Init+0x3a0>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8011706:	8c3b      	ldrh	r3, [r7, #32]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d10a      	bne.n	8011722 <EE_Init+0x25e>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801170c:	f000 f94a 	bl	80119a4 <EE_Format>
 8011710:	4603      	mov	r3, r0
 8011712:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8011714:	7efb      	ldrb	r3, [r7, #27]
 8011716:	2b00      	cmp	r3, #0
 8011718:	f000 80a0 	beq.w	801185c <EE_Init+0x398>
        {
          return FlashStatus;
 801171c:	7efb      	ldrb	r3, [r7, #27]
 801171e:	b29b      	uxth	r3, r3
 8011720:	e0a0      	b.n	8011864 <EE_Init+0x3a0>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8011722:	8c3b      	ldrh	r3, [r7, #32]
 8011724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011728:	4293      	cmp	r3, r2
 801172a:	d11b      	bne.n	8011764 <EE_Init+0x2a0>
      {
        pEraseInit.Sector = PAGE1_ID;
 801172c:	2303      	movs	r3, #3
 801172e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8011730:	2301      	movs	r3, #1
 8011732:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011734:	2302      	movs	r3, #2
 8011736:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8011738:	480d      	ldr	r0, [pc, #52]	; (8011770 <EE_Init+0x2ac>)
 801173a:	f000 f8a1 	bl	8011880 <EE_VerifyPageFullyErased>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	f040 808b 	bne.w	801185c <EE_Init+0x398>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011746:	f107 0214 	add.w	r2, r7, #20
 801174a:	463b      	mov	r3, r7
 801174c:	4611      	mov	r1, r2
 801174e:	4618      	mov	r0, r3
 8011750:	f002 fb1a 	bl	8013d88 <HAL_FLASHEx_Erase>
 8011754:	4603      	mov	r3, r0
 8011756:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8011758:	7efb      	ldrb	r3, [r7, #27]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d07e      	beq.n	801185c <EE_Init+0x398>
          {
            return FlashStatus;
 801175e:	7efb      	ldrb	r3, [r7, #27]
 8011760:	b29b      	uxth	r3, r3
 8011762:	e07f      	b.n	8011864 <EE_Init+0x3a0>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011764:	2300      	movs	r3, #0
 8011766:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011768:	e03b      	b.n	80117e2 <EE_Init+0x31e>
 801176a:	bf00      	nop
 801176c:	08008000 	.word	0x08008000
 8011770:	0800c000 	.word	0x0800c000
 8011774:	08008006 	.word	0x08008006
 8011778:	200000e8 	.word	0x200000e8
 801177c:	2000009a 	.word	0x2000009a
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011780:	4b3a      	ldr	r3, [pc, #232]	; (801186c <EE_Init+0x3a8>)
 8011782:	881b      	ldrh	r3, [r3, #0]
 8011784:	b29a      	uxth	r2, r3
 8011786:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011788:	4939      	ldr	r1, [pc, #228]	; (8011870 <EE_Init+0x3ac>)
 801178a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801178e:	429a      	cmp	r2, r3
 8011790:	d101      	bne.n	8011796 <EE_Init+0x2d2>
          {
            x = VarIdx;
 8011792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011794:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8011796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011798:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801179c:	429a      	cmp	r2, r3
 801179e:	d01d      	beq.n	80117dc <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80117a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117a2:	4a33      	ldr	r2, [pc, #204]	; (8011870 <EE_Init+0x3ac>)
 80117a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117a8:	4932      	ldr	r1, [pc, #200]	; (8011874 <EE_Init+0x3b0>)
 80117aa:	4618      	mov	r0, r3
 80117ac:	f000 f88e 	bl	80118cc <EE_ReadVariable>
 80117b0:	4603      	mov	r3, r0
 80117b2:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80117b4:	8bbb      	ldrh	r3, [r7, #28]
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d010      	beq.n	80117dc <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80117ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117bc:	4a2c      	ldr	r2, [pc, #176]	; (8011870 <EE_Init+0x3ac>)
 80117be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80117c2:	4b2c      	ldr	r3, [pc, #176]	; (8011874 <EE_Init+0x3b0>)
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	4619      	mov	r1, r3
 80117c8:	4610      	mov	r0, r2
 80117ca:	f000 f983 	bl	8011ad4 <EE_VerifyPageFullWriteVariable>
 80117ce:	4603      	mov	r3, r0
 80117d0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80117d2:	8bfb      	ldrh	r3, [r7, #30]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d001      	beq.n	80117dc <EE_Init+0x318>
              {
                return EepromStatus;
 80117d8:	8bfb      	ldrh	r3, [r7, #30]
 80117da:	e043      	b.n	8011864 <EE_Init+0x3a0>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80117dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117de:	3301      	adds	r3, #1
 80117e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80117e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80117e8:	d3ca      	bcc.n	8011780 <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80117ea:	f04f 0200 	mov.w	r2, #0
 80117ee:	f04f 0300 	mov.w	r3, #0
 80117f2:	4921      	ldr	r1, [pc, #132]	; (8011878 <EE_Init+0x3b4>)
 80117f4:	2001      	movs	r0, #1
 80117f6:	f002 f97d 	bl	8013af4 <HAL_FLASH_Program>
 80117fa:	4603      	mov	r3, r0
 80117fc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80117fe:	7efb      	ldrb	r3, [r7, #27]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d002      	beq.n	801180a <EE_Init+0x346>
        {
          return FlashStatus;
 8011804:	7efb      	ldrb	r3, [r7, #27]
 8011806:	b29b      	uxth	r3, r3
 8011808:	e02c      	b.n	8011864 <EE_Init+0x3a0>
        }
        pEraseInit.Sector = PAGE0_ID;
 801180a:	2302      	movs	r3, #2
 801180c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 801180e:	2301      	movs	r3, #1
 8011810:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011812:	2302      	movs	r3, #2
 8011814:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8011816:	4819      	ldr	r0, [pc, #100]	; (801187c <EE_Init+0x3b8>)
 8011818:	f000 f832 	bl	8011880 <EE_VerifyPageFullyErased>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	d11c      	bne.n	801185c <EE_Init+0x398>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011822:	f107 0214 	add.w	r2, r7, #20
 8011826:	463b      	mov	r3, r7
 8011828:	4611      	mov	r1, r2
 801182a:	4618      	mov	r0, r3
 801182c:	f002 faac 	bl	8013d88 <HAL_FLASHEx_Erase>
 8011830:	4603      	mov	r3, r0
 8011832:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8011834:	7efb      	ldrb	r3, [r7, #27]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d010      	beq.n	801185c <EE_Init+0x398>
          {
            return FlashStatus;
 801183a:	7efb      	ldrb	r3, [r7, #27]
 801183c:	b29b      	uxth	r3, r3
 801183e:	e011      	b.n	8011864 <EE_Init+0x3a0>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8011840:	f000 f8b0 	bl	80119a4 <EE_Format>
 8011844:	4603      	mov	r3, r0
 8011846:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8011848:	7efb      	ldrb	r3, [r7, #27]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d008      	beq.n	8011860 <EE_Init+0x39c>
      {
        return FlashStatus;
 801184e:	7efb      	ldrb	r3, [r7, #27]
 8011850:	b29b      	uxth	r3, r3
 8011852:	e007      	b.n	8011864 <EE_Init+0x3a0>
      break;
 8011854:	bf00      	nop
 8011856:	e004      	b.n	8011862 <EE_Init+0x39e>
      break;
 8011858:	bf00      	nop
 801185a:	e002      	b.n	8011862 <EE_Init+0x39e>
      break;
 801185c:	bf00      	nop
 801185e:	e000      	b.n	8011862 <EE_Init+0x39e>
      }
      break;
 8011860:	bf00      	nop
  }

  return HAL_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3728      	adds	r7, #40	; 0x28
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	0800c006 	.word	0x0800c006
 8011870:	200000e8 	.word	0x200000e8
 8011874:	2000009a 	.word	0x2000009a
 8011878:	0800c000 	.word	0x0800c000
 801187c:	08008000 	.word	0x08008000

08011880 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8011888:	2301      	movs	r3, #1
 801188a:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 801188c:	f245 5355 	movw	r3, #21845	; 0x5555
 8011890:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8011892:	e00d      	b.n	80118b0 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801189a:	897b      	ldrh	r3, [r7, #10]
 801189c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d002      	beq.n	80118aa <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80118a4:	2300      	movs	r3, #0
 80118a6:	60fb      	str	r3, [r7, #12]

      break;
 80118a8:	e006      	b.n	80118b8 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	3304      	adds	r3, #4
 80118ae:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	4a05      	ldr	r2, [pc, #20]	; (80118c8 <EE_VerifyPageFullyErased+0x48>)
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d9ed      	bls.n	8011894 <EE_VerifyPageFullyErased+0x14>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	b29b      	uxth	r3, r3
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3714      	adds	r7, #20
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	0800bfff 	.word	0x0800bfff

080118cc <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b086      	sub	sp, #24
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	4603      	mov	r3, r0
 80118d4:	6039      	str	r1, [r7, #0]
 80118d6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80118d8:	2300      	movs	r3, #0
 80118da:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80118dc:	f245 5355 	movw	r3, #21845	; 0x5555
 80118e0:	81bb      	strh	r3, [r7, #12]
 80118e2:	2301      	movs	r3, #1
 80118e4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80118e6:	4b1c      	ldr	r3, [pc, #112]	; (8011958 <EE_ReadVariable+0x8c>)
 80118e8:	613b      	str	r3, [r7, #16]
 80118ea:	4b1b      	ldr	r3, [pc, #108]	; (8011958 <EE_ReadVariable+0x8c>)
 80118ec:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80118ee:	2000      	movs	r0, #0
 80118f0:	f000 f8aa 	bl	8011a48 <EE_FindValidPage>
 80118f4:	4603      	mov	r3, r0
 80118f6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80118f8:	89fb      	ldrh	r3, [r7, #14]
 80118fa:	2bab      	cmp	r3, #171	; 0xab
 80118fc:	d101      	bne.n	8011902 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80118fe:	23ab      	movs	r3, #171	; 0xab
 8011900:	e025      	b.n	801194e <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011902:	89fb      	ldrh	r3, [r7, #14]
 8011904:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011908:	3302      	adds	r3, #2
 801190a:	039b      	lsls	r3, r3, #14
 801190c:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801190e:	89fb      	ldrh	r3, [r7, #14]
 8011910:	3301      	adds	r3, #1
 8011912:	039a      	lsls	r2, r3, #14
 8011914:	4b11      	ldr	r3, [pc, #68]	; (801195c <EE_ReadVariable+0x90>)
 8011916:	4413      	add	r3, r2
 8011918:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 801191a:	e012      	b.n	8011942 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8011922:	89ba      	ldrh	r2, [r7, #12]
 8011924:	88fb      	ldrh	r3, [r7, #6]
 8011926:	429a      	cmp	r2, r3
 8011928:	d108      	bne.n	801193c <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	3b02      	subs	r3, #2
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	b29a      	uxth	r2, r3
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	82fb      	strh	r3, [r7, #22]

      break;
 801193a:	e007      	b.n	801194c <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	3b04      	subs	r3, #4
 8011940:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	3302      	adds	r3, #2
 8011946:	693a      	ldr	r2, [r7, #16]
 8011948:	429a      	cmp	r2, r3
 801194a:	d8e7      	bhi.n	801191c <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 801194c:	8afb      	ldrh	r3, [r7, #22]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	08008000 	.word	0x08008000
 801195c:	08007ffe 	.word	0x08007ffe

08011960 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	4603      	mov	r3, r0
 8011968:	460a      	mov	r2, r1
 801196a:	80fb      	strh	r3, [r7, #6]
 801196c:	4613      	mov	r3, r2
 801196e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8011974:	88ba      	ldrh	r2, [r7, #4]
 8011976:	88fb      	ldrh	r3, [r7, #6]
 8011978:	4611      	mov	r1, r2
 801197a:	4618      	mov	r0, r3
 801197c:	f000 f8aa 	bl	8011ad4 <EE_VerifyPageFullWriteVariable>
 8011980:	4603      	mov	r3, r0
 8011982:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8011984:	89fb      	ldrh	r3, [r7, #14]
 8011986:	2b80      	cmp	r3, #128	; 0x80
 8011988:	d107      	bne.n	801199a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 801198a:	88ba      	ldrh	r2, [r7, #4]
 801198c:	88fb      	ldrh	r3, [r7, #6]
 801198e:	4611      	mov	r1, r2
 8011990:	4618      	mov	r0, r3
 8011992:	f000 f8fd 	bl	8011b90 <EE_PageTransfer>
 8011996:	4603      	mov	r3, r0
 8011998:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 801199a:	89fb      	ldrh	r3, [r7, #14]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3710      	adds	r7, #16
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b088      	sub	sp, #32
 80119a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80119aa:	2300      	movs	r3, #0
 80119ac:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80119b2:	2300      	movs	r3, #0
 80119b4:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80119b6:	2302      	movs	r3, #2
 80119b8:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80119ba:	2301      	movs	r3, #1
 80119bc:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80119be:	2302      	movs	r3, #2
 80119c0:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80119c2:	481f      	ldr	r0, [pc, #124]	; (8011a40 <EE_Format+0x9c>)
 80119c4:	f7ff ff5c 	bl	8011880 <EE_VerifyPageFullyErased>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d10d      	bne.n	80119ea <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80119ce:	f107 0218 	add.w	r2, r7, #24
 80119d2:	1d3b      	adds	r3, r7, #4
 80119d4:	4611      	mov	r1, r2
 80119d6:	4618      	mov	r0, r3
 80119d8:	f002 f9d6 	bl	8013d88 <HAL_FLASHEx_Erase>
 80119dc:	4603      	mov	r3, r0
 80119de:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80119e0:	7ffb      	ldrb	r3, [r7, #31]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d001      	beq.n	80119ea <EE_Format+0x46>
    {
      return FlashStatus;
 80119e6:	7ffb      	ldrb	r3, [r7, #31]
 80119e8:	e025      	b.n	8011a36 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80119ea:	f04f 0200 	mov.w	r2, #0
 80119ee:	f04f 0300 	mov.w	r3, #0
 80119f2:	4913      	ldr	r1, [pc, #76]	; (8011a40 <EE_Format+0x9c>)
 80119f4:	2001      	movs	r0, #1
 80119f6:	f002 f87d 	bl	8013af4 <HAL_FLASH_Program>
 80119fa:	4603      	mov	r3, r0
 80119fc:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80119fe:	7ffb      	ldrb	r3, [r7, #31]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d001      	beq.n	8011a08 <EE_Format+0x64>
  {
    return FlashStatus;
 8011a04:	7ffb      	ldrb	r3, [r7, #31]
 8011a06:	e016      	b.n	8011a36 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8011a0c:	480d      	ldr	r0, [pc, #52]	; (8011a44 <EE_Format+0xa0>)
 8011a0e:	f7ff ff37 	bl	8011880 <EE_VerifyPageFullyErased>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10d      	bne.n	8011a34 <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011a18:	f107 0218 	add.w	r2, r7, #24
 8011a1c:	1d3b      	adds	r3, r7, #4
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4618      	mov	r0, r3
 8011a22:	f002 f9b1 	bl	8013d88 <HAL_FLASHEx_Erase>
 8011a26:	4603      	mov	r3, r0
 8011a28:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8011a2a:	7ffb      	ldrb	r3, [r7, #31]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d001      	beq.n	8011a34 <EE_Format+0x90>
    {
      return FlashStatus;
 8011a30:	7ffb      	ldrb	r3, [r7, #31]
 8011a32:	e000      	b.n	8011a36 <EE_Format+0x92>
    }
  }

  return HAL_OK;
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3720      	adds	r7, #32
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	08008000 	.word	0x08008000
 8011a44:	0800c000 	.word	0x0800c000

08011a48 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	4603      	mov	r3, r0
 8011a50:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8011a52:	2306      	movs	r3, #6
 8011a54:	81fb      	strh	r3, [r7, #14]
 8011a56:	2306      	movs	r3, #6
 8011a58:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011a5a:	4b1c      	ldr	r3, [pc, #112]	; (8011acc <EE_FindValidPage+0x84>)
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011a60:	4b1b      	ldr	r3, [pc, #108]	; (8011ad0 <EE_FindValidPage+0x88>)
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8011a66:	79fb      	ldrb	r3, [r7, #7]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d01b      	beq.n	8011aa4 <EE_FindValidPage+0x5c>
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d125      	bne.n	8011abc <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8011a70:	89bb      	ldrh	r3, [r7, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d108      	bne.n	8011a88 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8011a76:	89fb      	ldrh	r3, [r7, #14]
 8011a78:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d101      	bne.n	8011a84 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8011a80:	2300      	movs	r3, #0
 8011a82:	e01c      	b.n	8011abe <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8011a84:	2301      	movs	r3, #1
 8011a86:	e01a      	b.n	8011abe <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8011a88:	89fb      	ldrh	r3, [r7, #14]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d108      	bne.n	8011aa0 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8011a8e:	89bb      	ldrh	r3, [r7, #12]
 8011a90:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d101      	bne.n	8011a9c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8011a98:	2301      	movs	r3, #1
 8011a9a:	e010      	b.n	8011abe <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	e00e      	b.n	8011abe <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8011aa0:	23ab      	movs	r3, #171	; 0xab
 8011aa2:	e00c      	b.n	8011abe <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8011aa4:	89fb      	ldrh	r3, [r7, #14]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8011aaa:	2300      	movs	r3, #0
 8011aac:	e007      	b.n	8011abe <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8011aae:	89bb      	ldrh	r3, [r7, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d101      	bne.n	8011ab8 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	e002      	b.n	8011abe <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8011ab8:	23ab      	movs	r3, #171	; 0xab
 8011aba:	e000      	b.n	8011abe <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8011abc:	2300      	movs	r3, #0
  }
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop
 8011acc:	08008000 	.word	0x08008000
 8011ad0:	0800c000 	.word	0x0800c000

08011ad4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8011ad4:	b590      	push	{r4, r7, lr}
 8011ad6:	b087      	sub	sp, #28
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	4603      	mov	r3, r0
 8011adc:	460a      	mov	r2, r1
 8011ade:	80fb      	strh	r3, [r7, #6]
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8011aec:	4b25      	ldr	r3, [pc, #148]	; (8011b84 <EE_VerifyPageFullWriteVariable+0xb0>)
 8011aee:	617b      	str	r3, [r7, #20]
 8011af0:	4b25      	ldr	r3, [pc, #148]	; (8011b88 <EE_VerifyPageFullWriteVariable+0xb4>)
 8011af2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8011af4:	2001      	movs	r0, #1
 8011af6:	f7ff ffa7 	bl	8011a48 <EE_FindValidPage>
 8011afa:	4603      	mov	r3, r0
 8011afc:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8011afe:	8a3b      	ldrh	r3, [r7, #16]
 8011b00:	2bab      	cmp	r3, #171	; 0xab
 8011b02:	d101      	bne.n	8011b08 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8011b04:	23ab      	movs	r3, #171	; 0xab
 8011b06:	e039      	b.n	8011b7c <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011b08:	8a3b      	ldrh	r3, [r7, #16]
 8011b0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011b0e:	3302      	adds	r3, #2
 8011b10:	039b      	lsls	r3, r3, #14
 8011b12:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011b14:	8a3b      	ldrh	r3, [r7, #16]
 8011b16:	3301      	adds	r3, #1
 8011b18:	039a      	lsls	r2, r3, #14
 8011b1a:	4b1c      	ldr	r3, [pc, #112]	; (8011b8c <EE_VerifyPageFullWriteVariable+0xb8>)
 8011b1c:	4413      	add	r3, r2
 8011b1e:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8011b20:	e027      	b.n	8011b72 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b2a:	d11f      	bne.n	8011b6c <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 8011b2c:	88bb      	ldrh	r3, [r7, #4]
 8011b2e:	f04f 0400 	mov.w	r4, #0
 8011b32:	461a      	mov	r2, r3
 8011b34:	4623      	mov	r3, r4
 8011b36:	6979      	ldr	r1, [r7, #20]
 8011b38:	2001      	movs	r0, #1
 8011b3a:	f001 ffdb 	bl	8013af4 <HAL_FLASH_Program>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8011b42:	7cfb      	ldrb	r3, [r7, #19]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d002      	beq.n	8011b4e <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 8011b48:	7cfb      	ldrb	r3, [r7, #19]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	e016      	b.n	8011b7c <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	1c99      	adds	r1, r3, #2
 8011b52:	88fb      	ldrh	r3, [r7, #6]
 8011b54:	f04f 0400 	mov.w	r4, #0
 8011b58:	461a      	mov	r2, r3
 8011b5a:	4623      	mov	r3, r4
 8011b5c:	2001      	movs	r0, #1
 8011b5e:	f001 ffc9 	bl	8013af4 <HAL_FLASH_Program>
 8011b62:	4603      	mov	r3, r0
 8011b64:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8011b66:	7cfb      	ldrb	r3, [r7, #19]
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	e007      	b.n	8011b7c <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	3304      	adds	r3, #4
 8011b70:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8011b72:	697a      	ldr	r2, [r7, #20]
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d3d3      	bcc.n	8011b22 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8011b7a:	2380      	movs	r3, #128	; 0x80
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	371c      	adds	r7, #28
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd90      	pop	{r4, r7, pc}
 8011b84:	08008000 	.word	0x08008000
 8011b88:	0800c000 	.word	0x0800c000
 8011b8c:	08007fff 	.word	0x08007fff

08011b90 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b08c      	sub	sp, #48	; 0x30
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	4603      	mov	r3, r0
 8011b98:	460a      	mov	r2, r1
 8011b9a:	80fb      	strh	r3, [r7, #6]
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8011ba6:	4b54      	ldr	r3, [pc, #336]	; (8011cf8 <EE_PageTransfer+0x168>)
 8011ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8011baa:	2300      	movs	r3, #0
 8011bac:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	847b      	strh	r3, [r7, #34]	; 0x22
 8011bba:	2300      	movs	r3, #0
 8011bbc:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8011bc2:	2000      	movs	r0, #0
 8011bc4:	f7ff ff40 	bl	8011a48 <EE_FindValidPage>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8011bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d104      	bne.n	8011bdc <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8011bd2:	4b49      	ldr	r3, [pc, #292]	; (8011cf8 <EE_PageTransfer+0x168>)
 8011bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011bda:	e009      	b.n	8011bf0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8011bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d104      	bne.n	8011bec <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8011be2:	4b46      	ldr	r3, [pc, #280]	; (8011cfc <EE_PageTransfer+0x16c>)
 8011be4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8011be6:	2302      	movs	r3, #2
 8011be8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011bea:	e001      	b.n	8011bf0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8011bec:	23ab      	movs	r3, #171	; 0xab
 8011bee:	e07f      	b.n	8011cf0 <EE_PageTransfer+0x160>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8011bf0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011bf4:	f04f 0300 	mov.w	r3, #0
 8011bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	f001 ff7a 	bl	8013af4 <HAL_FLASH_Program>
 8011c00:	4603      	mov	r3, r0
 8011c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8011c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d003      	beq.n	8011c16 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8011c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	e06c      	b.n	8011cf0 <EE_PageTransfer+0x160>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8011c16:	88ba      	ldrh	r2, [r7, #4]
 8011c18:	88fb      	ldrh	r3, [r7, #6]
 8011c1a:	4611      	mov	r1, r2
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7ff ff59 	bl	8011ad4 <EE_VerifyPageFullWriteVariable>
 8011c22:	4603      	mov	r3, r0
 8011c24:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8011c26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8011c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c2e:	e05f      	b.n	8011cf0 <EE_PageTransfer+0x160>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011c30:	2300      	movs	r3, #0
 8011c32:	853b      	strh	r3, [r7, #40]	; 0x28
 8011c34:	e027      	b.n	8011c86 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8011c36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c38:	4a31      	ldr	r2, [pc, #196]	; (8011d00 <EE_PageTransfer+0x170>)
 8011c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c3e:	88fa      	ldrh	r2, [r7, #6]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d01d      	beq.n	8011c80 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011c44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c46:	4a2e      	ldr	r2, [pc, #184]	; (8011d00 <EE_PageTransfer+0x170>)
 8011c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c4c:	492d      	ldr	r1, [pc, #180]	; (8011d04 <EE_PageTransfer+0x174>)
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ff fe3c 	bl	80118cc <EE_ReadVariable>
 8011c54:	4603      	mov	r3, r0
 8011c56:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8011c58:	8c3b      	ldrh	r3, [r7, #32]
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d010      	beq.n	8011c80 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011c5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c60:	4a27      	ldr	r2, [pc, #156]	; (8011d00 <EE_PageTransfer+0x170>)
 8011c62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011c66:	4b27      	ldr	r3, [pc, #156]	; (8011d04 <EE_PageTransfer+0x174>)
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	f7ff ff31 	bl	8011ad4 <EE_VerifyPageFullWriteVariable>
 8011c72:	4603      	mov	r3, r0
 8011c74:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8011c76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d001      	beq.n	8011c80 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8011c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c7e:	e037      	b.n	8011cf0 <EE_PageTransfer+0x160>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c82:	3301      	adds	r3, #1
 8011c84:	853b      	strh	r3, [r7, #40]	; 0x28
 8011c86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011c8c:	d3d3      	bcc.n	8011c36 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8011c92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011c94:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8011c96:	2301      	movs	r3, #1
 8011c98:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011c9e:	f107 021c 	add.w	r2, r7, #28
 8011ca2:	f107 0308 	add.w	r3, r7, #8
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f002 f86d 	bl	8013d88 <HAL_FLASHEx_Erase>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8011cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d003      	beq.n	8011cc4 <EE_PageTransfer+0x134>
  {
    return FlashStatus;
 8011cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	e015      	b.n	8011cf0 <EE_PageTransfer+0x160>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8011cc4:	f04f 0200 	mov.w	r2, #0
 8011cc8:	f04f 0300 	mov.w	r3, #0
 8011ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cce:	2001      	movs	r0, #1
 8011cd0:	f001 ff10 	bl	8013af4 <HAL_FLASH_Program>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8011cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d003      	beq.n	8011cea <EE_PageTransfer+0x15a>
  {
    return FlashStatus;
 8011ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	e002      	b.n	8011cf0 <EE_PageTransfer+0x160>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8011cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cee:	b29b      	uxth	r3, r3
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3730      	adds	r7, #48	; 0x30
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	08008000 	.word	0x08008000
 8011cfc:	0800c000 	.word	0x0800c000
 8011d00:	200000e8 	.word	0x200000e8
 8011d04:	2000009a 	.word	0x2000009a

08011d08 <flashReadData>:
#include <snestogameport/flash.h>
#include <snestogameport/eeprom.h>

//Flash Read/Write

void flashReadData(uint16_t* outputBuffer, uint32_t size,uint32_t offset) {
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
	offset /= 2;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	085b      	lsrs	r3, r3, #1
 8011d18:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8011d1a:	f001 ff3f 	bl	8013b9c <HAL_FLASH_Unlock>
	for (int i = 0; i < (size / 2); i++) {
 8011d1e:	2300      	movs	r3, #0
 8011d20:	617b      	str	r3, [r7, #20]
 8011d22:	e011      	b.n	8011d48 <flashReadData+0x40>
		uint32_t status = EE_ReadVariable(i+offset,outputBuffer+i);
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	4413      	add	r3, r2
 8011d2e:	b298      	uxth	r0, r3
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	4413      	add	r3, r2
 8011d38:	4619      	mov	r1, r3
 8011d3a:	f7ff fdc7 	bl	80118cc <EE_ReadVariable>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < (size / 2); i++) {
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	3301      	adds	r3, #1
 8011d46:	617b      	str	r3, [r7, #20]
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	085a      	lsrs	r2, r3, #1
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d8e8      	bhi.n	8011d24 <flashReadData+0x1c>
		//if (status == 1)
			//*(outputBuffer+i) = 0xFFFF;
	}
	HAL_FLASH_Lock();
 8011d52:	f001 ff45 	bl	8013be0 <HAL_FLASH_Lock>
}
 8011d56:	bf00      	nop
 8011d58:	3718      	adds	r7, #24
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <flashWriteData>:

void flashWriteData(uint16_t *data, uint32_t size, uint32_t offset) {
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b086      	sub	sp, #24
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	60f8      	str	r0, [r7, #12]
 8011d66:	60b9      	str	r1, [r7, #8]
 8011d68:	607a      	str	r2, [r7, #4]
	offset /= 2;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	085b      	lsrs	r3, r3, #1
 8011d6e:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8011d70:	f001 ff14 	bl	8013b9c <HAL_FLASH_Unlock>
	for (int i = 0; i < (size / 2); i++) {
 8011d74:	2300      	movs	r3, #0
 8011d76:	617b      	str	r3, [r7, #20]
 8011d78:	e015      	b.n	8011da6 <flashWriteData+0x48>
		uint32_t status = EE_WriteVariable(i+offset,*(data+i));
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	4413      	add	r3, r2
 8011d84:	b298      	uxth	r0, r3
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	005b      	lsls	r3, r3, #1
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	881b      	ldrh	r3, [r3, #0]
 8011d90:	4619      	mov	r1, r3
 8011d92:	f7ff fde5 	bl	8011960 <EE_WriteVariable>
 8011d96:	4603      	mov	r3, r0
 8011d98:	613b      	str	r3, [r7, #16]
		status++;
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < (size / 2); i++) {
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	3301      	adds	r3, #1
 8011da4:	617b      	str	r3, [r7, #20]
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	085a      	lsrs	r2, r3, #1
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d8e4      	bhi.n	8011d7a <flashWriteData+0x1c>
	}
	HAL_FLASH_Lock();
 8011db0:	f001 ff16 	bl	8013be0 <HAL_FLASH_Lock>
}
 8011db4:	bf00      	nop
 8011db6:	3718      	adds	r7, #24
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	4608      	mov	r0, r1
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4603      	mov	r3, r0
 8011dcc:	70fb      	strb	r3, [r7, #3]
 8011dce:	460b      	mov	r3, r1
 8011dd0:	70bb      	strb	r3, [r7, #2]
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8011dda:	4a4f      	ldr	r2, [pc, #316]	; (8011f18 <lcdInit+0x15c>)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8011de0:	78fb      	ldrb	r3, [r7, #3]
 8011de2:	005b      	lsls	r3, r3, #1
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	4b4c      	ldr	r3, [pc, #304]	; (8011f18 <lcdInit+0x15c>)
 8011de8:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8011dea:	4a4b      	ldr	r2, [pc, #300]	; (8011f18 <lcdInit+0x15c>)
 8011dec:	78bb      	ldrb	r3, [r7, #2]
 8011dee:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8011df0:	4a49      	ldr	r2, [pc, #292]	; (8011f18 <lcdInit+0x15c>)
 8011df2:	787b      	ldrb	r3, [r7, #1]
 8011df4:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8011df6:	4b48      	ldr	r3, [pc, #288]	; (8011f18 <lcdInit+0x15c>)
 8011df8:	2208      	movs	r2, #8
 8011dfa:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8011dfc:	4b47      	ldr	r3, [pc, #284]	; (8011f1c <lcdInit+0x160>)
 8011dfe:	2234      	movs	r2, #52	; 0x34
 8011e00:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8011e02:	4b46      	ldr	r3, [pc, #280]	; (8011f1c <lcdInit+0x160>)
 8011e04:	781a      	ldrb	r2, [r3, #0]
 8011e06:	4b45      	ldr	r3, [pc, #276]	; (8011f1c <lcdInit+0x160>)
 8011e08:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8011e0a:	4b44      	ldr	r3, [pc, #272]	; (8011f1c <lcdInit+0x160>)
 8011e0c:	2230      	movs	r2, #48	; 0x30
 8011e0e:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8011e10:	2300      	movs	r3, #0
 8011e12:	75fb      	strb	r3, [r7, #23]
 8011e14:	e030      	b.n	8011e78 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8011e16:	4b40      	ldr	r3, [pc, #256]	; (8011f18 <lcdInit+0x15c>)
 8011e18:	6818      	ldr	r0, [r3, #0]
 8011e1a:	4b3f      	ldr	r3, [pc, #252]	; (8011f18 <lcdInit+0x15c>)
 8011e1c:	799b      	ldrb	r3, [r3, #6]
 8011e1e:	b299      	uxth	r1, r3
 8011e20:	2303      	movs	r3, #3
 8011e22:	4a3e      	ldr	r2, [pc, #248]	; (8011f1c <lcdInit+0x160>)
 8011e24:	f002 fbbe 	bl	80145a4 <HAL_I2C_Master_Transmit_DMA>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <lcdInit+0x76>
            return false;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	e06d      	b.n	8011f0e <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8011e32:	f006 fd21 	bl	8018878 <xTaskGetTickCount>
 8011e36:	4603      	mov	r3, r0
 8011e38:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8011e3a:	e002      	b.n	8011e42 <lcdInit+0x86>
            vTaskDelay(1);
 8011e3c:	2001      	movs	r0, #1
 8011e3e:	f006 fbd9 	bl	80185f4 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8011e42:	4b35      	ldr	r3, [pc, #212]	; (8011f18 <lcdInit+0x15c>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f002 ff3e 	bl	8014cc8 <HAL_I2C_GetState>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b20      	cmp	r3, #32
 8011e50:	d1f4      	bne.n	8011e3c <lcdInit+0x80>
        }

        if (i == 2) {
 8011e52:	7dfb      	ldrb	r3, [r7, #23]
 8011e54:	2b02      	cmp	r3, #2
 8011e56:	d106      	bne.n	8011e66 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8011e58:	f107 0310 	add.w	r3, r7, #16
 8011e5c:	2101      	movs	r1, #1
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f006 fb4e 	bl	8018500 <vTaskDelayUntil>
 8011e64:	e005      	b.n	8011e72 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8011e66:	f107 0310 	add.w	r3, r7, #16
 8011e6a:	2105      	movs	r1, #5
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f006 fb47 	bl	8018500 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8011e72:	7dfb      	ldrb	r3, [r7, #23]
 8011e74:	3301      	adds	r3, #1
 8011e76:	75fb      	strb	r3, [r7, #23]
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
 8011e7a:	2b02      	cmp	r3, #2
 8011e7c:	d9cb      	bls.n	8011e16 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8011e7e:	4b27      	ldr	r3, [pc, #156]	; (8011f1c <lcdInit+0x160>)
 8011e80:	222c      	movs	r2, #44	; 0x2c
 8011e82:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8011e84:	4b25      	ldr	r3, [pc, #148]	; (8011f1c <lcdInit+0x160>)
 8011e86:	781a      	ldrb	r2, [r3, #0]
 8011e88:	4b24      	ldr	r3, [pc, #144]	; (8011f1c <lcdInit+0x160>)
 8011e8a:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8011e8c:	4b23      	ldr	r3, [pc, #140]	; (8011f1c <lcdInit+0x160>)
 8011e8e:	2228      	movs	r2, #40	; 0x28
 8011e90:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8011e92:	4b21      	ldr	r3, [pc, #132]	; (8011f18 <lcdInit+0x15c>)
 8011e94:	6818      	ldr	r0, [r3, #0]
 8011e96:	4b20      	ldr	r3, [pc, #128]	; (8011f18 <lcdInit+0x15c>)
 8011e98:	799b      	ldrb	r3, [r3, #6]
 8011e9a:	b299      	uxth	r1, r3
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	4a1f      	ldr	r2, [pc, #124]	; (8011f1c <lcdInit+0x160>)
 8011ea0:	f002 fb80 	bl	80145a4 <HAL_I2C_Master_Transmit_DMA>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d004      	beq.n	8011eb4 <lcdInit+0xf8>
        return false;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	e02f      	b.n	8011f0e <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8011eae:	2001      	movs	r0, #1
 8011eb0:	f006 fba0 	bl	80185f4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8011eb4:	4b18      	ldr	r3, [pc, #96]	; (8011f18 <lcdInit+0x15c>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f002 ff05 	bl	8014cc8 <HAL_I2C_GetState>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b20      	cmp	r3, #32
 8011ec2:	d1f4      	bne.n	8011eae <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
 8011ec6:	f043 0302 	orr.w	r3, r3, #2
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8011ece:	4b12      	ldr	r3, [pc, #72]	; (8011f18 <lcdInit+0x15c>)
 8011ed0:	791b      	ldrb	r3, [r3, #4]
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d904      	bls.n	8011ee0 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	f043 0308 	orr.w	r3, r3, #8
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8011ee0:	f107 030f 	add.w	r3, r7, #15
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	f000 f98c 	bl	8012204 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8011eec:	2101      	movs	r1, #1
 8011eee:	2001      	movs	r0, #1
 8011ef0:	f000 f816 	bl	8011f20 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8011ef4:	2101      	movs	r1, #1
 8011ef6:	2007      	movs	r0, #7
 8011ef8:	f000 f812 	bl	8011f20 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8011efc:	2101      	movs	r1, #1
 8011efe:	2002      	movs	r0, #2
 8011f00:	f000 f80e 	bl	8011f20 <lcdCommand>
    lcdCursorHome();
 8011f04:	2101      	movs	r1, #1
 8011f06:	2005      	movs	r0, #5
 8011f08:	f000 f80a 	bl	8011f20 <lcdCommand>

    return true;
 8011f0c:	2301      	movs	r3, #1
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3718      	adds	r7, #24
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	200000a4 	.word	0x200000a4
 8011f1c:	2000009c 	.word	0x2000009c

08011f20 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	4603      	mov	r3, r0
 8011f28:	460a      	mov	r2, r1
 8011f2a:	71fb      	strb	r3, [r7, #7]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8011f34:	79bb      	ldrb	r3, [r7, #6]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d06e      	beq.n	8012018 <lcdCommand+0xf8>
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	f040 80b4 	bne.w	80120a8 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8011f40:	79fb      	ldrb	r3, [r7, #7]
 8011f42:	3b01      	subs	r3, #1
 8011f44:	2b07      	cmp	r3, #7
 8011f46:	d864      	bhi.n	8012012 <lcdCommand+0xf2>
 8011f48:	a201      	add	r2, pc, #4	; (adr r2, 8011f50 <lcdCommand+0x30>)
 8011f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f4e:	bf00      	nop
 8011f50:	08011f71 	.word	0x08011f71
 8011f54:	08011fa1 	.word	0x08011fa1
 8011f58:	08011f81 	.word	0x08011f81
 8011f5c:	08011f91 	.word	0x08011f91
 8011f60:	08011fc5 	.word	0x08011fc5
 8011f64:	08011ff9 	.word	0x08011ff9
 8011f68:	08011fe9 	.word	0x08011fe9
 8011f6c:	08012003 	.word	0x08012003
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8011f70:	4b67      	ldr	r3, [pc, #412]	; (8012110 <lcdCommand+0x1f0>)
 8011f72:	7a1b      	ldrb	r3, [r3, #8]
 8011f74:	f043 0304 	orr.w	r3, r3, #4
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	4b65      	ldr	r3, [pc, #404]	; (8012110 <lcdCommand+0x1f0>)
 8011f7c:	721a      	strb	r2, [r3, #8]
                    break;
 8011f7e:	e04a      	b.n	8012016 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8011f80:	4b63      	ldr	r3, [pc, #396]	; (8012110 <lcdCommand+0x1f0>)
 8011f82:	7a1b      	ldrb	r3, [r3, #8]
 8011f84:	f043 0302 	orr.w	r3, r3, #2
 8011f88:	b2da      	uxtb	r2, r3
 8011f8a:	4b61      	ldr	r3, [pc, #388]	; (8012110 <lcdCommand+0x1f0>)
 8011f8c:	721a      	strb	r2, [r3, #8]
                    break;
 8011f8e:	e042      	b.n	8012016 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8011f90:	4b5f      	ldr	r3, [pc, #380]	; (8012110 <lcdCommand+0x1f0>)
 8011f92:	7a1b      	ldrb	r3, [r3, #8]
 8011f94:	f043 0301 	orr.w	r3, r3, #1
 8011f98:	b2da      	uxtb	r2, r3
 8011f9a:	4b5d      	ldr	r3, [pc, #372]	; (8012110 <lcdCommand+0x1f0>)
 8011f9c:	721a      	strb	r2, [r3, #8]
                    break;
 8011f9e:	e03a      	b.n	8012016 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8011fa4:	f107 030f 	add.w	r3, r7, #15
 8011fa8:	4619      	mov	r1, r3
 8011faa:	2000      	movs	r0, #0
 8011fac:	f000 f92a 	bl	8012204 <lcdWriteByte>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d101      	bne.n	8011fba <lcdCommand+0x9a>
                        return false;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e0a6      	b.n	8012108 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8011fba:	2002      	movs	r0, #2
 8011fbc:	f006 fb1a 	bl	80185f4 <vTaskDelay>
                        return true;
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	e0a1      	b.n	8012108 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8011fc4:	2302      	movs	r3, #2
 8011fc6:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8011fc8:	f107 030f 	add.w	r3, r7, #15
 8011fcc:	4619      	mov	r1, r3
 8011fce:	2000      	movs	r0, #0
 8011fd0:	f000 f918 	bl	8012204 <lcdWriteByte>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <lcdCommand+0xbe>
                        return false;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	e094      	b.n	8012108 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8011fde:	2002      	movs	r0, #2
 8011fe0:	f006 fb08 	bl	80185f4 <vTaskDelay>
                        return true;
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	e08f      	b.n	8012108 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8011fe8:	4b49      	ldr	r3, [pc, #292]	; (8012110 <lcdCommand+0x1f0>)
 8011fea:	7a5b      	ldrb	r3, [r3, #9]
 8011fec:	f043 0302 	orr.w	r3, r3, #2
 8011ff0:	b2da      	uxtb	r2, r3
 8011ff2:	4b47      	ldr	r3, [pc, #284]	; (8012110 <lcdCommand+0x1f0>)
 8011ff4:	725a      	strb	r2, [r3, #9]
                    break;
 8011ff6:	e00e      	b.n	8012016 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8011ff8:	4b45      	ldr	r3, [pc, #276]	; (8012110 <lcdCommand+0x1f0>)
 8011ffa:	7a5a      	ldrb	r2, [r3, #9]
 8011ffc:	4b44      	ldr	r3, [pc, #272]	; (8012110 <lcdCommand+0x1f0>)
 8011ffe:	725a      	strb	r2, [r3, #9]
                    break;
 8012000:	e009      	b.n	8012016 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8012002:	4b43      	ldr	r3, [pc, #268]	; (8012110 <lcdCommand+0x1f0>)
 8012004:	7a5b      	ldrb	r3, [r3, #9]
 8012006:	f043 0301 	orr.w	r3, r3, #1
 801200a:	b2da      	uxtb	r2, r3
 801200c:	4b40      	ldr	r3, [pc, #256]	; (8012110 <lcdCommand+0x1f0>)
 801200e:	725a      	strb	r2, [r3, #9]
                    break;
 8012010:	e001      	b.n	8012016 <lcdCommand+0xf6>

                default:
                    return false;
 8012012:	2300      	movs	r3, #0
 8012014:	e078      	b.n	8012108 <lcdCommand+0x1e8>
            }

            break;
 8012016:	e049      	b.n	80120ac <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8012018:	79fb      	ldrb	r3, [r7, #7]
 801201a:	3b01      	subs	r3, #1
 801201c:	2b07      	cmp	r3, #7
 801201e:	d840      	bhi.n	80120a2 <lcdCommand+0x182>
 8012020:	a201      	add	r2, pc, #4	; (adr r2, 8012028 <lcdCommand+0x108>)
 8012022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012026:	bf00      	nop
 8012028:	08012049 	.word	0x08012049
 801202c:	080120a3 	.word	0x080120a3
 8012030:	08012059 	.word	0x08012059
 8012034:	08012069 	.word	0x08012069
 8012038:	080120a3 	.word	0x080120a3
 801203c:	08012089 	.word	0x08012089
 8012040:	08012079 	.word	0x08012079
 8012044:	08012093 	.word	0x08012093
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8012048:	4b31      	ldr	r3, [pc, #196]	; (8012110 <lcdCommand+0x1f0>)
 801204a:	7a1b      	ldrb	r3, [r3, #8]
 801204c:	f023 0304 	bic.w	r3, r3, #4
 8012050:	b2da      	uxtb	r2, r3
 8012052:	4b2f      	ldr	r3, [pc, #188]	; (8012110 <lcdCommand+0x1f0>)
 8012054:	721a      	strb	r2, [r3, #8]
                    break;
 8012056:	e026      	b.n	80120a6 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8012058:	4b2d      	ldr	r3, [pc, #180]	; (8012110 <lcdCommand+0x1f0>)
 801205a:	7a1b      	ldrb	r3, [r3, #8]
 801205c:	f023 0302 	bic.w	r3, r3, #2
 8012060:	b2da      	uxtb	r2, r3
 8012062:	4b2b      	ldr	r3, [pc, #172]	; (8012110 <lcdCommand+0x1f0>)
 8012064:	721a      	strb	r2, [r3, #8]
                    break;
 8012066:	e01e      	b.n	80120a6 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8012068:	4b29      	ldr	r3, [pc, #164]	; (8012110 <lcdCommand+0x1f0>)
 801206a:	7a1b      	ldrb	r3, [r3, #8]
 801206c:	f023 0301 	bic.w	r3, r3, #1
 8012070:	b2da      	uxtb	r2, r3
 8012072:	4b27      	ldr	r3, [pc, #156]	; (8012110 <lcdCommand+0x1f0>)
 8012074:	721a      	strb	r2, [r3, #8]
                    break;
 8012076:	e016      	b.n	80120a6 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8012078:	4b25      	ldr	r3, [pc, #148]	; (8012110 <lcdCommand+0x1f0>)
 801207a:	7a5b      	ldrb	r3, [r3, #9]
 801207c:	f023 0302 	bic.w	r3, r3, #2
 8012080:	b2da      	uxtb	r2, r3
 8012082:	4b23      	ldr	r3, [pc, #140]	; (8012110 <lcdCommand+0x1f0>)
 8012084:	725a      	strb	r2, [r3, #9]
                    break;
 8012086:	e00e      	b.n	80120a6 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8012088:	4b21      	ldr	r3, [pc, #132]	; (8012110 <lcdCommand+0x1f0>)
 801208a:	7a5a      	ldrb	r2, [r3, #9]
 801208c:	4b20      	ldr	r3, [pc, #128]	; (8012110 <lcdCommand+0x1f0>)
 801208e:	725a      	strb	r2, [r3, #9]
                    break;
 8012090:	e009      	b.n	80120a6 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8012092:	4b1f      	ldr	r3, [pc, #124]	; (8012110 <lcdCommand+0x1f0>)
 8012094:	7a5b      	ldrb	r3, [r3, #9]
 8012096:	f023 0301 	bic.w	r3, r3, #1
 801209a:	b2da      	uxtb	r2, r3
 801209c:	4b1c      	ldr	r3, [pc, #112]	; (8012110 <lcdCommand+0x1f0>)
 801209e:	725a      	strb	r2, [r3, #9]
                    break;
 80120a0:	e001      	b.n	80120a6 <lcdCommand+0x186>

                default:
                    return false;
 80120a2:	2300      	movs	r3, #0
 80120a4:	e030      	b.n	8012108 <lcdCommand+0x1e8>
            }

            break;
 80120a6:	e001      	b.n	80120ac <lcdCommand+0x18c>

        default:
            return false;
 80120a8:	2300      	movs	r3, #0
 80120aa:	e02d      	b.n	8012108 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 80120ac:	79fb      	ldrb	r3, [r7, #7]
 80120ae:	3b01      	subs	r3, #1
 80120b0:	2b07      	cmp	r3, #7
 80120b2:	d821      	bhi.n	80120f8 <lcdCommand+0x1d8>
 80120b4:	a201      	add	r2, pc, #4	; (adr r2, 80120bc <lcdCommand+0x19c>)
 80120b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ba:	bf00      	nop
 80120bc:	080120dd 	.word	0x080120dd
 80120c0:	080120f9 	.word	0x080120f9
 80120c4:	080120dd 	.word	0x080120dd
 80120c8:	080120dd 	.word	0x080120dd
 80120cc:	080120f9 	.word	0x080120f9
 80120d0:	080120eb 	.word	0x080120eb
 80120d4:	080120eb 	.word	0x080120eb
 80120d8:	080120eb 	.word	0x080120eb
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80120dc:	4b0c      	ldr	r3, [pc, #48]	; (8012110 <lcdCommand+0x1f0>)
 80120de:	7a1b      	ldrb	r3, [r3, #8]
 80120e0:	f043 0308 	orr.w	r3, r3, #8
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	73fb      	strb	r3, [r7, #15]
            break;
 80120e8:	e007      	b.n	80120fa <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 80120ea:	4b09      	ldr	r3, [pc, #36]	; (8012110 <lcdCommand+0x1f0>)
 80120ec:	7a5b      	ldrb	r3, [r3, #9]
 80120ee:	f043 0304 	orr.w	r3, r3, #4
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	73fb      	strb	r3, [r7, #15]
            break;
 80120f6:	e000      	b.n	80120fa <lcdCommand+0x1da>

        default:
            break;
 80120f8:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 80120fa:	f107 030f 	add.w	r3, r7, #15
 80120fe:	4619      	mov	r1, r3
 8012100:	2000      	movs	r0, #0
 8012102:	f000 f87f 	bl	8012204 <lcdWriteByte>
 8012106:	4603      	mov	r3, r0
}
 8012108:	4618      	mov	r0, r3
 801210a:	3710      	adds	r7, #16
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	200000a4 	.word	0x200000a4

08012114 <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	4603      	mov	r3, r0
 801211c:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 801211e:	4a10      	ldr	r2, [pc, #64]	; (8012160 <lcdBacklight+0x4c>)
 8012120:	79fb      	ldrb	r3, [r7, #7]
 8012122:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 8012124:	4b0e      	ldr	r3, [pc, #56]	; (8012160 <lcdBacklight+0x4c>)
 8012126:	6818      	ldr	r0, [r3, #0]
 8012128:	4b0d      	ldr	r3, [pc, #52]	; (8012160 <lcdBacklight+0x4c>)
 801212a:	799b      	ldrb	r3, [r3, #6]
 801212c:	b299      	uxth	r1, r3
 801212e:	2301      	movs	r3, #1
 8012130:	4a0c      	ldr	r2, [pc, #48]	; (8012164 <lcdBacklight+0x50>)
 8012132:	f002 fa37 	bl	80145a4 <HAL_I2C_Master_Transmit_DMA>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d004      	beq.n	8012146 <lcdBacklight+0x32>
        return false;
 801213c:	2300      	movs	r3, #0
 801213e:	e00b      	b.n	8012158 <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8012140:	2001      	movs	r0, #1
 8012142:	f006 fa57 	bl	80185f4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8012146:	4b06      	ldr	r3, [pc, #24]	; (8012160 <lcdBacklight+0x4c>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	4618      	mov	r0, r3
 801214c:	f002 fdbc 	bl	8014cc8 <HAL_I2C_GetState>
 8012150:	4603      	mov	r3, r0
 8012152:	2b20      	cmp	r3, #32
 8012154:	d1f4      	bne.n	8012140 <lcdBacklight+0x2c>
    }

    return true;
 8012156:	2301      	movs	r3, #1
}
 8012158:	4618      	mov	r0, r3
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	200000a4 	.word	0x200000a4
 8012164:	200000ab 	.word	0x200000ab

08012168 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	4603      	mov	r3, r0
 8012170:	460a      	mov	r2, r1
 8012172:	71fb      	strb	r3, [r7, #7]
 8012174:	4613      	mov	r3, r2
 8012176:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8012178:	4b0f      	ldr	r3, [pc, #60]	; (80121b8 <lcdSetCursorPosition+0x50>)
 801217a:	791b      	ldrb	r3, [r3, #4]
 801217c:	79ba      	ldrb	r2, [r7, #6]
 801217e:	429a      	cmp	r2, r3
 8012180:	d303      	bcc.n	801218a <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8012182:	4b0d      	ldr	r3, [pc, #52]	; (80121b8 <lcdSetCursorPosition+0x50>)
 8012184:	791b      	ldrb	r3, [r3, #4]
 8012186:	3b01      	subs	r3, #1
 8012188:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 801218a:	79bb      	ldrb	r3, [r7, #6]
 801218c:	4a0b      	ldr	r2, [pc, #44]	; (80121bc <lcdSetCursorPosition+0x54>)
 801218e:	5cd2      	ldrb	r2, [r2, r3]
 8012190:	79fb      	ldrb	r3, [r7, #7]
 8012192:	4413      	add	r3, r2
 8012194:	b2db      	uxtb	r3, r3
 8012196:	b25b      	sxtb	r3, r3
 8012198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801219c:	b25b      	sxtb	r3, r3
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80121a2:	f107 030f 	add.w	r3, r7, #15
 80121a6:	4619      	mov	r1, r3
 80121a8:	2000      	movs	r0, #0
 80121aa:	f000 f82b 	bl	8012204 <lcdWriteByte>
 80121ae:	4603      	mov	r3, r0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	200000a4 	.word	0x200000a4
 80121bc:	0801aaf8 	.word	0x0801aaf8

080121c0 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 80121cc:	2300      	movs	r3, #0
 80121ce:	73fb      	strb	r3, [r7, #15]
 80121d0:	e00e      	b.n	80121f0 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 80121d2:	7bfb      	ldrb	r3, [r7, #15]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	4413      	add	r3, r2
 80121d8:	4619      	mov	r1, r3
 80121da:	2001      	movs	r0, #1
 80121dc:	f000 f812 	bl	8012204 <lcdWriteByte>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <lcdPrintStr+0x2a>
            return false;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e007      	b.n	80121fa <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 80121ea:	7bfb      	ldrb	r3, [r7, #15]
 80121ec:	3301      	adds	r3, #1
 80121ee:	73fb      	strb	r3, [r7, #15]
 80121f0:	7bfa      	ldrb	r2, [r7, #15]
 80121f2:	78fb      	ldrb	r3, [r7, #3]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d3ec      	bcc.n	80121d2 <lcdPrintStr+0x12>
        }
    }

    return true;
 80121f8:	2301      	movs	r3, #1
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
	...

08012204 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	4603      	mov	r3, r0
 801220c:	6039      	str	r1, [r7, #0]
 801220e:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8012210:	4b33      	ldr	r3, [pc, #204]	; (80122e0 <lcdWriteByte+0xdc>)
 8012212:	79da      	ldrb	r2, [r3, #7]
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	4313      	orrs	r3, r2
 8012218:	b2da      	uxtb	r2, r3
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	f023 030f 	bic.w	r3, r3, #15
 8012222:	b2db      	uxtb	r3, r3
 8012224:	4313      	orrs	r3, r2
 8012226:	b2db      	uxtb	r3, r3
 8012228:	f043 0304 	orr.w	r3, r3, #4
 801222c:	b2da      	uxtb	r2, r3
 801222e:	4b2d      	ldr	r3, [pc, #180]	; (80122e4 <lcdWriteByte+0xe0>)
 8012230:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8012232:	4b2c      	ldr	r3, [pc, #176]	; (80122e4 <lcdWriteByte+0xe0>)
 8012234:	781a      	ldrb	r2, [r3, #0]
 8012236:	4b2b      	ldr	r3, [pc, #172]	; (80122e4 <lcdWriteByte+0xe0>)
 8012238:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 801223a:	4b29      	ldr	r3, [pc, #164]	; (80122e0 <lcdWriteByte+0xdc>)
 801223c:	79da      	ldrb	r2, [r3, #7]
 801223e:	79fb      	ldrb	r3, [r7, #7]
 8012240:	4313      	orrs	r3, r2
 8012242:	b2db      	uxtb	r3, r3
 8012244:	b25a      	sxtb	r2, r3
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	b25b      	sxtb	r3, r3
 801224c:	f023 030f 	bic.w	r3, r3, #15
 8012250:	b25b      	sxtb	r3, r3
 8012252:	4313      	orrs	r3, r2
 8012254:	b25b      	sxtb	r3, r3
 8012256:	b2da      	uxtb	r2, r3
 8012258:	4b22      	ldr	r3, [pc, #136]	; (80122e4 <lcdWriteByte+0xe0>)
 801225a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 801225c:	4b20      	ldr	r3, [pc, #128]	; (80122e0 <lcdWriteByte+0xdc>)
 801225e:	79da      	ldrb	r2, [r3, #7]
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	4313      	orrs	r3, r2
 8012264:	b2da      	uxtb	r2, r3
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	011b      	lsls	r3, r3, #4
 801226c:	b2db      	uxtb	r3, r3
 801226e:	4313      	orrs	r3, r2
 8012270:	b2db      	uxtb	r3, r3
 8012272:	f043 0304 	orr.w	r3, r3, #4
 8012276:	b2da      	uxtb	r2, r3
 8012278:	4b1a      	ldr	r3, [pc, #104]	; (80122e4 <lcdWriteByte+0xe0>)
 801227a:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 801227c:	4b19      	ldr	r3, [pc, #100]	; (80122e4 <lcdWriteByte+0xe0>)
 801227e:	78da      	ldrb	r2, [r3, #3]
 8012280:	4b18      	ldr	r3, [pc, #96]	; (80122e4 <lcdWriteByte+0xe0>)
 8012282:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8012284:	4b16      	ldr	r3, [pc, #88]	; (80122e0 <lcdWriteByte+0xdc>)
 8012286:	79da      	ldrb	r2, [r3, #7]
 8012288:	79fb      	ldrb	r3, [r7, #7]
 801228a:	4313      	orrs	r3, r2
 801228c:	b2db      	uxtb	r3, r3
 801228e:	b25a      	sxtb	r2, r3
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	011b      	lsls	r3, r3, #4
 8012296:	b25b      	sxtb	r3, r3
 8012298:	4313      	orrs	r3, r2
 801229a:	b25b      	sxtb	r3, r3
 801229c:	b2da      	uxtb	r2, r3
 801229e:	4b11      	ldr	r3, [pc, #68]	; (80122e4 <lcdWriteByte+0xe0>)
 80122a0:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80122a2:	4b0f      	ldr	r3, [pc, #60]	; (80122e0 <lcdWriteByte+0xdc>)
 80122a4:	6818      	ldr	r0, [r3, #0]
 80122a6:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <lcdWriteByte+0xdc>)
 80122a8:	799b      	ldrb	r3, [r3, #6]
 80122aa:	b299      	uxth	r1, r3
 80122ac:	2306      	movs	r3, #6
 80122ae:	4a0d      	ldr	r2, [pc, #52]	; (80122e4 <lcdWriteByte+0xe0>)
 80122b0:	f002 f978 	bl	80145a4 <HAL_I2C_Master_Transmit_DMA>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d004      	beq.n	80122c4 <lcdWriteByte+0xc0>
        return false;
 80122ba:	2300      	movs	r3, #0
 80122bc:	e00b      	b.n	80122d6 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80122be:	2001      	movs	r0, #1
 80122c0:	f006 f998 	bl	80185f4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80122c4:	4b06      	ldr	r3, [pc, #24]	; (80122e0 <lcdWriteByte+0xdc>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4618      	mov	r0, r3
 80122ca:	f002 fcfd 	bl	8014cc8 <HAL_I2C_GetState>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b20      	cmp	r3, #32
 80122d2:	d1f4      	bne.n	80122be <lcdWriteByte+0xba>
    }

    return true;
 80122d4:	2301      	movs	r3, #1
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	200000a4 	.word	0x200000a4
 80122e4:	2000009c 	.word	0x2000009c

080122e8 <menuMainMenu>:
uint32_t mainMenuHelpLastTick = 0;
uint8_t mainMenuCurrentMenuIndex = 0;

void menuMainMenu(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b090      	sub	sp, #64	; 0x40
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6039      	str	r1, [r7, #0]
 80122f0:	4611      	mov	r1, r2
 80122f2:	461a      	mov	r2, r3
 80122f4:	4603      	mov	r3, r0
 80122f6:	80fb      	strh	r3, [r7, #6]
 80122f8:	460b      	mov	r3, r1
 80122fa:	717b      	strb	r3, [r7, #5]
 80122fc:	4613      	mov	r3, r2
 80122fe:	713b      	strb	r3, [r7, #4]
	//Render menu
	if (mainMenuCurrentMenuIndex == 0)
 8012300:	4b8b      	ldr	r3, [pc, #556]	; (8012530 <menuMainMenu+0x248>)
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d102      	bne.n	801230e <menuMainMenu+0x26>
		mainMenuTopSelected = 1; //Top entry means top is selected
 8012308:	4b8a      	ldr	r3, [pc, #552]	; (8012534 <menuMainMenu+0x24c>)
 801230a:	2201      	movs	r2, #1
 801230c:	701a      	strb	r2, [r3, #0]
	if (mainMenuCurrentMenuIndex == menuNumEntries - 1)
 801230e:	4b88      	ldr	r3, [pc, #544]	; (8012530 <menuMainMenu+0x248>)
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	461a      	mov	r2, r3
 8012314:	4b88      	ldr	r3, [pc, #544]	; (8012538 <menuMainMenu+0x250>)
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	3b01      	subs	r3, #1
 801231a:	429a      	cmp	r2, r3
 801231c:	d102      	bne.n	8012324 <menuMainMenu+0x3c>
		mainMenuTopSelected = 0; //Bottom entry means bottom is selected
 801231e:	4b85      	ldr	r3, [pc, #532]	; (8012534 <menuMainMenu+0x24c>)
 8012320:	2200      	movs	r2, #0
 8012322:	701a      	strb	r2, [r3, #0]

	uint8_t otherOptionPosition = mainMenuCurrentMenuIndex
			+ (mainMenuTopSelected ? 1 : -1);
 8012324:	4b83      	ldr	r3, [pc, #524]	; (8012534 <menuMainMenu+0x24c>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <menuMainMenu+0x48>
 801232c:	2201      	movs	r2, #1
 801232e:	e000      	b.n	8012332 <menuMainMenu+0x4a>
 8012330:	22ff      	movs	r2, #255	; 0xff
 8012332:	4b7f      	ldr	r3, [pc, #508]	; (8012530 <menuMainMenu+0x248>)
 8012334:	781b      	ldrb	r3, [r3, #0]
	uint8_t otherOptionPosition = mainMenuCurrentMenuIndex
 8012336:	4413      	add	r3, r2
 8012338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	struct menuEntry *currentOption = &menuItems[mainMenuCurrentMenuIndex];
 801233c:	4b7c      	ldr	r3, [pc, #496]	; (8012530 <menuMainMenu+0x248>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	461a      	mov	r2, r3
 8012342:	2354      	movs	r3, #84	; 0x54
 8012344:	fb03 f302 	mul.w	r3, r3, r2
 8012348:	4a7c      	ldr	r2, [pc, #496]	; (801253c <menuMainMenu+0x254>)
 801234a:	4413      	add	r3, r2
 801234c:	63bb      	str	r3, [r7, #56]	; 0x38
	struct menuEntry *otherOption = &menuItems[otherOptionPosition];
 801234e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012352:	2254      	movs	r2, #84	; 0x54
 8012354:	fb02 f303 	mul.w	r3, r2, r3
 8012358:	4a78      	ldr	r2, [pc, #480]	; (801253c <menuMainMenu+0x254>)
 801235a:	4413      	add	r3, r2
 801235c:	637b      	str	r3, [r7, #52]	; 0x34

	char currentOptionLine[SCREEN_CSTR_WIDTH]; //Current menu entry pointed to by menuPos
	char otherLine[SCREEN_CSTR_WIDTH]; //Also holds help messages

	sprintf(currentOptionLine, ">%s", currentOption->name);
 801235e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012360:	f107 031c 	add.w	r3, r7, #28
 8012364:	4976      	ldr	r1, [pc, #472]	; (8012540 <menuMainMenu+0x258>)
 8012366:	4618      	mov	r0, r3
 8012368:	f007 fe26 	bl	8019fb8 <siprintf>

	if (buttonsHoldTime > 2000 && buttons == 0) //Show Help
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8012372:	d968      	bls.n	8012446 <menuMainMenu+0x15e>
 8012374:	88fb      	ldrh	r3, [r7, #6]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d165      	bne.n	8012446 <menuMainMenu+0x15e>
			{
		memset(otherLine, 0x20, sizeof(otherLine));
 801237a:	f107 0308 	add.w	r3, r7, #8
 801237e:	2211      	movs	r2, #17
 8012380:	2120      	movs	r1, #32
 8012382:	4618      	mov	r0, r3
 8012384:	f007 fe0f 	bl	8019fa6 <memset>

		if (!mainMenuHelpLastTick) //Init
 8012388:	4b6e      	ldr	r3, [pc, #440]	; (8012544 <menuMainMenu+0x25c>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10a      	bne.n	80123a6 <menuMainMenu+0xbe>
		{
			mainMenuHelpPause = 2;
 8012390:	4b6d      	ldr	r3, [pc, #436]	; (8012548 <menuMainMenu+0x260>)
 8012392:	2202      	movs	r2, #2
 8012394:	601a      	str	r2, [r3, #0]
			mainMenuHelpIndex = 0;
 8012396:	4b6d      	ldr	r3, [pc, #436]	; (801254c <menuMainMenu+0x264>)
 8012398:	2200      	movs	r2, #0
 801239a:	601a      	str	r2, [r3, #0]
			mainMenuHelpLastTick = HAL_GetTick();
 801239c:	f000 ff12 	bl	80131c4 <HAL_GetTick>
 80123a0:	4602      	mov	r2, r0
 80123a2:	4b68      	ldr	r3, [pc, #416]	; (8012544 <menuMainMenu+0x25c>)
 80123a4:	601a      	str	r2, [r3, #0]
		}

		uint32_t helpLastScrolled = HAL_GetTick() - mainMenuHelpLastTick;
 80123a6:	f000 ff0d 	bl	80131c4 <HAL_GetTick>
 80123aa:	4602      	mov	r2, r0
 80123ac:	4b65      	ldr	r3, [pc, #404]	; (8012544 <menuMainMenu+0x25c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	633b      	str	r3, [r7, #48]	; 0x30
		if (helpLastScrolled > 350) //Tick help another char every 350ms, it's slow but any faster the LCD blurs
 80123b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b6:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80123ba:	d936      	bls.n	801242a <menuMainMenu+0x142>
				{
			mainMenuHelpLastTick = HAL_GetTick();
 80123bc:	f000 ff02 	bl	80131c4 <HAL_GetTick>
 80123c0:	4602      	mov	r2, r0
 80123c2:	4b60      	ldr	r3, [pc, #384]	; (8012544 <menuMainMenu+0x25c>)
 80123c4:	601a      	str	r2, [r3, #0]
			if (!mainMenuHelpPause)
 80123c6:	4b60      	ldr	r3, [pc, #384]	; (8012548 <menuMainMenu+0x260>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d113      	bne.n	80123f6 <menuMainMenu+0x10e>
			{
				mainMenuHelpIndex += 1;
 80123ce:	4b5f      	ldr	r3, [pc, #380]	; (801254c <menuMainMenu+0x264>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	3301      	adds	r3, #1
 80123d4:	4a5d      	ldr	r2, [pc, #372]	; (801254c <menuMainMenu+0x264>)
 80123d6:	6013      	str	r3, [r2, #0]
				if (mainMenuHelpIndex > strlen(currentOption->help) - 17)
 80123d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123da:	3310      	adds	r3, #16
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fd fe39 	bl	8010054 <strlen>
 80123e2:	4603      	mov	r3, r0
 80123e4:	3b11      	subs	r3, #17
 80123e6:	4a59      	ldr	r2, [pc, #356]	; (801254c <menuMainMenu+0x264>)
 80123e8:	6812      	ldr	r2, [r2, #0]
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d21d      	bcs.n	801242a <menuMainMenu+0x142>
				{
					mainMenuHelpPause = 2; //Pause on end
 80123ee:	4b56      	ldr	r3, [pc, #344]	; (8012548 <menuMainMenu+0x260>)
 80123f0:	2202      	movs	r2, #2
 80123f2:	601a      	str	r2, [r3, #0]
 80123f4:	e019      	b.n	801242a <menuMainMenu+0x142>
				}
			}
			else
			{
				mainMenuHelpPause--;
 80123f6:	4b54      	ldr	r3, [pc, #336]	; (8012548 <menuMainMenu+0x260>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	3b01      	subs	r3, #1
 80123fc:	4a52      	ldr	r2, [pc, #328]	; (8012548 <menuMainMenu+0x260>)
 80123fe:	6013      	str	r3, [r2, #0]
				if (!mainMenuHelpPause)
 8012400:	4b51      	ldr	r3, [pc, #324]	; (8012548 <menuMainMenu+0x260>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d110      	bne.n	801242a <menuMainMenu+0x142>
				{
					if (mainMenuHelpIndex > strlen(currentOption->help) - 17)
 8012408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240a:	3310      	adds	r3, #16
 801240c:	4618      	mov	r0, r3
 801240e:	f7fd fe21 	bl	8010054 <strlen>
 8012412:	4603      	mov	r3, r0
 8012414:	3b11      	subs	r3, #17
 8012416:	4a4d      	ldr	r2, [pc, #308]	; (801254c <menuMainMenu+0x264>)
 8012418:	6812      	ldr	r2, [r2, #0]
 801241a:	4293      	cmp	r3, r2
 801241c:	d205      	bcs.n	801242a <menuMainMenu+0x142>
					{
						mainMenuHelpIndex = 0; //Go to start on unpause
 801241e:	4b4b      	ldr	r3, [pc, #300]	; (801254c <menuMainMenu+0x264>)
 8012420:	2200      	movs	r2, #0
 8012422:	601a      	str	r2, [r3, #0]
						mainMenuHelpPause = 2; //Pause on start
 8012424:	4b48      	ldr	r3, [pc, #288]	; (8012548 <menuMainMenu+0x260>)
 8012426:	2202      	movs	r2, #2
 8012428:	601a      	str	r2, [r3, #0]
				}
			}

		}

		memcpy(otherLine, currentOption->help + mainMenuHelpIndex,
 801242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242c:	3310      	adds	r3, #16
 801242e:	4a47      	ldr	r2, [pc, #284]	; (801254c <menuMainMenu+0x264>)
 8012430:	6812      	ldr	r2, [r2, #0]
 8012432:	1899      	adds	r1, r3, r2
 8012434:	f107 0308 	add.w	r3, r7, #8
 8012438:	2210      	movs	r2, #16
 801243a:	4618      	mov	r0, r3
 801243c:	f007 fda8 	bl	8019f90 <memcpy>
				16);
		otherLine[16] = 0;
 8012440:	2300      	movs	r3, #0
 8012442:	763b      	strb	r3, [r7, #24]
			{
 8012444:	e00c      	b.n	8012460 <menuMainMenu+0x178>
	} else //Show the other option
	{
		sprintf(otherLine," %s",otherOption->name);
 8012446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012448:	f107 0308 	add.w	r3, r7, #8
 801244c:	4940      	ldr	r1, [pc, #256]	; (8012550 <menuMainMenu+0x268>)
 801244e:	4618      	mov	r0, r3
 8012450:	f007 fdb2 	bl	8019fb8 <siprintf>
		mainMenuHelpIndex = 0;
 8012454:	4b3d      	ldr	r3, [pc, #244]	; (801254c <menuMainMenu+0x264>)
 8012456:	2200      	movs	r2, #0
 8012458:	601a      	str	r2, [r3, #0]
		mainMenuHelpLastTick = 0;
 801245a:	4b3a      	ldr	r3, [pc, #232]	; (8012544 <menuMainMenu+0x25c>)
 801245c:	2200      	movs	r2, #0
 801245e:	601a      	str	r2, [r3, #0]
	}

	if (mainMenuTopSelected) {
 8012460:	4b34      	ldr	r3, [pc, #208]	; (8012534 <menuMainMenu+0x24c>)
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00a      	beq.n	801247e <menuMainMenu+0x196>
		screenWriteTopLine(currentOptionLine);
 8012468:	f107 031c 	add.w	r3, r7, #28
 801246c:	4618      	mov	r0, r3
 801246e:	f000 fce3 	bl	8012e38 <screenWriteTopLine>
		screenWriteBottomLine(otherLine);
 8012472:	f107 0308 	add.w	r3, r7, #8
 8012476:	4618      	mov	r0, r3
 8012478:	f000 fd12 	bl	8012ea0 <screenWriteBottomLine>
 801247c:	e009      	b.n	8012492 <menuMainMenu+0x1aa>
	} else {
		screenWriteTopLine(otherLine);
 801247e:	f107 0308 	add.w	r3, r7, #8
 8012482:	4618      	mov	r0, r3
 8012484:	f000 fcd8 	bl	8012e38 <screenWriteTopLine>
		screenWriteBottomLine(currentOptionLine);
 8012488:	f107 031c 	add.w	r3, r7, #28
 801248c:	4618      	mov	r0, r3
 801248e:	f000 fd07 	bl	8012ea0 <screenWriteBottomLine>
	}

	//End Render Menu

	//Process Buttons
	if (buttonsChanged) {
 8012492:	797b      	ldrb	r3, [r7, #5]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d046      	beq.n	8012526 <menuMainMenu+0x23e>
		if (buttons & BUTTON_UP) //Scroll up menu
 8012498:	88fb      	ldrh	r3, [r7, #6]
 801249a:	f003 0310 	and.w	r3, r3, #16
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00d      	beq.n	80124be <menuMainMenu+0x1d6>
		{
			if (mainMenuCurrentMenuIndex > 0) {
 80124a2:	4b23      	ldr	r3, [pc, #140]	; (8012530 <menuMainMenu+0x248>)
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d03d      	beq.n	8012526 <menuMainMenu+0x23e>
				mainMenuCurrentMenuIndex--;
 80124aa:	4b21      	ldr	r3, [pc, #132]	; (8012530 <menuMainMenu+0x248>)
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	3b01      	subs	r3, #1
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	4b1f      	ldr	r3, [pc, #124]	; (8012530 <menuMainMenu+0x248>)
 80124b4:	701a      	strb	r2, [r3, #0]
				mainMenuTopSelected = 1;
 80124b6:	4b1f      	ldr	r3, [pc, #124]	; (8012534 <menuMainMenu+0x24c>)
 80124b8:	2201      	movs	r2, #1
 80124ba:	701a      	strb	r2, [r3, #0]
		} else if (buttons & BUTTON_B) //Close menu
		{
			menuDeactivate(1);
		}
	}
}
 80124bc:	e033      	b.n	8012526 <menuMainMenu+0x23e>
		} else if (buttons & BUTTON_DOWN) //Scroll down menu
 80124be:	88fb      	ldrh	r3, [r7, #6]
 80124c0:	f003 0320 	and.w	r3, r3, #32
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d011      	beq.n	80124ec <menuMainMenu+0x204>
			if (mainMenuCurrentMenuIndex < menuNumEntries - 1) {
 80124c8:	4b19      	ldr	r3, [pc, #100]	; (8012530 <menuMainMenu+0x248>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	461a      	mov	r2, r3
 80124ce:	4b1a      	ldr	r3, [pc, #104]	; (8012538 <menuMainMenu+0x250>)
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	3b01      	subs	r3, #1
 80124d4:	429a      	cmp	r2, r3
 80124d6:	da26      	bge.n	8012526 <menuMainMenu+0x23e>
				mainMenuCurrentMenuIndex++;
 80124d8:	4b15      	ldr	r3, [pc, #84]	; (8012530 <menuMainMenu+0x248>)
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	3301      	adds	r3, #1
 80124de:	b2da      	uxtb	r2, r3
 80124e0:	4b13      	ldr	r3, [pc, #76]	; (8012530 <menuMainMenu+0x248>)
 80124e2:	701a      	strb	r2, [r3, #0]
				mainMenuTopSelected = 0;
 80124e4:	4b13      	ldr	r3, [pc, #76]	; (8012534 <menuMainMenu+0x24c>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	701a      	strb	r2, [r3, #0]
}
 80124ea:	e01c      	b.n	8012526 <menuMainMenu+0x23e>
		} else if (buttons & BUTTON_A) //Select an option
 80124ec:	88fb      	ldrh	r3, [r7, #6]
 80124ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00f      	beq.n	8012516 <menuMainMenu+0x22e>
			menuActiveSubmenuCallback = menuItems[mainMenuCurrentMenuIndex].callback;
 80124f6:	4b0e      	ldr	r3, [pc, #56]	; (8012530 <menuMainMenu+0x248>)
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	4619      	mov	r1, r3
 80124fc:	4a0f      	ldr	r2, [pc, #60]	; (801253c <menuMainMenu+0x254>)
 80124fe:	2354      	movs	r3, #84	; 0x54
 8012500:	fb03 f301 	mul.w	r3, r3, r1
 8012504:	4413      	add	r3, r2
 8012506:	3350      	adds	r3, #80	; 0x50
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4a12      	ldr	r2, [pc, #72]	; (8012554 <menuMainMenu+0x26c>)
 801250c:	6013      	str	r3, [r2, #0]
			mainMenuSubmenuFirstRun = 1;
 801250e:	4b12      	ldr	r3, [pc, #72]	; (8012558 <menuMainMenu+0x270>)
 8012510:	2201      	movs	r2, #1
 8012512:	701a      	strb	r2, [r3, #0]
}
 8012514:	e007      	b.n	8012526 <menuMainMenu+0x23e>
		} else if (buttons & BUTTON_B) //Close menu
 8012516:	88fb      	ldrh	r3, [r7, #6]
 8012518:	f003 0301 	and.w	r3, r3, #1
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <menuMainMenu+0x23e>
			menuDeactivate(1);
 8012520:	2001      	movs	r0, #1
 8012522:	f000 fb15 	bl	8012b50 <menuDeactivate>
}
 8012526:	bf00      	nop
 8012528:	3740      	adds	r7, #64	; 0x40
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	200000d0 	.word	0x200000d0
 8012534:	20000004 	.word	0x20000004
 8012538:	200000b0 	.word	0x200000b0
 801253c:	2000db94 	.word	0x2000db94
 8012540:	0801a828 	.word	0x0801a828
 8012544:	200000cc 	.word	0x200000cc
 8012548:	200000c8 	.word	0x200000c8
 801254c:	200000c4 	.word	0x200000c4
 8012550:	0801a82c 	.word	0x0801a82c
 8012554:	200000bc 	.word	0x200000bc
 8012558:	200000c0 	.word	0x200000c0

0801255c <menuRebindKeys>:

uint16_t menuRebindKeyFirstKey = 0;
uint16_t menuRebindKeyFirstKeyReleased = 0;

void menuRebindKeys(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 801255c:	b5b0      	push	{r4, r5, r7, lr}
 801255e:	b092      	sub	sp, #72	; 0x48
 8012560:	af00      	add	r7, sp, #0
 8012562:	6039      	str	r1, [r7, #0]
 8012564:	4611      	mov	r1, r2
 8012566:	461a      	mov	r2, r3
 8012568:	4603      	mov	r3, r0
 801256a:	80fb      	strh	r3, [r7, #6]
 801256c:	460b      	mov	r3, r1
 801256e:	717b      	strb	r3, [r7, #5]
 8012570:	4613      	mov	r3, r2
 8012572:	713b      	strb	r3, [r7, #4]

	//Process Buttons
	if (firstRun) {
 8012574:	793b      	ldrb	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d005      	beq.n	8012586 <menuRebindKeys+0x2a>
		menuRebindKeyFirstKey = 0;
 801257a:	4b43      	ldr	r3, [pc, #268]	; (8012688 <menuRebindKeys+0x12c>)
 801257c:	2200      	movs	r2, #0
 801257e:	801a      	strh	r2, [r3, #0]
		menuRebindKeyFirstKeyReleased = 0;
 8012580:	4b42      	ldr	r3, [pc, #264]	; (801268c <menuRebindKeys+0x130>)
 8012582:	2200      	movs	r2, #0
 8012584:	801a      	strh	r2, [r3, #0]
	}
	if (!menuRebindKeyFirstKeyReleased && buttonsChanged) //If the first bind was held for 1s then released reset the ignore flag
 8012586:	4b41      	ldr	r3, [pc, #260]	; (801268c <menuRebindKeys+0x130>)
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d105      	bne.n	801259a <menuRebindKeys+0x3e>
 801258e:	797b      	ldrb	r3, [r7, #5]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d002      	beq.n	801259a <menuRebindKeys+0x3e>
			{
		menuRebindKeyFirstKeyReleased = 1;
 8012594:	4b3d      	ldr	r3, [pc, #244]	; (801268c <menuRebindKeys+0x130>)
 8012596:	2201      	movs	r2, #1
 8012598:	801a      	strh	r2, [r3, #0]
	}

	if (buttonsHoldTime > 1000 && buttons) //Wait for a button combo to be held for 1s before registering it
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80125a0:	d932      	bls.n	8012608 <menuRebindKeys+0xac>
 80125a2:	88fb      	ldrh	r3, [r7, #6]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d02f      	beq.n	8012608 <menuRebindKeys+0xac>
			{
		if (!menuRebindKeyFirstKey) //If the first key hasn't been chosen yet mark it and set a flag to ignore keys until the input changes
 80125a8:	4b37      	ldr	r3, [pc, #220]	; (8012688 <menuRebindKeys+0x12c>)
 80125aa:	881b      	ldrh	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <menuRebindKeys+0x62>
		{
			menuRebindKeyFirstKey = buttons;
 80125b0:	4a35      	ldr	r2, [pc, #212]	; (8012688 <menuRebindKeys+0x12c>)
 80125b2:	88fb      	ldrh	r3, [r7, #6]
 80125b4:	8013      	strh	r3, [r2, #0]
			menuRebindKeyFirstKeyReleased = 0;
 80125b6:	4b35      	ldr	r3, [pc, #212]	; (801268c <menuRebindKeys+0x130>)
 80125b8:	2200      	movs	r2, #0
 80125ba:	801a      	strh	r2, [r3, #0]
 80125bc:	e024      	b.n	8012608 <menuRebindKeys+0xac>
		} else if (menuRebindKeyFirstKeyReleased) //The first key was pressed and released, take the second and save the binding
 80125be:	4b33      	ldr	r3, [pc, #204]	; (801268c <menuRebindKeys+0x130>)
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d020      	beq.n	8012608 <menuRebindKeys+0xac>
		{
			char bottomLine[SCREEN_CSTR_WIDTH];
			buttonsToString(bottomLine, buttons, "\xA5");
 80125c6:	88f9      	ldrh	r1, [r7, #6]
 80125c8:	f107 030c 	add.w	r3, r7, #12
 80125cc:	4a30      	ldr	r2, [pc, #192]	; (8012690 <menuRebindKeys+0x134>)
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fe fe56 	bl	8011280 <buttonsToString>
			screenWriteBottomLine(bottomLine);
 80125d4:	f107 030c 	add.w	r3, r7, #12
 80125d8:	4618      	mov	r0, r3
 80125da:	f000 fc61 	bl	8012ea0 <screenWriteBottomLine>
			bindKey(menuRebindKeyFirstKey, buttons, 0);
 80125de:	4b2a      	ldr	r3, [pc, #168]	; (8012688 <menuRebindKeys+0x12c>)
 80125e0:	881b      	ldrh	r3, [r3, #0]
 80125e2:	88f9      	ldrh	r1, [r7, #6]
 80125e4:	2200      	movs	r2, #0
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fe fbba 	bl	8010d60 <bindKey>
			screenWriteTopLine("Binding Saved");
 80125ec:	4829      	ldr	r0, [pc, #164]	; (8012694 <menuRebindKeys+0x138>)
 80125ee:	f000 fc23 	bl	8012e38 <screenWriteTopLine>
			screenWriteBottomLine("");
 80125f2:	4829      	ldr	r0, [pc, #164]	; (8012698 <menuRebindKeys+0x13c>)
 80125f4:	f000 fc54 	bl	8012ea0 <screenWriteBottomLine>
			menuDeactivate(0);
 80125f8:	2000      	movs	r0, #0
 80125fa:	f000 faa9 	bl	8012b50 <menuDeactivate>
			screenClearIn(2);
 80125fe:	2002      	movs	r0, #2
 8012600:	f000 fbdc 	bl	8012dbc <screenClearIn>
			return;
 8012604:	bf00      	nop
 8012606:	e03c      	b.n	8012682 <menuRebindKeys+0x126>
	}

	//Render
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	if (!menuRebindKeyFirstKey) //If the first key isn't known yet
 8012608:	4b1f      	ldr	r3, [pc, #124]	; (8012688 <menuRebindKeys+0x12c>)
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d10f      	bne.n	8012630 <menuRebindKeys+0xd4>
	{
		buttonsToString(topLine, buttons, "\x7F");
 8012610:	88f9      	ldrh	r1, [r7, #6]
 8012612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012616:	4a21      	ldr	r2, [pc, #132]	; (801269c <menuRebindKeys+0x140>)
 8012618:	4618      	mov	r0, r3
 801261a:	f7fe fe31 	bl	8011280 <buttonsToString>
		strcpy(bottomLine, "Hold Input Btns");
 801261e:	f107 0320 	add.w	r3, r7, #32
 8012622:	4a1f      	ldr	r2, [pc, #124]	; (80126a0 <menuRebindKeys+0x144>)
 8012624:	461c      	mov	r4, r3
 8012626:	4613      	mov	r3, r2
 8012628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801262a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801262e:	e01e      	b.n	801266e <menuRebindKeys+0x112>
	} else {
		buttonsToString(topLine, menuRebindKeyFirstKey, "\xA5");
 8012630:	4b15      	ldr	r3, [pc, #84]	; (8012688 <menuRebindKeys+0x12c>)
 8012632:	8819      	ldrh	r1, [r3, #0]
 8012634:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012638:	4a15      	ldr	r2, [pc, #84]	; (8012690 <menuRebindKeys+0x134>)
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe fe20 	bl	8011280 <buttonsToString>
		if (buttons && menuRebindKeyFirstKeyReleased) {
 8012640:	88fb      	ldrh	r3, [r7, #6]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d00b      	beq.n	801265e <menuRebindKeys+0x102>
 8012646:	4b11      	ldr	r3, [pc, #68]	; (801268c <menuRebindKeys+0x130>)
 8012648:	881b      	ldrh	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d007      	beq.n	801265e <menuRebindKeys+0x102>
			buttonsToString(bottomLine, buttons, "\x7E");
 801264e:	88f9      	ldrh	r1, [r7, #6]
 8012650:	f107 0320 	add.w	r3, r7, #32
 8012654:	4a13      	ldr	r2, [pc, #76]	; (80126a4 <menuRebindKeys+0x148>)
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe fe12 	bl	8011280 <buttonsToString>
 801265c:	e007      	b.n	801266e <menuRebindKeys+0x112>
		} else {
			strcpy(bottomLine, "Hold Output Btns");
 801265e:	4b12      	ldr	r3, [pc, #72]	; (80126a8 <menuRebindKeys+0x14c>)
 8012660:	f107 0420 	add.w	r4, r7, #32
 8012664:	461d      	mov	r5, r3
 8012666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801266a:	682b      	ldr	r3, [r5, #0]
 801266c:	7023      	strb	r3, [r4, #0]
		}
	}
	screenWriteTopLine(topLine);
 801266e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012672:	4618      	mov	r0, r3
 8012674:	f000 fbe0 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 8012678:	f107 0320 	add.w	r3, r7, #32
 801267c:	4618      	mov	r0, r3
 801267e:	f000 fc0f 	bl	8012ea0 <screenWriteBottomLine>
}
 8012682:	3748      	adds	r7, #72	; 0x48
 8012684:	46bd      	mov	sp, r7
 8012686:	bdb0      	pop	{r4, r5, r7, pc}
 8012688:	200000d2 	.word	0x200000d2
 801268c:	200000d4 	.word	0x200000d4
 8012690:	0801a830 	.word	0x0801a830
 8012694:	0801a834 	.word	0x0801a834
 8012698:	0801a844 	.word	0x0801a844
 801269c:	0801a848 	.word	0x0801a848
 80126a0:	0801a84c 	.word	0x0801a84c
 80126a4:	0801a85c 	.word	0x0801a85c
 80126a8:	0801a860 	.word	0x0801a860

080126ac <menuViewEditBinds>:
//View binds/set rapid fire
uint8_t menuViewEditBindsIndex = 0;
uint8_t menuViewEditBindsCyclingRapidFire = 0;

void menuViewEditBinds(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b08f      	sub	sp, #60	; 0x3c
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6039      	str	r1, [r7, #0]
 80126b4:	4611      	mov	r1, r2
 80126b6:	461a      	mov	r2, r3
 80126b8:	4603      	mov	r3, r0
 80126ba:	80fb      	strh	r3, [r7, #6]
 80126bc:	460b      	mov	r3, r1
 80126be:	717b      	strb	r3, [r7, #5]
 80126c0:	4613      	mov	r3, r2
 80126c2:	713b      	strb	r3, [r7, #4]
	if (firstRun) {
 80126c4:	793b      	ldrb	r3, [r7, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d024      	beq.n	8012714 <menuViewEditBinds+0x68>
		menuViewEditBindsIndex = 0;
 80126ca:	4b63      	ldr	r3, [pc, #396]	; (8012858 <menuViewEditBinds+0x1ac>)
 80126cc:	2200      	movs	r2, #0
 80126ce:	701a      	strb	r2, [r3, #0]
		struct rebindEntry *bind = &currentProfile[menuViewEditBindsIndex];
 80126d0:	4b62      	ldr	r3, [pc, #392]	; (801285c <menuViewEditBinds+0x1b0>)
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	4b60      	ldr	r3, [pc, #384]	; (8012858 <menuViewEditBinds+0x1ac>)
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	4619      	mov	r1, r3
 80126da:	460b      	mov	r3, r1
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	440b      	add	r3, r1
 80126e0:	005b      	lsls	r3, r3, #1
 80126e2:	4413      	add	r3, r2
 80126e4:	637b      	str	r3, [r7, #52]	; 0x34
		if (bind->buttonsPressed == 65535 || bind->buttonsPressed == 0) //There's no binds
 80126e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d003      	beq.n	80126fa <menuViewEditBinds+0x4e>
 80126f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10c      	bne.n	8012714 <menuViewEditBinds+0x68>
				{
			screenWriteTopLine("No binds to");
 80126fa:	4859      	ldr	r0, [pc, #356]	; (8012860 <menuViewEditBinds+0x1b4>)
 80126fc:	f000 fb9c 	bl	8012e38 <screenWriteTopLine>
			screenWriteBottomLine("display");
 8012700:	4858      	ldr	r0, [pc, #352]	; (8012864 <menuViewEditBinds+0x1b8>)
 8012702:	f000 fbcd 	bl	8012ea0 <screenWriteBottomLine>
			menuDeactivate(0);
 8012706:	2000      	movs	r0, #0
 8012708:	f000 fa22 	bl	8012b50 <menuDeactivate>
			screenClearIn(2);
 801270c:	2002      	movs	r0, #2
 801270e:	f000 fb55 	bl	8012dbc <screenClearIn>
			return;
 8012712:	e09d      	b.n	8012850 <menuViewEditBinds+0x1a4>
		}
	}

	//Render
	struct rebindEntry *bind = &currentProfile[menuViewEditBindsIndex];
 8012714:	4b51      	ldr	r3, [pc, #324]	; (801285c <menuViewEditBinds+0x1b0>)
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	4b4f      	ldr	r3, [pc, #316]	; (8012858 <menuViewEditBinds+0x1ac>)
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	4619      	mov	r1, r3
 801271e:	460b      	mov	r3, r1
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	440b      	add	r3, r1
 8012724:	005b      	lsls	r3, r3, #1
 8012726:	4413      	add	r3, r2
 8012728:	633b      	str	r3, [r7, #48]	; 0x30
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	if (!menuViewEditBindsCyclingRapidFire) //If not showing rapid fire
 801272a:	4b4f      	ldr	r3, [pc, #316]	; (8012868 <menuViewEditBinds+0x1bc>)
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d110      	bne.n	8012754 <menuViewEditBinds+0xa8>
	{
		buttonsToString(topLine, bind->buttonsPressed, "\x7F");
 8012732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012734:	8819      	ldrh	r1, [r3, #0]
 8012736:	f107 031c 	add.w	r3, r7, #28
 801273a:	4a4c      	ldr	r2, [pc, #304]	; (801286c <menuViewEditBinds+0x1c0>)
 801273c:	4618      	mov	r0, r3
 801273e:	f7fe fd9f 	bl	8011280 <buttonsToString>
		buttonsToString(bottomLine, bind->buttonsToPress, "\x7E");
 8012742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012744:	8859      	ldrh	r1, [r3, #2]
 8012746:	f107 0308 	add.w	r3, r7, #8
 801274a:	4a49      	ldr	r2, [pc, #292]	; (8012870 <menuViewEditBinds+0x1c4>)
 801274c:	4618      	mov	r0, r3
 801274e:	f7fe fd97 	bl	8011280 <buttonsToString>
 8012752:	e01a      	b.n	801278a <menuViewEditBinds+0xde>
	} else {
		strcpy(topLine, "Rapid Fire:");
 8012754:	f107 031c 	add.w	r3, r7, #28
 8012758:	4a46      	ldr	r2, [pc, #280]	; (8012874 <menuViewEditBinds+0x1c8>)
 801275a:	ca07      	ldmia	r2, {r0, r1, r2}
 801275c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (bind->rapidFire)
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	791b      	ldrb	r3, [r3, #4]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00c      	beq.n	8012782 <menuViewEditBinds+0xd6>
			sprintf(bottomLine, "%ims", bind->rapidFire * RAPID_FIRE_BASE_TIME);
 8012768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276a:	791b      	ldrb	r3, [r3, #4]
 801276c:	461a      	mov	r2, r3
 801276e:	2396      	movs	r3, #150	; 0x96
 8012770:	fb03 f202 	mul.w	r2, r3, r2
 8012774:	f107 0308 	add.w	r3, r7, #8
 8012778:	493f      	ldr	r1, [pc, #252]	; (8012878 <menuViewEditBinds+0x1cc>)
 801277a:	4618      	mov	r0, r3
 801277c:	f007 fc1c 	bl	8019fb8 <siprintf>
 8012780:	e003      	b.n	801278a <menuViewEditBinds+0xde>
		else
			strcpy(bottomLine, "Off");
 8012782:	f107 0308 	add.w	r3, r7, #8
 8012786:	4a3d      	ldr	r2, [pc, #244]	; (801287c <menuViewEditBinds+0x1d0>)
 8012788:	601a      	str	r2, [r3, #0]
	}
	screenWriteTopLine(topLine);
 801278a:	f107 031c 	add.w	r3, r7, #28
 801278e:	4618      	mov	r0, r3
 8012790:	f000 fb52 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 8012794:	f107 0308 	add.w	r3, r7, #8
 8012798:	4618      	mov	r0, r3
 801279a:	f000 fb81 	bl	8012ea0 <screenWriteBottomLine>

	//Process Buttons
	if (menuViewEditBindsCyclingRapidFire && !(buttons & BUTTON_SELECT)
 801279e:	4b32      	ldr	r3, [pc, #200]	; (8012868 <menuViewEditBinds+0x1bc>)
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d00e      	beq.n	80127c4 <menuViewEditBinds+0x118>
 80127a6:	88fb      	ldrh	r3, [r7, #6]
 80127a8:	f003 0304 	and.w	r3, r3, #4
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d109      	bne.n	80127c4 <menuViewEditBinds+0x118>
			&& (buttons || buttonsHoldTime > 1000)) {
 80127b0:	88fb      	ldrh	r3, [r7, #6]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d103      	bne.n	80127be <menuViewEditBinds+0x112>
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80127bc:	d902      	bls.n	80127c4 <menuViewEditBinds+0x118>
		menuViewEditBindsCyclingRapidFire = 0;
 80127be:	4b2a      	ldr	r3, [pc, #168]	; (8012868 <menuViewEditBinds+0x1bc>)
 80127c0:	2200      	movs	r2, #0
 80127c2:	701a      	strb	r2, [r3, #0]
	}
	if (buttonsChanged) {
 80127c4:	797b      	ldrb	r3, [r7, #5]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d042      	beq.n	8012850 <menuViewEditBinds+0x1a4>
		if (buttons & BUTTON_UP) //Scroll up
 80127ca:	88fb      	ldrh	r3, [r7, #6]
 80127cc:	f003 0310 	and.w	r3, r3, #16
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00a      	beq.n	80127ea <menuViewEditBinds+0x13e>
		{
			if (menuViewEditBindsIndex > 0)
 80127d4:	4b20      	ldr	r3, [pc, #128]	; (8012858 <menuViewEditBinds+0x1ac>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d039      	beq.n	8012850 <menuViewEditBinds+0x1a4>
				menuViewEditBindsIndex--;
 80127dc:	4b1e      	ldr	r3, [pc, #120]	; (8012858 <menuViewEditBinds+0x1ac>)
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	3b01      	subs	r3, #1
 80127e2:	b2da      	uxtb	r2, r3
 80127e4:	4b1c      	ldr	r3, [pc, #112]	; (8012858 <menuViewEditBinds+0x1ac>)
 80127e6:	701a      	strb	r2, [r3, #0]
 80127e8:	e032      	b.n	8012850 <menuViewEditBinds+0x1a4>
		} else if (buttons & BUTTON_DOWN) //Scroll down
 80127ea:	88fb      	ldrh	r3, [r7, #6]
 80127ec:	f003 0320 	and.w	r3, r3, #32
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d00f      	beq.n	8012814 <menuViewEditBinds+0x168>
		{
			if (menuViewEditBindsIndex < bindGetBindCount() - 1) {
 80127f4:	4b18      	ldr	r3, [pc, #96]	; (8012858 <menuViewEditBinds+0x1ac>)
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	461c      	mov	r4, r3
 80127fa:	f7fe fa81 	bl	8010d00 <bindGetBindCount>
 80127fe:	4603      	mov	r3, r0
 8012800:	3b01      	subs	r3, #1
 8012802:	429c      	cmp	r4, r3
 8012804:	da24      	bge.n	8012850 <menuViewEditBinds+0x1a4>
				menuViewEditBindsIndex++;
 8012806:	4b14      	ldr	r3, [pc, #80]	; (8012858 <menuViewEditBinds+0x1ac>)
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	3301      	adds	r3, #1
 801280c:	b2da      	uxtb	r2, r3
 801280e:	4b12      	ldr	r3, [pc, #72]	; (8012858 <menuViewEditBinds+0x1ac>)
 8012810:	701a      	strb	r2, [r3, #0]
 8012812:	e01d      	b.n	8012850 <menuViewEditBinds+0x1a4>
			}
		} else if (buttons & BUTTON_SELECT) //Cycle rapid fire
 8012814:	88fb      	ldrh	r3, [r7, #6]
 8012816:	f003 0304 	and.w	r3, r3, #4
 801281a:	2b00      	cmp	r3, #0
 801281c:	d010      	beq.n	8012840 <menuViewEditBinds+0x194>
		{
			menuViewEditBindsCyclingRapidFire = 1;
 801281e:	4b12      	ldr	r3, [pc, #72]	; (8012868 <menuViewEditBinds+0x1bc>)
 8012820:	2201      	movs	r2, #1
 8012822:	701a      	strb	r2, [r3, #0]
			bindCycleRapidFire(&currentProfile[menuViewEditBindsIndex]);
 8012824:	4b0d      	ldr	r3, [pc, #52]	; (801285c <menuViewEditBinds+0x1b0>)
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	4b0b      	ldr	r3, [pc, #44]	; (8012858 <menuViewEditBinds+0x1ac>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	4619      	mov	r1, r3
 801282e:	460b      	mov	r3, r1
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	440b      	add	r3, r1
 8012834:	005b      	lsls	r3, r3, #1
 8012836:	4413      	add	r3, r2
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe fb0f 	bl	8010e5c <bindCycleRapidFire>
 801283e:	e007      	b.n	8012850 <menuViewEditBinds+0x1a4>
		} else if (buttons & BUTTON_B) //Close
 8012840:	88fb      	ldrh	r3, [r7, #6]
 8012842:	f003 0301 	and.w	r3, r3, #1
 8012846:	2b00      	cmp	r3, #0
 8012848:	d002      	beq.n	8012850 <menuViewEditBinds+0x1a4>
		{
			menuDeactivate(1);
 801284a:	2001      	movs	r0, #1
 801284c:	f000 f980 	bl	8012b50 <menuDeactivate>
		}
	}
}
 8012850:	373c      	adds	r7, #60	; 0x3c
 8012852:	46bd      	mov	sp, r7
 8012854:	bd90      	pop	{r4, r7, pc}
 8012856:	bf00      	nop
 8012858:	200000d6 	.word	0x200000d6
 801285c:	2000db90 	.word	0x2000db90
 8012860:	0801a874 	.word	0x0801a874
 8012864:	0801a880 	.word	0x0801a880
 8012868:	200000d7 	.word	0x200000d7
 801286c:	0801a848 	.word	0x0801a848
 8012870:	0801a85c 	.word	0x0801a85c
 8012874:	0801a888 	.word	0x0801a888
 8012878:	0801a894 	.word	0x0801a894
 801287c:	0066664f 	.word	0x0066664f

08012880 <menuClearBinds>:

//Clears binds in the current profile
void menuClearBinds(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6039      	str	r1, [r7, #0]
 8012888:	4611      	mov	r1, r2
 801288a:	461a      	mov	r2, r3
 801288c:	4603      	mov	r3, r0
 801288e:	80fb      	strh	r3, [r7, #6]
 8012890:	460b      	mov	r3, r1
 8012892:	717b      	strb	r3, [r7, #5]
 8012894:	4613      	mov	r3, r2
 8012896:	713b      	strb	r3, [r7, #4]
	//Render
	screenWriteTopLine("Hold Start=Clear");
 8012898:	4815      	ldr	r0, [pc, #84]	; (80128f0 <menuClearBinds+0x70>)
 801289a:	f000 facd 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine("Press B=Cancel");
 801289e:	4815      	ldr	r0, [pc, #84]	; (80128f4 <menuClearBinds+0x74>)
 80128a0:	f000 fafe 	bl	8012ea0 <screenWriteBottomLine>

	//Process Buttons
	if (buttons == BUTTON_START && buttonsHoldTime > 3000) //Start held for 3s to clear
 80128a4:	88fb      	ldrh	r3, [r7, #6]
 80128a6:	2b08      	cmp	r3, #8
 80128a8:	d115      	bne.n	80128d6 <menuClearBinds+0x56>
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80128b0:	4293      	cmp	r3, r2
 80128b2:	d910      	bls.n	80128d6 <menuClearBinds+0x56>
			{
		screenWriteTopLine("Clearing Binds");
 80128b4:	4810      	ldr	r0, [pc, #64]	; (80128f8 <menuClearBinds+0x78>)
 80128b6:	f000 fabf 	bl	8012e38 <screenWriteTopLine>
		screenWriteBottomLine("");
 80128ba:	4810      	ldr	r0, [pc, #64]	; (80128fc <menuClearBinds+0x7c>)
 80128bc:	f000 faf0 	bl	8012ea0 <screenWriteBottomLine>
		bindClearAll();
 80128c0:	f7fe fa98 	bl	8010df4 <bindClearAll>
		screenWriteTopLine("Binds Cleared");
 80128c4:	480e      	ldr	r0, [pc, #56]	; (8012900 <menuClearBinds+0x80>)
 80128c6:	f000 fab7 	bl	8012e38 <screenWriteTopLine>
		menuDeactivate(0);
 80128ca:	2000      	movs	r0, #0
 80128cc:	f000 f940 	bl	8012b50 <menuDeactivate>
		screenClearIn(2);
 80128d0:	2002      	movs	r0, #2
 80128d2:	f000 fa73 	bl	8012dbc <screenClearIn>
	}
	if (buttons & BUTTON_B) //Cancel
 80128d6:	88fb      	ldrh	r3, [r7, #6]
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d002      	beq.n	80128e6 <menuClearBinds+0x66>
	{
		menuDeactivate(1);
 80128e0:	2001      	movs	r0, #1
 80128e2:	f000 f935 	bl	8012b50 <menuDeactivate>
	}
}
 80128e6:	bf00      	nop
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	0801a89c 	.word	0x0801a89c
 80128f4:	0801a8b0 	.word	0x0801a8b0
 80128f8:	0801a8c0 	.word	0x0801a8c0
 80128fc:	0801a844 	.word	0x0801a844
 8012900:	0801a8d0 	.word	0x0801a8d0

08012904 <menuSelectProfile>:

//Loads a profile from flash
uint16_t menuSelectProfileSelectedProfileIndex = 0;
void menuSelectProfile(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8012904:	b580      	push	{r7, lr}
 8012906:	b08c      	sub	sp, #48	; 0x30
 8012908:	af00      	add	r7, sp, #0
 801290a:	6039      	str	r1, [r7, #0]
 801290c:	4611      	mov	r1, r2
 801290e:	461a      	mov	r2, r3
 8012910:	4603      	mov	r3, r0
 8012912:	80fb      	strh	r3, [r7, #6]
 8012914:	460b      	mov	r3, r1
 8012916:	717b      	strb	r3, [r7, #5]
 8012918:	4613      	mov	r3, r2
 801291a:	713b      	strb	r3, [r7, #4]
	//Render
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	sprintf(topLine, "New Profile: %i", menuSelectProfileSelectedProfileIndex + 1);
 801291c:	4b2f      	ldr	r3, [pc, #188]	; (80129dc <menuSelectProfile+0xd8>)
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	f107 031c 	add.w	r3, r7, #28
 8012926:	492e      	ldr	r1, [pc, #184]	; (80129e0 <menuSelectProfile+0xdc>)
 8012928:	4618      	mov	r0, r3
 801292a:	f007 fb45 	bl	8019fb8 <siprintf>
	sprintf(bottomLine, "Cur Profile: %i", profileGetSelectedIndex() + 1);
 801292e:	f7fe f9db 	bl	8010ce8 <profileGetSelectedIndex>
 8012932:	4603      	mov	r3, r0
 8012934:	1c5a      	adds	r2, r3, #1
 8012936:	f107 0308 	add.w	r3, r7, #8
 801293a:	492a      	ldr	r1, [pc, #168]	; (80129e4 <menuSelectProfile+0xe0>)
 801293c:	4618      	mov	r0, r3
 801293e:	f007 fb3b 	bl	8019fb8 <siprintf>
	screenWriteTopLine(topLine);
 8012942:	f107 031c 	add.w	r3, r7, #28
 8012946:	4618      	mov	r0, r3
 8012948:	f000 fa76 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 801294c:	f107 0308 	add.w	r3, r7, #8
 8012950:	4618      	mov	r0, r3
 8012952:	f000 faa5 	bl	8012ea0 <screenWriteBottomLine>

	//Process Buttons
	if (buttonsChanged) {
 8012956:	797b      	ldrb	r3, [r7, #5]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d03a      	beq.n	80129d2 <menuSelectProfile+0xce>
		if (buttons & BUTTON_UP && menuSelectProfileSelectedProfileIndex > 0) //Scroll Up through profiles
 801295c:	88fb      	ldrh	r3, [r7, #6]
 801295e:	f003 0310 	and.w	r3, r3, #16
 8012962:	2b00      	cmp	r3, #0
 8012964:	d00a      	beq.n	801297c <menuSelectProfile+0x78>
 8012966:	4b1d      	ldr	r3, [pc, #116]	; (80129dc <menuSelectProfile+0xd8>)
 8012968:	881b      	ldrh	r3, [r3, #0]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d006      	beq.n	801297c <menuSelectProfile+0x78>
				{
			menuSelectProfileSelectedProfileIndex--;
 801296e:	4b1b      	ldr	r3, [pc, #108]	; (80129dc <menuSelectProfile+0xd8>)
 8012970:	881b      	ldrh	r3, [r3, #0]
 8012972:	3b01      	subs	r3, #1
 8012974:	b29a      	uxth	r2, r3
 8012976:	4b19      	ldr	r3, [pc, #100]	; (80129dc <menuSelectProfile+0xd8>)
 8012978:	801a      	strh	r2, [r3, #0]
 801297a:	e02a      	b.n	80129d2 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_DOWN
 801297c:	88fb      	ldrh	r3, [r7, #6]
 801297e:	f003 0320 	and.w	r3, r3, #32
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00a      	beq.n	801299c <menuSelectProfile+0x98>
				&& menuSelectProfileSelectedProfileIndex < PROFILE_COUNT - 1) //Scroll down
 8012986:	4b15      	ldr	r3, [pc, #84]	; (80129dc <menuSelectProfile+0xd8>)
 8012988:	881b      	ldrh	r3, [r3, #0]
 801298a:	2b0e      	cmp	r3, #14
 801298c:	d806      	bhi.n	801299c <menuSelectProfile+0x98>
						{
			menuSelectProfileSelectedProfileIndex++;
 801298e:	4b13      	ldr	r3, [pc, #76]	; (80129dc <menuSelectProfile+0xd8>)
 8012990:	881b      	ldrh	r3, [r3, #0]
 8012992:	3301      	adds	r3, #1
 8012994:	b29a      	uxth	r2, r3
 8012996:	4b11      	ldr	r3, [pc, #68]	; (80129dc <menuSelectProfile+0xd8>)
 8012998:	801a      	strh	r2, [r3, #0]
 801299a:	e01a      	b.n	80129d2 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_A) //Select
 801299c:	88fb      	ldrh	r3, [r7, #6]
 801299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00c      	beq.n	80129c0 <menuSelectProfile+0xbc>
		{
			profileSelect(menuSelectProfileSelectedProfileIndex);
 80129a6:	4b0d      	ldr	r3, [pc, #52]	; (80129dc <menuSelectProfile+0xd8>)
 80129a8:	881b      	ldrh	r3, [r3, #0]
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7fe f975 	bl	8010c9c <profileSelect>
			menuDeactivate(0);
 80129b2:	2000      	movs	r0, #0
 80129b4:	f000 f8cc 	bl	8012b50 <menuDeactivate>
			screenClearIn(2);
 80129b8:	2002      	movs	r0, #2
 80129ba:	f000 f9ff 	bl	8012dbc <screenClearIn>
		} else if (buttons & BUTTON_B) //Cancel
		{
			menuDeactivate(1);
		}
	}
}
 80129be:	e008      	b.n	80129d2 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_B) //Cancel
 80129c0:	88fb      	ldrh	r3, [r7, #6]
 80129c2:	f003 0301 	and.w	r3, r3, #1
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d003      	beq.n	80129d2 <menuSelectProfile+0xce>
			menuDeactivate(1);
 80129ca:	2001      	movs	r0, #1
 80129cc:	f000 f8c0 	bl	8012b50 <menuDeactivate>
}
 80129d0:	e7ff      	b.n	80129d2 <menuSelectProfile+0xce>
 80129d2:	bf00      	nop
 80129d4:	3730      	adds	r7, #48	; 0x30
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
 80129da:	bf00      	nop
 80129dc:	200000d8 	.word	0x200000d8
 80129e0:	0801a8e0 	.word	0x0801a8e0
 80129e4:	0801a8f0 	.word	0x0801a8f0

080129e8 <menuSaveProfile>:

//Save a profile to a slot
uint16_t menuSaveProfileSelectedProfileIndex = 0;
void menuSaveProfile(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b08c      	sub	sp, #48	; 0x30
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6039      	str	r1, [r7, #0]
 80129f0:	4611      	mov	r1, r2
 80129f2:	461a      	mov	r2, r3
 80129f4:	4603      	mov	r3, r0
 80129f6:	80fb      	strh	r3, [r7, #6]
 80129f8:	460b      	mov	r3, r1
 80129fa:	717b      	strb	r3, [r7, #5]
 80129fc:	4613      	mov	r3, r2
 80129fe:	713b      	strb	r3, [r7, #4]
	//Render
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	sprintf(topLine, "Save Profile: %i", menuSaveProfileSelectedProfileIndex + 1);
 8012a00:	4b2f      	ldr	r3, [pc, #188]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a02:	881b      	ldrh	r3, [r3, #0]
 8012a04:	1c5a      	adds	r2, r3, #1
 8012a06:	f107 031c 	add.w	r3, r7, #28
 8012a0a:	492e      	ldr	r1, [pc, #184]	; (8012ac4 <menuSaveProfile+0xdc>)
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f007 fad3 	bl	8019fb8 <siprintf>
	sprintf(bottomLine, "Cur Profile: %i", profileGetSelectedIndex() + 1);
 8012a12:	f7fe f969 	bl	8010ce8 <profileGetSelectedIndex>
 8012a16:	4603      	mov	r3, r0
 8012a18:	1c5a      	adds	r2, r3, #1
 8012a1a:	f107 0308 	add.w	r3, r7, #8
 8012a1e:	492a      	ldr	r1, [pc, #168]	; (8012ac8 <menuSaveProfile+0xe0>)
 8012a20:	4618      	mov	r0, r3
 8012a22:	f007 fac9 	bl	8019fb8 <siprintf>
	screenWriteTopLine(topLine);
 8012a26:	f107 031c 	add.w	r3, r7, #28
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f000 fa04 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 8012a30:	f107 0308 	add.w	r3, r7, #8
 8012a34:	4618      	mov	r0, r3
 8012a36:	f000 fa33 	bl	8012ea0 <screenWriteBottomLine>

	//Process Buttons
	if (buttonsChanged) {
 8012a3a:	797b      	ldrb	r3, [r7, #5]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d03a      	beq.n	8012ab6 <menuSaveProfile+0xce>
		if (buttons & BUTTON_UP && menuSaveProfileSelectedProfileIndex > 0) //Scroll up
 8012a40:	88fb      	ldrh	r3, [r7, #6]
 8012a42:	f003 0310 	and.w	r3, r3, #16
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d00a      	beq.n	8012a60 <menuSaveProfile+0x78>
 8012a4a:	4b1d      	ldr	r3, [pc, #116]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d006      	beq.n	8012a60 <menuSaveProfile+0x78>
				{
			menuSaveProfileSelectedProfileIndex--;
 8012a52:	4b1b      	ldr	r3, [pc, #108]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a54:	881b      	ldrh	r3, [r3, #0]
 8012a56:	3b01      	subs	r3, #1
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	4b19      	ldr	r3, [pc, #100]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a5c:	801a      	strh	r2, [r3, #0]
 8012a5e:	e02a      	b.n	8012ab6 <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_DOWN
 8012a60:	88fb      	ldrh	r3, [r7, #6]
 8012a62:	f003 0320 	and.w	r3, r3, #32
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d00a      	beq.n	8012a80 <menuSaveProfile+0x98>
				&& menuSaveProfileSelectedProfileIndex < PROFILE_COUNT - 1) //Scroll down
 8012a6a:	4b15      	ldr	r3, [pc, #84]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	2b0e      	cmp	r3, #14
 8012a70:	d806      	bhi.n	8012a80 <menuSaveProfile+0x98>
						{
			menuSaveProfileSelectedProfileIndex++;
 8012a72:	4b13      	ldr	r3, [pc, #76]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	3301      	adds	r3, #1
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	4b11      	ldr	r3, [pc, #68]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a7c:	801a      	strh	r2, [r3, #0]
 8012a7e:	e01a      	b.n	8012ab6 <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_A) //Select
 8012a80:	88fb      	ldrh	r3, [r7, #6]
 8012a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d00c      	beq.n	8012aa4 <menuSaveProfile+0xbc>
		{
			profileSave(menuSaveProfileSelectedProfileIndex);
 8012a8a:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <menuSaveProfile+0xd8>)
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7fe f8c1 	bl	8010c18 <profileSave>
			menuDeactivate(0);
 8012a96:	2000      	movs	r0, #0
 8012a98:	f000 f85a 	bl	8012b50 <menuDeactivate>
			screenClearIn(2);
 8012a9c:	2002      	movs	r0, #2
 8012a9e:	f000 f98d 	bl	8012dbc <screenClearIn>
		{
			menuDeactivate(1);
		}
	}

}
 8012aa2:	e008      	b.n	8012ab6 <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_B) //Cancel
 8012aa4:	88fb      	ldrh	r3, [r7, #6]
 8012aa6:	f003 0301 	and.w	r3, r3, #1
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d003      	beq.n	8012ab6 <menuSaveProfile+0xce>
			menuDeactivate(1);
 8012aae:	2001      	movs	r0, #1
 8012ab0:	f000 f84e 	bl	8012b50 <menuDeactivate>
}
 8012ab4:	e7ff      	b.n	8012ab6 <menuSaveProfile+0xce>
 8012ab6:	bf00      	nop
 8012ab8:	3730      	adds	r7, #48	; 0x30
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	200000da 	.word	0x200000da
 8012ac4:	0801a900 	.word	0x0801a900
 8012ac8:	0801a8f0 	.word	0x0801a8f0

08012acc <menuToggleScreenShowInput>:

//Toggle screen displaying input during normal use
void menuToggleScreenShowInput(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6039      	str	r1, [r7, #0]
 8012ad4:	4611      	mov	r1, r2
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4603      	mov	r3, r0
 8012ada:	80fb      	strh	r3, [r7, #6]
 8012adc:	460b      	mov	r3, r1
 8012ade:	717b      	strb	r3, [r7, #5]
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	713b      	strb	r3, [r7, #4]
	screenSetShowNormalInput(!screenGetShowNormalInput());
 8012ae4:	f000 f98c 	bl	8012e00 <screenGetShowNormalInput>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bf0c      	ite	eq
 8012aee:	2301      	moveq	r3, #1
 8012af0:	2300      	movne	r3, #0
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	4618      	mov	r0, r3
 8012af6:	f000 f98f 	bl	8012e18 <screenSetShowNormalInput>
	menuDeactivate(1);
 8012afa:	2001      	movs	r0, #1
 8012afc:	f000 f828 	bl	8012b50 <menuDeactivate>
}
 8012b00:	bf00      	nop
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <menuAbout>:

//About
void menuAbout(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6039      	str	r1, [r7, #0]
 8012b10:	4611      	mov	r1, r2
 8012b12:	461a      	mov	r2, r3
 8012b14:	4603      	mov	r3, r0
 8012b16:	80fb      	strh	r3, [r7, #6]
 8012b18:	460b      	mov	r3, r1
 8012b1a:	717b      	strb	r3, [r7, #5]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	713b      	strb	r3, [r7, #4]
	screenWriteTopLine("SNES->Gameport");
 8012b20:	4809      	ldr	r0, [pc, #36]	; (8012b48 <menuAbout+0x40>)
 8012b22:	f000 f989 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine("By Netham45");
 8012b26:	4809      	ldr	r0, [pc, #36]	; (8012b4c <menuAbout+0x44>)
 8012b28:	f000 f9ba 	bl	8012ea0 <screenWriteBottomLine>
	if (buttons && buttonsChanged) {
 8012b2c:	88fb      	ldrh	r3, [r7, #6]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d005      	beq.n	8012b3e <menuAbout+0x36>
 8012b32:	797b      	ldrb	r3, [r7, #5]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <menuAbout+0x36>
		menuDeactivate(1);
 8012b38:	2001      	movs	r0, #1
 8012b3a:	f000 f809 	bl	8012b50 <menuDeactivate>
	}
}
 8012b3e:	bf00      	nop
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	0801a914 	.word	0x0801a914
 8012b4c:	0801a924 	.word	0x0801a924

08012b50 <menuDeactivate>:
//End Submenu Callbacks

//Hide menu, clearMessage to clear the screen immediately, otherwise leave the screen alone
void menuDeactivate(uint8_t _clearMessage) {
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	71fb      	strb	r3, [r7, #7]
	menuActive = 0;
 8012b5a:	4b07      	ldr	r3, [pc, #28]	; (8012b78 <menuDeactivate+0x28>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	701a      	strb	r2, [r3, #0]
	if (_clearMessage)
 8012b60:	79fb      	ldrb	r3, [r7, #7]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d001      	beq.n	8012b6a <menuDeactivate+0x1a>
		screenClear();
 8012b66:	f000 f905 	bl	8012d74 <screenClear>
	menuActiveSubmenuCallback = 0;
 8012b6a:	4b04      	ldr	r3, [pc, #16]	; (8012b7c <menuDeactivate+0x2c>)
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	601a      	str	r2, [r3, #0]
}
 8012b70:	bf00      	nop
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	200000b1 	.word	0x200000b1
 8012b7c:	200000bc 	.word	0x200000bc

08012b80 <menuActivate>:

//Show the menu
void menuActivate() {
 8012b80:	b480      	push	{r7}
 8012b82:	af00      	add	r7, sp, #0
	menuActive = 1;
 8012b84:	4b05      	ldr	r3, [pc, #20]	; (8012b9c <menuActivate+0x1c>)
 8012b86:	2201      	movs	r2, #1
 8012b88:	701a      	strb	r2, [r3, #0]
	menuActiveSubmenuCallback = 0;
 8012b8a:	4b05      	ldr	r3, [pc, #20]	; (8012ba0 <menuActivate+0x20>)
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	601a      	str	r2, [r3, #0]
}
 8012b90:	bf00      	nop
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop
 8012b9c:	200000b1 	.word	0x200000b1
 8012ba0:	200000bc 	.word	0x200000bc

08012ba4 <menuProcess>:

int menuProcess(uint16_t buttons) {
 8012ba4:	b590      	push	{r4, r7, lr}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	80fb      	strh	r3, [r7, #6]

	uint8_t buttonsChanged = 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	75fb      	strb	r3, [r7, #23]

	if (menuLastButtonsPressed != buttons) //Check if buttons have changed, if so reset the held timer and set the changed flag
 8012bb2:	4b22      	ldr	r3, [pc, #136]	; (8012c3c <menuProcess+0x98>)
 8012bb4:	881b      	ldrh	r3, [r3, #0]
 8012bb6:	88fa      	ldrh	r2, [r7, #6]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d009      	beq.n	8012bd0 <menuProcess+0x2c>
			{
		menuLastButtonsPressedTime = HAL_GetTick();
 8012bbc:	f000 fb02 	bl	80131c4 <HAL_GetTick>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	4b1f      	ldr	r3, [pc, #124]	; (8012c40 <menuProcess+0x9c>)
 8012bc4:	601a      	str	r2, [r3, #0]
		menuLastButtonsPressed = buttons;
 8012bc6:	4a1d      	ldr	r2, [pc, #116]	; (8012c3c <menuProcess+0x98>)
 8012bc8:	88fb      	ldrh	r3, [r7, #6]
 8012bca:	8013      	strh	r3, [r2, #0]
		buttonsChanged = 1;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	75fb      	strb	r3, [r7, #23]
	}

	uint32_t buttonsHoldTime = HAL_GetTick() - menuLastButtonsPressedTime; //How long the button has been held
 8012bd0:	f000 faf8 	bl	80131c4 <HAL_GetTick>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	4b1a      	ldr	r3, [pc, #104]	; (8012c40 <menuProcess+0x9c>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	1ad3      	subs	r3, r2, r3
 8012bdc:	613b      	str	r3, [r7, #16]

	if (buttons == (BUTTON_START | BUTTON_SELECT) && buttonsHoldTime > 1000) //If the menu isn't active and START+SELECT are held alone for 1s open it
 8012bde:	88fb      	ldrh	r3, [r7, #6]
 8012be0:	2b0c      	cmp	r3, #12
 8012be2:	d105      	bne.n	8012bf0 <menuProcess+0x4c>
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012bea:	d901      	bls.n	8012bf0 <menuProcess+0x4c>
			{
		menuActivate();
 8012bec:	f7ff ffc8 	bl	8012b80 <menuActivate>
	}

	if (!menuActive) {
 8012bf0:	4b14      	ldr	r3, [pc, #80]	; (8012c44 <menuProcess+0xa0>)
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d101      	bne.n	8012bfc <menuProcess+0x58>
		return 0; //  0 for continue to press buttons on the PC
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	e01a      	b.n	8012c32 <menuProcess+0x8e>
	}

	screenResetClearTime(); //Clear any timers to turn the screen off
 8012bfc:	f000 f8f4 	bl	8012de8 <screenResetClearTime>

	if (menuActiveSubmenuCallback) //Call a submenu
 8012c00:	4b11      	ldr	r3, [pc, #68]	; (8012c48 <menuProcess+0xa4>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d00d      	beq.n	8012c24 <menuProcess+0x80>
	{
		void (*callback)(uint16_t buttons, uint32_t buttonsHoldTime,
 8012c08:	4b0f      	ldr	r3, [pc, #60]	; (8012c48 <menuProcess+0xa4>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	60fb      	str	r3, [r7, #12]
				uint8_t buttonsChanged, uint8_t firstRun) = menuActiveSubmenuCallback;
		callback(buttons, buttonsHoldTime, buttonsChanged,
 8012c0e:	4b0f      	ldr	r3, [pc, #60]	; (8012c4c <menuProcess+0xa8>)
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	7dfa      	ldrb	r2, [r7, #23]
 8012c14:	88f8      	ldrh	r0, [r7, #6]
 8012c16:	68fc      	ldr	r4, [r7, #12]
 8012c18:	6939      	ldr	r1, [r7, #16]
 8012c1a:	47a0      	blx	r4
				mainMenuSubmenuFirstRun);
		mainMenuSubmenuFirstRun = 0;
 8012c1c:	4b0b      	ldr	r3, [pc, #44]	; (8012c4c <menuProcess+0xa8>)
 8012c1e:	2200      	movs	r2, #0
 8012c20:	701a      	strb	r2, [r3, #0]
 8012c22:	e005      	b.n	8012c30 <menuProcess+0x8c>
	} else //Render the menu, check the keys
	{
		menuMainMenu(buttons, buttonsHoldTime, buttonsChanged,
 8012c24:	7dfa      	ldrb	r2, [r7, #23]
 8012c26:	88f8      	ldrh	r0, [r7, #6]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	6939      	ldr	r1, [r7, #16]
 8012c2c:	f7ff fb5c 	bl	80122e8 <menuMainMenu>
						0);
	}

	return 1; //1 for don't continue
 8012c30:	2301      	movs	r3, #1
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	371c      	adds	r7, #28
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd90      	pop	{r4, r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	200000b8 	.word	0x200000b8
 8012c40:	200000b4 	.word	0x200000b4
 8012c44:	200000b1 	.word	0x200000b1
 8012c48:	200000bc 	.word	0x200000bc
 8012c4c:	200000c0 	.word	0x200000c0

08012c50 <menuInitMenuEntry>:

//Registers a menu entry's name, help message, and callback function
void menuInitMenuEntry(char *name, char *help, void *callback) {
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	60f8      	str	r0, [r7, #12]
 8012c58:	60b9      	str	r1, [r7, #8]
 8012c5a:	607a      	str	r2, [r7, #4]
	strcpy(menuItems[menuNumEntries].name, name);
 8012c5c:	4b16      	ldr	r3, [pc, #88]	; (8012cb8 <menuInitMenuEntry+0x68>)
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	461a      	mov	r2, r3
 8012c62:	2354      	movs	r3, #84	; 0x54
 8012c64:	fb03 f302 	mul.w	r3, r3, r2
 8012c68:	4a14      	ldr	r2, [pc, #80]	; (8012cbc <menuInitMenuEntry+0x6c>)
 8012c6a:	4413      	add	r3, r2
 8012c6c:	68f9      	ldr	r1, [r7, #12]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f007 f9c2 	bl	8019ff8 <strcpy>
	strcpy(menuItems[menuNumEntries].help, help);
 8012c74:	4b10      	ldr	r3, [pc, #64]	; (8012cb8 <menuInitMenuEntry+0x68>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	461a      	mov	r2, r3
 8012c7a:	2354      	movs	r3, #84	; 0x54
 8012c7c:	fb03 f302 	mul.w	r3, r3, r2
 8012c80:	3310      	adds	r3, #16
 8012c82:	4a0e      	ldr	r2, [pc, #56]	; (8012cbc <menuInitMenuEntry+0x6c>)
 8012c84:	4413      	add	r3, r2
 8012c86:	68b9      	ldr	r1, [r7, #8]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f007 f9b5 	bl	8019ff8 <strcpy>
	menuItems[menuNumEntries].callback = callback;
 8012c8e:	4b0a      	ldr	r3, [pc, #40]	; (8012cb8 <menuInitMenuEntry+0x68>)
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	4619      	mov	r1, r3
 8012c94:	4a09      	ldr	r2, [pc, #36]	; (8012cbc <menuInitMenuEntry+0x6c>)
 8012c96:	2354      	movs	r3, #84	; 0x54
 8012c98:	fb03 f301 	mul.w	r3, r3, r1
 8012c9c:	4413      	add	r3, r2
 8012c9e:	3350      	adds	r3, #80	; 0x50
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	601a      	str	r2, [r3, #0]
	menuNumEntries++;
 8012ca4:	4b04      	ldr	r3, [pc, #16]	; (8012cb8 <menuInitMenuEntry+0x68>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	b2da      	uxtb	r2, r3
 8012cac:	4b02      	ldr	r3, [pc, #8]	; (8012cb8 <menuInitMenuEntry+0x68>)
 8012cae:	701a      	strb	r2, [r3, #0]
}
 8012cb0:	bf00      	nop
 8012cb2:	3710      	adds	r7, #16
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	200000b0 	.word	0x200000b0
 8012cbc:	2000db94 	.word	0x2000db94

08012cc0 <menuInit>:

//Register menu entries/callbacks
void menuInit() {
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	af00      	add	r7, sp, #0
	memset(menuItems, 0, sizeof(menuItems));
 8012cc4:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8012cc8:	2100      	movs	r1, #0
 8012cca:	4814      	ldr	r0, [pc, #80]	; (8012d1c <menuInit+0x5c>)
 8012ccc:	f007 f96b 	bl	8019fa6 <memset>
	menuInitMenuEntry("Rebind Keys", "Rebind key(s) to other key(s)",
 8012cd0:	4a13      	ldr	r2, [pc, #76]	; (8012d20 <menuInit+0x60>)
 8012cd2:	4914      	ldr	r1, [pc, #80]	; (8012d24 <menuInit+0x64>)
 8012cd4:	4814      	ldr	r0, [pc, #80]	; (8012d28 <menuInit+0x68>)
 8012cd6:	f7ff ffbb 	bl	8012c50 <menuInitMenuEntry>
			&menuRebindKeys);
	menuInitMenuEntry("View/Edit Binds", "Scroll through binds and edit rapid fire",
 8012cda:	4a14      	ldr	r2, [pc, #80]	; (8012d2c <menuInit+0x6c>)
 8012cdc:	4914      	ldr	r1, [pc, #80]	; (8012d30 <menuInit+0x70>)
 8012cde:	4815      	ldr	r0, [pc, #84]	; (8012d34 <menuInit+0x74>)
 8012ce0:	f7ff ffb6 	bl	8012c50 <menuInitMenuEntry>
			&menuViewEditBinds);
	menuInitMenuEntry("Clear Binds", "Clear all binds", &menuClearBinds);
 8012ce4:	4a14      	ldr	r2, [pc, #80]	; (8012d38 <menuInit+0x78>)
 8012ce6:	4915      	ldr	r1, [pc, #84]	; (8012d3c <menuInit+0x7c>)
 8012ce8:	4815      	ldr	r0, [pc, #84]	; (8012d40 <menuInit+0x80>)
 8012cea:	f7ff ffb1 	bl	8012c50 <menuInitMenuEntry>
	menuInitMenuEntry("Select Profile", "Select which profile to use",
 8012cee:	4a15      	ldr	r2, [pc, #84]	; (8012d44 <menuInit+0x84>)
 8012cf0:	4915      	ldr	r1, [pc, #84]	; (8012d48 <menuInit+0x88>)
 8012cf2:	4816      	ldr	r0, [pc, #88]	; (8012d4c <menuInit+0x8c>)
 8012cf4:	f7ff ffac 	bl	8012c50 <menuInitMenuEntry>
			&menuSelectProfile);
	menuInitMenuEntry("Save Profile", "Save current profile to a slot in Flash", &menuSaveProfile);
 8012cf8:	4a15      	ldr	r2, [pc, #84]	; (8012d50 <menuInit+0x90>)
 8012cfa:	4916      	ldr	r1, [pc, #88]	; (8012d54 <menuInit+0x94>)
 8012cfc:	4816      	ldr	r0, [pc, #88]	; (8012d58 <menuInit+0x98>)
 8012cfe:	f7ff ffa7 	bl	8012c50 <menuInitMenuEntry>
	menuInitMenuEntry("Show/Hide Input", "Toggle showing input after binds",
 8012d02:	4a16      	ldr	r2, [pc, #88]	; (8012d5c <menuInit+0x9c>)
 8012d04:	4916      	ldr	r1, [pc, #88]	; (8012d60 <menuInit+0xa0>)
 8012d06:	4817      	ldr	r0, [pc, #92]	; (8012d64 <menuInit+0xa4>)
 8012d08:	f7ff ffa2 	bl	8012c50 <menuInitMenuEntry>
			&menuToggleScreenShowInput);
	menuInitMenuEntry("About", "About this device", &menuAbout);
 8012d0c:	4a16      	ldr	r2, [pc, #88]	; (8012d68 <menuInit+0xa8>)
 8012d0e:	4917      	ldr	r1, [pc, #92]	; (8012d6c <menuInit+0xac>)
 8012d10:	4817      	ldr	r0, [pc, #92]	; (8012d70 <menuInit+0xb0>)
 8012d12:	f7ff ff9d 	bl	8012c50 <menuInitMenuEntry>
}
 8012d16:	bf00      	nop
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	2000db94 	.word	0x2000db94
 8012d20:	0801255d 	.word	0x0801255d
 8012d24:	0801a930 	.word	0x0801a930
 8012d28:	0801a950 	.word	0x0801a950
 8012d2c:	080126ad 	.word	0x080126ad
 8012d30:	0801a95c 	.word	0x0801a95c
 8012d34:	0801a988 	.word	0x0801a988
 8012d38:	08012881 	.word	0x08012881
 8012d3c:	0801a998 	.word	0x0801a998
 8012d40:	0801a9a8 	.word	0x0801a9a8
 8012d44:	08012905 	.word	0x08012905
 8012d48:	0801a9b4 	.word	0x0801a9b4
 8012d4c:	0801a9d0 	.word	0x0801a9d0
 8012d50:	080129e9 	.word	0x080129e9
 8012d54:	0801a9e0 	.word	0x0801a9e0
 8012d58:	0801aa08 	.word	0x0801aa08
 8012d5c:	08012acd 	.word	0x08012acd
 8012d60:	0801aa18 	.word	0x0801aa18
 8012d64:	0801aa3c 	.word	0x0801aa3c
 8012d68:	08012b09 	.word	0x08012b09
 8012d6c:	0801aa4c 	.word	0x0801aa4c
 8012d70:	0801aa60 	.word	0x0801aa60

08012d74 <screenClear>:
uint8_t screenShowNormalInput = 0;

char currentTopLine[SCREEN_CSTR_WIDTH];
char currentBottomLine[SCREEN_CSTR_WIDTH];

void screenClear() {
 8012d74:	b580      	push	{r7, lr}
 8012d76:	af00      	add	r7, sp, #0
	lcdSetCursorPosition(0, 0);
 8012d78:	2100      	movs	r1, #0
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	f7ff f9f4 	bl	8012168 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH);
 8012d80:	2110      	movs	r1, #16
 8012d82:	480b      	ldr	r0, [pc, #44]	; (8012db0 <screenClear+0x3c>)
 8012d84:	f7ff fa1c 	bl	80121c0 <lcdPrintStr>
	lcdSetCursorPosition(0, 1);
 8012d88:	2101      	movs	r1, #1
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	f7ff f9ec 	bl	8012168 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH);
 8012d90:	2110      	movs	r1, #16
 8012d92:	4807      	ldr	r0, [pc, #28]	; (8012db0 <screenClear+0x3c>)
 8012d94:	f7ff fa14 	bl	80121c0 <lcdPrintStr>
	lcdBacklight(LCD_BIT_BACKIGHT_OFF);
 8012d98:	2000      	movs	r0, #0
 8012d9a:	f7ff f9bb 	bl	8012114 <lcdBacklight>
	currentTopLine[0] = 0;
 8012d9e:	4b05      	ldr	r3, [pc, #20]	; (8012db4 <screenClear+0x40>)
 8012da0:	2200      	movs	r2, #0
 8012da2:	701a      	strb	r2, [r3, #0]
	currentBottomLine[0] = 0;
 8012da4:	4b04      	ldr	r3, [pc, #16]	; (8012db8 <screenClear+0x44>)
 8012da6:	2200      	movs	r2, #0
 8012da8:	701a      	strb	r2, [r3, #0]
}
 8012daa:	bf00      	nop
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	0801aa68 	.word	0x0801aa68
 8012db4:	2000e628 	.word	0x2000e628
 8012db8:	2000e614 	.word	0x2000e614

08012dbc <screenClearIn>:

void screenClearIn(uint8_t seconds) {
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	71fb      	strb	r3, [r7, #7]
	clearMessageTime = HAL_GetTick() + (seconds * 1000);
 8012dc6:	f000 f9fd 	bl	80131c4 <HAL_GetTick>
 8012dca:	4601      	mov	r1, r0
 8012dcc:	79fb      	ldrb	r3, [r7, #7]
 8012dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012dd2:	fb02 f303 	mul.w	r3, r2, r3
 8012dd6:	440b      	add	r3, r1
 8012dd8:	4a02      	ldr	r2, [pc, #8]	; (8012de4 <screenClearIn+0x28>)
 8012dda:	6013      	str	r3, [r2, #0]
}
 8012ddc:	bf00      	nop
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	200000dc 	.word	0x200000dc

08012de8 <screenResetClearTime>:

void screenResetClearTime() {
 8012de8:	b480      	push	{r7}
 8012dea:	af00      	add	r7, sp, #0
	clearMessageTime = 0;
 8012dec:	4b03      	ldr	r3, [pc, #12]	; (8012dfc <screenResetClearTime+0x14>)
 8012dee:	2200      	movs	r2, #0
 8012df0:	601a      	str	r2, [r3, #0]
}
 8012df2:	bf00      	nop
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	200000dc 	.word	0x200000dc

08012e00 <screenGetShowNormalInput>:

uint32_t screenGetClearMessageTime() {
	return clearMessageTime;
}

uint8_t screenGetShowNormalInput() {
 8012e00:	b480      	push	{r7}
 8012e02:	af00      	add	r7, sp, #0
	return screenShowNormalInput;
 8012e04:	4b03      	ldr	r3, [pc, #12]	; (8012e14 <screenGetShowNormalInput+0x14>)
 8012e06:	781b      	ldrb	r3, [r3, #0]
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	200000e0 	.word	0x200000e0

08012e18 <screenSetShowNormalInput>:

void screenSetShowNormalInput(uint8_t show) {
 8012e18:	b480      	push	{r7}
 8012e1a:	b083      	sub	sp, #12
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	4603      	mov	r3, r0
 8012e20:	71fb      	strb	r3, [r7, #7]
	screenShowNormalInput = show;
 8012e22:	4a04      	ldr	r2, [pc, #16]	; (8012e34 <screenSetShowNormalInput+0x1c>)
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	7013      	strb	r3, [r2, #0]
}
 8012e28:	bf00      	nop
 8012e2a:	370c      	adds	r7, #12
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr
 8012e34:	200000e0 	.word	0x200000e0

08012e38 <screenWriteTopLine>:

void screenWriteTopLine(char *data)

{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
	if (strcmp(currentTopLine, data) != 0) {
 8012e40:	6879      	ldr	r1, [r7, #4]
 8012e42:	4815      	ldr	r0, [pc, #84]	; (8012e98 <screenWriteTopLine+0x60>)
 8012e44:	f7fd f8fc 	bl	8010040 <strcmp>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d01f      	beq.n	8012e8e <screenWriteTopLine+0x56>
		strcpy(currentTopLine, data);
 8012e4e:	6879      	ldr	r1, [r7, #4]
 8012e50:	4811      	ldr	r0, [pc, #68]	; (8012e98 <screenWriteTopLine+0x60>)
 8012e52:	f007 f8d1 	bl	8019ff8 <strcpy>
		lcdBacklight(LCD_BIT_BACKIGHT_ON);
 8012e56:	2008      	movs	r0, #8
 8012e58:	f7ff f95c 	bl	8012114 <lcdBacklight>
		lcdSetCursorPosition(0, 0);
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	2000      	movs	r0, #0
 8012e60:	f7ff f982 	bl	8012168 <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) data, strlen(data));
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7fd f8f5 	bl	8010054 <strlen>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	4619      	mov	r1, r3
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7ff f9a5 	bl	80121c0 <lcdPrintStr>
		lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH - strlen(data));
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7fd f8ec 	bl	8010054 <strlen>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	b2db      	uxtb	r3, r3
 8012e80:	f1c3 0310 	rsb	r3, r3, #16
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	4619      	mov	r1, r3
 8012e88:	4804      	ldr	r0, [pc, #16]	; (8012e9c <screenWriteTopLine+0x64>)
 8012e8a:	f7ff f999 	bl	80121c0 <lcdPrintStr>
	}

}
 8012e8e:	bf00      	nop
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	2000e628 	.word	0x2000e628
 8012e9c:	0801aa68 	.word	0x0801aa68

08012ea0 <screenWriteBottomLine>:

void screenWriteBottomLine(char *data) {
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
	if (strcmp(currentBottomLine, data) != 0) {
 8012ea8:	6879      	ldr	r1, [r7, #4]
 8012eaa:	4815      	ldr	r0, [pc, #84]	; (8012f00 <screenWriteBottomLine+0x60>)
 8012eac:	f7fd f8c8 	bl	8010040 <strcmp>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d01f      	beq.n	8012ef6 <screenWriteBottomLine+0x56>
		strcpy(currentBottomLine, data);
 8012eb6:	6879      	ldr	r1, [r7, #4]
 8012eb8:	4811      	ldr	r0, [pc, #68]	; (8012f00 <screenWriteBottomLine+0x60>)
 8012eba:	f007 f89d 	bl	8019ff8 <strcpy>
		lcdBacklight(LCD_BIT_BACKIGHT_ON);
 8012ebe:	2008      	movs	r0, #8
 8012ec0:	f7ff f928 	bl	8012114 <lcdBacklight>
		lcdSetCursorPosition(0, 1);
 8012ec4:	2101      	movs	r1, #1
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	f7ff f94e 	bl	8012168 <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) data, strlen(data));
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7fd f8c1 	bl	8010054 <strlen>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7ff f971 	bl	80121c0 <lcdPrintStr>
		lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH - strlen(data));
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f7fd f8b8 	bl	8010054 <strlen>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	f1c3 0310 	rsb	r3, r3, #16
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4804      	ldr	r0, [pc, #16]	; (8012f04 <screenWriteBottomLine+0x64>)
 8012ef2:	f7ff f965 	bl	80121c0 <lcdPrintStr>
	}
}
 8012ef6:	bf00      	nop
 8012ef8:	3708      	adds	r7, #8
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	2000e614 	.word	0x2000e614
 8012f04:	0801aa68 	.word	0x0801aa68

08012f08 <screenProcess>:

void screenProcess(uint16_t buttons) {
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b088      	sub	sp, #32
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	4603      	mov	r3, r0
 8012f10:	80fb      	strh	r3, [r7, #6]
	if (clearMessageTime && (clearMessageTime < HAL_GetTick())) {
 8012f12:	4b18      	ldr	r3, [pc, #96]	; (8012f74 <screenProcess+0x6c>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d00b      	beq.n	8012f32 <screenProcess+0x2a>
 8012f1a:	f000 f953 	bl	80131c4 <HAL_GetTick>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	4b14      	ldr	r3, [pc, #80]	; (8012f74 <screenProcess+0x6c>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d904      	bls.n	8012f32 <screenProcess+0x2a>
		screenClear();
 8012f28:	f7ff ff24 	bl	8012d74 <screenClear>
		clearMessageTime = 0;
 8012f2c:	4b11      	ldr	r3, [pc, #68]	; (8012f74 <screenProcess+0x6c>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
	}

	//If no other message is being shown show the currently pressed keys after rebinding
	if (screenShowNormalInput) {
 8012f32:	4b11      	ldr	r3, [pc, #68]	; (8012f78 <screenProcess+0x70>)
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d018      	beq.n	8012f6c <screenProcess+0x64>
		if (!clearMessageTime) {
 8012f3a:	4b0e      	ldr	r3, [pc, #56]	; (8012f74 <screenProcess+0x6c>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d114      	bne.n	8012f6c <screenProcess+0x64>
			if (buttons) {
 8012f42:	88fb      	ldrh	r3, [r7, #6]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00f      	beq.n	8012f68 <screenProcess+0x60>
				char buffer[SCREEN_CSTR_WIDTH];
				buttonsToString(buffer, buttons, "\xA5");
 8012f48:	88f9      	ldrh	r1, [r7, #6]
 8012f4a:	f107 030c 	add.w	r3, r7, #12
 8012f4e:	4a0b      	ldr	r2, [pc, #44]	; (8012f7c <screenProcess+0x74>)
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fe f995 	bl	8011280 <buttonsToString>
				screenWriteTopLine(buffer);
 8012f56:	f107 030c 	add.w	r3, r7, #12
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff ff6c 	bl	8012e38 <screenWriteTopLine>
				screenWriteBottomLine("");
 8012f60:	4807      	ldr	r0, [pc, #28]	; (8012f80 <screenProcess+0x78>)
 8012f62:	f7ff ff9d 	bl	8012ea0 <screenWriteBottomLine>
			} else {
				screenClear();
			}
		}
	}
}
 8012f66:	e001      	b.n	8012f6c <screenProcess+0x64>
				screenClear();
 8012f68:	f7ff ff04 	bl	8012d74 <screenClear>
}
 8012f6c:	bf00      	nop
 8012f6e:	3720      	adds	r7, #32
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	200000dc 	.word	0x200000dc
 8012f78:	200000e0 	.word	0x200000e0
 8012f7c:	0801aa7c 	.word	0x0801aa7c
 8012f80:	0801aa80 	.word	0x0801aa80

08012f84 <snesSetDelayuSTimer>:
#include <snestogameport/snes.h>
//Microsecond Sleep, only used by snes controller polling
TIM_HandleTypeDef *htimdelayus = 0;
void snesSetDelayuSTimer(TIM_HandleTypeDef *_htimdelayus) {
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
	htimdelayus = _htimdelayus;
 8012f8c:	4a05      	ldr	r2, [pc, #20]	; (8012fa4 <snesSetDelayuSTimer+0x20>)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htimdelayus);
 8012f92:	4b04      	ldr	r3, [pc, #16]	; (8012fa4 <snesSetDelayuSTimer+0x20>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4618      	mov	r0, r3
 8012f98:	f003 fe75 	bl	8016c86 <HAL_TIM_Base_Start>
}
 8012f9c:	bf00      	nop
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	200000e4 	.word	0x200000e4

08012fa8 <delayuS>:

void delayuS(uint16_t us) {
 8012fa8:	b480      	push	{r7}
 8012faa:	b083      	sub	sp, #12
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4603      	mov	r3, r0
 8012fb0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htimdelayus, 0);  // set the counter value a 0
 8012fb2:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <delayuS+0x30>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htimdelayus) < us)
 8012fbc:	bf00      	nop
 8012fbe:	4b06      	ldr	r3, [pc, #24]	; (8012fd8 <delayuS+0x30>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fc6:	88fb      	ldrh	r3, [r7, #6]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d3f8      	bcc.n	8012fbe <delayuS+0x16>
		;  // wait for the counter to reach the us input in the parameter
}
 8012fcc:	bf00      	nop
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr
 8012fd8:	200000e4 	.word	0x200000e4

08012fdc <snesPoll>:

//End Microsecond Sleep

//Query the SNES controller
int snesPoll() {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
	uint16_t buttons = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_SET); //Pulse latch to capture current button state in controller state register
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	2110      	movs	r1, #16
 8012fea:	4820      	ldr	r0, [pc, #128]	; (801306c <snesPoll+0x90>)
 8012fec:	f001 f988 	bl	8014300 <HAL_GPIO_WritePin>
	delayuS(12); // 12µs delay
 8012ff0:	200c      	movs	r0, #12
 8012ff2:	f7ff ffd9 	bl	8012fa8 <delayuS>
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_RESET);
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	2110      	movs	r1, #16
 8012ffa:	481c      	ldr	r0, [pc, #112]	; (801306c <snesPoll+0x90>)
 8012ffc:	f001 f980 	bl	8014300 <HAL_GPIO_WritePin>
	delayuS(6); // 6µs delay
 8013000:	2006      	movs	r0, #6
 8013002:	f7ff ffd1 	bl	8012fa8 <delayuS>
	for (int i = 0; i < 16; i++) {
 8013006:	2300      	movs	r3, #0
 8013008:	603b      	str	r3, [r7, #0]
 801300a:	e026      	b.n	801305a <snesPoll+0x7e>
		buttons |= ((!HAL_GPIO_ReadPin(SNES_Data_GPIO_Port, SNES_Data_Pin)) << i); //Read button and set the bitmask index, logically inverted coming in from the controller
 801300c:	2140      	movs	r1, #64	; 0x40
 801300e:	4817      	ldr	r0, [pc, #92]	; (801306c <snesPoll+0x90>)
 8013010:	f001 f95e 	bl	80142d0 <HAL_GPIO_ReadPin>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	bf0c      	ite	eq
 801301a:	2301      	moveq	r3, #1
 801301c:	2300      	movne	r3, #0
 801301e:	b2db      	uxtb	r3, r3
 8013020:	461a      	mov	r2, r3
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	fa02 f303 	lsl.w	r3, r2, r3
 8013028:	b21a      	sxth	r2, r3
 801302a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801302e:	4313      	orrs	r3, r2
 8013030:	b21b      	sxth	r3, r3
 8013032:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_RESET); //Pulse clock to advance button being reported
 8013034:	2200      	movs	r2, #0
 8013036:	2120      	movs	r1, #32
 8013038:	480c      	ldr	r0, [pc, #48]	; (801306c <snesPoll+0x90>)
 801303a:	f001 f961 	bl	8014300 <HAL_GPIO_WritePin>
		delayuS(12);
 801303e:	200c      	movs	r0, #12
 8013040:	f7ff ffb2 	bl	8012fa8 <delayuS>
		HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_SET);
 8013044:	2201      	movs	r2, #1
 8013046:	2120      	movs	r1, #32
 8013048:	4808      	ldr	r0, [pc, #32]	; (801306c <snesPoll+0x90>)
 801304a:	f001 f959 	bl	8014300 <HAL_GPIO_WritePin>
		delayuS(12);
 801304e:	200c      	movs	r0, #12
 8013050:	f7ff ffaa 	bl	8012fa8 <delayuS>
	for (int i = 0; i < 16; i++) {
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	3301      	adds	r3, #1
 8013058:	603b      	str	r3, [r7, #0]
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	2b0f      	cmp	r3, #15
 801305e:	ddd5      	ble.n	801300c <snesPoll+0x30>
	}

	return buttons;
 8013060:	88fb      	ldrh	r3, [r7, #6]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	40020000 	.word	0x40020000

08013070 <snesMain>:
//eeprom defines
uint16_t VirtAddVarTab[NB_OF_VAR] = { 0 };
uint16_t VarDataTab[NB_OF_VAR] = {0};
uint16_t VarValue = 0;

void snesMain(I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimdelayus) {
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock();
 801307a:	f000 fd8f 	bl	8013b9c <HAL_FLASH_Unlock>
	uint32_t status = EE_Init(); //eeprom init
 801307e:	f7fe fa21 	bl	80114c4 <EE_Init>
 8013082:	4603      	mov	r3, r0
 8013084:	60fb      	str	r3, [r7, #12]
	status++;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	3301      	adds	r3, #1
 801308a:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Lock();
 801308c:	f000 fda8 	bl	8013be0 <HAL_FLASH_Lock>
	snesSetDelayuSTimer(htimdelayus); //Init delayuS timer for snes controller polling
 8013090:	6838      	ldr	r0, [r7, #0]
 8013092:	f7ff ff77 	bl	8012f84 <snesSetDelayuSTimer>
	lcdInit(hi2c, (uint8_t) 0x27, (uint8_t) 20, (uint8_t) 4); //Init LCD
 8013096:	2304      	movs	r3, #4
 8013098:	2214      	movs	r2, #20
 801309a:	2127      	movs	r1, #39	; 0x27
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7fe fe8d 	bl	8011dbc <lcdInit>
	buttonsGPIODefaultState(); //Init GPIO
 80130a2:	f7fd fefb 	bl	8010e9c <buttonsGPIODefaultState>
	profileSelect(0); //Load profile 0
 80130a6:	2000      	movs	r0, #0
 80130a8:	f7fd fdf8 	bl	8010c9c <profileSelect>
	menuInit(); //Register menu entries
 80130ac:	f7ff fe08 	bl	8012cc0 <menuInit>
	
	//Splash
	screenWriteTopLine("SNES -> Gameport");
 80130b0:	4812      	ldr	r0, [pc, #72]	; (80130fc <snesMain+0x8c>)
 80130b2:	f7ff fec1 	bl	8012e38 <screenWriteTopLine>
	screenWriteBottomLine("By Netham45");
 80130b6:	4812      	ldr	r0, [pc, #72]	; (8013100 <snesMain+0x90>)
 80130b8:	f7ff fef2 	bl	8012ea0 <screenWriteBottomLine>
	screenClearIn(2);
 80130bc:	2002      	movs	r0, #2
 80130be:	f7ff fe7d 	bl	8012dbc <screenClearIn>

	while (1) {
		uint16_t buttons = snesPoll(); //Query SNES controller
 80130c2:	f7ff ff8b 	bl	8012fdc <snesPoll>
 80130c6:	4603      	mov	r3, r0
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	817b      	strh	r3, [r7, #10]

		//If processMenu returns non-zero then the menu is open and don't process anything else this loop.
		if (menuProcess(buttons))
 80130cc:	897b      	ldrh	r3, [r7, #10]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7ff fd68 	bl	8012ba4 <menuProcess>
 80130d4:	4603      	mov	r3, r0
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d10d      	bne.n	80130f6 <snesMain+0x86>
			continue;

		bindProcess(&buttons);
 80130da:	f107 030a 	add.w	r3, r7, #10
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fd ff32 	bl	8010f48 <bindProcess>
		screenProcess(buttons);
 80130e4:	897b      	ldrh	r3, [r7, #10]
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7ff ff0e 	bl	8012f08 <screenProcess>
		buttonsProcess(buttons);
 80130ec:	897b      	ldrh	r3, [r7, #10]
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fd ffc2 	bl	8011078 <buttonsProcess>
 80130f4:	e7e5      	b.n	80130c2 <snesMain+0x52>
			continue;
 80130f6:	bf00      	nop
	while (1) {
 80130f8:	e7e3      	b.n	80130c2 <snesMain+0x52>
 80130fa:	bf00      	nop
 80130fc:	0801aa84 	.word	0x0801aa84
 8013100:	0801aa98 	.word	0x0801aa98

08013104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8013104:	f8df d034 	ldr.w	sp, [pc, #52]	; 801313c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801310a:	e003      	b.n	8013114 <LoopCopyDataInit>

0801310c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801310c:	4b0c      	ldr	r3, [pc, #48]	; (8013140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801310e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013112:	3104      	adds	r1, #4

08013114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013114:	480b      	ldr	r0, [pc, #44]	; (8013144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013116:	4b0c      	ldr	r3, [pc, #48]	; (8013148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801311a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801311c:	d3f6      	bcc.n	801310c <CopyDataInit>
  ldr  r2, =_sbss
 801311e:	4a0b      	ldr	r2, [pc, #44]	; (801314c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013120:	e002      	b.n	8013128 <LoopFillZerobss>

08013122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013124:	f842 3b04 	str.w	r3, [r2], #4

08013128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013128:	4b09      	ldr	r3, [pc, #36]	; (8013150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801312a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801312c:	d3f9      	bcc.n	8013122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801312e:	f7fd fd41 	bl	8010bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013132:	f006 ff09 	bl	8019f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013136:	f7fd f96b 	bl	8010410 <main>
  bx  lr    
 801313a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801313c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8013140:	0801ab48 	.word	0x0801ab48
  ldr  r0, =_sdata
 8013144:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013148:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 801314c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8013150:	2000e6a4 	.word	0x2000e6a4

08013154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013154:	e7fe      	b.n	8013154 <ADC_IRQHandler>
	...

08013158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801315c:	4b0e      	ldr	r3, [pc, #56]	; (8013198 <HAL_Init+0x40>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4a0d      	ldr	r2, [pc, #52]	; (8013198 <HAL_Init+0x40>)
 8013162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8013168:	4b0b      	ldr	r3, [pc, #44]	; (8013198 <HAL_Init+0x40>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4a0a      	ldr	r2, [pc, #40]	; (8013198 <HAL_Init+0x40>)
 801316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013174:	4b08      	ldr	r3, [pc, #32]	; (8013198 <HAL_Init+0x40>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4a07      	ldr	r2, [pc, #28]	; (8013198 <HAL_Init+0x40>)
 801317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013180:	2003      	movs	r0, #3
 8013182:	f000 f8d8 	bl	8013336 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013186:	2000      	movs	r0, #0
 8013188:	f7fd fc3c 	bl	8010a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801318c:	f7fd fb2e 	bl	80107ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013190:	2300      	movs	r3, #0
}
 8013192:	4618      	mov	r0, r3
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	40023c00 	.word	0x40023c00

0801319c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801319c:	b480      	push	{r7}
 801319e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80131a0:	4b06      	ldr	r3, [pc, #24]	; (80131bc <HAL_IncTick+0x20>)
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	461a      	mov	r2, r3
 80131a6:	4b06      	ldr	r3, [pc, #24]	; (80131c0 <HAL_IncTick+0x24>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	4413      	add	r3, r2
 80131ac:	4a04      	ldr	r2, [pc, #16]	; (80131c0 <HAL_IncTick+0x24>)
 80131ae:	6013      	str	r3, [r2, #0]
}
 80131b0:	bf00      	nop
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	2000000c 	.word	0x2000000c
 80131c0:	2000e63c 	.word	0x2000e63c

080131c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80131c4:	b480      	push	{r7}
 80131c6:	af00      	add	r7, sp, #0
  return uwTick;
 80131c8:	4b03      	ldr	r3, [pc, #12]	; (80131d8 <HAL_GetTick+0x14>)
 80131ca:	681b      	ldr	r3, [r3, #0]
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr
 80131d6:	bf00      	nop
 80131d8:	2000e63c 	.word	0x2000e63c

080131dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f003 0307 	and.w	r3, r3, #7
 80131ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80131ec:	4b0c      	ldr	r3, [pc, #48]	; (8013220 <__NVIC_SetPriorityGrouping+0x44>)
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80131f2:	68ba      	ldr	r2, [r7, #8]
 80131f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80131f8:	4013      	ands	r3, r2
 80131fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801320e:	4a04      	ldr	r2, [pc, #16]	; (8013220 <__NVIC_SetPriorityGrouping+0x44>)
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	60d3      	str	r3, [r2, #12]
}
 8013214:	bf00      	nop
 8013216:	3714      	adds	r7, #20
 8013218:	46bd      	mov	sp, r7
 801321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321e:	4770      	bx	lr
 8013220:	e000ed00 	.word	0xe000ed00

08013224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013224:	b480      	push	{r7}
 8013226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013228:	4b04      	ldr	r3, [pc, #16]	; (801323c <__NVIC_GetPriorityGrouping+0x18>)
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	0a1b      	lsrs	r3, r3, #8
 801322e:	f003 0307 	and.w	r3, r3, #7
}
 8013232:	4618      	mov	r0, r3
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr
 801323c:	e000ed00 	.word	0xe000ed00

08013240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	4603      	mov	r3, r0
 8013248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801324e:	2b00      	cmp	r3, #0
 8013250:	db0b      	blt.n	801326a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	f003 021f 	and.w	r2, r3, #31
 8013258:	4907      	ldr	r1, [pc, #28]	; (8013278 <__NVIC_EnableIRQ+0x38>)
 801325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801325e:	095b      	lsrs	r3, r3, #5
 8013260:	2001      	movs	r0, #1
 8013262:	fa00 f202 	lsl.w	r2, r0, r2
 8013266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801326a:	bf00      	nop
 801326c:	370c      	adds	r7, #12
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	e000e100 	.word	0xe000e100

0801327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	4603      	mov	r3, r0
 8013284:	6039      	str	r1, [r7, #0]
 8013286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801328c:	2b00      	cmp	r3, #0
 801328e:	db0a      	blt.n	80132a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	b2da      	uxtb	r2, r3
 8013294:	490c      	ldr	r1, [pc, #48]	; (80132c8 <__NVIC_SetPriority+0x4c>)
 8013296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801329a:	0112      	lsls	r2, r2, #4
 801329c:	b2d2      	uxtb	r2, r2
 801329e:	440b      	add	r3, r1
 80132a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80132a4:	e00a      	b.n	80132bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	b2da      	uxtb	r2, r3
 80132aa:	4908      	ldr	r1, [pc, #32]	; (80132cc <__NVIC_SetPriority+0x50>)
 80132ac:	79fb      	ldrb	r3, [r7, #7]
 80132ae:	f003 030f 	and.w	r3, r3, #15
 80132b2:	3b04      	subs	r3, #4
 80132b4:	0112      	lsls	r2, r2, #4
 80132b6:	b2d2      	uxtb	r2, r2
 80132b8:	440b      	add	r3, r1
 80132ba:	761a      	strb	r2, [r3, #24]
}
 80132bc:	bf00      	nop
 80132be:	370c      	adds	r7, #12
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr
 80132c8:	e000e100 	.word	0xe000e100
 80132cc:	e000ed00 	.word	0xe000ed00

080132d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b089      	sub	sp, #36	; 0x24
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	f003 0307 	and.w	r3, r3, #7
 80132e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	f1c3 0307 	rsb	r3, r3, #7
 80132ea:	2b04      	cmp	r3, #4
 80132ec:	bf28      	it	cs
 80132ee:	2304      	movcs	r3, #4
 80132f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	3304      	adds	r3, #4
 80132f6:	2b06      	cmp	r3, #6
 80132f8:	d902      	bls.n	8013300 <NVIC_EncodePriority+0x30>
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	3b03      	subs	r3, #3
 80132fe:	e000      	b.n	8013302 <NVIC_EncodePriority+0x32>
 8013300:	2300      	movs	r3, #0
 8013302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013304:	f04f 32ff 	mov.w	r2, #4294967295
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	fa02 f303 	lsl.w	r3, r2, r3
 801330e:	43da      	mvns	r2, r3
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	401a      	ands	r2, r3
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013318:	f04f 31ff 	mov.w	r1, #4294967295
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	fa01 f303 	lsl.w	r3, r1, r3
 8013322:	43d9      	mvns	r1, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013328:	4313      	orrs	r3, r2
         );
}
 801332a:	4618      	mov	r0, r3
 801332c:	3724      	adds	r7, #36	; 0x24
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr

08013336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013336:	b580      	push	{r7, lr}
 8013338:	b082      	sub	sp, #8
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f7ff ff4c 	bl	80131dc <__NVIC_SetPriorityGrouping>
}
 8013344:	bf00      	nop
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801334c:	b580      	push	{r7, lr}
 801334e:	b086      	sub	sp, #24
 8013350:	af00      	add	r7, sp, #0
 8013352:	4603      	mov	r3, r0
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
 8013358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801335a:	2300      	movs	r3, #0
 801335c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801335e:	f7ff ff61 	bl	8013224 <__NVIC_GetPriorityGrouping>
 8013362:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	68b9      	ldr	r1, [r7, #8]
 8013368:	6978      	ldr	r0, [r7, #20]
 801336a:	f7ff ffb1 	bl	80132d0 <NVIC_EncodePriority>
 801336e:	4602      	mov	r2, r0
 8013370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013374:	4611      	mov	r1, r2
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff ff80 	bl	801327c <__NVIC_SetPriority>
}
 801337c:	bf00      	nop
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b082      	sub	sp, #8
 8013388:	af00      	add	r7, sp, #0
 801338a:	4603      	mov	r3, r0
 801338c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff ff54 	bl	8013240 <__NVIC_EnableIRQ>
}
 8013398:	bf00      	nop
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b086      	sub	sp, #24
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80133a8:	2300      	movs	r3, #0
 80133aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80133ac:	f7ff ff0a 	bl	80131c4 <HAL_GetTick>
 80133b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d101      	bne.n	80133bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80133b8:	2301      	movs	r3, #1
 80133ba:	e099      	b.n	80134f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2200      	movs	r2, #0
 80133c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2202      	movs	r2, #2
 80133c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f022 0201 	bic.w	r2, r2, #1
 80133da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80133dc:	e00f      	b.n	80133fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80133de:	f7ff fef1 	bl	80131c4 <HAL_GetTick>
 80133e2:	4602      	mov	r2, r0
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	2b05      	cmp	r3, #5
 80133ea:	d908      	bls.n	80133fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2220      	movs	r2, #32
 80133f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2203      	movs	r2, #3
 80133f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80133fa:	2303      	movs	r3, #3
 80133fc:	e078      	b.n	80134f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f003 0301 	and.w	r3, r3, #1
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1e8      	bne.n	80133de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	4b38      	ldr	r3, [pc, #224]	; (80134f8 <HAL_DMA_Init+0x158>)
 8013418:	4013      	ands	r3, r2
 801341a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	685a      	ldr	r2, [r3, #4]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	699b      	ldr	r3, [r3, #24]
 801343c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6a1b      	ldr	r3, [r3, #32]
 8013448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801344a:	697a      	ldr	r2, [r7, #20]
 801344c:	4313      	orrs	r3, r2
 801344e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013454:	2b04      	cmp	r3, #4
 8013456:	d107      	bne.n	8013468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013460:	4313      	orrs	r3, r2
 8013462:	697a      	ldr	r2, [r7, #20]
 8013464:	4313      	orrs	r3, r2
 8013466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	697a      	ldr	r2, [r7, #20]
 801346e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	695b      	ldr	r3, [r3, #20]
 8013476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	f023 0307 	bic.w	r3, r3, #7
 801347e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013484:	697a      	ldr	r2, [r7, #20]
 8013486:	4313      	orrs	r3, r2
 8013488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348e:	2b04      	cmp	r3, #4
 8013490:	d117      	bne.n	80134c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013496:	697a      	ldr	r2, [r7, #20]
 8013498:	4313      	orrs	r3, r2
 801349a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d00e      	beq.n	80134c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f000 faab 	bl	8013a00 <DMA_CheckFifoParam>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d008      	beq.n	80134c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2240      	movs	r2, #64	; 0x40
 80134b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2201      	movs	r2, #1
 80134ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80134be:	2301      	movs	r3, #1
 80134c0:	e016      	b.n	80134f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 fa62 	bl	8013994 <DMA_CalcBaseAndBitshift>
 80134d0:	4603      	mov	r3, r0
 80134d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134d8:	223f      	movs	r2, #63	; 0x3f
 80134da:	409a      	lsls	r2, r3
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2201      	movs	r2, #1
 80134ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80134ee:	2300      	movs	r3, #0
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3718      	adds	r7, #24
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	f010803f 	.word	0xf010803f

080134fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b086      	sub	sp, #24
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801350a:	2300      	movs	r3, #0
 801350c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801351a:	2b01      	cmp	r3, #1
 801351c:	d101      	bne.n	8013522 <HAL_DMA_Start_IT+0x26>
 801351e:	2302      	movs	r3, #2
 8013520:	e040      	b.n	80135a4 <HAL_DMA_Start_IT+0xa8>
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2201      	movs	r2, #1
 8013526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2b01      	cmp	r3, #1
 8013534:	d12f      	bne.n	8013596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2202      	movs	r2, #2
 801353a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2200      	movs	r2, #0
 8013542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	687a      	ldr	r2, [r7, #4]
 8013548:	68b9      	ldr	r1, [r7, #8]
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f000 f9f4 	bl	8013938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013554:	223f      	movs	r2, #63	; 0x3f
 8013556:	409a      	lsls	r2, r3
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f042 0216 	orr.w	r2, r2, #22
 801356a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013570:	2b00      	cmp	r3, #0
 8013572:	d007      	beq.n	8013584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f042 0208 	orr.w	r2, r2, #8
 8013582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f042 0201 	orr.w	r2, r2, #1
 8013592:	601a      	str	r2, [r3, #0]
 8013594:	e005      	b.n	80135a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801359e:	2302      	movs	r3, #2
 80135a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80135a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3718      	adds	r7, #24
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b083      	sub	sp, #12
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	2b02      	cmp	r3, #2
 80135be:	d004      	beq.n	80135ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2280      	movs	r2, #128	; 0x80
 80135c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80135c6:	2301      	movs	r3, #1
 80135c8:	e00c      	b.n	80135e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2205      	movs	r2, #5
 80135ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f022 0201 	bic.w	r2, r2, #1
 80135e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80135e2:	2300      	movs	r3, #0
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	370c      	adds	r7, #12
 80135e8:	46bd      	mov	sp, r7
 80135ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ee:	4770      	bx	lr

080135f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b086      	sub	sp, #24
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80135f8:	2300      	movs	r3, #0
 80135fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80135fc:	4b92      	ldr	r3, [pc, #584]	; (8013848 <HAL_DMA_IRQHandler+0x258>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4a92      	ldr	r2, [pc, #584]	; (801384c <HAL_DMA_IRQHandler+0x25c>)
 8013602:	fba2 2303 	umull	r2, r3, r2, r3
 8013606:	0a9b      	lsrs	r3, r3, #10
 8013608:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801360e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801361a:	2208      	movs	r2, #8
 801361c:	409a      	lsls	r2, r3
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	4013      	ands	r3, r2
 8013622:	2b00      	cmp	r3, #0
 8013624:	d01a      	beq.n	801365c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f003 0304 	and.w	r3, r3, #4
 8013630:	2b00      	cmp	r3, #0
 8013632:	d013      	beq.n	801365c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f022 0204 	bic.w	r2, r2, #4
 8013642:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013648:	2208      	movs	r2, #8
 801364a:	409a      	lsls	r2, r3
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013654:	f043 0201 	orr.w	r2, r3, #1
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013660:	2201      	movs	r2, #1
 8013662:	409a      	lsls	r2, r3
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	4013      	ands	r3, r2
 8013668:	2b00      	cmp	r3, #0
 801366a:	d012      	beq.n	8013692 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013676:	2b00      	cmp	r3, #0
 8013678:	d00b      	beq.n	8013692 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801367e:	2201      	movs	r2, #1
 8013680:	409a      	lsls	r2, r3
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801368a:	f043 0202 	orr.w	r2, r3, #2
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013696:	2204      	movs	r2, #4
 8013698:	409a      	lsls	r2, r3
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	4013      	ands	r3, r2
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d012      	beq.n	80136c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f003 0302 	and.w	r3, r3, #2
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d00b      	beq.n	80136c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80136b4:	2204      	movs	r2, #4
 80136b6:	409a      	lsls	r2, r3
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136c0:	f043 0204 	orr.w	r2, r3, #4
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80136cc:	2210      	movs	r2, #16
 80136ce:	409a      	lsls	r2, r3
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	4013      	ands	r3, r2
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d043      	beq.n	8013760 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f003 0308 	and.w	r3, r3, #8
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d03c      	beq.n	8013760 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80136ea:	2210      	movs	r2, #16
 80136ec:	409a      	lsls	r2, r3
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d018      	beq.n	8013732 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801370a:	2b00      	cmp	r3, #0
 801370c:	d108      	bne.n	8013720 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013712:	2b00      	cmp	r3, #0
 8013714:	d024      	beq.n	8013760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	4798      	blx	r3
 801371e:	e01f      	b.n	8013760 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013724:	2b00      	cmp	r3, #0
 8013726:	d01b      	beq.n	8013760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	4798      	blx	r3
 8013730:	e016      	b.n	8013760 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801373c:	2b00      	cmp	r3, #0
 801373e:	d107      	bne.n	8013750 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	681a      	ldr	r2, [r3, #0]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f022 0208 	bic.w	r2, r2, #8
 801374e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013754:	2b00      	cmp	r3, #0
 8013756:	d003      	beq.n	8013760 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013764:	2220      	movs	r2, #32
 8013766:	409a      	lsls	r2, r3
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	4013      	ands	r3, r2
 801376c:	2b00      	cmp	r3, #0
 801376e:	f000 808e 	beq.w	801388e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f003 0310 	and.w	r3, r3, #16
 801377c:	2b00      	cmp	r3, #0
 801377e:	f000 8086 	beq.w	801388e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013786:	2220      	movs	r2, #32
 8013788:	409a      	lsls	r2, r3
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013794:	b2db      	uxtb	r3, r3
 8013796:	2b05      	cmp	r3, #5
 8013798:	d136      	bne.n	8013808 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f022 0216 	bic.w	r2, r2, #22
 80137a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	695a      	ldr	r2, [r3, #20]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d103      	bne.n	80137ca <HAL_DMA_IRQHandler+0x1da>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d007      	beq.n	80137da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	681a      	ldr	r2, [r3, #0]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f022 0208 	bic.w	r2, r2, #8
 80137d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137de:	223f      	movs	r2, #63	; 0x3f
 80137e0:	409a      	lsls	r2, r3
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2201      	movs	r2, #1
 80137f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d07d      	beq.n	80138fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	4798      	blx	r3
        }
        return;
 8013806:	e078      	b.n	80138fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013812:	2b00      	cmp	r3, #0
 8013814:	d01c      	beq.n	8013850 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013820:	2b00      	cmp	r3, #0
 8013822:	d108      	bne.n	8013836 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013828:	2b00      	cmp	r3, #0
 801382a:	d030      	beq.n	801388e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	4798      	blx	r3
 8013834:	e02b      	b.n	801388e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801383a:	2b00      	cmp	r3, #0
 801383c:	d027      	beq.n	801388e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	4798      	blx	r3
 8013846:	e022      	b.n	801388e <HAL_DMA_IRQHandler+0x29e>
 8013848:	20000000 	.word	0x20000000
 801384c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801385a:	2b00      	cmp	r3, #0
 801385c:	d10f      	bne.n	801387e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f022 0210 	bic.w	r2, r2, #16
 801386c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2200      	movs	r2, #0
 8013872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2201      	movs	r2, #1
 801387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013882:	2b00      	cmp	r3, #0
 8013884:	d003      	beq.n	801388e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013892:	2b00      	cmp	r3, #0
 8013894:	d032      	beq.n	80138fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801389a:	f003 0301 	and.w	r3, r3, #1
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d022      	beq.n	80138e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2205      	movs	r2, #5
 80138a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f022 0201 	bic.w	r2, r2, #1
 80138b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	3301      	adds	r3, #1
 80138be:	60bb      	str	r3, [r7, #8]
 80138c0:	697a      	ldr	r2, [r7, #20]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d307      	bcc.n	80138d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f003 0301 	and.w	r3, r3, #1
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d1f2      	bne.n	80138ba <HAL_DMA_IRQHandler+0x2ca>
 80138d4:	e000      	b.n	80138d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80138d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2201      	movs	r2, #1
 80138e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d005      	beq.n	80138fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	4798      	blx	r3
 80138f8:	e000      	b.n	80138fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80138fa:	bf00      	nop
    }
  }
}
 80138fc:	3718      	adds	r7, #24
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop

08013904 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013912:	b2db      	uxtb	r3, r3
}
 8013914:	4618      	mov	r0, r3
 8013916:	370c      	adds	r7, #12
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr

08013920 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8013920:	b480      	push	{r7}
 8013922:	b083      	sub	sp, #12
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801392c:	4618      	mov	r0, r3
 801392e:	370c      	adds	r7, #12
 8013930:	46bd      	mov	sp, r7
 8013932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013936:	4770      	bx	lr

08013938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013938:	b480      	push	{r7}
 801393a:	b085      	sub	sp, #20
 801393c:	af00      	add	r7, sp, #0
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	60b9      	str	r1, [r7, #8]
 8013942:	607a      	str	r2, [r7, #4]
 8013944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	683a      	ldr	r2, [r7, #0]
 801395c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	2b40      	cmp	r3, #64	; 0x40
 8013964:	d108      	bne.n	8013978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	68ba      	ldr	r2, [r7, #8]
 8013974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8013976:	e007      	b.n	8013988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	68ba      	ldr	r2, [r7, #8]
 801397e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	60da      	str	r2, [r3, #12]
}
 8013988:	bf00      	nop
 801398a:	3714      	adds	r7, #20
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr

08013994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8013994:	b480      	push	{r7}
 8013996:	b085      	sub	sp, #20
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	3b10      	subs	r3, #16
 80139a4:	4a14      	ldr	r2, [pc, #80]	; (80139f8 <DMA_CalcBaseAndBitshift+0x64>)
 80139a6:	fba2 2303 	umull	r2, r3, r2, r3
 80139aa:	091b      	lsrs	r3, r3, #4
 80139ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80139ae:	4a13      	ldr	r2, [pc, #76]	; (80139fc <DMA_CalcBaseAndBitshift+0x68>)
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	4413      	add	r3, r2
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	461a      	mov	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b03      	cmp	r3, #3
 80139c0:	d909      	bls.n	80139d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80139ca:	f023 0303 	bic.w	r3, r3, #3
 80139ce:	1d1a      	adds	r2, r3, #4
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	659a      	str	r2, [r3, #88]	; 0x58
 80139d4:	e007      	b.n	80139e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80139de:	f023 0303 	bic.w	r3, r3, #3
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3714      	adds	r7, #20
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr
 80139f6:	bf00      	nop
 80139f8:	aaaaaaab 	.word	0xaaaaaaab
 80139fc:	0801aafc 	.word	0x0801aafc

08013a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b085      	sub	sp, #20
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	699b      	ldr	r3, [r3, #24]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d11f      	bne.n	8013a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	2b03      	cmp	r3, #3
 8013a1e:	d855      	bhi.n	8013acc <DMA_CheckFifoParam+0xcc>
 8013a20:	a201      	add	r2, pc, #4	; (adr r2, 8013a28 <DMA_CheckFifoParam+0x28>)
 8013a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a26:	bf00      	nop
 8013a28:	08013a39 	.word	0x08013a39
 8013a2c:	08013a4b 	.word	0x08013a4b
 8013a30:	08013a39 	.word	0x08013a39
 8013a34:	08013acd 	.word	0x08013acd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d045      	beq.n	8013ad0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8013a44:	2301      	movs	r3, #1
 8013a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013a48:	e042      	b.n	8013ad0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013a52:	d13f      	bne.n	8013ad4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8013a54:	2301      	movs	r3, #1
 8013a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013a58:	e03c      	b.n	8013ad4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	699b      	ldr	r3, [r3, #24]
 8013a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a62:	d121      	bne.n	8013aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b03      	cmp	r3, #3
 8013a68:	d836      	bhi.n	8013ad8 <DMA_CheckFifoParam+0xd8>
 8013a6a:	a201      	add	r2, pc, #4	; (adr r2, 8013a70 <DMA_CheckFifoParam+0x70>)
 8013a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a70:	08013a81 	.word	0x08013a81
 8013a74:	08013a87 	.word	0x08013a87
 8013a78:	08013a81 	.word	0x08013a81
 8013a7c:	08013a99 	.word	0x08013a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8013a80:	2301      	movs	r3, #1
 8013a82:	73fb      	strb	r3, [r7, #15]
      break;
 8013a84:	e02f      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d024      	beq.n	8013adc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8013a92:	2301      	movs	r3, #1
 8013a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013a96:	e021      	b.n	8013adc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013aa0:	d11e      	bne.n	8013ae0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8013aa6:	e01b      	b.n	8013ae0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	2b02      	cmp	r3, #2
 8013aac:	d902      	bls.n	8013ab4 <DMA_CheckFifoParam+0xb4>
 8013aae:	2b03      	cmp	r3, #3
 8013ab0:	d003      	beq.n	8013aba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013ab2:	e018      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8013ab8:	e015      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00e      	beq.n	8013ae4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8013aca:	e00b      	b.n	8013ae4 <DMA_CheckFifoParam+0xe4>
      break;
 8013acc:	bf00      	nop
 8013ace:	e00a      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8013ad0:	bf00      	nop
 8013ad2:	e008      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8013ad4:	bf00      	nop
 8013ad6:	e006      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8013ad8:	bf00      	nop
 8013ada:	e004      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8013adc:	bf00      	nop
 8013ade:	e002      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      break;   
 8013ae0:	bf00      	nop
 8013ae2:	e000      	b.n	8013ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8013ae4:	bf00      	nop
    }
  } 
  
  return status; 
 8013ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3714      	adds	r7, #20
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013b02:	2301      	movs	r3, #1
 8013b04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013b06:	4b23      	ldr	r3, [pc, #140]	; (8013b94 <HAL_FLASH_Program+0xa0>)
 8013b08:	7e1b      	ldrb	r3, [r3, #24]
 8013b0a:	2b01      	cmp	r3, #1
 8013b0c:	d101      	bne.n	8013b12 <HAL_FLASH_Program+0x1e>
 8013b0e:	2302      	movs	r3, #2
 8013b10:	e03b      	b.n	8013b8a <HAL_FLASH_Program+0x96>
 8013b12:	4b20      	ldr	r3, [pc, #128]	; (8013b94 <HAL_FLASH_Program+0xa0>)
 8013b14:	2201      	movs	r2, #1
 8013b16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013b1c:	f000 f870 	bl	8013c00 <FLASH_WaitForLastOperation>
 8013b20:	4603      	mov	r3, r0
 8013b22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8013b24:	7dfb      	ldrb	r3, [r7, #23]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d12b      	bne.n	8013b82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d105      	bne.n	8013b3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8013b30:	783b      	ldrb	r3, [r7, #0]
 8013b32:	4619      	mov	r1, r3
 8013b34:	68b8      	ldr	r0, [r7, #8]
 8013b36:	f000 f905 	bl	8013d44 <FLASH_Program_Byte>
 8013b3a:	e016      	b.n	8013b6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d105      	bne.n	8013b4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8013b42:	883b      	ldrh	r3, [r7, #0]
 8013b44:	4619      	mov	r1, r3
 8013b46:	68b8      	ldr	r0, [r7, #8]
 8013b48:	f000 f8d8 	bl	8013cfc <FLASH_Program_HalfWord>
 8013b4c:	e00d      	b.n	8013b6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	d105      	bne.n	8013b60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	4619      	mov	r1, r3
 8013b58:	68b8      	ldr	r0, [r7, #8]
 8013b5a:	f000 f8ad 	bl	8013cb8 <FLASH_Program_Word>
 8013b5e:	e004      	b.n	8013b6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8013b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b64:	68b8      	ldr	r0, [r7, #8]
 8013b66:	f000 f877 	bl	8013c58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013b6e:	f000 f847 	bl	8013c00 <FLASH_WaitForLastOperation>
 8013b72:	4603      	mov	r3, r0
 8013b74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8013b76:	4b08      	ldr	r3, [pc, #32]	; (8013b98 <HAL_FLASH_Program+0xa4>)
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	4a07      	ldr	r2, [pc, #28]	; (8013b98 <HAL_FLASH_Program+0xa4>)
 8013b7c:	f023 0301 	bic.w	r3, r3, #1
 8013b80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013b82:	4b04      	ldr	r3, [pc, #16]	; (8013b94 <HAL_FLASH_Program+0xa0>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8013b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3718      	adds	r7, #24
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	2000e640 	.word	0x2000e640
 8013b98:	40023c00 	.word	0x40023c00

08013b9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8013ba6:	4b0b      	ldr	r3, [pc, #44]	; (8013bd4 <HAL_FLASH_Unlock+0x38>)
 8013ba8:	691b      	ldr	r3, [r3, #16]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	da0b      	bge.n	8013bc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013bae:	4b09      	ldr	r3, [pc, #36]	; (8013bd4 <HAL_FLASH_Unlock+0x38>)
 8013bb0:	4a09      	ldr	r2, [pc, #36]	; (8013bd8 <HAL_FLASH_Unlock+0x3c>)
 8013bb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013bb4:	4b07      	ldr	r3, [pc, #28]	; (8013bd4 <HAL_FLASH_Unlock+0x38>)
 8013bb6:	4a09      	ldr	r2, [pc, #36]	; (8013bdc <HAL_FLASH_Unlock+0x40>)
 8013bb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8013bba:	4b06      	ldr	r3, [pc, #24]	; (8013bd4 <HAL_FLASH_Unlock+0x38>)
 8013bbc:	691b      	ldr	r3, [r3, #16]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	da01      	bge.n	8013bc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8013bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	370c      	adds	r7, #12
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	40023c00 	.word	0x40023c00
 8013bd8:	45670123 	.word	0x45670123
 8013bdc:	cdef89ab 	.word	0xcdef89ab

08013be0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8013be0:	b480      	push	{r7}
 8013be2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8013be4:	4b05      	ldr	r3, [pc, #20]	; (8013bfc <HAL_FLASH_Lock+0x1c>)
 8013be6:	691b      	ldr	r3, [r3, #16]
 8013be8:	4a04      	ldr	r2, [pc, #16]	; (8013bfc <HAL_FLASH_Lock+0x1c>)
 8013bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013bee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr
 8013bfc:	40023c00 	.word	0x40023c00

08013c00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
	 uint32_t timeout = HAL_GetTick();
 8013c08:	f7ff fadc 	bl	80131c4 <HAL_GetTick>
 8013c0c:	60f8      	str	r0, [r7, #12]
	 while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8013c0e:	e00d      	b.n	8013c2c <FLASH_WaitForLastOperation+0x2c>
	 {
		 if(Timeout != HAL_MAX_DELAY)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c16:	d009      	beq.n	8013c2c <FLASH_WaitForLastOperation+0x2c>
		 {
			 if(HAL_GetTick()-timeout >= Timeout)
 8013c18:	f7ff fad4 	bl	80131c4 <HAL_GetTick>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d801      	bhi.n	8013c2c <FLASH_WaitForLastOperation+0x2c>
			 {
				 return HAL_TIMEOUT;
 8013c28:	2303      	movs	r3, #3
 8013c2a:	e00f      	b.n	8013c4c <FLASH_WaitForLastOperation+0x4c>
	 while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8013c2c:	4b09      	ldr	r3, [pc, #36]	; (8013c54 <FLASH_WaitForLastOperation+0x54>)
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d1eb      	bne.n	8013c10 <FLASH_WaitForLastOperation+0x10>
		 }
	 }
	 /* Check FLASH End of Operation flag */


	 if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8013c38:	4b06      	ldr	r3, [pc, #24]	; (8013c54 <FLASH_WaitForLastOperation+0x54>)
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	f003 0301 	and.w	r3, r3, #1
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d002      	beq.n	8013c4a <FLASH_WaitForLastOperation+0x4a>
	 {
		 /* Clear FLASH End of Operation pending bit */
		 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013c44:	4b03      	ldr	r3, [pc, #12]	; (8013c54 <FLASH_WaitForLastOperation+0x54>)
 8013c46:	2201      	movs	r2, #1
 8013c48:	60da      	str	r2, [r3, #12]
	 }

	 /* There is no error flag set */

	 return HAL_OK;
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	40023c00 	.word	0x40023c00

08013c58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013c58:	b490      	push	{r4, r7}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013c64:	4b13      	ldr	r3, [pc, #76]	; (8013cb4 <FLASH_Program_DoubleWord+0x5c>)
 8013c66:	691b      	ldr	r3, [r3, #16]
 8013c68:	4a12      	ldr	r2, [pc, #72]	; (8013cb4 <FLASH_Program_DoubleWord+0x5c>)
 8013c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8013c70:	4b10      	ldr	r3, [pc, #64]	; (8013cb4 <FLASH_Program_DoubleWord+0x5c>)
 8013c72:	691b      	ldr	r3, [r3, #16]
 8013c74:	4a0f      	ldr	r2, [pc, #60]	; (8013cb4 <FLASH_Program_DoubleWord+0x5c>)
 8013c76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013c7c:	4b0d      	ldr	r3, [pc, #52]	; (8013cb4 <FLASH_Program_DoubleWord+0x5c>)
 8013c7e:	691b      	ldr	r3, [r3, #16]
 8013c80:	4a0c      	ldr	r2, [pc, #48]	; (8013cb4 <FLASH_Program_DoubleWord+0x5c>)
 8013c82:	f043 0301 	orr.w	r3, r3, #1
 8013c86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	683a      	ldr	r2, [r7, #0]
 8013c8c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8013c8e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8013c92:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013c96:	f04f 0300 	mov.w	r3, #0
 8013c9a:	f04f 0400 	mov.w	r4, #0
 8013c9e:	0013      	movs	r3, r2
 8013ca0:	2400      	movs	r4, #0
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	3204      	adds	r2, #4
 8013ca6:	6013      	str	r3, [r2, #0]
}
 8013ca8:	bf00      	nop
 8013caa:	3710      	adds	r7, #16
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bc90      	pop	{r4, r7}
 8013cb0:	4770      	bx	lr
 8013cb2:	bf00      	nop
 8013cb4:	40023c00 	.word	0x40023c00

08013cb8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013cc2:	4b0d      	ldr	r3, [pc, #52]	; (8013cf8 <FLASH_Program_Word+0x40>)
 8013cc4:	691b      	ldr	r3, [r3, #16]
 8013cc6:	4a0c      	ldr	r2, [pc, #48]	; (8013cf8 <FLASH_Program_Word+0x40>)
 8013cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8013cce:	4b0a      	ldr	r3, [pc, #40]	; (8013cf8 <FLASH_Program_Word+0x40>)
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	4a09      	ldr	r2, [pc, #36]	; (8013cf8 <FLASH_Program_Word+0x40>)
 8013cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013cd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013cda:	4b07      	ldr	r3, [pc, #28]	; (8013cf8 <FLASH_Program_Word+0x40>)
 8013cdc:	691b      	ldr	r3, [r3, #16]
 8013cde:	4a06      	ldr	r2, [pc, #24]	; (8013cf8 <FLASH_Program_Word+0x40>)
 8013ce0:	f043 0301 	orr.w	r3, r3, #1
 8013ce4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	601a      	str	r2, [r3, #0]
}
 8013cec:	bf00      	nop
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	40023c00 	.word	0x40023c00

08013cfc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b083      	sub	sp, #12
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	460b      	mov	r3, r1
 8013d06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013d08:	4b0d      	ldr	r3, [pc, #52]	; (8013d40 <FLASH_Program_HalfWord+0x44>)
 8013d0a:	691b      	ldr	r3, [r3, #16]
 8013d0c:	4a0c      	ldr	r2, [pc, #48]	; (8013d40 <FLASH_Program_HalfWord+0x44>)
 8013d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8013d14:	4b0a      	ldr	r3, [pc, #40]	; (8013d40 <FLASH_Program_HalfWord+0x44>)
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	4a09      	ldr	r2, [pc, #36]	; (8013d40 <FLASH_Program_HalfWord+0x44>)
 8013d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013d20:	4b07      	ldr	r3, [pc, #28]	; (8013d40 <FLASH_Program_HalfWord+0x44>)
 8013d22:	691b      	ldr	r3, [r3, #16]
 8013d24:	4a06      	ldr	r2, [pc, #24]	; (8013d40 <FLASH_Program_HalfWord+0x44>)
 8013d26:	f043 0301 	orr.w	r3, r3, #1
 8013d2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	887a      	ldrh	r2, [r7, #2]
 8013d30:	801a      	strh	r2, [r3, #0]
}
 8013d32:	bf00      	nop
 8013d34:	370c      	adds	r7, #12
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop
 8013d40:	40023c00 	.word	0x40023c00

08013d44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013d50:	4b0c      	ldr	r3, [pc, #48]	; (8013d84 <FLASH_Program_Byte+0x40>)
 8013d52:	691b      	ldr	r3, [r3, #16]
 8013d54:	4a0b      	ldr	r2, [pc, #44]	; (8013d84 <FLASH_Program_Byte+0x40>)
 8013d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8013d5c:	4b09      	ldr	r3, [pc, #36]	; (8013d84 <FLASH_Program_Byte+0x40>)
 8013d5e:	4a09      	ldr	r2, [pc, #36]	; (8013d84 <FLASH_Program_Byte+0x40>)
 8013d60:	691b      	ldr	r3, [r3, #16]
 8013d62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013d64:	4b07      	ldr	r3, [pc, #28]	; (8013d84 <FLASH_Program_Byte+0x40>)
 8013d66:	691b      	ldr	r3, [r3, #16]
 8013d68:	4a06      	ldr	r2, [pc, #24]	; (8013d84 <FLASH_Program_Byte+0x40>)
 8013d6a:	f043 0301 	orr.w	r3, r3, #1
 8013d6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	78fa      	ldrb	r2, [r7, #3]
 8013d74:	701a      	strb	r2, [r3, #0]
}
 8013d76:	bf00      	nop
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr
 8013d82:	bf00      	nop
 8013d84:	40023c00 	.word	0x40023c00

08013d88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013d92:	2301      	movs	r3, #1
 8013d94:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8013d96:	2300      	movs	r3, #0
 8013d98:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013d9a:	4b31      	ldr	r3, [pc, #196]	; (8013e60 <HAL_FLASHEx_Erase+0xd8>)
 8013d9c:	7e1b      	ldrb	r3, [r3, #24]
 8013d9e:	2b01      	cmp	r3, #1
 8013da0:	d101      	bne.n	8013da6 <HAL_FLASHEx_Erase+0x1e>
 8013da2:	2302      	movs	r3, #2
 8013da4:	e058      	b.n	8013e58 <HAL_FLASHEx_Erase+0xd0>
 8013da6:	4b2e      	ldr	r3, [pc, #184]	; (8013e60 <HAL_FLASHEx_Erase+0xd8>)
 8013da8:	2201      	movs	r2, #1
 8013daa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013db0:	f7ff ff26 	bl	8013c00 <FLASH_WaitForLastOperation>
 8013db4:	4603      	mov	r3, r0
 8013db6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8013db8:	7bfb      	ldrb	r3, [r7, #15]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d148      	bne.n	8013e50 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2b01      	cmp	r3, #1
 8013dcc:	d115      	bne.n	8013dfa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	691b      	ldr	r3, [r3, #16]
 8013dd2:	b2da      	uxtb	r2, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	4619      	mov	r1, r3
 8013dda:	4610      	mov	r0, r2
 8013ddc:	f000 f844 	bl	8013e68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013de0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013de4:	f7ff ff0c 	bl	8013c00 <FLASH_WaitForLastOperation>
 8013de8:	4603      	mov	r3, r0
 8013dea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8013dec:	4b1d      	ldr	r3, [pc, #116]	; (8013e64 <HAL_FLASHEx_Erase+0xdc>)
 8013dee:	691b      	ldr	r3, [r3, #16]
 8013df0:	4a1c      	ldr	r2, [pc, #112]	; (8013e64 <HAL_FLASHEx_Erase+0xdc>)
 8013df2:	f023 0304 	bic.w	r3, r3, #4
 8013df6:	6113      	str	r3, [r2, #16]
 8013df8:	e028      	b.n	8013e4c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	689b      	ldr	r3, [r3, #8]
 8013dfe:	60bb      	str	r3, [r7, #8]
 8013e00:	e01c      	b.n	8013e3c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	4619      	mov	r1, r3
 8013e0a:	68b8      	ldr	r0, [r7, #8]
 8013e0c:	f000 f850 	bl	8013eb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013e14:	f7ff fef4 	bl	8013c00 <FLASH_WaitForLastOperation>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8013e1c:	4b11      	ldr	r3, [pc, #68]	; (8013e64 <HAL_FLASHEx_Erase+0xdc>)
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	4a10      	ldr	r2, [pc, #64]	; (8013e64 <HAL_FLASHEx_Erase+0xdc>)
 8013e22:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8013e26:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8013e28:	7bfb      	ldrb	r3, [r7, #15]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d003      	beq.n	8013e36 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	68ba      	ldr	r2, [r7, #8]
 8013e32:	601a      	str	r2, [r3, #0]
          break;
 8013e34:	e00a      	b.n	8013e4c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	3301      	adds	r3, #1
 8013e3a:	60bb      	str	r3, [r7, #8]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	68da      	ldr	r2, [r3, #12]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	689b      	ldr	r3, [r3, #8]
 8013e44:	4413      	add	r3, r2
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d3da      	bcc.n	8013e02 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8013e4c:	f000 f878 	bl	8013f40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013e50:	4b03      	ldr	r3, [pc, #12]	; (8013e60 <HAL_FLASHEx_Erase+0xd8>)
 8013e52:	2200      	movs	r2, #0
 8013e54:	761a      	strb	r2, [r3, #24]

  return status;
 8013e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3710      	adds	r7, #16
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	2000e640 	.word	0x2000e640
 8013e64:	40023c00 	.word	0x40023c00

08013e68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b083      	sub	sp, #12
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	4603      	mov	r3, r0
 8013e70:	6039      	str	r1, [r7, #0]
 8013e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013e74:	4b0d      	ldr	r3, [pc, #52]	; (8013eac <FLASH_MassErase+0x44>)
 8013e76:	691b      	ldr	r3, [r3, #16]
 8013e78:	4a0c      	ldr	r2, [pc, #48]	; (8013eac <FLASH_MassErase+0x44>)
 8013e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8013e80:	4b0a      	ldr	r3, [pc, #40]	; (8013eac <FLASH_MassErase+0x44>)
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	4a09      	ldr	r2, [pc, #36]	; (8013eac <FLASH_MassErase+0x44>)
 8013e86:	f043 0304 	orr.w	r3, r3, #4
 8013e8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8013e8c:	4b07      	ldr	r3, [pc, #28]	; (8013eac <FLASH_MassErase+0x44>)
 8013e8e:	691a      	ldr	r2, [r3, #16]
 8013e90:	79fb      	ldrb	r3, [r7, #7]
 8013e92:	021b      	lsls	r3, r3, #8
 8013e94:	4313      	orrs	r3, r2
 8013e96:	4a05      	ldr	r2, [pc, #20]	; (8013eac <FLASH_MassErase+0x44>)
 8013e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013e9c:	6113      	str	r3, [r2, #16]
}
 8013e9e:	bf00      	nop
 8013ea0:	370c      	adds	r7, #12
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	40023c00 	.word	0x40023c00

08013eb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b085      	sub	sp, #20
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	460b      	mov	r3, r1
 8013eba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8013ec0:	78fb      	ldrb	r3, [r7, #3]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d102      	bne.n	8013ecc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	60fb      	str	r3, [r7, #12]
 8013eca:	e010      	b.n	8013eee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8013ecc:	78fb      	ldrb	r3, [r7, #3]
 8013ece:	2b01      	cmp	r3, #1
 8013ed0:	d103      	bne.n	8013eda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8013ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ed6:	60fb      	str	r3, [r7, #12]
 8013ed8:	e009      	b.n	8013eee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8013eda:	78fb      	ldrb	r3, [r7, #3]
 8013edc:	2b02      	cmp	r3, #2
 8013ede:	d103      	bne.n	8013ee8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8013ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ee4:	60fb      	str	r3, [r7, #12]
 8013ee6:	e002      	b.n	8013eee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8013ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013eec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013eee:	4b13      	ldr	r3, [pc, #76]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013ef0:	691b      	ldr	r3, [r3, #16]
 8013ef2:	4a12      	ldr	r2, [pc, #72]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ef8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8013efa:	4b10      	ldr	r3, [pc, #64]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013efc:	691a      	ldr	r2, [r3, #16]
 8013efe:	490f      	ldr	r1, [pc, #60]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	4313      	orrs	r3, r2
 8013f04:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8013f06:	4b0d      	ldr	r3, [pc, #52]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f08:	691b      	ldr	r3, [r3, #16]
 8013f0a:	4a0c      	ldr	r2, [pc, #48]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8013f10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8013f12:	4b0a      	ldr	r3, [pc, #40]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f14:	691a      	ldr	r2, [r3, #16]
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	00db      	lsls	r3, r3, #3
 8013f1a:	4313      	orrs	r3, r2
 8013f1c:	4a07      	ldr	r2, [pc, #28]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f1e:	f043 0302 	orr.w	r3, r3, #2
 8013f22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8013f24:	4b05      	ldr	r3, [pc, #20]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f26:	691b      	ldr	r3, [r3, #16]
 8013f28:	4a04      	ldr	r2, [pc, #16]	; (8013f3c <FLASH_Erase_Sector+0x8c>)
 8013f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013f2e:	6113      	str	r3, [r2, #16]
}
 8013f30:	bf00      	nop
 8013f32:	3714      	adds	r7, #20
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr
 8013f3c:	40023c00 	.word	0x40023c00

08013f40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8013f40:	b480      	push	{r7}
 8013f42:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8013f44:	4b20      	ldr	r3, [pc, #128]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d017      	beq.n	8013f80 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8013f50:	4b1d      	ldr	r3, [pc, #116]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4a1c      	ldr	r2, [pc, #112]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013f5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8013f5c:	4b1a      	ldr	r3, [pc, #104]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4a19      	ldr	r2, [pc, #100]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	4b17      	ldr	r3, [pc, #92]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a16      	ldr	r2, [pc, #88]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013f74:	4b14      	ldr	r3, [pc, #80]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4a13      	ldr	r2, [pc, #76]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013f7e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8013f80:	4b11      	ldr	r3, [pc, #68]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d017      	beq.n	8013fbc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8013f8c:	4b0e      	ldr	r3, [pc, #56]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4a0d      	ldr	r2, [pc, #52]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013f96:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8013f98:	4b0b      	ldr	r3, [pc, #44]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	4a0a      	ldr	r2, [pc, #40]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013f9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013fa2:	6013      	str	r3, [r2, #0]
 8013fa4:	4b08      	ldr	r3, [pc, #32]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4a07      	ldr	r2, [pc, #28]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013fae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8013fb0:	4b05      	ldr	r3, [pc, #20]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a04      	ldr	r2, [pc, #16]	; (8013fc8 <FLASH_FlushCaches+0x88>)
 8013fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013fba:	6013      	str	r3, [r2, #0]
  }
}
 8013fbc:	bf00      	nop
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	40023c00 	.word	0x40023c00

08013fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b089      	sub	sp, #36	; 0x24
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	61fb      	str	r3, [r7, #28]
 8013fe6:	e159      	b.n	801429c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013fe8:	2201      	movs	r2, #1
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	fa02 f303 	lsl.w	r3, r2, r3
 8013ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	697a      	ldr	r2, [r7, #20]
 8013ff8:	4013      	ands	r3, r2
 8013ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013ffc:	693a      	ldr	r2, [r7, #16]
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	429a      	cmp	r2, r3
 8014002:	f040 8148 	bne.w	8014296 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d00b      	beq.n	8014026 <HAL_GPIO_Init+0x5a>
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	2b02      	cmp	r3, #2
 8014014:	d007      	beq.n	8014026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801401a:	2b11      	cmp	r3, #17
 801401c:	d003      	beq.n	8014026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	2b12      	cmp	r3, #18
 8014024:	d130      	bne.n	8014088 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	005b      	lsls	r3, r3, #1
 8014030:	2203      	movs	r2, #3
 8014032:	fa02 f303 	lsl.w	r3, r2, r3
 8014036:	43db      	mvns	r3, r3
 8014038:	69ba      	ldr	r2, [r7, #24]
 801403a:	4013      	ands	r3, r2
 801403c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	68da      	ldr	r2, [r3, #12]
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	005b      	lsls	r3, r3, #1
 8014046:	fa02 f303 	lsl.w	r3, r2, r3
 801404a:	69ba      	ldr	r2, [r7, #24]
 801404c:	4313      	orrs	r3, r2
 801404e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	69ba      	ldr	r2, [r7, #24]
 8014054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801405c:	2201      	movs	r2, #1
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	fa02 f303 	lsl.w	r3, r2, r3
 8014064:	43db      	mvns	r3, r3
 8014066:	69ba      	ldr	r2, [r7, #24]
 8014068:	4013      	ands	r3, r2
 801406a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	091b      	lsrs	r3, r3, #4
 8014072:	f003 0201 	and.w	r2, r3, #1
 8014076:	69fb      	ldr	r3, [r7, #28]
 8014078:	fa02 f303 	lsl.w	r3, r2, r3
 801407c:	69ba      	ldr	r2, [r7, #24]
 801407e:	4313      	orrs	r3, r2
 8014080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	69ba      	ldr	r2, [r7, #24]
 8014086:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	005b      	lsls	r3, r3, #1
 8014092:	2203      	movs	r2, #3
 8014094:	fa02 f303 	lsl.w	r3, r2, r3
 8014098:	43db      	mvns	r3, r3
 801409a:	69ba      	ldr	r2, [r7, #24]
 801409c:	4013      	ands	r3, r2
 801409e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	689a      	ldr	r2, [r3, #8]
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	005b      	lsls	r3, r3, #1
 80140a8:	fa02 f303 	lsl.w	r3, r2, r3
 80140ac:	69ba      	ldr	r2, [r7, #24]
 80140ae:	4313      	orrs	r3, r2
 80140b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	69ba      	ldr	r2, [r7, #24]
 80140b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	685b      	ldr	r3, [r3, #4]
 80140bc:	2b02      	cmp	r3, #2
 80140be:	d003      	beq.n	80140c8 <HAL_GPIO_Init+0xfc>
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	2b12      	cmp	r3, #18
 80140c6:	d123      	bne.n	8014110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	08da      	lsrs	r2, r3, #3
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	3208      	adds	r2, #8
 80140d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	f003 0307 	and.w	r3, r3, #7
 80140dc:	009b      	lsls	r3, r3, #2
 80140de:	220f      	movs	r2, #15
 80140e0:	fa02 f303 	lsl.w	r3, r2, r3
 80140e4:	43db      	mvns	r3, r3
 80140e6:	69ba      	ldr	r2, [r7, #24]
 80140e8:	4013      	ands	r3, r2
 80140ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	691a      	ldr	r2, [r3, #16]
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	f003 0307 	and.w	r3, r3, #7
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	fa02 f303 	lsl.w	r3, r2, r3
 80140fc:	69ba      	ldr	r2, [r7, #24]
 80140fe:	4313      	orrs	r3, r2
 8014100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	08da      	lsrs	r2, r3, #3
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	3208      	adds	r2, #8
 801410a:	69b9      	ldr	r1, [r7, #24]
 801410c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8014116:	69fb      	ldr	r3, [r7, #28]
 8014118:	005b      	lsls	r3, r3, #1
 801411a:	2203      	movs	r2, #3
 801411c:	fa02 f303 	lsl.w	r3, r2, r3
 8014120:	43db      	mvns	r3, r3
 8014122:	69ba      	ldr	r2, [r7, #24]
 8014124:	4013      	ands	r3, r2
 8014126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	f003 0203 	and.w	r2, r3, #3
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	fa02 f303 	lsl.w	r3, r2, r3
 8014138:	69ba      	ldr	r2, [r7, #24]
 801413a:	4313      	orrs	r3, r2
 801413c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	69ba      	ldr	r2, [r7, #24]
 8014142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801414c:	2b00      	cmp	r3, #0
 801414e:	f000 80a2 	beq.w	8014296 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014152:	2300      	movs	r3, #0
 8014154:	60fb      	str	r3, [r7, #12]
 8014156:	4b56      	ldr	r3, [pc, #344]	; (80142b0 <HAL_GPIO_Init+0x2e4>)
 8014158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801415a:	4a55      	ldr	r2, [pc, #340]	; (80142b0 <HAL_GPIO_Init+0x2e4>)
 801415c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014160:	6453      	str	r3, [r2, #68]	; 0x44
 8014162:	4b53      	ldr	r3, [pc, #332]	; (80142b0 <HAL_GPIO_Init+0x2e4>)
 8014164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801416a:	60fb      	str	r3, [r7, #12]
 801416c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801416e:	4a51      	ldr	r2, [pc, #324]	; (80142b4 <HAL_GPIO_Init+0x2e8>)
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	089b      	lsrs	r3, r3, #2
 8014174:	3302      	adds	r3, #2
 8014176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801417a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	f003 0303 	and.w	r3, r3, #3
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	220f      	movs	r2, #15
 8014186:	fa02 f303 	lsl.w	r3, r2, r3
 801418a:	43db      	mvns	r3, r3
 801418c:	69ba      	ldr	r2, [r7, #24]
 801418e:	4013      	ands	r3, r2
 8014190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	4a48      	ldr	r2, [pc, #288]	; (80142b8 <HAL_GPIO_Init+0x2ec>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d019      	beq.n	80141ce <HAL_GPIO_Init+0x202>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	4a47      	ldr	r2, [pc, #284]	; (80142bc <HAL_GPIO_Init+0x2f0>)
 801419e:	4293      	cmp	r3, r2
 80141a0:	d013      	beq.n	80141ca <HAL_GPIO_Init+0x1fe>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4a46      	ldr	r2, [pc, #280]	; (80142c0 <HAL_GPIO_Init+0x2f4>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d00d      	beq.n	80141c6 <HAL_GPIO_Init+0x1fa>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	4a45      	ldr	r2, [pc, #276]	; (80142c4 <HAL_GPIO_Init+0x2f8>)
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d007      	beq.n	80141c2 <HAL_GPIO_Init+0x1f6>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	4a44      	ldr	r2, [pc, #272]	; (80142c8 <HAL_GPIO_Init+0x2fc>)
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d101      	bne.n	80141be <HAL_GPIO_Init+0x1f2>
 80141ba:	2304      	movs	r3, #4
 80141bc:	e008      	b.n	80141d0 <HAL_GPIO_Init+0x204>
 80141be:	2307      	movs	r3, #7
 80141c0:	e006      	b.n	80141d0 <HAL_GPIO_Init+0x204>
 80141c2:	2303      	movs	r3, #3
 80141c4:	e004      	b.n	80141d0 <HAL_GPIO_Init+0x204>
 80141c6:	2302      	movs	r3, #2
 80141c8:	e002      	b.n	80141d0 <HAL_GPIO_Init+0x204>
 80141ca:	2301      	movs	r3, #1
 80141cc:	e000      	b.n	80141d0 <HAL_GPIO_Init+0x204>
 80141ce:	2300      	movs	r3, #0
 80141d0:	69fa      	ldr	r2, [r7, #28]
 80141d2:	f002 0203 	and.w	r2, r2, #3
 80141d6:	0092      	lsls	r2, r2, #2
 80141d8:	4093      	lsls	r3, r2
 80141da:	69ba      	ldr	r2, [r7, #24]
 80141dc:	4313      	orrs	r3, r2
 80141de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80141e0:	4934      	ldr	r1, [pc, #208]	; (80142b4 <HAL_GPIO_Init+0x2e8>)
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	089b      	lsrs	r3, r3, #2
 80141e6:	3302      	adds	r3, #2
 80141e8:	69ba      	ldr	r2, [r7, #24]
 80141ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80141ee:	4b37      	ldr	r3, [pc, #220]	; (80142cc <HAL_GPIO_Init+0x300>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	43db      	mvns	r3, r3
 80141f8:	69ba      	ldr	r2, [r7, #24]
 80141fa:	4013      	ands	r3, r2
 80141fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014206:	2b00      	cmp	r3, #0
 8014208:	d003      	beq.n	8014212 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801420a:	69ba      	ldr	r2, [r7, #24]
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	4313      	orrs	r3, r2
 8014210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8014212:	4a2e      	ldr	r2, [pc, #184]	; (80142cc <HAL_GPIO_Init+0x300>)
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8014218:	4b2c      	ldr	r3, [pc, #176]	; (80142cc <HAL_GPIO_Init+0x300>)
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	43db      	mvns	r3, r3
 8014222:	69ba      	ldr	r2, [r7, #24]
 8014224:	4013      	ands	r3, r2
 8014226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014230:	2b00      	cmp	r3, #0
 8014232:	d003      	beq.n	801423c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8014234:	69ba      	ldr	r2, [r7, #24]
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	4313      	orrs	r3, r2
 801423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801423c:	4a23      	ldr	r2, [pc, #140]	; (80142cc <HAL_GPIO_Init+0x300>)
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014242:	4b22      	ldr	r3, [pc, #136]	; (80142cc <HAL_GPIO_Init+0x300>)
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	43db      	mvns	r3, r3
 801424c:	69ba      	ldr	r2, [r7, #24]
 801424e:	4013      	ands	r3, r2
 8014250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801425a:	2b00      	cmp	r3, #0
 801425c:	d003      	beq.n	8014266 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801425e:	69ba      	ldr	r2, [r7, #24]
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	4313      	orrs	r3, r2
 8014264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8014266:	4a19      	ldr	r2, [pc, #100]	; (80142cc <HAL_GPIO_Init+0x300>)
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801426c:	4b17      	ldr	r3, [pc, #92]	; (80142cc <HAL_GPIO_Init+0x300>)
 801426e:	68db      	ldr	r3, [r3, #12]
 8014270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	43db      	mvns	r3, r3
 8014276:	69ba      	ldr	r2, [r7, #24]
 8014278:	4013      	ands	r3, r2
 801427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014284:	2b00      	cmp	r3, #0
 8014286:	d003      	beq.n	8014290 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8014288:	69ba      	ldr	r2, [r7, #24]
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	4313      	orrs	r3, r2
 801428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8014290:	4a0e      	ldr	r2, [pc, #56]	; (80142cc <HAL_GPIO_Init+0x300>)
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	3301      	adds	r3, #1
 801429a:	61fb      	str	r3, [r7, #28]
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	2b0f      	cmp	r3, #15
 80142a0:	f67f aea2 	bls.w	8013fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80142a4:	bf00      	nop
 80142a6:	3724      	adds	r7, #36	; 0x24
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr
 80142b0:	40023800 	.word	0x40023800
 80142b4:	40013800 	.word	0x40013800
 80142b8:	40020000 	.word	0x40020000
 80142bc:	40020400 	.word	0x40020400
 80142c0:	40020800 	.word	0x40020800
 80142c4:	40020c00 	.word	0x40020c00
 80142c8:	40021000 	.word	0x40021000
 80142cc:	40013c00 	.word	0x40013c00

080142d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b085      	sub	sp, #20
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	460b      	mov	r3, r1
 80142da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	691a      	ldr	r2, [r3, #16]
 80142e0:	887b      	ldrh	r3, [r7, #2]
 80142e2:	4013      	ands	r3, r2
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d002      	beq.n	80142ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80142e8:	2301      	movs	r3, #1
 80142ea:	73fb      	strb	r3, [r7, #15]
 80142ec:	e001      	b.n	80142f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80142ee:	2300      	movs	r3, #0
 80142f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80142f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3714      	adds	r7, #20
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	460b      	mov	r3, r1
 801430a:	807b      	strh	r3, [r7, #2]
 801430c:	4613      	mov	r3, r2
 801430e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8014310:	787b      	ldrb	r3, [r7, #1]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d003      	beq.n	801431e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014316:	887a      	ldrh	r2, [r7, #2]
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801431c:	e003      	b.n	8014326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801431e:	887b      	ldrh	r3, [r7, #2]
 8014320:	041a      	lsls	r2, r3, #16
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	619a      	str	r2, [r3, #24]
}
 8014326:	bf00      	nop
 8014328:	370c      	adds	r7, #12
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr
	...

08014334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d101      	bne.n	8014346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014342:	2301      	movs	r3, #1
 8014344:	e11f      	b.n	8014586 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801434c:	b2db      	uxtb	r3, r3
 801434e:	2b00      	cmp	r3, #0
 8014350:	d106      	bne.n	8014360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2200      	movs	r2, #0
 8014356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f7fc fa72 	bl	8010844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2224      	movs	r2, #36	; 0x24
 8014364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	f022 0201 	bic.w	r2, r2, #1
 8014376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8014398:	f002 fc04 	bl	8016ba4 <HAL_RCC_GetPCLK1Freq>
 801439c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	4a7b      	ldr	r2, [pc, #492]	; (8014590 <HAL_I2C_Init+0x25c>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d807      	bhi.n	80143b8 <HAL_I2C_Init+0x84>
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	4a7a      	ldr	r2, [pc, #488]	; (8014594 <HAL_I2C_Init+0x260>)
 80143ac:	4293      	cmp	r3, r2
 80143ae:	bf94      	ite	ls
 80143b0:	2301      	movls	r3, #1
 80143b2:	2300      	movhi	r3, #0
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	e006      	b.n	80143c6 <HAL_I2C_Init+0x92>
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	4a77      	ldr	r2, [pc, #476]	; (8014598 <HAL_I2C_Init+0x264>)
 80143bc:	4293      	cmp	r3, r2
 80143be:	bf94      	ite	ls
 80143c0:	2301      	movls	r3, #1
 80143c2:	2300      	movhi	r3, #0
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d001      	beq.n	80143ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80143ca:	2301      	movs	r3, #1
 80143cc:	e0db      	b.n	8014586 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	4a72      	ldr	r2, [pc, #456]	; (801459c <HAL_I2C_Init+0x268>)
 80143d2:	fba2 2303 	umull	r2, r3, r2, r3
 80143d6:	0c9b      	lsrs	r3, r3, #18
 80143d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	68ba      	ldr	r2, [r7, #8]
 80143ea:	430a      	orrs	r2, r1
 80143ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	6a1b      	ldr	r3, [r3, #32]
 80143f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	4a64      	ldr	r2, [pc, #400]	; (8014590 <HAL_I2C_Init+0x25c>)
 80143fe:	4293      	cmp	r3, r2
 8014400:	d802      	bhi.n	8014408 <HAL_I2C_Init+0xd4>
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	3301      	adds	r3, #1
 8014406:	e009      	b.n	801441c <HAL_I2C_Init+0xe8>
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801440e:	fb02 f303 	mul.w	r3, r2, r3
 8014412:	4a63      	ldr	r2, [pc, #396]	; (80145a0 <HAL_I2C_Init+0x26c>)
 8014414:	fba2 2303 	umull	r2, r3, r2, r3
 8014418:	099b      	lsrs	r3, r3, #6
 801441a:	3301      	adds	r3, #1
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	6812      	ldr	r2, [r2, #0]
 8014420:	430b      	orrs	r3, r1
 8014422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	69db      	ldr	r3, [r3, #28]
 801442a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801442e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	4956      	ldr	r1, [pc, #344]	; (8014590 <HAL_I2C_Init+0x25c>)
 8014438:	428b      	cmp	r3, r1
 801443a:	d80d      	bhi.n	8014458 <HAL_I2C_Init+0x124>
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	1e59      	subs	r1, r3, #1
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	fbb1 f3f3 	udiv	r3, r1, r3
 801444a:	3301      	adds	r3, #1
 801444c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014450:	2b04      	cmp	r3, #4
 8014452:	bf38      	it	cc
 8014454:	2304      	movcc	r3, #4
 8014456:	e04f      	b.n	80144f8 <HAL_I2C_Init+0x1c4>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	689b      	ldr	r3, [r3, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d111      	bne.n	8014484 <HAL_I2C_Init+0x150>
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	1e58      	subs	r0, r3, #1
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6859      	ldr	r1, [r3, #4]
 8014468:	460b      	mov	r3, r1
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	440b      	add	r3, r1
 801446e:	fbb0 f3f3 	udiv	r3, r0, r3
 8014472:	3301      	adds	r3, #1
 8014474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014478:	2b00      	cmp	r3, #0
 801447a:	bf0c      	ite	eq
 801447c:	2301      	moveq	r3, #1
 801447e:	2300      	movne	r3, #0
 8014480:	b2db      	uxtb	r3, r3
 8014482:	e012      	b.n	80144aa <HAL_I2C_Init+0x176>
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	1e58      	subs	r0, r3, #1
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6859      	ldr	r1, [r3, #4]
 801448c:	460b      	mov	r3, r1
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	440b      	add	r3, r1
 8014492:	0099      	lsls	r1, r3, #2
 8014494:	440b      	add	r3, r1
 8014496:	fbb0 f3f3 	udiv	r3, r0, r3
 801449a:	3301      	adds	r3, #1
 801449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	bf0c      	ite	eq
 80144a4:	2301      	moveq	r3, #1
 80144a6:	2300      	movne	r3, #0
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d001      	beq.n	80144b2 <HAL_I2C_Init+0x17e>
 80144ae:	2301      	movs	r3, #1
 80144b0:	e022      	b.n	80144f8 <HAL_I2C_Init+0x1c4>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	689b      	ldr	r3, [r3, #8]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d10e      	bne.n	80144d8 <HAL_I2C_Init+0x1a4>
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	1e58      	subs	r0, r3, #1
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6859      	ldr	r1, [r3, #4]
 80144c2:	460b      	mov	r3, r1
 80144c4:	005b      	lsls	r3, r3, #1
 80144c6:	440b      	add	r3, r1
 80144c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80144cc:	3301      	adds	r3, #1
 80144ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80144d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144d6:	e00f      	b.n	80144f8 <HAL_I2C_Init+0x1c4>
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	1e58      	subs	r0, r3, #1
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6859      	ldr	r1, [r3, #4]
 80144e0:	460b      	mov	r3, r1
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	440b      	add	r3, r1
 80144e6:	0099      	lsls	r1, r3, #2
 80144e8:	440b      	add	r3, r1
 80144ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80144ee:	3301      	adds	r3, #1
 80144f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80144f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80144f8:	6879      	ldr	r1, [r7, #4]
 80144fa:	6809      	ldr	r1, [r1, #0]
 80144fc:	4313      	orrs	r3, r2
 80144fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	69da      	ldr	r2, [r3, #28]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6a1b      	ldr	r3, [r3, #32]
 8014512:	431a      	orrs	r2, r3
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	430a      	orrs	r2, r1
 801451a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	689b      	ldr	r3, [r3, #8]
 8014522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8014526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	6911      	ldr	r1, [r2, #16]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	68d2      	ldr	r2, [r2, #12]
 8014532:	4311      	orrs	r1, r2
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	6812      	ldr	r2, [r2, #0]
 8014538:	430b      	orrs	r3, r1
 801453a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	695a      	ldr	r2, [r3, #20]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	699b      	ldr	r3, [r3, #24]
 801454e:	431a      	orrs	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	430a      	orrs	r2, r1
 8014556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f042 0201 	orr.w	r2, r2, #1
 8014566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2200      	movs	r2, #0
 801456c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2220      	movs	r2, #32
 8014572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2200      	movs	r2, #0
 801457a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2200      	movs	r2, #0
 8014580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014584:	2300      	movs	r3, #0
}
 8014586:	4618      	mov	r0, r3
 8014588:	3710      	adds	r7, #16
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	000186a0 	.word	0x000186a0
 8014594:	001e847f 	.word	0x001e847f
 8014598:	003d08ff 	.word	0x003d08ff
 801459c:	431bde83 	.word	0x431bde83
 80145a0:	10624dd3 	.word	0x10624dd3

080145a4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b086      	sub	sp, #24
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	607a      	str	r2, [r7, #4]
 80145ae:	461a      	mov	r2, r3
 80145b0:	460b      	mov	r3, r1
 80145b2:	817b      	strh	r3, [r7, #10]
 80145b4:	4613      	mov	r3, r2
 80145b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80145b8:	2300      	movs	r3, #0
 80145ba:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	2b20      	cmp	r3, #32
 80145c6:	f040 80f4 	bne.w	80147b2 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80145ca:	4b7c      	ldr	r3, [pc, #496]	; (80147bc <HAL_I2C_Master_Transmit_DMA+0x218>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	08db      	lsrs	r3, r3, #3
 80145d0:	4a7b      	ldr	r2, [pc, #492]	; (80147c0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80145d2:	fba2 2303 	umull	r2, r3, r2, r3
 80145d6:	0a1a      	lsrs	r2, r3, #8
 80145d8:	4613      	mov	r3, r2
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	4413      	add	r3, r2
 80145de:	009a      	lsls	r2, r3, #2
 80145e0:	4413      	add	r3, r2
 80145e2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	3b01      	subs	r3, #1
 80145e8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d116      	bne.n	801461e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2200      	movs	r2, #0
 80145f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	2220      	movs	r2, #32
 80145fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	2200      	movs	r2, #0
 8014602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801460a:	f043 0220 	orr.w	r2, r3, #32
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2200      	movs	r2, #0
 8014616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801461a:	2301      	movs	r3, #1
 801461c:	e0ca      	b.n	80147b4 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	699b      	ldr	r3, [r3, #24]
 8014624:	f003 0302 	and.w	r3, r3, #2
 8014628:	2b02      	cmp	r3, #2
 801462a:	d0db      	beq.n	80145e4 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014632:	2b01      	cmp	r3, #1
 8014634:	d101      	bne.n	801463a <HAL_I2C_Master_Transmit_DMA+0x96>
 8014636:	2302      	movs	r3, #2
 8014638:	e0bc      	b.n	80147b4 <HAL_I2C_Master_Transmit_DMA+0x210>
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2201      	movs	r2, #1
 801463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	f003 0301 	and.w	r3, r3, #1
 801464c:	2b01      	cmp	r3, #1
 801464e:	d007      	beq.n	8014660 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	681a      	ldr	r2, [r3, #0]
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	f042 0201 	orr.w	r2, r2, #1
 801465e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	681a      	ldr	r2, [r3, #0]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801466e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2221      	movs	r2, #33	; 0x21
 8014674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	2210      	movs	r2, #16
 801467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2200      	movs	r2, #0
 8014684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	893a      	ldrh	r2, [r7, #8]
 8014690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014696:	b29a      	uxth	r2, r3
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	4a49      	ldr	r2, [pc, #292]	; (80147c4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80146a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80146a2:	897a      	ldrh	r2, [r7, #10]
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d062      	beq.n	8014776 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146b4:	4a44      	ldr	r2, [pc, #272]	; (80147c8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80146b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146bc:	4a43      	ldr	r2, [pc, #268]	; (80147cc <HAL_I2C_Master_Transmit_DMA+0x228>)
 80146be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146c4:	2200      	movs	r2, #0
 80146c6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146cc:	2200      	movs	r2, #0
 80146ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146d4:	2200      	movs	r2, #0
 80146d6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146dc:	2200      	movs	r2, #0
 80146de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146e8:	4619      	mov	r1, r3
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	3310      	adds	r3, #16
 80146f0:	461a      	mov	r2, r3
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146f6:	f7fe ff01 	bl	80134fc <HAL_DMA_Start_IT>
 80146fa:	4603      	mov	r3, r0
 80146fc:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80146fe:	7dfb      	ldrb	r3, [r7, #23]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d124      	bne.n	801474e <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014712:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014722:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2200      	movs	r2, #0
 8014728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	685a      	ldr	r2, [r3, #4]
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801473a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	685a      	ldr	r2, [r3, #4]
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801474a:	605a      	str	r2, [r3, #4]
 801474c:	e02f      	b.n	80147ae <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2220      	movs	r2, #32
 8014752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2200      	movs	r2, #0
 801475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014762:	f043 0210 	orr.w	r2, r3, #16
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014772:	2301      	movs	r3, #1
 8014774:	e01e      	b.n	80147b4 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014784:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014794:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2200      	movs	r2, #0
 801479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	685a      	ldr	r2, [r3, #4]
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80147ac:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80147ae:	2300      	movs	r3, #0
 80147b0:	e000      	b.n	80147b4 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80147b2:	2302      	movs	r3, #2
  }
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3718      	adds	r7, #24
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	20000000 	.word	0x20000000
 80147c0:	14f8b589 	.word	0x14f8b589
 80147c4:	ffff0000 	.word	0xffff0000
 80147c8:	08015f6d 	.word	0x08015f6d
 80147cc:	08016117 	.word	0x08016117

080147d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b088      	sub	sp, #32
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80147d8:	2300      	movs	r3, #0
 80147da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80147f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80147f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80147fa:	7bfb      	ldrb	r3, [r7, #15]
 80147fc:	2b10      	cmp	r3, #16
 80147fe:	d003      	beq.n	8014808 <HAL_I2C_EV_IRQHandler+0x38>
 8014800:	7bfb      	ldrb	r3, [r7, #15]
 8014802:	2b40      	cmp	r3, #64	; 0x40
 8014804:	f040 80bd 	bne.w	8014982 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	699b      	ldr	r3, [r3, #24]
 801480e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	695b      	ldr	r3, [r3, #20]
 8014816:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	f003 0301 	and.w	r3, r3, #1
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10d      	bne.n	801483e <HAL_I2C_EV_IRQHandler+0x6e>
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8014828:	d003      	beq.n	8014832 <HAL_I2C_EV_IRQHandler+0x62>
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014830:	d101      	bne.n	8014836 <HAL_I2C_EV_IRQHandler+0x66>
 8014832:	2301      	movs	r3, #1
 8014834:	e000      	b.n	8014838 <HAL_I2C_EV_IRQHandler+0x68>
 8014836:	2300      	movs	r3, #0
 8014838:	2b01      	cmp	r3, #1
 801483a:	f000 812e 	beq.w	8014a9a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	f003 0301 	and.w	r3, r3, #1
 8014844:	2b00      	cmp	r3, #0
 8014846:	d00c      	beq.n	8014862 <HAL_I2C_EV_IRQHandler+0x92>
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	0a5b      	lsrs	r3, r3, #9
 801484c:	f003 0301 	and.w	r3, r3, #1
 8014850:	2b00      	cmp	r3, #0
 8014852:	d006      	beq.n	8014862 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f001 fd75 	bl	8016344 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 fd70 	bl	8015340 <I2C_Master_SB>
 8014860:	e08e      	b.n	8014980 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014862:	69fb      	ldr	r3, [r7, #28]
 8014864:	08db      	lsrs	r3, r3, #3
 8014866:	f003 0301 	and.w	r3, r3, #1
 801486a:	2b00      	cmp	r3, #0
 801486c:	d009      	beq.n	8014882 <HAL_I2C_EV_IRQHandler+0xb2>
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	0a5b      	lsrs	r3, r3, #9
 8014872:	f003 0301 	and.w	r3, r3, #1
 8014876:	2b00      	cmp	r3, #0
 8014878:	d003      	beq.n	8014882 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 fde6 	bl	801544c <I2C_Master_ADD10>
 8014880:	e07e      	b.n	8014980 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	085b      	lsrs	r3, r3, #1
 8014886:	f003 0301 	and.w	r3, r3, #1
 801488a:	2b00      	cmp	r3, #0
 801488c:	d009      	beq.n	80148a2 <HAL_I2C_EV_IRQHandler+0xd2>
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	0a5b      	lsrs	r3, r3, #9
 8014892:	f003 0301 	and.w	r3, r3, #1
 8014896:	2b00      	cmp	r3, #0
 8014898:	d003      	beq.n	80148a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 fe00 	bl	80154a0 <I2C_Master_ADDR>
 80148a0:	e06e      	b.n	8014980 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	089b      	lsrs	r3, r3, #2
 80148a6:	f003 0301 	and.w	r3, r3, #1
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d037      	beq.n	801491e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	685b      	ldr	r3, [r3, #4]
 80148b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80148b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80148bc:	f000 80ef 	beq.w	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	09db      	lsrs	r3, r3, #7
 80148c4:	f003 0301 	and.w	r3, r3, #1
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d00f      	beq.n	80148ec <HAL_I2C_EV_IRQHandler+0x11c>
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	0a9b      	lsrs	r3, r3, #10
 80148d0:	f003 0301 	and.w	r3, r3, #1
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d009      	beq.n	80148ec <HAL_I2C_EV_IRQHandler+0x11c>
 80148d8:	69fb      	ldr	r3, [r7, #28]
 80148da:	089b      	lsrs	r3, r3, #2
 80148dc:	f003 0301 	and.w	r3, r3, #1
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d103      	bne.n	80148ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 f9fd 	bl	8014ce4 <I2C_MasterTransmit_TXE>
 80148ea:	e049      	b.n	8014980 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	089b      	lsrs	r3, r3, #2
 80148f0:	f003 0301 	and.w	r3, r3, #1
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	f000 80d2 	beq.w	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	0a5b      	lsrs	r3, r3, #9
 80148fe:	f003 0301 	and.w	r3, r3, #1
 8014902:	2b00      	cmp	r3, #0
 8014904:	f000 80cb 	beq.w	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8014908:	7bfb      	ldrb	r3, [r7, #15]
 801490a:	2b10      	cmp	r3, #16
 801490c:	d103      	bne.n	8014916 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 fa84 	bl	8014e1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014914:	e0c3      	b.n	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 fae8 	bl	8014eec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801491c:	e0bf      	b.n	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801492c:	f000 80b7 	beq.w	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	099b      	lsrs	r3, r3, #6
 8014934:	f003 0301 	and.w	r3, r3, #1
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00f      	beq.n	801495c <HAL_I2C_EV_IRQHandler+0x18c>
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	0a9b      	lsrs	r3, r3, #10
 8014940:	f003 0301 	and.w	r3, r3, #1
 8014944:	2b00      	cmp	r3, #0
 8014946:	d009      	beq.n	801495c <HAL_I2C_EV_IRQHandler+0x18c>
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	089b      	lsrs	r3, r3, #2
 801494c:	f003 0301 	and.w	r3, r3, #1
 8014950:	2b00      	cmp	r3, #0
 8014952:	d103      	bne.n	801495c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f000 fb58 	bl	801500a <I2C_MasterReceive_RXNE>
 801495a:	e011      	b.n	8014980 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	089b      	lsrs	r3, r3, #2
 8014960:	f003 0301 	and.w	r3, r3, #1
 8014964:	2b00      	cmp	r3, #0
 8014966:	f000 809a 	beq.w	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	0a5b      	lsrs	r3, r3, #9
 801496e:	f003 0301 	and.w	r3, r3, #1
 8014972:	2b00      	cmp	r3, #0
 8014974:	f000 8093 	beq.w	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 fbf7 	bl	801516c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801497e:	e08e      	b.n	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
 8014980:	e08d      	b.n	8014a9e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014986:	2b00      	cmp	r3, #0
 8014988:	d004      	beq.n	8014994 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	695b      	ldr	r3, [r3, #20]
 8014990:	61fb      	str	r3, [r7, #28]
 8014992:	e007      	b.n	80149a4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	699b      	ldr	r3, [r3, #24]
 801499a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	695b      	ldr	r3, [r3, #20]
 80149a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	085b      	lsrs	r3, r3, #1
 80149a8:	f003 0301 	and.w	r3, r3, #1
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d012      	beq.n	80149d6 <HAL_I2C_EV_IRQHandler+0x206>
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	0a5b      	lsrs	r3, r3, #9
 80149b4:	f003 0301 	and.w	r3, r3, #1
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d00c      	beq.n	80149d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d003      	beq.n	80149cc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	699b      	ldr	r3, [r3, #24]
 80149ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80149cc:	69b9      	ldr	r1, [r7, #24]
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 ffb5 	bl	801593e <I2C_Slave_ADDR>
 80149d4:	e066      	b.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80149d6:	69fb      	ldr	r3, [r7, #28]
 80149d8:	091b      	lsrs	r3, r3, #4
 80149da:	f003 0301 	and.w	r3, r3, #1
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d009      	beq.n	80149f6 <HAL_I2C_EV_IRQHandler+0x226>
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	0a5b      	lsrs	r3, r3, #9
 80149e6:	f003 0301 	and.w	r3, r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d003      	beq.n	80149f6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f000 ffea 	bl	80159c8 <I2C_Slave_STOPF>
 80149f4:	e056      	b.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80149f6:	7bbb      	ldrb	r3, [r7, #14]
 80149f8:	2b21      	cmp	r3, #33	; 0x21
 80149fa:	d002      	beq.n	8014a02 <HAL_I2C_EV_IRQHandler+0x232>
 80149fc:	7bbb      	ldrb	r3, [r7, #14]
 80149fe:	2b29      	cmp	r3, #41	; 0x29
 8014a00:	d125      	bne.n	8014a4e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014a02:	69fb      	ldr	r3, [r7, #28]
 8014a04:	09db      	lsrs	r3, r3, #7
 8014a06:	f003 0301 	and.w	r3, r3, #1
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d00f      	beq.n	8014a2e <HAL_I2C_EV_IRQHandler+0x25e>
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	0a9b      	lsrs	r3, r3, #10
 8014a12:	f003 0301 	and.w	r3, r3, #1
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d009      	beq.n	8014a2e <HAL_I2C_EV_IRQHandler+0x25e>
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	089b      	lsrs	r3, r3, #2
 8014a1e:	f003 0301 	and.w	r3, r3, #1
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d103      	bne.n	8014a2e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f000 fecb 	bl	80157c2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014a2c:	e039      	b.n	8014aa2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	089b      	lsrs	r3, r3, #2
 8014a32:	f003 0301 	and.w	r3, r3, #1
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d033      	beq.n	8014aa2 <HAL_I2C_EV_IRQHandler+0x2d2>
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	0a5b      	lsrs	r3, r3, #9
 8014a3e:	f003 0301 	and.w	r3, r3, #1
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d02d      	beq.n	8014aa2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 fef8 	bl	801583c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014a4c:	e029      	b.n	8014aa2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	099b      	lsrs	r3, r3, #6
 8014a52:	f003 0301 	and.w	r3, r3, #1
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d00f      	beq.n	8014a7a <HAL_I2C_EV_IRQHandler+0x2aa>
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	0a9b      	lsrs	r3, r3, #10
 8014a5e:	f003 0301 	and.w	r3, r3, #1
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d009      	beq.n	8014a7a <HAL_I2C_EV_IRQHandler+0x2aa>
 8014a66:	69fb      	ldr	r3, [r7, #28]
 8014a68:	089b      	lsrs	r3, r3, #2
 8014a6a:	f003 0301 	and.w	r3, r3, #1
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d103      	bne.n	8014a7a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 ff03 	bl	801587e <I2C_SlaveReceive_RXNE>
 8014a78:	e014      	b.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	089b      	lsrs	r3, r3, #2
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00e      	beq.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	0a5b      	lsrs	r3, r3, #9
 8014a8a:	f003 0301 	and.w	r3, r3, #1
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d008      	beq.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 ff31 	bl	80158fa <I2C_SlaveReceive_BTF>
 8014a98:	e004      	b.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8014a9a:	bf00      	nop
 8014a9c:	e002      	b.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014a9e:	bf00      	nop
 8014aa0:	e000      	b.n	8014aa4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014aa2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8014aa4:	3720      	adds	r7, #32
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b08a      	sub	sp, #40	; 0x28
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	695b      	ldr	r3, [r3, #20]
 8014ab8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014acc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014ace:	6a3b      	ldr	r3, [r7, #32]
 8014ad0:	0a1b      	lsrs	r3, r3, #8
 8014ad2:	f003 0301 	and.w	r3, r3, #1
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d00e      	beq.n	8014af8 <HAL_I2C_ER_IRQHandler+0x4e>
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	0a1b      	lsrs	r3, r3, #8
 8014ade:	f003 0301 	and.w	r3, r3, #1
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d008      	beq.n	8014af8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8014ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae8:	f043 0301 	orr.w	r3, r3, #1
 8014aec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8014af6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014af8:	6a3b      	ldr	r3, [r7, #32]
 8014afa:	0a5b      	lsrs	r3, r3, #9
 8014afc:	f003 0301 	and.w	r3, r3, #1
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00e      	beq.n	8014b22 <HAL_I2C_ER_IRQHandler+0x78>
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	0a1b      	lsrs	r3, r3, #8
 8014b08:	f003 0301 	and.w	r3, r3, #1
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d008      	beq.n	8014b22 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8014b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b12:	f043 0302 	orr.w	r3, r3, #2
 8014b16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8014b20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014b22:	6a3b      	ldr	r3, [r7, #32]
 8014b24:	0a9b      	lsrs	r3, r3, #10
 8014b26:	f003 0301 	and.w	r3, r3, #1
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d03f      	beq.n	8014bae <HAL_I2C_ER_IRQHandler+0x104>
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	0a1b      	lsrs	r3, r3, #8
 8014b32:	f003 0301 	and.w	r3, r3, #1
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d039      	beq.n	8014bae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8014b3a:	7efb      	ldrb	r3, [r7, #27]
 8014b3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014b4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8014b54:	7ebb      	ldrb	r3, [r7, #26]
 8014b56:	2b20      	cmp	r3, #32
 8014b58:	d112      	bne.n	8014b80 <HAL_I2C_ER_IRQHandler+0xd6>
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d10f      	bne.n	8014b80 <HAL_I2C_ER_IRQHandler+0xd6>
 8014b60:	7cfb      	ldrb	r3, [r7, #19]
 8014b62:	2b21      	cmp	r3, #33	; 0x21
 8014b64:	d008      	beq.n	8014b78 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8014b66:	7cfb      	ldrb	r3, [r7, #19]
 8014b68:	2b29      	cmp	r3, #41	; 0x29
 8014b6a:	d005      	beq.n	8014b78 <HAL_I2C_ER_IRQHandler+0xce>
 8014b6c:	7cfb      	ldrb	r3, [r7, #19]
 8014b6e:	2b28      	cmp	r3, #40	; 0x28
 8014b70:	d106      	bne.n	8014b80 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2b21      	cmp	r3, #33	; 0x21
 8014b76:	d103      	bne.n	8014b80 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f001 f855 	bl	8015c28 <I2C_Slave_AF>
 8014b7e:	e016      	b.n	8014bae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014b88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8014b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8c:	f043 0304 	orr.w	r3, r3, #4
 8014b90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8014b92:	7efb      	ldrb	r3, [r7, #27]
 8014b94:	2b10      	cmp	r3, #16
 8014b96:	d002      	beq.n	8014b9e <HAL_I2C_ER_IRQHandler+0xf4>
 8014b98:	7efb      	ldrb	r3, [r7, #27]
 8014b9a:	2b40      	cmp	r3, #64	; 0x40
 8014b9c:	d107      	bne.n	8014bae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014bac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014bae:	6a3b      	ldr	r3, [r7, #32]
 8014bb0:	0adb      	lsrs	r3, r3, #11
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00e      	beq.n	8014bd8 <HAL_I2C_ER_IRQHandler+0x12e>
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	0a1b      	lsrs	r3, r3, #8
 8014bbe:	f003 0301 	and.w	r3, r3, #1
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d008      	beq.n	8014bd8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8014bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc8:	f043 0308 	orr.w	r3, r3, #8
 8014bcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8014bd6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d008      	beq.n	8014bf0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be4:	431a      	orrs	r2, r3
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f001 f88c 	bl	8015d08 <I2C_ITError>
  }
}
 8014bf0:	bf00      	nop
 8014bf2:	3728      	adds	r7, #40	; 0x28
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014c00:	bf00      	nop
 8014c02:	370c      	adds	r7, #12
 8014c04:	46bd      	mov	sp, r7
 8014c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0a:	4770      	bx	lr

08014c0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	b083      	sub	sp, #12
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014c14:	bf00      	nop
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1e:	4770      	bx	lr

08014c20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c20:	b480      	push	{r7}
 8014c22:	b083      	sub	sp, #12
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014c28:	bf00      	nop
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014c3c:	bf00      	nop
 8014c3e:	370c      	adds	r7, #12
 8014c40:	46bd      	mov	sp, r7
 8014c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c46:	4770      	bx	lr

08014c48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	460b      	mov	r3, r1
 8014c52:	70fb      	strb	r3, [r7, #3]
 8014c54:	4613      	mov	r3, r2
 8014c56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014c58:	bf00      	nop
 8014c5a:	370c      	adds	r7, #12
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr

08014c64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b083      	sub	sp, #12
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8014c6c:	bf00      	nop
 8014c6e:	370c      	adds	r7, #12
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr

08014c78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8014c80:	bf00      	nop
 8014c82:	370c      	adds	r7, #12
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr

08014c8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b083      	sub	sp, #12
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8014c94:	bf00      	nop
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr

08014ca0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8014ca8:	bf00      	nop
 8014caa:	370c      	adds	r7, #12
 8014cac:	46bd      	mov	sp, r7
 8014cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb2:	4770      	bx	lr

08014cb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8014cbc:	bf00      	nop
 8014cbe:	370c      	adds	r7, #12
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014cd6:	b2db      	uxtb	r3, r3
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	370c      	adds	r7, #12
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr

08014ce4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014cf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014cfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d150      	bne.n	8014dac <I2C_MasterTransmit_TXE+0xc8>
 8014d0a:	7bfb      	ldrb	r3, [r7, #15]
 8014d0c:	2b21      	cmp	r3, #33	; 0x21
 8014d0e:	d14d      	bne.n	8014dac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	2b08      	cmp	r3, #8
 8014d14:	d01d      	beq.n	8014d52 <I2C_MasterTransmit_TXE+0x6e>
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	2b20      	cmp	r3, #32
 8014d1a:	d01a      	beq.n	8014d52 <I2C_MasterTransmit_TXE+0x6e>
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014d22:	d016      	beq.n	8014d52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	685a      	ldr	r2, [r3, #4]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014d32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2211      	movs	r2, #17
 8014d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2220      	movs	r2, #32
 8014d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7ff ff54 	bl	8014bf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014d50:	e060      	b.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	685a      	ldr	r2, [r3, #4]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014d60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014d70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2200      	movs	r2, #0
 8014d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2220      	movs	r2, #32
 8014d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014d86:	b2db      	uxtb	r3, r3
 8014d88:	2b40      	cmp	r3, #64	; 0x40
 8014d8a:	d107      	bne.n	8014d9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f7ff ff6f 	bl	8014c78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014d9a:	e03b      	b.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7ff ff27 	bl	8014bf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014daa:	e033      	b.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8014dac:	7bfb      	ldrb	r3, [r7, #15]
 8014dae:	2b21      	cmp	r3, #33	; 0x21
 8014db0:	d005      	beq.n	8014dbe <I2C_MasterTransmit_TXE+0xda>
 8014db2:	7bbb      	ldrb	r3, [r7, #14]
 8014db4:	2b40      	cmp	r3, #64	; 0x40
 8014db6:	d12d      	bne.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8014db8:	7bfb      	ldrb	r3, [r7, #15]
 8014dba:	2b22      	cmp	r3, #34	; 0x22
 8014dbc:	d12a      	bne.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d108      	bne.n	8014dda <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	685a      	ldr	r2, [r3, #4]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014dd6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8014dd8:	e01c      	b.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014de0:	b2db      	uxtb	r3, r3
 8014de2:	2b40      	cmp	r3, #64	; 0x40
 8014de4:	d103      	bne.n	8014dee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 f880 	bl	8014eec <I2C_MemoryTransmit_TXE_BTF>
}
 8014dec:	e012      	b.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014df2:	781a      	ldrb	r2, [r3, #0]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dfe:	1c5a      	adds	r2, r3, #1
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8014e12:	e7ff      	b.n	8014e14 <I2C_MasterTransmit_TXE+0x130>
 8014e14:	bf00      	nop
 8014e16:	3710      	adds	r7, #16
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b084      	sub	sp, #16
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e30:	b2db      	uxtb	r3, r3
 8014e32:	2b21      	cmp	r3, #33	; 0x21
 8014e34:	d156      	bne.n	8014ee4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d012      	beq.n	8014e66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e44:	781a      	ldrb	r2, [r3, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e50:	1c5a      	adds	r2, r3, #1
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	3b01      	subs	r3, #1
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8014e64:	e03e      	b.n	8014ee4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2b08      	cmp	r3, #8
 8014e6a:	d01d      	beq.n	8014ea8 <I2C_MasterTransmit_BTF+0x8c>
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	2b20      	cmp	r3, #32
 8014e70:	d01a      	beq.n	8014ea8 <I2C_MasterTransmit_BTF+0x8c>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014e78:	d016      	beq.n	8014ea8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	685a      	ldr	r2, [r3, #4]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014e88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2211      	movs	r2, #17
 8014e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2220      	movs	r2, #32
 8014e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f7ff fea9 	bl	8014bf8 <HAL_I2C_MasterTxCpltCallback>
}
 8014ea6:	e01d      	b.n	8014ee4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	685a      	ldr	r2, [r3, #4]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014eb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014ec6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2220      	movs	r2, #32
 8014ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7ff fe8a 	bl	8014bf8 <HAL_I2C_MasterTxCpltCallback>
}
 8014ee4:	bf00      	nop
 8014ee6:	3710      	adds	r7, #16
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014efa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d11d      	bne.n	8014f40 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d10b      	bne.n	8014f24 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f10:	b2da      	uxtb	r2, r3
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f1c:	1c9a      	adds	r2, r3, #2
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8014f22:	e06e      	b.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	121b      	asrs	r3, r3, #8
 8014f2c:	b2da      	uxtb	r2, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f38:	1c5a      	adds	r2, r3, #1
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8014f3e:	e060      	b.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	d10b      	bne.n	8014f60 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f4c:	b2da      	uxtb	r2, r3
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f58:	1c5a      	adds	r2, r3, #1
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8014f5e:	e050      	b.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f64:	2b02      	cmp	r3, #2
 8014f66:	d14c      	bne.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8014f68:	7bfb      	ldrb	r3, [r7, #15]
 8014f6a:	2b22      	cmp	r3, #34	; 0x22
 8014f6c:	d108      	bne.n	8014f80 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014f7c:	601a      	str	r2, [r3, #0]
}
 8014f7e:	e040      	b.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d015      	beq.n	8014fb6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8014f8a:	7bfb      	ldrb	r3, [r7, #15]
 8014f8c:	2b21      	cmp	r3, #33	; 0x21
 8014f8e:	d112      	bne.n	8014fb6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f94:	781a      	ldrb	r2, [r3, #0]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa0:	1c5a      	adds	r2, r3, #1
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	3b01      	subs	r3, #1
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8014fb4:	e025      	b.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d120      	bne.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8014fc0:	7bfb      	ldrb	r3, [r7, #15]
 8014fc2:	2b21      	cmp	r3, #33	; 0x21
 8014fc4:	d11d      	bne.n	8015002 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	685a      	ldr	r2, [r3, #4]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014fd4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014fe4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2220      	movs	r2, #32
 8014ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f7ff fe3b 	bl	8014c78 <HAL_I2C_MemTxCpltCallback>
}
 8015002:	bf00      	nop
 8015004:	3710      	adds	r7, #16
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b084      	sub	sp, #16
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b22      	cmp	r3, #34	; 0x22
 801501c:	f040 80a2 	bne.w	8015164 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015024:	b29b      	uxth	r3, r3
 8015026:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2b03      	cmp	r3, #3
 801502c:	d921      	bls.n	8015072 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	691a      	ldr	r2, [r3, #16]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015038:	b2d2      	uxtb	r2, r2
 801503a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015040:	1c5a      	adds	r2, r3, #1
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801504a:	b29b      	uxth	r3, r3
 801504c:	3b01      	subs	r3, #1
 801504e:	b29a      	uxth	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015058:	b29b      	uxth	r3, r3
 801505a:	2b03      	cmp	r3, #3
 801505c:	f040 8082 	bne.w	8015164 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	685a      	ldr	r2, [r3, #4]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801506e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8015070:	e078      	b.n	8015164 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015076:	2b02      	cmp	r3, #2
 8015078:	d074      	beq.n	8015164 <I2C_MasterReceive_RXNE+0x15a>
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	2b01      	cmp	r3, #1
 801507e:	d002      	beq.n	8015086 <I2C_MasterReceive_RXNE+0x7c>
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d16e      	bne.n	8015164 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f001 f92a 	bl	80162e0 <I2C_WaitOnSTOPRequestThroughIT>
 801508c:	4603      	mov	r3, r0
 801508e:	2b00      	cmp	r3, #0
 8015090:	d142      	bne.n	8015118 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80150a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	685a      	ldr	r2, [r3, #4]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80150b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	691a      	ldr	r2, [r3, #16]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150bc:	b2d2      	uxtb	r2, r2
 80150be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c4:	1c5a      	adds	r2, r3, #1
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80150ce:	b29b      	uxth	r3, r3
 80150d0:	3b01      	subs	r3, #1
 80150d2:	b29a      	uxth	r2, r3
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2220      	movs	r2, #32
 80150dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b40      	cmp	r3, #64	; 0x40
 80150ea:	d10a      	bne.n	8015102 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2200      	movs	r2, #0
 80150f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f7ff fdc6 	bl	8014c8c <HAL_I2C_MemRxCpltCallback>
}
 8015100:	e030      	b.n	8015164 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2200      	movs	r2, #0
 8015106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2212      	movs	r2, #18
 801510e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f7ff fd7b 	bl	8014c0c <HAL_I2C_MasterRxCpltCallback>
}
 8015116:	e025      	b.n	8015164 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	685a      	ldr	r2, [r3, #4]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015126:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	691a      	ldr	r2, [r3, #16]
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015132:	b2d2      	uxtb	r2, r2
 8015134:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801513a:	1c5a      	adds	r2, r3, #1
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015144:	b29b      	uxth	r3, r3
 8015146:	3b01      	subs	r3, #1
 8015148:	b29a      	uxth	r2, r3
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2220      	movs	r2, #32
 8015152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7ff fd9e 	bl	8014ca0 <HAL_I2C_ErrorCallback>
}
 8015164:	bf00      	nop
 8015166:	3710      	adds	r7, #16
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b084      	sub	sp, #16
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015178:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801517e:	b29b      	uxth	r3, r3
 8015180:	2b04      	cmp	r3, #4
 8015182:	d11b      	bne.n	80151bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	685a      	ldr	r2, [r3, #4]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015192:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	691a      	ldr	r2, [r3, #16]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801519e:	b2d2      	uxtb	r2, r2
 80151a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151a6:	1c5a      	adds	r2, r3, #1
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	3b01      	subs	r3, #1
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80151ba:	e0bd      	b.n	8015338 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	2b03      	cmp	r3, #3
 80151c4:	d129      	bne.n	801521a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	685a      	ldr	r2, [r3, #4]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80151d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	2b04      	cmp	r3, #4
 80151da:	d00a      	beq.n	80151f2 <I2C_MasterReceive_BTF+0x86>
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	2b02      	cmp	r3, #2
 80151e0:	d007      	beq.n	80151f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80151f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	691a      	ldr	r2, [r3, #16]
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151fc:	b2d2      	uxtb	r2, r2
 80151fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801520e:	b29b      	uxth	r3, r3
 8015210:	3b01      	subs	r3, #1
 8015212:	b29a      	uxth	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8015218:	e08e      	b.n	8015338 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801521e:	b29b      	uxth	r3, r3
 8015220:	2b02      	cmp	r3, #2
 8015222:	d176      	bne.n	8015312 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2b01      	cmp	r3, #1
 8015228:	d002      	beq.n	8015230 <I2C_MasterReceive_BTF+0xc4>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2b10      	cmp	r3, #16
 801522e:	d108      	bne.n	8015242 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801523e:	601a      	str	r2, [r3, #0]
 8015240:	e019      	b.n	8015276 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	2b04      	cmp	r3, #4
 8015246:	d002      	beq.n	801524e <I2C_MasterReceive_BTF+0xe2>
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2b02      	cmp	r3, #2
 801524c:	d108      	bne.n	8015260 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801525c:	601a      	str	r2, [r3, #0]
 801525e:	e00a      	b.n	8015276 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	2b10      	cmp	r3, #16
 8015264:	d007      	beq.n	8015276 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015274:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	691a      	ldr	r2, [r3, #16]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015280:	b2d2      	uxtb	r2, r2
 8015282:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015288:	1c5a      	adds	r2, r3, #1
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015292:	b29b      	uxth	r3, r3
 8015294:	3b01      	subs	r3, #1
 8015296:	b29a      	uxth	r2, r3
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	691a      	ldr	r2, [r3, #16]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a6:	b2d2      	uxtb	r2, r2
 80152a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ae:	1c5a      	adds	r2, r3, #1
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	3b01      	subs	r3, #1
 80152bc:	b29a      	uxth	r2, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	685a      	ldr	r2, [r3, #4]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80152d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2220      	movs	r2, #32
 80152d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	2b40      	cmp	r3, #64	; 0x40
 80152e4:	d10a      	bne.n	80152fc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2200      	movs	r2, #0
 80152ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	2200      	movs	r2, #0
 80152f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff fcc9 	bl	8014c8c <HAL_I2C_MemRxCpltCallback>
}
 80152fa:	e01d      	b.n	8015338 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2200      	movs	r2, #0
 8015300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2212      	movs	r2, #18
 8015308:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f7ff fc7e 	bl	8014c0c <HAL_I2C_MasterRxCpltCallback>
}
 8015310:	e012      	b.n	8015338 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	691a      	ldr	r2, [r3, #16]
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801531c:	b2d2      	uxtb	r2, r2
 801531e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015324:	1c5a      	adds	r2, r3, #1
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801532e:	b29b      	uxth	r3, r3
 8015330:	3b01      	subs	r3, #1
 8015332:	b29a      	uxth	r2, r3
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8015338:	bf00      	nop
 801533a:	3710      	adds	r7, #16
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}

08015340 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8015340:	b480      	push	{r7}
 8015342:	b083      	sub	sp, #12
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801534e:	b2db      	uxtb	r3, r3
 8015350:	2b40      	cmp	r3, #64	; 0x40
 8015352:	d117      	bne.n	8015384 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015358:	2b00      	cmp	r3, #0
 801535a:	d109      	bne.n	8015370 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015360:	b2db      	uxtb	r3, r3
 8015362:	461a      	mov	r2, r3
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801536c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801536e:	e067      	b.n	8015440 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015374:	b2db      	uxtb	r3, r3
 8015376:	f043 0301 	orr.w	r3, r3, #1
 801537a:	b2da      	uxtb	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	611a      	str	r2, [r3, #16]
}
 8015382:	e05d      	b.n	8015440 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801538c:	d133      	bne.n	80153f6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b21      	cmp	r3, #33	; 0x21
 8015398:	d109      	bne.n	80153ae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	461a      	mov	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80153aa:	611a      	str	r2, [r3, #16]
 80153ac:	e008      	b.n	80153c0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	f043 0301 	orr.w	r3, r3, #1
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d004      	beq.n	80153d2 <I2C_Master_SB+0x92>
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d108      	bne.n	80153e4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d032      	beq.n	8015440 <I2C_Master_SB+0x100>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d02d      	beq.n	8015440 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	685a      	ldr	r2, [r3, #4]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80153f2:	605a      	str	r2, [r3, #4]
}
 80153f4:	e024      	b.n	8015440 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d10e      	bne.n	801541c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015402:	b29b      	uxth	r3, r3
 8015404:	11db      	asrs	r3, r3, #7
 8015406:	b2db      	uxtb	r3, r3
 8015408:	f003 0306 	and.w	r3, r3, #6
 801540c:	b2db      	uxtb	r3, r3
 801540e:	f063 030f 	orn	r3, r3, #15
 8015412:	b2da      	uxtb	r2, r3
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	611a      	str	r2, [r3, #16]
}
 801541a:	e011      	b.n	8015440 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015420:	2b01      	cmp	r3, #1
 8015422:	d10d      	bne.n	8015440 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015428:	b29b      	uxth	r3, r3
 801542a:	11db      	asrs	r3, r3, #7
 801542c:	b2db      	uxtb	r3, r3
 801542e:	f003 0306 	and.w	r3, r3, #6
 8015432:	b2db      	uxtb	r3, r3
 8015434:	f063 030e 	orn	r3, r3, #14
 8015438:	b2da      	uxtb	r2, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	611a      	str	r2, [r3, #16]
}
 8015440:	bf00      	nop
 8015442:	370c      	adds	r7, #12
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr

0801544c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801544c:	b480      	push	{r7}
 801544e:	b083      	sub	sp, #12
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015458:	b2da      	uxtb	r2, r3
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015464:	2b00      	cmp	r3, #0
 8015466:	d103      	bne.n	8015470 <I2C_Master_ADD10+0x24>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801546c:	2b00      	cmp	r3, #0
 801546e:	d011      	beq.n	8015494 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015476:	2b00      	cmp	r3, #0
 8015478:	d104      	bne.n	8015484 <I2C_Master_ADD10+0x38>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015480:	2b00      	cmp	r3, #0
 8015482:	d007      	beq.n	8015494 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	685a      	ldr	r2, [r3, #4]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015492:	605a      	str	r2, [r3, #4]
    }
  }
}
 8015494:	bf00      	nop
 8015496:	370c      	adds	r7, #12
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr

080154a0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80154a0:	b480      	push	{r7}
 80154a2:	b091      	sub	sp, #68	; 0x44
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80154ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	2b22      	cmp	r3, #34	; 0x22
 80154c8:	f040 8169 	bne.w	801579e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d10f      	bne.n	80154f4 <I2C_Master_ADDR+0x54>
 80154d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80154d8:	2b40      	cmp	r3, #64	; 0x40
 80154da:	d10b      	bne.n	80154f4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80154dc:	2300      	movs	r3, #0
 80154de:	633b      	str	r3, [r7, #48]	; 0x30
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	695b      	ldr	r3, [r3, #20]
 80154e6:	633b      	str	r3, [r7, #48]	; 0x30
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	699b      	ldr	r3, [r3, #24]
 80154ee:	633b      	str	r3, [r7, #48]	; 0x30
 80154f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f2:	e160      	b.n	80157b6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d11d      	bne.n	8015538 <I2C_Master_ADDR+0x98>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	691b      	ldr	r3, [r3, #16]
 8015500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8015504:	d118      	bne.n	8015538 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015506:	2300      	movs	r3, #0
 8015508:	62fb      	str	r3, [r7, #44]	; 0x2c
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	695b      	ldr	r3, [r3, #20]
 8015510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	699b      	ldr	r3, [r3, #24]
 8015518:	62fb      	str	r3, [r7, #44]	; 0x2c
 801551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	681a      	ldr	r2, [r3, #0]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801552a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015530:	1c5a      	adds	r2, r3, #1
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	651a      	str	r2, [r3, #80]	; 0x50
 8015536:	e13e      	b.n	80157b6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801553c:	b29b      	uxth	r3, r3
 801553e:	2b00      	cmp	r3, #0
 8015540:	d113      	bne.n	801556a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015542:	2300      	movs	r3, #0
 8015544:	62bb      	str	r3, [r7, #40]	; 0x28
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	695b      	ldr	r3, [r3, #20]
 801554c:	62bb      	str	r3, [r7, #40]	; 0x28
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	699b      	ldr	r3, [r3, #24]
 8015554:	62bb      	str	r3, [r7, #40]	; 0x28
 8015556:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015566:	601a      	str	r2, [r3, #0]
 8015568:	e115      	b.n	8015796 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801556e:	b29b      	uxth	r3, r3
 8015570:	2b01      	cmp	r3, #1
 8015572:	f040 808a 	bne.w	801568a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8015576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801557c:	d137      	bne.n	80155ee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801558c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801559c:	d113      	bne.n	80155c6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80155ac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80155ae:	2300      	movs	r3, #0
 80155b0:	627b      	str	r3, [r7, #36]	; 0x24
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	695b      	ldr	r3, [r3, #20]
 80155b8:	627b      	str	r3, [r7, #36]	; 0x24
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	699b      	ldr	r3, [r3, #24]
 80155c0:	627b      	str	r3, [r7, #36]	; 0x24
 80155c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c4:	e0e7      	b.n	8015796 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80155c6:	2300      	movs	r3, #0
 80155c8:	623b      	str	r3, [r7, #32]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	695b      	ldr	r3, [r3, #20]
 80155d0:	623b      	str	r3, [r7, #32]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	699b      	ldr	r3, [r3, #24]
 80155d8:	623b      	str	r3, [r7, #32]
 80155da:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80155ea:	601a      	str	r2, [r3, #0]
 80155ec:	e0d3      	b.n	8015796 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80155ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155f0:	2b08      	cmp	r3, #8
 80155f2:	d02e      	beq.n	8015652 <I2C_Master_ADDR+0x1b2>
 80155f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155f6:	2b20      	cmp	r3, #32
 80155f8:	d02b      	beq.n	8015652 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80155fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155fc:	2b12      	cmp	r3, #18
 80155fe:	d102      	bne.n	8015606 <I2C_Master_ADDR+0x166>
 8015600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015602:	2b01      	cmp	r3, #1
 8015604:	d125      	bne.n	8015652 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8015606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015608:	2b04      	cmp	r3, #4
 801560a:	d00e      	beq.n	801562a <I2C_Master_ADDR+0x18a>
 801560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560e:	2b02      	cmp	r3, #2
 8015610:	d00b      	beq.n	801562a <I2C_Master_ADDR+0x18a>
 8015612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015614:	2b10      	cmp	r3, #16
 8015616:	d008      	beq.n	801562a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015626:	601a      	str	r2, [r3, #0]
 8015628:	e007      	b.n	801563a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	681a      	ldr	r2, [r3, #0]
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015638:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801563a:	2300      	movs	r3, #0
 801563c:	61fb      	str	r3, [r7, #28]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	695b      	ldr	r3, [r3, #20]
 8015644:	61fb      	str	r3, [r7, #28]
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	699b      	ldr	r3, [r3, #24]
 801564c:	61fb      	str	r3, [r7, #28]
 801564e:	69fb      	ldr	r3, [r7, #28]
 8015650:	e0a1      	b.n	8015796 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015660:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015662:	2300      	movs	r3, #0
 8015664:	61bb      	str	r3, [r7, #24]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	695b      	ldr	r3, [r3, #20]
 801566c:	61bb      	str	r3, [r7, #24]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	699b      	ldr	r3, [r3, #24]
 8015674:	61bb      	str	r3, [r7, #24]
 8015676:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	681a      	ldr	r2, [r3, #0]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015686:	601a      	str	r2, [r3, #0]
 8015688:	e085      	b.n	8015796 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801568e:	b29b      	uxth	r3, r3
 8015690:	2b02      	cmp	r3, #2
 8015692:	d14d      	bne.n	8015730 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8015694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015696:	2b04      	cmp	r3, #4
 8015698:	d016      	beq.n	80156c8 <I2C_Master_ADDR+0x228>
 801569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801569c:	2b02      	cmp	r3, #2
 801569e:	d013      	beq.n	80156c8 <I2C_Master_ADDR+0x228>
 80156a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a2:	2b10      	cmp	r3, #16
 80156a4:	d010      	beq.n	80156c8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80156b4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80156c4:	601a      	str	r2, [r3, #0]
 80156c6:	e007      	b.n	80156d8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80156d6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80156e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156e6:	d117      	bne.n	8015718 <I2C_Master_ADDR+0x278>
 80156e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80156ee:	d00b      	beq.n	8015708 <I2C_Master_ADDR+0x268>
 80156f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d008      	beq.n	8015708 <I2C_Master_ADDR+0x268>
 80156f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f8:	2b08      	cmp	r3, #8
 80156fa:	d005      	beq.n	8015708 <I2C_Master_ADDR+0x268>
 80156fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156fe:	2b10      	cmp	r3, #16
 8015700:	d002      	beq.n	8015708 <I2C_Master_ADDR+0x268>
 8015702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015704:	2b20      	cmp	r3, #32
 8015706:	d107      	bne.n	8015718 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	685a      	ldr	r2, [r3, #4]
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015716:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015718:	2300      	movs	r3, #0
 801571a:	617b      	str	r3, [r7, #20]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	695b      	ldr	r3, [r3, #20]
 8015722:	617b      	str	r3, [r7, #20]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	699b      	ldr	r3, [r3, #24]
 801572a:	617b      	str	r3, [r7, #20]
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	e032      	b.n	8015796 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801573e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801574a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801574e:	d117      	bne.n	8015780 <I2C_Master_ADDR+0x2e0>
 8015750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015752:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015756:	d00b      	beq.n	8015770 <I2C_Master_ADDR+0x2d0>
 8015758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801575a:	2b01      	cmp	r3, #1
 801575c:	d008      	beq.n	8015770 <I2C_Master_ADDR+0x2d0>
 801575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015760:	2b08      	cmp	r3, #8
 8015762:	d005      	beq.n	8015770 <I2C_Master_ADDR+0x2d0>
 8015764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015766:	2b10      	cmp	r3, #16
 8015768:	d002      	beq.n	8015770 <I2C_Master_ADDR+0x2d0>
 801576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801576c:	2b20      	cmp	r3, #32
 801576e:	d107      	bne.n	8015780 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	685a      	ldr	r2, [r3, #4]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801577e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015780:	2300      	movs	r3, #0
 8015782:	613b      	str	r3, [r7, #16]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	695b      	ldr	r3, [r3, #20]
 801578a:	613b      	str	r3, [r7, #16]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	699b      	ldr	r3, [r3, #24]
 8015792:	613b      	str	r3, [r7, #16]
 8015794:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2200      	movs	r2, #0
 801579a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801579c:	e00b      	b.n	80157b6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801579e:	2300      	movs	r3, #0
 80157a0:	60fb      	str	r3, [r7, #12]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	695b      	ldr	r3, [r3, #20]
 80157a8:	60fb      	str	r3, [r7, #12]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	699b      	ldr	r3, [r3, #24]
 80157b0:	60fb      	str	r3, [r7, #12]
 80157b2:	68fb      	ldr	r3, [r7, #12]
}
 80157b4:	e7ff      	b.n	80157b6 <I2C_Master_ADDR+0x316>
 80157b6:	bf00      	nop
 80157b8:	3744      	adds	r7, #68	; 0x44
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr

080157c2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b084      	sub	sp, #16
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80157d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d02b      	beq.n	8015834 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e0:	781a      	ldrb	r2, [r3, #0]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ec:	1c5a      	adds	r2, r3, #1
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	3b01      	subs	r3, #1
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015804:	b29b      	uxth	r3, r3
 8015806:	2b00      	cmp	r3, #0
 8015808:	d114      	bne.n	8015834 <I2C_SlaveTransmit_TXE+0x72>
 801580a:	7bfb      	ldrb	r3, [r7, #15]
 801580c:	2b29      	cmp	r3, #41	; 0x29
 801580e:	d111      	bne.n	8015834 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	685a      	ldr	r2, [r3, #4]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801581e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2221      	movs	r2, #33	; 0x21
 8015824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2228      	movs	r2, #40	; 0x28
 801582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f7ff f9f6 	bl	8014c20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8015834:	bf00      	nop
 8015836:	3710      	adds	r7, #16
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801583c:	b480      	push	{r7}
 801583e:	b083      	sub	sp, #12
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015848:	b29b      	uxth	r3, r3
 801584a:	2b00      	cmp	r3, #0
 801584c:	d011      	beq.n	8015872 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015852:	781a      	ldrb	r2, [r3, #0]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801585e:	1c5a      	adds	r2, r3, #1
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015868:	b29b      	uxth	r3, r3
 801586a:	3b01      	subs	r3, #1
 801586c:	b29a      	uxth	r2, r3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8015872:	bf00      	nop
 8015874:	370c      	adds	r7, #12
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr

0801587e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b084      	sub	sp, #16
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801588c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015892:	b29b      	uxth	r3, r3
 8015894:	2b00      	cmp	r3, #0
 8015896:	d02c      	beq.n	80158f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	691a      	ldr	r2, [r3, #16]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a2:	b2d2      	uxtb	r2, r2
 80158a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158aa:	1c5a      	adds	r2, r3, #1
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	3b01      	subs	r3, #1
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d114      	bne.n	80158f2 <I2C_SlaveReceive_RXNE+0x74>
 80158c8:	7bfb      	ldrb	r3, [r7, #15]
 80158ca:	2b2a      	cmp	r3, #42	; 0x2a
 80158cc:	d111      	bne.n	80158f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	685a      	ldr	r2, [r3, #4]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80158dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2222      	movs	r2, #34	; 0x22
 80158e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2228      	movs	r2, #40	; 0x28
 80158e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7ff f9a1 	bl	8014c34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80158f2:	bf00      	nop
 80158f4:	3710      	adds	r7, #16
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}

080158fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80158fa:	b480      	push	{r7}
 80158fc:	b083      	sub	sp, #12
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015906:	b29b      	uxth	r3, r3
 8015908:	2b00      	cmp	r3, #0
 801590a:	d012      	beq.n	8015932 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	691a      	ldr	r2, [r3, #16]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015916:	b2d2      	uxtb	r2, r2
 8015918:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801591e:	1c5a      	adds	r2, r3, #1
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015928:	b29b      	uxth	r3, r3
 801592a:	3b01      	subs	r3, #1
 801592c:	b29a      	uxth	r2, r3
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8015932:	bf00      	nop
 8015934:	370c      	adds	r7, #12
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr

0801593e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801593e:	b580      	push	{r7, lr}
 8015940:	b084      	sub	sp, #16
 8015942:	af00      	add	r7, sp, #0
 8015944:	6078      	str	r0, [r7, #4]
 8015946:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8015948:	2300      	movs	r3, #0
 801594a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015952:	b2db      	uxtb	r3, r3
 8015954:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8015958:	2b28      	cmp	r3, #40	; 0x28
 801595a:	d127      	bne.n	80159ac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	685a      	ldr	r2, [r3, #4]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801596a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	089b      	lsrs	r3, r3, #2
 8015970:	f003 0301 	and.w	r3, r3, #1
 8015974:	2b00      	cmp	r3, #0
 8015976:	d101      	bne.n	801597c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8015978:	2301      	movs	r3, #1
 801597a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	09db      	lsrs	r3, r3, #7
 8015980:	f003 0301 	and.w	r3, r3, #1
 8015984:	2b00      	cmp	r3, #0
 8015986:	d103      	bne.n	8015990 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	81bb      	strh	r3, [r7, #12]
 801598e:	e002      	b.n	8015996 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	699b      	ldr	r3, [r3, #24]
 8015994:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801599e:	89ba      	ldrh	r2, [r7, #12]
 80159a0:	7bfb      	ldrb	r3, [r7, #15]
 80159a2:	4619      	mov	r1, r3
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f7ff f94f 	bl	8014c48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80159aa:	e008      	b.n	80159be <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	f06f 0202 	mvn.w	r2, #2
 80159b4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	2200      	movs	r2, #0
 80159ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80159be:	bf00      	nop
 80159c0:	3710      	adds	r7, #16
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
	...

080159c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80159d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	685a      	ldr	r2, [r3, #4]
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80159e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80159e8:	2300      	movs	r3, #0
 80159ea:	60bb      	str	r3, [r7, #8]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	695b      	ldr	r3, [r3, #20]
 80159f2:	60bb      	str	r3, [r7, #8]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	f042 0201 	orr.w	r2, r2, #1
 8015a02:	601a      	str	r2, [r3, #0]
 8015a04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	681a      	ldr	r2, [r3, #0]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015a14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015a24:	d172      	bne.n	8015b0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015a26:	7bfb      	ldrb	r3, [r7, #15]
 8015a28:	2b22      	cmp	r3, #34	; 0x22
 8015a2a:	d002      	beq.n	8015a32 <I2C_Slave_STOPF+0x6a>
 8015a2c:	7bfb      	ldrb	r3, [r7, #15]
 8015a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8015a30:	d135      	bne.n	8015a9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d005      	beq.n	8015a56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a4e:	f043 0204 	orr.w	r2, r3, #4
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	685a      	ldr	r2, [r3, #4]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015a64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fd ff4a 	bl	8013904 <HAL_DMA_GetState>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b01      	cmp	r3, #1
 8015a74:	d049      	beq.n	8015b0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a7a:	4a69      	ldr	r2, [pc, #420]	; (8015c20 <I2C_Slave_STOPF+0x258>)
 8015a7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7fd fd92 	bl	80135ac <HAL_DMA_Abort_IT>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d03d      	beq.n	8015b0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a94:	687a      	ldr	r2, [r7, #4]
 8015a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015a98:	4610      	mov	r0, r2
 8015a9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015a9c:	e035      	b.n	8015b0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	b29a      	uxth	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d005      	beq.n	8015ac2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aba:	f043 0204 	orr.w	r2, r3, #4
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	685a      	ldr	r2, [r3, #4]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015ad0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7fd ff14 	bl	8013904 <HAL_DMA_GetState>
 8015adc:	4603      	mov	r3, r0
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d014      	beq.n	8015b0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ae6:	4a4e      	ldr	r2, [pc, #312]	; (8015c20 <I2C_Slave_STOPF+0x258>)
 8015ae8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7fd fd5c 	bl	80135ac <HAL_DMA_Abort_IT>
 8015af4:	4603      	mov	r3, r0
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d008      	beq.n	8015b0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015b04:	4610      	mov	r0, r2
 8015b06:	4798      	blx	r3
 8015b08:	e000      	b.n	8015b0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015b0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d03e      	beq.n	8015b94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	695b      	ldr	r3, [r3, #20]
 8015b1c:	f003 0304 	and.w	r3, r3, #4
 8015b20:	2b04      	cmp	r3, #4
 8015b22:	d112      	bne.n	8015b4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	691a      	ldr	r2, [r3, #16]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2e:	b2d2      	uxtb	r2, r2
 8015b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b36:	1c5a      	adds	r2, r3, #1
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	3b01      	subs	r3, #1
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	695b      	ldr	r3, [r3, #20]
 8015b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b54:	2b40      	cmp	r3, #64	; 0x40
 8015b56:	d112      	bne.n	8015b7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	691a      	ldr	r2, [r3, #16]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b6a:	1c5a      	adds	r2, r3, #1
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	3b01      	subs	r3, #1
 8015b78:	b29a      	uxth	r2, r3
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d005      	beq.n	8015b94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b8c:	f043 0204 	orr.w	r2, r3, #4
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d003      	beq.n	8015ba4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f000 f8b3 	bl	8015d08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8015ba2:	e039      	b.n	8015c18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015ba4:	7bfb      	ldrb	r3, [r7, #15]
 8015ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8015ba8:	d109      	bne.n	8015bbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2200      	movs	r2, #0
 8015bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2228      	movs	r2, #40	; 0x28
 8015bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f7ff f83b 	bl	8014c34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015bc4:	b2db      	uxtb	r3, r3
 8015bc6:	2b28      	cmp	r3, #40	; 0x28
 8015bc8:	d111      	bne.n	8015bee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	4a15      	ldr	r2, [pc, #84]	; (8015c24 <I2C_Slave_STOPF+0x25c>)
 8015bce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	2220      	movs	r2, #32
 8015bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2200      	movs	r2, #0
 8015be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f7ff f83c 	bl	8014c64 <HAL_I2C_ListenCpltCallback>
}
 8015bec:	e014      	b.n	8015c18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bf2:	2b22      	cmp	r3, #34	; 0x22
 8015bf4:	d002      	beq.n	8015bfc <I2C_Slave_STOPF+0x234>
 8015bf6:	7bfb      	ldrb	r3, [r7, #15]
 8015bf8:	2b22      	cmp	r3, #34	; 0x22
 8015bfa:	d10d      	bne.n	8015c18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2220      	movs	r2, #32
 8015c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f7ff f80e 	bl	8014c34 <HAL_I2C_SlaveRxCpltCallback>
}
 8015c18:	bf00      	nop
 8015c1a:	3710      	adds	r7, #16
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}
 8015c20:	08016191 	.word	0x08016191
 8015c24:	ffff0000 	.word	0xffff0000

08015c28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	2b08      	cmp	r3, #8
 8015c42:	d002      	beq.n	8015c4a <I2C_Slave_AF+0x22>
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	2b20      	cmp	r3, #32
 8015c48:	d129      	bne.n	8015c9e <I2C_Slave_AF+0x76>
 8015c4a:	7bfb      	ldrb	r3, [r7, #15]
 8015c4c:	2b28      	cmp	r3, #40	; 0x28
 8015c4e:	d126      	bne.n	8015c9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	4a2c      	ldr	r2, [pc, #176]	; (8015d04 <I2C_Slave_AF+0xdc>)
 8015c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	685a      	ldr	r2, [r3, #4]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015c64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015c6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015c7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2200      	movs	r2, #0
 8015c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2220      	movs	r2, #32
 8015c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2200      	movs	r2, #0
 8015c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f7fe ffe4 	bl	8014c64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8015c9c:	e02e      	b.n	8015cfc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8015c9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ca0:	2b21      	cmp	r3, #33	; 0x21
 8015ca2:	d126      	bne.n	8015cf2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	4a17      	ldr	r2, [pc, #92]	; (8015d04 <I2C_Slave_AF+0xdc>)
 8015ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2221      	movs	r2, #33	; 0x21
 8015cae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2220      	movs	r2, #32
 8015cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	685a      	ldr	r2, [r3, #4]
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015cce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015cd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	681a      	ldr	r2, [r3, #0]
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015ce8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7fe ff98 	bl	8014c20 <HAL_I2C_SlaveTxCpltCallback>
}
 8015cf0:	e004      	b.n	8015cfc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015cfa:	615a      	str	r2, [r3, #20]
}
 8015cfc:	bf00      	nop
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	ffff0000 	.word	0xffff0000

08015d08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8015d20:	7bbb      	ldrb	r3, [r7, #14]
 8015d22:	2b10      	cmp	r3, #16
 8015d24:	d002      	beq.n	8015d2c <I2C_ITError+0x24>
 8015d26:	7bbb      	ldrb	r3, [r7, #14]
 8015d28:	2b40      	cmp	r3, #64	; 0x40
 8015d2a:	d10a      	bne.n	8015d42 <I2C_ITError+0x3a>
 8015d2c:	7bfb      	ldrb	r3, [r7, #15]
 8015d2e:	2b22      	cmp	r3, #34	; 0x22
 8015d30:	d107      	bne.n	8015d42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015d40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015d42:	7bfb      	ldrb	r3, [r7, #15]
 8015d44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8015d48:	2b28      	cmp	r3, #40	; 0x28
 8015d4a:	d107      	bne.n	8015d5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2228      	movs	r2, #40	; 0x28
 8015d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8015d5a:	e015      	b.n	8015d88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015d6a:	d00a      	beq.n	8015d82 <I2C_ITError+0x7a>
 8015d6c:	7bfb      	ldrb	r3, [r7, #15]
 8015d6e:	2b60      	cmp	r3, #96	; 0x60
 8015d70:	d007      	beq.n	8015d82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2220      	movs	r2, #32
 8015d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2200      	movs	r2, #0
 8015d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015d96:	d162      	bne.n	8015e5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	685a      	ldr	r2, [r3, #4]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015da6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	2b01      	cmp	r3, #1
 8015db4:	d020      	beq.n	8015df8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dba:	4a6a      	ldr	r2, [pc, #424]	; (8015f64 <I2C_ITError+0x25c>)
 8015dbc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fd fbf2 	bl	80135ac <HAL_DMA_Abort_IT>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	f000 8089 	beq.w	8015ee2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	f022 0201 	bic.w	r2, r2, #1
 8015dde:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2220      	movs	r2, #32
 8015de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015df2:	4610      	mov	r0, r2
 8015df4:	4798      	blx	r3
 8015df6:	e074      	b.n	8015ee2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dfc:	4a59      	ldr	r2, [pc, #356]	; (8015f64 <I2C_ITError+0x25c>)
 8015dfe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7fd fbd1 	bl	80135ac <HAL_DMA_Abort_IT>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d068      	beq.n	8015ee2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	695b      	ldr	r3, [r3, #20]
 8015e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e1a:	2b40      	cmp	r3, #64	; 0x40
 8015e1c:	d10b      	bne.n	8015e36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	691a      	ldr	r2, [r3, #16]
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e28:	b2d2      	uxtb	r2, r2
 8015e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e30:	1c5a      	adds	r2, r3, #1
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	f022 0201 	bic.w	r2, r2, #1
 8015e44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2220      	movs	r2, #32
 8015e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e54:	687a      	ldr	r2, [r7, #4]
 8015e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015e58:	4610      	mov	r0, r2
 8015e5a:	4798      	blx	r3
 8015e5c:	e041      	b.n	8015ee2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e64:	b2db      	uxtb	r3, r3
 8015e66:	2b60      	cmp	r3, #96	; 0x60
 8015e68:	d125      	bne.n	8015eb6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2220      	movs	r2, #32
 8015e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2200      	movs	r2, #0
 8015e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	695b      	ldr	r3, [r3, #20]
 8015e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e82:	2b40      	cmp	r3, #64	; 0x40
 8015e84:	d10b      	bne.n	8015e9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	691a      	ldr	r2, [r3, #16]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e90:	b2d2      	uxtb	r2, r2
 8015e92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e98:	1c5a      	adds	r2, r3, #1
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f022 0201 	bic.w	r2, r2, #1
 8015eac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f7fe ff00 	bl	8014cb4 <HAL_I2C_AbortCpltCallback>
 8015eb4:	e015      	b.n	8015ee2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	695b      	ldr	r3, [r3, #20]
 8015ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ec0:	2b40      	cmp	r3, #64	; 0x40
 8015ec2:	d10b      	bne.n	8015edc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	691a      	ldr	r2, [r3, #16]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ece:	b2d2      	uxtb	r2, r2
 8015ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed6:	1c5a      	adds	r2, r3, #1
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f7fe fedf 	bl	8014ca0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	f003 0301 	and.w	r3, r3, #1
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d10e      	bne.n	8015f10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d109      	bne.n	8015f10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8015efc:	68bb      	ldr	r3, [r7, #8]
 8015efe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d104      	bne.n	8015f10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d007      	beq.n	8015f20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	685a      	ldr	r2, [r3, #4]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015f1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f2c:	f003 0304 	and.w	r3, r3, #4
 8015f30:	2b04      	cmp	r3, #4
 8015f32:	d113      	bne.n	8015f5c <I2C_ITError+0x254>
 8015f34:	7bfb      	ldrb	r3, [r7, #15]
 8015f36:	2b28      	cmp	r3, #40	; 0x28
 8015f38:	d110      	bne.n	8015f5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	4a0a      	ldr	r2, [pc, #40]	; (8015f68 <I2C_ITError+0x260>)
 8015f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2200      	movs	r2, #0
 8015f44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2220      	movs	r2, #32
 8015f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f7fe fe84 	bl	8014c64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015f5c:	bf00      	nop
 8015f5e:	3710      	adds	r7, #16
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}
 8015f64:	08016191 	.word	0x08016191
 8015f68:	ffff0000 	.word	0xffff0000

08015f6c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b086      	sub	sp, #24
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f80:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015f88:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f8e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	685a      	ldr	r2, [r3, #4]
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8015f9e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d003      	beq.n	8015fb0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fac:	2200      	movs	r2, #0
 8015fae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d003      	beq.n	8015fc0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8015fc0:	7cfb      	ldrb	r3, [r7, #19]
 8015fc2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8015fc6:	2b21      	cmp	r3, #33	; 0x21
 8015fc8:	d007      	beq.n	8015fda <I2C_DMAXferCplt+0x6e>
 8015fca:	7cfb      	ldrb	r3, [r7, #19]
 8015fcc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8015fd0:	2b22      	cmp	r3, #34	; 0x22
 8015fd2:	d131      	bne.n	8016038 <I2C_DMAXferCplt+0xcc>
 8015fd4:	7cbb      	ldrb	r3, [r7, #18]
 8015fd6:	2b20      	cmp	r3, #32
 8015fd8:	d12e      	bne.n	8016038 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	685a      	ldr	r2, [r3, #4]
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015fe8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	2200      	movs	r2, #0
 8015fee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8015ff0:	7cfb      	ldrb	r3, [r7, #19]
 8015ff2:	2b29      	cmp	r3, #41	; 0x29
 8015ff4:	d10a      	bne.n	801600c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	2221      	movs	r2, #33	; 0x21
 8015ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	2228      	movs	r2, #40	; 0x28
 8016000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016004:	6978      	ldr	r0, [r7, #20]
 8016006:	f7fe fe0b 	bl	8014c20 <HAL_I2C_SlaveTxCpltCallback>
 801600a:	e00c      	b.n	8016026 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801600c:	7cfb      	ldrb	r3, [r7, #19]
 801600e:	2b2a      	cmp	r3, #42	; 0x2a
 8016010:	d109      	bne.n	8016026 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016012:	697b      	ldr	r3, [r7, #20]
 8016014:	2222      	movs	r2, #34	; 0x22
 8016016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	2228      	movs	r2, #40	; 0x28
 801601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016020:	6978      	ldr	r0, [r7, #20]
 8016022:	f7fe fe07 	bl	8014c34 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8016034:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8016036:	e06a      	b.n	801610e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801603e:	b2db      	uxtb	r3, r3
 8016040:	2b00      	cmp	r3, #0
 8016042:	d064      	beq.n	801610e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016048:	b29b      	uxth	r3, r3
 801604a:	2b01      	cmp	r3, #1
 801604c:	d107      	bne.n	801605e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	681a      	ldr	r2, [r3, #0]
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801605c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	685a      	ldr	r2, [r3, #4]
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801606c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8016074:	d009      	beq.n	801608a <I2C_DMAXferCplt+0x11e>
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	2b08      	cmp	r3, #8
 801607a:	d006      	beq.n	801608a <I2C_DMAXferCplt+0x11e>
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8016082:	d002      	beq.n	801608a <I2C_DMAXferCplt+0x11e>
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2b20      	cmp	r3, #32
 8016088:	d107      	bne.n	801609a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	681a      	ldr	r2, [r3, #0]
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016098:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	685a      	ldr	r2, [r3, #4]
 80160a0:	697b      	ldr	r3, [r7, #20]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80160a8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	685a      	ldr	r2, [r3, #4]
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80160b8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	2200      	movs	r2, #0
 80160be:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d003      	beq.n	80160d0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80160c8:	6978      	ldr	r0, [r7, #20]
 80160ca:	f7fe fde9 	bl	8014ca0 <HAL_I2C_ErrorCallback>
}
 80160ce:	e01e      	b.n	801610e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	2220      	movs	r2, #32
 80160d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	2b40      	cmp	r3, #64	; 0x40
 80160e2:	d10a      	bne.n	80160fa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	2200      	movs	r2, #0
 80160e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	2200      	movs	r2, #0
 80160f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80160f2:	6978      	ldr	r0, [r7, #20]
 80160f4:	f7fe fdca 	bl	8014c8c <HAL_I2C_MemRxCpltCallback>
}
 80160f8:	e009      	b.n	801610e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	2200      	movs	r2, #0
 80160fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	2212      	movs	r2, #18
 8016106:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8016108:	6978      	ldr	r0, [r7, #20]
 801610a:	f7fe fd7f 	bl	8014c0c <HAL_I2C_MasterRxCpltCallback>
}
 801610e:	bf00      	nop
 8016110:	3718      	adds	r7, #24
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}

08016116 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8016116:	b580      	push	{r7, lr}
 8016118:	b084      	sub	sp, #16
 801611a:	af00      	add	r7, sp, #0
 801611c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016122:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016128:	2b00      	cmp	r3, #0
 801612a:	d003      	beq.n	8016134 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016130:	2200      	movs	r2, #0
 8016132:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016138:	2b00      	cmp	r3, #0
 801613a:	d003      	beq.n	8016144 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016140:	2200      	movs	r2, #0
 8016142:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f7fd fbeb 	bl	8013920 <HAL_DMA_GetError>
 801614a:	4603      	mov	r3, r0
 801614c:	2b02      	cmp	r3, #2
 801614e:	d01b      	beq.n	8016188 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	681a      	ldr	r2, [r3, #0]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801615e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	2200      	movs	r2, #0
 8016164:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2220      	movs	r2, #32
 801616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2200      	movs	r2, #0
 8016172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617a:	f043 0210 	orr.w	r2, r3, #16
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f7fe fd8c 	bl	8014ca0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016188:	bf00      	nop
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b086      	sub	sp, #24
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016198:	2300      	movs	r3, #0
 801619a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80161a2:	697b      	ldr	r3, [r7, #20]
 80161a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80161a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80161aa:	4b4b      	ldr	r3, [pc, #300]	; (80162d8 <I2C_DMAAbort+0x148>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	08db      	lsrs	r3, r3, #3
 80161b0:	4a4a      	ldr	r2, [pc, #296]	; (80162dc <I2C_DMAAbort+0x14c>)
 80161b2:	fba2 2303 	umull	r2, r3, r2, r3
 80161b6:	0a1a      	lsrs	r2, r3, #8
 80161b8:	4613      	mov	r3, r2
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	4413      	add	r3, r2
 80161be:	00da      	lsls	r2, r3, #3
 80161c0:	1ad3      	subs	r3, r2, r3
 80161c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d106      	bne.n	80161d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80161ca:	697b      	ldr	r3, [r7, #20]
 80161cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161ce:	f043 0220 	orr.w	r2, r3, #32
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80161d6:	e00a      	b.n	80161ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	3b01      	subs	r3, #1
 80161dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80161e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80161ec:	d0ea      	beq.n	80161c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80161ee:	697b      	ldr	r3, [r7, #20]
 80161f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d003      	beq.n	80161fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80161f6:	697b      	ldr	r3, [r7, #20]
 80161f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161fa:	2200      	movs	r2, #0
 80161fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016202:	2b00      	cmp	r3, #0
 8016204:	d003      	beq.n	801620e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801620a:	2200      	movs	r2, #0
 801620c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801621c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	2200      	movs	r2, #0
 8016222:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016228:	2b00      	cmp	r3, #0
 801622a:	d003      	beq.n	8016234 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016230:	2200      	movs	r2, #0
 8016232:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016238:	2b00      	cmp	r3, #0
 801623a:	d003      	beq.n	8016244 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016240:	2200      	movs	r2, #0
 8016242:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	f022 0201 	bic.w	r2, r2, #1
 8016252:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801625a:	b2db      	uxtb	r3, r3
 801625c:	2b60      	cmp	r3, #96	; 0x60
 801625e:	d10e      	bne.n	801627e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	2220      	movs	r2, #32
 8016264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	2200      	movs	r2, #0
 801626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	2200      	movs	r2, #0
 8016274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8016276:	6978      	ldr	r0, [r7, #20]
 8016278:	f7fe fd1c 	bl	8014cb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801627c:	e027      	b.n	80162ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801627e:	7cfb      	ldrb	r3, [r7, #19]
 8016280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8016284:	2b28      	cmp	r3, #40	; 0x28
 8016286:	d117      	bne.n	80162b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	681a      	ldr	r2, [r3, #0]
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f042 0201 	orr.w	r2, r2, #1
 8016296:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	681a      	ldr	r2, [r3, #0]
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80162a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	2200      	movs	r2, #0
 80162ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	2228      	movs	r2, #40	; 0x28
 80162b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80162b6:	e007      	b.n	80162c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	2220      	movs	r2, #32
 80162bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	2200      	movs	r2, #0
 80162c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80162c8:	6978      	ldr	r0, [r7, #20]
 80162ca:	f7fe fce9 	bl	8014ca0 <HAL_I2C_ErrorCallback>
}
 80162ce:	bf00      	nop
 80162d0:	3718      	adds	r7, #24
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}
 80162d6:	bf00      	nop
 80162d8:	20000000 	.word	0x20000000
 80162dc:	14f8b589 	.word	0x14f8b589

080162e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80162e8:	2300      	movs	r3, #0
 80162ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80162ec:	4b13      	ldr	r3, [pc, #76]	; (801633c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	08db      	lsrs	r3, r3, #3
 80162f2:	4a13      	ldr	r2, [pc, #76]	; (8016340 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80162f4:	fba2 2303 	umull	r2, r3, r2, r3
 80162f8:	0a1a      	lsrs	r2, r3, #8
 80162fa:	4613      	mov	r3, r2
 80162fc:	009b      	lsls	r3, r3, #2
 80162fe:	4413      	add	r3, r2
 8016300:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	3b01      	subs	r3, #1
 8016306:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d107      	bne.n	801631e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016312:	f043 0220 	orr.w	r2, r3, #32
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801631a:	2301      	movs	r3, #1
 801631c:	e008      	b.n	8016330 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801632c:	d0e9      	beq.n	8016302 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801632e:	2300      	movs	r3, #0
}
 8016330:	4618      	mov	r0, r3
 8016332:	3714      	adds	r7, #20
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr
 801633c:	20000000 	.word	0x20000000
 8016340:	14f8b589 	.word	0x14f8b589

08016344 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016350:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8016354:	d103      	bne.n	801635e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2201      	movs	r2, #1
 801635a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801635c:	e007      	b.n	801636e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016362:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8016366:	d102      	bne.n	801636e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2208      	movs	r2, #8
 801636c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801636e:	bf00      	nop
 8016370:	370c      	adds	r7, #12
 8016372:	46bd      	mov	sp, r7
 8016374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016378:	4770      	bx	lr
	...

0801637c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b086      	sub	sp, #24
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d101      	bne.n	801638e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801638a:	2301      	movs	r3, #1
 801638c:	e25b      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	f003 0301 	and.w	r3, r3, #1
 8016396:	2b00      	cmp	r3, #0
 8016398:	d075      	beq.n	8016486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801639a:	4ba3      	ldr	r3, [pc, #652]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 801639c:	689b      	ldr	r3, [r3, #8]
 801639e:	f003 030c 	and.w	r3, r3, #12
 80163a2:	2b04      	cmp	r3, #4
 80163a4:	d00c      	beq.n	80163c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80163a6:	4ba0      	ldr	r3, [pc, #640]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80163a8:	689b      	ldr	r3, [r3, #8]
 80163aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80163ae:	2b08      	cmp	r3, #8
 80163b0:	d112      	bne.n	80163d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80163b2:	4b9d      	ldr	r3, [pc, #628]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80163ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80163be:	d10b      	bne.n	80163d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80163c0:	4b99      	ldr	r3, [pc, #612]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d05b      	beq.n	8016484 <HAL_RCC_OscConfig+0x108>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d157      	bne.n	8016484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80163d4:	2301      	movs	r3, #1
 80163d6:	e236      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163e0:	d106      	bne.n	80163f0 <HAL_RCC_OscConfig+0x74>
 80163e2:	4b91      	ldr	r3, [pc, #580]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	4a90      	ldr	r2, [pc, #576]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80163e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80163ec:	6013      	str	r3, [r2, #0]
 80163ee:	e01d      	b.n	801642c <HAL_RCC_OscConfig+0xb0>
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	685b      	ldr	r3, [r3, #4]
 80163f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80163f8:	d10c      	bne.n	8016414 <HAL_RCC_OscConfig+0x98>
 80163fa:	4b8b      	ldr	r3, [pc, #556]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	4a8a      	ldr	r2, [pc, #552]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016404:	6013      	str	r3, [r2, #0]
 8016406:	4b88      	ldr	r3, [pc, #544]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	4a87      	ldr	r2, [pc, #540]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 801640c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016410:	6013      	str	r3, [r2, #0]
 8016412:	e00b      	b.n	801642c <HAL_RCC_OscConfig+0xb0>
 8016414:	4b84      	ldr	r3, [pc, #528]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	4a83      	ldr	r2, [pc, #524]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 801641a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801641e:	6013      	str	r3, [r2, #0]
 8016420:	4b81      	ldr	r3, [pc, #516]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	4a80      	ldr	r2, [pc, #512]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801642a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d013      	beq.n	801645c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016434:	f7fc fec6 	bl	80131c4 <HAL_GetTick>
 8016438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801643a:	e008      	b.n	801644e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801643c:	f7fc fec2 	bl	80131c4 <HAL_GetTick>
 8016440:	4602      	mov	r2, r0
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	1ad3      	subs	r3, r2, r3
 8016446:	2b64      	cmp	r3, #100	; 0x64
 8016448:	d901      	bls.n	801644e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801644a:	2303      	movs	r3, #3
 801644c:	e1fb      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801644e:	4b76      	ldr	r3, [pc, #472]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016456:	2b00      	cmp	r3, #0
 8016458:	d0f0      	beq.n	801643c <HAL_RCC_OscConfig+0xc0>
 801645a:	e014      	b.n	8016486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801645c:	f7fc feb2 	bl	80131c4 <HAL_GetTick>
 8016460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016462:	e008      	b.n	8016476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016464:	f7fc feae 	bl	80131c4 <HAL_GetTick>
 8016468:	4602      	mov	r2, r0
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	1ad3      	subs	r3, r2, r3
 801646e:	2b64      	cmp	r3, #100	; 0x64
 8016470:	d901      	bls.n	8016476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8016472:	2303      	movs	r3, #3
 8016474:	e1e7      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016476:	4b6c      	ldr	r3, [pc, #432]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801647e:	2b00      	cmp	r3, #0
 8016480:	d1f0      	bne.n	8016464 <HAL_RCC_OscConfig+0xe8>
 8016482:	e000      	b.n	8016486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	f003 0302 	and.w	r3, r3, #2
 801648e:	2b00      	cmp	r3, #0
 8016490:	d063      	beq.n	801655a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8016492:	4b65      	ldr	r3, [pc, #404]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016494:	689b      	ldr	r3, [r3, #8]
 8016496:	f003 030c 	and.w	r3, r3, #12
 801649a:	2b00      	cmp	r3, #0
 801649c:	d00b      	beq.n	80164b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801649e:	4b62      	ldr	r3, [pc, #392]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80164a0:	689b      	ldr	r3, [r3, #8]
 80164a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80164a6:	2b08      	cmp	r3, #8
 80164a8:	d11c      	bne.n	80164e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80164aa:	4b5f      	ldr	r3, [pc, #380]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d116      	bne.n	80164e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80164b6:	4b5c      	ldr	r3, [pc, #368]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	f003 0302 	and.w	r3, r3, #2
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d005      	beq.n	80164ce <HAL_RCC_OscConfig+0x152>
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	2b01      	cmp	r3, #1
 80164c8:	d001      	beq.n	80164ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80164ca:	2301      	movs	r3, #1
 80164cc:	e1bb      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80164ce:	4b56      	ldr	r3, [pc, #344]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	691b      	ldr	r3, [r3, #16]
 80164da:	00db      	lsls	r3, r3, #3
 80164dc:	4952      	ldr	r1, [pc, #328]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80164de:	4313      	orrs	r3, r2
 80164e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80164e2:	e03a      	b.n	801655a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d020      	beq.n	801652e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80164ec:	4b4f      	ldr	r3, [pc, #316]	; (801662c <HAL_RCC_OscConfig+0x2b0>)
 80164ee:	2201      	movs	r2, #1
 80164f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80164f2:	f7fc fe67 	bl	80131c4 <HAL_GetTick>
 80164f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80164f8:	e008      	b.n	801650c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80164fa:	f7fc fe63 	bl	80131c4 <HAL_GetTick>
 80164fe:	4602      	mov	r2, r0
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	1ad3      	subs	r3, r2, r3
 8016504:	2b02      	cmp	r3, #2
 8016506:	d901      	bls.n	801650c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8016508:	2303      	movs	r3, #3
 801650a:	e19c      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801650c:	4b46      	ldr	r3, [pc, #280]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f003 0302 	and.w	r3, r3, #2
 8016514:	2b00      	cmp	r3, #0
 8016516:	d0f0      	beq.n	80164fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016518:	4b43      	ldr	r3, [pc, #268]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	691b      	ldr	r3, [r3, #16]
 8016524:	00db      	lsls	r3, r3, #3
 8016526:	4940      	ldr	r1, [pc, #256]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016528:	4313      	orrs	r3, r2
 801652a:	600b      	str	r3, [r1, #0]
 801652c:	e015      	b.n	801655a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801652e:	4b3f      	ldr	r3, [pc, #252]	; (801662c <HAL_RCC_OscConfig+0x2b0>)
 8016530:	2200      	movs	r2, #0
 8016532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016534:	f7fc fe46 	bl	80131c4 <HAL_GetTick>
 8016538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801653a:	e008      	b.n	801654e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801653c:	f7fc fe42 	bl	80131c4 <HAL_GetTick>
 8016540:	4602      	mov	r2, r0
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	2b02      	cmp	r3, #2
 8016548:	d901      	bls.n	801654e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801654a:	2303      	movs	r3, #3
 801654c:	e17b      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801654e:	4b36      	ldr	r3, [pc, #216]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	f003 0302 	and.w	r3, r3, #2
 8016556:	2b00      	cmp	r3, #0
 8016558:	d1f0      	bne.n	801653c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	f003 0308 	and.w	r3, r3, #8
 8016562:	2b00      	cmp	r3, #0
 8016564:	d030      	beq.n	80165c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	695b      	ldr	r3, [r3, #20]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d016      	beq.n	801659c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801656e:	4b30      	ldr	r3, [pc, #192]	; (8016630 <HAL_RCC_OscConfig+0x2b4>)
 8016570:	2201      	movs	r2, #1
 8016572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016574:	f7fc fe26 	bl	80131c4 <HAL_GetTick>
 8016578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801657a:	e008      	b.n	801658e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801657c:	f7fc fe22 	bl	80131c4 <HAL_GetTick>
 8016580:	4602      	mov	r2, r0
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	1ad3      	subs	r3, r2, r3
 8016586:	2b02      	cmp	r3, #2
 8016588:	d901      	bls.n	801658e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801658a:	2303      	movs	r3, #3
 801658c:	e15b      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801658e:	4b26      	ldr	r3, [pc, #152]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 8016590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016592:	f003 0302 	and.w	r3, r3, #2
 8016596:	2b00      	cmp	r3, #0
 8016598:	d0f0      	beq.n	801657c <HAL_RCC_OscConfig+0x200>
 801659a:	e015      	b.n	80165c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801659c:	4b24      	ldr	r3, [pc, #144]	; (8016630 <HAL_RCC_OscConfig+0x2b4>)
 801659e:	2200      	movs	r2, #0
 80165a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80165a2:	f7fc fe0f 	bl	80131c4 <HAL_GetTick>
 80165a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80165a8:	e008      	b.n	80165bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80165aa:	f7fc fe0b 	bl	80131c4 <HAL_GetTick>
 80165ae:	4602      	mov	r2, r0
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	1ad3      	subs	r3, r2, r3
 80165b4:	2b02      	cmp	r3, #2
 80165b6:	d901      	bls.n	80165bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80165b8:	2303      	movs	r3, #3
 80165ba:	e144      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80165bc:	4b1a      	ldr	r3, [pc, #104]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80165be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80165c0:	f003 0302 	and.w	r3, r3, #2
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1f0      	bne.n	80165aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	f003 0304 	and.w	r3, r3, #4
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	f000 80a0 	beq.w	8016716 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80165d6:	2300      	movs	r3, #0
 80165d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80165da:	4b13      	ldr	r3, [pc, #76]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80165dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d10f      	bne.n	8016606 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80165e6:	2300      	movs	r3, #0
 80165e8:	60bb      	str	r3, [r7, #8]
 80165ea:	4b0f      	ldr	r3, [pc, #60]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80165ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ee:	4a0e      	ldr	r2, [pc, #56]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80165f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80165f4:	6413      	str	r3, [r2, #64]	; 0x40
 80165f6:	4b0c      	ldr	r3, [pc, #48]	; (8016628 <HAL_RCC_OscConfig+0x2ac>)
 80165f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80165fe:	60bb      	str	r3, [r7, #8]
 8016600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016602:	2301      	movs	r3, #1
 8016604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016606:	4b0b      	ldr	r3, [pc, #44]	; (8016634 <HAL_RCC_OscConfig+0x2b8>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801660e:	2b00      	cmp	r3, #0
 8016610:	d121      	bne.n	8016656 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016612:	4b08      	ldr	r3, [pc, #32]	; (8016634 <HAL_RCC_OscConfig+0x2b8>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	4a07      	ldr	r2, [pc, #28]	; (8016634 <HAL_RCC_OscConfig+0x2b8>)
 8016618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801661c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801661e:	f7fc fdd1 	bl	80131c4 <HAL_GetTick>
 8016622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016624:	e011      	b.n	801664a <HAL_RCC_OscConfig+0x2ce>
 8016626:	bf00      	nop
 8016628:	40023800 	.word	0x40023800
 801662c:	42470000 	.word	0x42470000
 8016630:	42470e80 	.word	0x42470e80
 8016634:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016638:	f7fc fdc4 	bl	80131c4 <HAL_GetTick>
 801663c:	4602      	mov	r2, r0
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	2b02      	cmp	r3, #2
 8016644:	d901      	bls.n	801664a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8016646:	2303      	movs	r3, #3
 8016648:	e0fd      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801664a:	4b81      	ldr	r3, [pc, #516]	; (8016850 <HAL_RCC_OscConfig+0x4d4>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016652:	2b00      	cmp	r3, #0
 8016654:	d0f0      	beq.n	8016638 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	689b      	ldr	r3, [r3, #8]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d106      	bne.n	801666c <HAL_RCC_OscConfig+0x2f0>
 801665e:	4b7d      	ldr	r3, [pc, #500]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016662:	4a7c      	ldr	r2, [pc, #496]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016664:	f043 0301 	orr.w	r3, r3, #1
 8016668:	6713      	str	r3, [r2, #112]	; 0x70
 801666a:	e01c      	b.n	80166a6 <HAL_RCC_OscConfig+0x32a>
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	689b      	ldr	r3, [r3, #8]
 8016670:	2b05      	cmp	r3, #5
 8016672:	d10c      	bne.n	801668e <HAL_RCC_OscConfig+0x312>
 8016674:	4b77      	ldr	r3, [pc, #476]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016678:	4a76      	ldr	r2, [pc, #472]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 801667a:	f043 0304 	orr.w	r3, r3, #4
 801667e:	6713      	str	r3, [r2, #112]	; 0x70
 8016680:	4b74      	ldr	r3, [pc, #464]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016684:	4a73      	ldr	r2, [pc, #460]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016686:	f043 0301 	orr.w	r3, r3, #1
 801668a:	6713      	str	r3, [r2, #112]	; 0x70
 801668c:	e00b      	b.n	80166a6 <HAL_RCC_OscConfig+0x32a>
 801668e:	4b71      	ldr	r3, [pc, #452]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016692:	4a70      	ldr	r2, [pc, #448]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016694:	f023 0301 	bic.w	r3, r3, #1
 8016698:	6713      	str	r3, [r2, #112]	; 0x70
 801669a:	4b6e      	ldr	r3, [pc, #440]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 801669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801669e:	4a6d      	ldr	r2, [pc, #436]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 80166a0:	f023 0304 	bic.w	r3, r3, #4
 80166a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	689b      	ldr	r3, [r3, #8]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d015      	beq.n	80166da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80166ae:	f7fc fd89 	bl	80131c4 <HAL_GetTick>
 80166b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80166b4:	e00a      	b.n	80166cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80166b6:	f7fc fd85 	bl	80131c4 <HAL_GetTick>
 80166ba:	4602      	mov	r2, r0
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	1ad3      	subs	r3, r2, r3
 80166c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d901      	bls.n	80166cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80166c8:	2303      	movs	r3, #3
 80166ca:	e0bc      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80166cc:	4b61      	ldr	r3, [pc, #388]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 80166ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166d0:	f003 0302 	and.w	r3, r3, #2
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d0ee      	beq.n	80166b6 <HAL_RCC_OscConfig+0x33a>
 80166d8:	e014      	b.n	8016704 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80166da:	f7fc fd73 	bl	80131c4 <HAL_GetTick>
 80166de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80166e0:	e00a      	b.n	80166f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80166e2:	f7fc fd6f 	bl	80131c4 <HAL_GetTick>
 80166e6:	4602      	mov	r2, r0
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	1ad3      	subs	r3, r2, r3
 80166ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80166f0:	4293      	cmp	r3, r2
 80166f2:	d901      	bls.n	80166f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80166f4:	2303      	movs	r3, #3
 80166f6:	e0a6      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80166f8:	4b56      	ldr	r3, [pc, #344]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 80166fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166fc:	f003 0302 	and.w	r3, r3, #2
 8016700:	2b00      	cmp	r3, #0
 8016702:	d1ee      	bne.n	80166e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8016704:	7dfb      	ldrb	r3, [r7, #23]
 8016706:	2b01      	cmp	r3, #1
 8016708:	d105      	bne.n	8016716 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801670a:	4b52      	ldr	r3, [pc, #328]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 801670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801670e:	4a51      	ldr	r2, [pc, #324]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016714:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	699b      	ldr	r3, [r3, #24]
 801671a:	2b00      	cmp	r3, #0
 801671c:	f000 8092 	beq.w	8016844 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8016720:	4b4c      	ldr	r3, [pc, #304]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016722:	689b      	ldr	r3, [r3, #8]
 8016724:	f003 030c 	and.w	r3, r3, #12
 8016728:	2b08      	cmp	r3, #8
 801672a:	d05c      	beq.n	80167e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	699b      	ldr	r3, [r3, #24]
 8016730:	2b02      	cmp	r3, #2
 8016732:	d141      	bne.n	80167b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016734:	4b48      	ldr	r3, [pc, #288]	; (8016858 <HAL_RCC_OscConfig+0x4dc>)
 8016736:	2200      	movs	r2, #0
 8016738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801673a:	f7fc fd43 	bl	80131c4 <HAL_GetTick>
 801673e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016740:	e008      	b.n	8016754 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016742:	f7fc fd3f 	bl	80131c4 <HAL_GetTick>
 8016746:	4602      	mov	r2, r0
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	2b02      	cmp	r3, #2
 801674e:	d901      	bls.n	8016754 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8016750:	2303      	movs	r3, #3
 8016752:	e078      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016754:	4b3f      	ldr	r3, [pc, #252]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801675c:	2b00      	cmp	r3, #0
 801675e:	d1f0      	bne.n	8016742 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	69da      	ldr	r2, [r3, #28]
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	6a1b      	ldr	r3, [r3, #32]
 8016768:	431a      	orrs	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801676e:	019b      	lsls	r3, r3, #6
 8016770:	431a      	orrs	r2, r3
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016776:	085b      	lsrs	r3, r3, #1
 8016778:	3b01      	subs	r3, #1
 801677a:	041b      	lsls	r3, r3, #16
 801677c:	431a      	orrs	r2, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016782:	061b      	lsls	r3, r3, #24
 8016784:	4933      	ldr	r1, [pc, #204]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 8016786:	4313      	orrs	r3, r2
 8016788:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801678a:	4b33      	ldr	r3, [pc, #204]	; (8016858 <HAL_RCC_OscConfig+0x4dc>)
 801678c:	2201      	movs	r2, #1
 801678e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016790:	f7fc fd18 	bl	80131c4 <HAL_GetTick>
 8016794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016796:	e008      	b.n	80167aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016798:	f7fc fd14 	bl	80131c4 <HAL_GetTick>
 801679c:	4602      	mov	r2, r0
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	1ad3      	subs	r3, r2, r3
 80167a2:	2b02      	cmp	r3, #2
 80167a4:	d901      	bls.n	80167aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80167a6:	2303      	movs	r3, #3
 80167a8:	e04d      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80167aa:	4b2a      	ldr	r3, [pc, #168]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d0f0      	beq.n	8016798 <HAL_RCC_OscConfig+0x41c>
 80167b6:	e045      	b.n	8016844 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80167b8:	4b27      	ldr	r3, [pc, #156]	; (8016858 <HAL_RCC_OscConfig+0x4dc>)
 80167ba:	2200      	movs	r2, #0
 80167bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80167be:	f7fc fd01 	bl	80131c4 <HAL_GetTick>
 80167c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80167c4:	e008      	b.n	80167d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80167c6:	f7fc fcfd 	bl	80131c4 <HAL_GetTick>
 80167ca:	4602      	mov	r2, r0
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	1ad3      	subs	r3, r2, r3
 80167d0:	2b02      	cmp	r3, #2
 80167d2:	d901      	bls.n	80167d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80167d4:	2303      	movs	r3, #3
 80167d6:	e036      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80167d8:	4b1e      	ldr	r3, [pc, #120]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d1f0      	bne.n	80167c6 <HAL_RCC_OscConfig+0x44a>
 80167e4:	e02e      	b.n	8016844 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	699b      	ldr	r3, [r3, #24]
 80167ea:	2b01      	cmp	r3, #1
 80167ec:	d101      	bne.n	80167f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80167ee:	2301      	movs	r3, #1
 80167f0:	e029      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80167f2:	4b18      	ldr	r3, [pc, #96]	; (8016854 <HAL_RCC_OscConfig+0x4d8>)
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	69db      	ldr	r3, [r3, #28]
 8016802:	429a      	cmp	r2, r3
 8016804:	d11c      	bne.n	8016840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016810:	429a      	cmp	r2, r3
 8016812:	d115      	bne.n	8016840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8016814:	68fa      	ldr	r2, [r7, #12]
 8016816:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801681a:	4013      	ands	r3, r2
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8016820:	4293      	cmp	r3, r2
 8016822:	d10d      	bne.n	8016840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801682e:	429a      	cmp	r2, r3
 8016830:	d106      	bne.n	8016840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801683c:	429a      	cmp	r2, r3
 801683e:	d001      	beq.n	8016844 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8016840:	2301      	movs	r3, #1
 8016842:	e000      	b.n	8016846 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8016844:	2300      	movs	r3, #0
}
 8016846:	4618      	mov	r0, r3
 8016848:	3718      	adds	r7, #24
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	40007000 	.word	0x40007000
 8016854:	40023800 	.word	0x40023800
 8016858:	42470060 	.word	0x42470060

0801685c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b084      	sub	sp, #16
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d101      	bne.n	8016870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801686c:	2301      	movs	r3, #1
 801686e:	e0cc      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016870:	4b68      	ldr	r3, [pc, #416]	; (8016a14 <HAL_RCC_ClockConfig+0x1b8>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f003 030f 	and.w	r3, r3, #15
 8016878:	683a      	ldr	r2, [r7, #0]
 801687a:	429a      	cmp	r2, r3
 801687c:	d90c      	bls.n	8016898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801687e:	4b65      	ldr	r3, [pc, #404]	; (8016a14 <HAL_RCC_ClockConfig+0x1b8>)
 8016880:	683a      	ldr	r2, [r7, #0]
 8016882:	b2d2      	uxtb	r2, r2
 8016884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016886:	4b63      	ldr	r3, [pc, #396]	; (8016a14 <HAL_RCC_ClockConfig+0x1b8>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f003 030f 	and.w	r3, r3, #15
 801688e:	683a      	ldr	r2, [r7, #0]
 8016890:	429a      	cmp	r2, r3
 8016892:	d001      	beq.n	8016898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8016894:	2301      	movs	r3, #1
 8016896:	e0b8      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	f003 0302 	and.w	r3, r3, #2
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d020      	beq.n	80168e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f003 0304 	and.w	r3, r3, #4
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d005      	beq.n	80168bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80168b0:	4b59      	ldr	r3, [pc, #356]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168b2:	689b      	ldr	r3, [r3, #8]
 80168b4:	4a58      	ldr	r2, [pc, #352]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80168ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f003 0308 	and.w	r3, r3, #8
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d005      	beq.n	80168d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80168c8:	4b53      	ldr	r3, [pc, #332]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168ca:	689b      	ldr	r3, [r3, #8]
 80168cc:	4a52      	ldr	r2, [pc, #328]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80168d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80168d4:	4b50      	ldr	r3, [pc, #320]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168d6:	689b      	ldr	r3, [r3, #8]
 80168d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	689b      	ldr	r3, [r3, #8]
 80168e0:	494d      	ldr	r1, [pc, #308]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168e2:	4313      	orrs	r3, r2
 80168e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f003 0301 	and.w	r3, r3, #1
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d044      	beq.n	801697c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	2b01      	cmp	r3, #1
 80168f8:	d107      	bne.n	801690a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80168fa:	4b47      	ldr	r3, [pc, #284]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016902:	2b00      	cmp	r3, #0
 8016904:	d119      	bne.n	801693a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016906:	2301      	movs	r3, #1
 8016908:	e07f      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	2b02      	cmp	r3, #2
 8016910:	d003      	beq.n	801691a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016916:	2b03      	cmp	r3, #3
 8016918:	d107      	bne.n	801692a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801691a:	4b3f      	ldr	r3, [pc, #252]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016922:	2b00      	cmp	r3, #0
 8016924:	d109      	bne.n	801693a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016926:	2301      	movs	r3, #1
 8016928:	e06f      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801692a:	4b3b      	ldr	r3, [pc, #236]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f003 0302 	and.w	r3, r3, #2
 8016932:	2b00      	cmp	r3, #0
 8016934:	d101      	bne.n	801693a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016936:	2301      	movs	r3, #1
 8016938:	e067      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801693a:	4b37      	ldr	r3, [pc, #220]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 801693c:	689b      	ldr	r3, [r3, #8]
 801693e:	f023 0203 	bic.w	r2, r3, #3
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	4934      	ldr	r1, [pc, #208]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 8016948:	4313      	orrs	r3, r2
 801694a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801694c:	f7fc fc3a 	bl	80131c4 <HAL_GetTick>
 8016950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016952:	e00a      	b.n	801696a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016954:	f7fc fc36 	bl	80131c4 <HAL_GetTick>
 8016958:	4602      	mov	r2, r0
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	1ad3      	subs	r3, r2, r3
 801695e:	f241 3288 	movw	r2, #5000	; 0x1388
 8016962:	4293      	cmp	r3, r2
 8016964:	d901      	bls.n	801696a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8016966:	2303      	movs	r3, #3
 8016968:	e04f      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801696a:	4b2b      	ldr	r3, [pc, #172]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 801696c:	689b      	ldr	r3, [r3, #8]
 801696e:	f003 020c 	and.w	r2, r3, #12
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	009b      	lsls	r3, r3, #2
 8016978:	429a      	cmp	r2, r3
 801697a:	d1eb      	bne.n	8016954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801697c:	4b25      	ldr	r3, [pc, #148]	; (8016a14 <HAL_RCC_ClockConfig+0x1b8>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	f003 030f 	and.w	r3, r3, #15
 8016984:	683a      	ldr	r2, [r7, #0]
 8016986:	429a      	cmp	r2, r3
 8016988:	d20c      	bcs.n	80169a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801698a:	4b22      	ldr	r3, [pc, #136]	; (8016a14 <HAL_RCC_ClockConfig+0x1b8>)
 801698c:	683a      	ldr	r2, [r7, #0]
 801698e:	b2d2      	uxtb	r2, r2
 8016990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016992:	4b20      	ldr	r3, [pc, #128]	; (8016a14 <HAL_RCC_ClockConfig+0x1b8>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	f003 030f 	and.w	r3, r3, #15
 801699a:	683a      	ldr	r2, [r7, #0]
 801699c:	429a      	cmp	r2, r3
 801699e:	d001      	beq.n	80169a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80169a0:	2301      	movs	r3, #1
 80169a2:	e032      	b.n	8016a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f003 0304 	and.w	r3, r3, #4
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d008      	beq.n	80169c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80169b0:	4b19      	ldr	r3, [pc, #100]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80169b2:	689b      	ldr	r3, [r3, #8]
 80169b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	68db      	ldr	r3, [r3, #12]
 80169bc:	4916      	ldr	r1, [pc, #88]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80169be:	4313      	orrs	r3, r2
 80169c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	f003 0308 	and.w	r3, r3, #8
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d009      	beq.n	80169e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80169ce:	4b12      	ldr	r3, [pc, #72]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80169d0:	689b      	ldr	r3, [r3, #8]
 80169d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	691b      	ldr	r3, [r3, #16]
 80169da:	00db      	lsls	r3, r3, #3
 80169dc:	490e      	ldr	r1, [pc, #56]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80169de:	4313      	orrs	r3, r2
 80169e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80169e2:	f000 f821 	bl	8016a28 <HAL_RCC_GetSysClockFreq>
 80169e6:	4601      	mov	r1, r0
 80169e8:	4b0b      	ldr	r3, [pc, #44]	; (8016a18 <HAL_RCC_ClockConfig+0x1bc>)
 80169ea:	689b      	ldr	r3, [r3, #8]
 80169ec:	091b      	lsrs	r3, r3, #4
 80169ee:	f003 030f 	and.w	r3, r3, #15
 80169f2:	4a0a      	ldr	r2, [pc, #40]	; (8016a1c <HAL_RCC_ClockConfig+0x1c0>)
 80169f4:	5cd3      	ldrb	r3, [r2, r3]
 80169f6:	fa21 f303 	lsr.w	r3, r1, r3
 80169fa:	4a09      	ldr	r2, [pc, #36]	; (8016a20 <HAL_RCC_ClockConfig+0x1c4>)
 80169fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80169fe:	4b09      	ldr	r3, [pc, #36]	; (8016a24 <HAL_RCC_ClockConfig+0x1c8>)
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7f9 fffe 	bl	8010a04 <HAL_InitTick>

  return HAL_OK;
 8016a08:	2300      	movs	r3, #0
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3710      	adds	r7, #16
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	40023c00 	.word	0x40023c00
 8016a18:	40023800 	.word	0x40023800
 8016a1c:	0801aae0 	.word	0x0801aae0
 8016a20:	20000000 	.word	0x20000000
 8016a24:	20000008 	.word	0x20000008

08016a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a2a:	b085      	sub	sp, #20
 8016a2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	607b      	str	r3, [r7, #4]
 8016a32:	2300      	movs	r3, #0
 8016a34:	60fb      	str	r3, [r7, #12]
 8016a36:	2300      	movs	r3, #0
 8016a38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016a3e:	4b50      	ldr	r3, [pc, #320]	; (8016b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8016a40:	689b      	ldr	r3, [r3, #8]
 8016a42:	f003 030c 	and.w	r3, r3, #12
 8016a46:	2b04      	cmp	r3, #4
 8016a48:	d007      	beq.n	8016a5a <HAL_RCC_GetSysClockFreq+0x32>
 8016a4a:	2b08      	cmp	r3, #8
 8016a4c:	d008      	beq.n	8016a60 <HAL_RCC_GetSysClockFreq+0x38>
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f040 808d 	bne.w	8016b6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8016a54:	4b4b      	ldr	r3, [pc, #300]	; (8016b84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8016a56:	60bb      	str	r3, [r7, #8]
       break;
 8016a58:	e08c      	b.n	8016b74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8016a5a:	4b4b      	ldr	r3, [pc, #300]	; (8016b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8016a5c:	60bb      	str	r3, [r7, #8]
      break;
 8016a5e:	e089      	b.n	8016b74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016a60:	4b47      	ldr	r3, [pc, #284]	; (8016b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016a6a:	4b45      	ldr	r3, [pc, #276]	; (8016b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8016a6c:	685b      	ldr	r3, [r3, #4]
 8016a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d023      	beq.n	8016abe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016a76:	4b42      	ldr	r3, [pc, #264]	; (8016b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	099b      	lsrs	r3, r3, #6
 8016a7c:	f04f 0400 	mov.w	r4, #0
 8016a80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8016a84:	f04f 0200 	mov.w	r2, #0
 8016a88:	ea03 0501 	and.w	r5, r3, r1
 8016a8c:	ea04 0602 	and.w	r6, r4, r2
 8016a90:	4a3d      	ldr	r2, [pc, #244]	; (8016b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8016a92:	fb02 f106 	mul.w	r1, r2, r6
 8016a96:	2200      	movs	r2, #0
 8016a98:	fb02 f205 	mul.w	r2, r2, r5
 8016a9c:	440a      	add	r2, r1
 8016a9e:	493a      	ldr	r1, [pc, #232]	; (8016b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8016aa0:	fba5 0101 	umull	r0, r1, r5, r1
 8016aa4:	1853      	adds	r3, r2, r1
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f04f 0400 	mov.w	r4, #0
 8016aae:	461a      	mov	r2, r3
 8016ab0:	4623      	mov	r3, r4
 8016ab2:	f7f9 fb2d 	bl	8010110 <__aeabi_uldivmod>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	460c      	mov	r4, r1
 8016aba:	60fb      	str	r3, [r7, #12]
 8016abc:	e049      	b.n	8016b52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016abe:	4b30      	ldr	r3, [pc, #192]	; (8016b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	099b      	lsrs	r3, r3, #6
 8016ac4:	f04f 0400 	mov.w	r4, #0
 8016ac8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8016acc:	f04f 0200 	mov.w	r2, #0
 8016ad0:	ea03 0501 	and.w	r5, r3, r1
 8016ad4:	ea04 0602 	and.w	r6, r4, r2
 8016ad8:	4629      	mov	r1, r5
 8016ada:	4632      	mov	r2, r6
 8016adc:	f04f 0300 	mov.w	r3, #0
 8016ae0:	f04f 0400 	mov.w	r4, #0
 8016ae4:	0154      	lsls	r4, r2, #5
 8016ae6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8016aea:	014b      	lsls	r3, r1, #5
 8016aec:	4619      	mov	r1, r3
 8016aee:	4622      	mov	r2, r4
 8016af0:	1b49      	subs	r1, r1, r5
 8016af2:	eb62 0206 	sbc.w	r2, r2, r6
 8016af6:	f04f 0300 	mov.w	r3, #0
 8016afa:	f04f 0400 	mov.w	r4, #0
 8016afe:	0194      	lsls	r4, r2, #6
 8016b00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8016b04:	018b      	lsls	r3, r1, #6
 8016b06:	1a5b      	subs	r3, r3, r1
 8016b08:	eb64 0402 	sbc.w	r4, r4, r2
 8016b0c:	f04f 0100 	mov.w	r1, #0
 8016b10:	f04f 0200 	mov.w	r2, #0
 8016b14:	00e2      	lsls	r2, r4, #3
 8016b16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8016b1a:	00d9      	lsls	r1, r3, #3
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	4614      	mov	r4, r2
 8016b20:	195b      	adds	r3, r3, r5
 8016b22:	eb44 0406 	adc.w	r4, r4, r6
 8016b26:	f04f 0100 	mov.w	r1, #0
 8016b2a:	f04f 0200 	mov.w	r2, #0
 8016b2e:	02a2      	lsls	r2, r4, #10
 8016b30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8016b34:	0299      	lsls	r1, r3, #10
 8016b36:	460b      	mov	r3, r1
 8016b38:	4614      	mov	r4, r2
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	4621      	mov	r1, r4
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f04f 0400 	mov.w	r4, #0
 8016b44:	461a      	mov	r2, r3
 8016b46:	4623      	mov	r3, r4
 8016b48:	f7f9 fae2 	bl	8010110 <__aeabi_uldivmod>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	460c      	mov	r4, r1
 8016b50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016b52:	4b0b      	ldr	r3, [pc, #44]	; (8016b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	0c1b      	lsrs	r3, r3, #16
 8016b58:	f003 0303 	and.w	r3, r3, #3
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	005b      	lsls	r3, r3, #1
 8016b60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8016b62:	68fa      	ldr	r2, [r7, #12]
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b6a:	60bb      	str	r3, [r7, #8]
      break;
 8016b6c:	e002      	b.n	8016b74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016b6e:	4b05      	ldr	r3, [pc, #20]	; (8016b84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8016b70:	60bb      	str	r3, [r7, #8]
      break;
 8016b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016b74:	68bb      	ldr	r3, [r7, #8]
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3714      	adds	r7, #20
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b7e:	bf00      	nop
 8016b80:	40023800 	.word	0x40023800
 8016b84:	00f42400 	.word	0x00f42400
 8016b88:	017d7840 	.word	0x017d7840

08016b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016b8c:	b480      	push	{r7}
 8016b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016b90:	4b03      	ldr	r3, [pc, #12]	; (8016ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8016b92:	681b      	ldr	r3, [r3, #0]
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	46bd      	mov	sp, r7
 8016b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9c:	4770      	bx	lr
 8016b9e:	bf00      	nop
 8016ba0:	20000000 	.word	0x20000000

08016ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8016ba8:	f7ff fff0 	bl	8016b8c <HAL_RCC_GetHCLKFreq>
 8016bac:	4601      	mov	r1, r0
 8016bae:	4b05      	ldr	r3, [pc, #20]	; (8016bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8016bb0:	689b      	ldr	r3, [r3, #8]
 8016bb2:	0a9b      	lsrs	r3, r3, #10
 8016bb4:	f003 0307 	and.w	r3, r3, #7
 8016bb8:	4a03      	ldr	r2, [pc, #12]	; (8016bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8016bba:	5cd3      	ldrb	r3, [r2, r3]
 8016bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	40023800 	.word	0x40023800
 8016bc8:	0801aaf0 	.word	0x0801aaf0

08016bcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016bcc:	b480      	push	{r7}
 8016bce:	b083      	sub	sp, #12
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	220f      	movs	r2, #15
 8016bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016bdc:	4b12      	ldr	r3, [pc, #72]	; (8016c28 <HAL_RCC_GetClockConfig+0x5c>)
 8016bde:	689b      	ldr	r3, [r3, #8]
 8016be0:	f003 0203 	and.w	r2, r3, #3
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016be8:	4b0f      	ldr	r3, [pc, #60]	; (8016c28 <HAL_RCC_GetClockConfig+0x5c>)
 8016bea:	689b      	ldr	r3, [r3, #8]
 8016bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016bf4:	4b0c      	ldr	r3, [pc, #48]	; (8016c28 <HAL_RCC_GetClockConfig+0x5c>)
 8016bf6:	689b      	ldr	r3, [r3, #8]
 8016bf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016c00:	4b09      	ldr	r3, [pc, #36]	; (8016c28 <HAL_RCC_GetClockConfig+0x5c>)
 8016c02:	689b      	ldr	r3, [r3, #8]
 8016c04:	08db      	lsrs	r3, r3, #3
 8016c06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016c0e:	4b07      	ldr	r3, [pc, #28]	; (8016c2c <HAL_RCC_GetClockConfig+0x60>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	f003 020f 	and.w	r2, r3, #15
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	601a      	str	r2, [r3, #0]
}
 8016c1a:	bf00      	nop
 8016c1c:	370c      	adds	r7, #12
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop
 8016c28:	40023800 	.word	0x40023800
 8016c2c:	40023c00 	.word	0x40023c00

08016c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d101      	bne.n	8016c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	e01d      	b.n	8016c7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016c48:	b2db      	uxtb	r3, r3
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d106      	bne.n	8016c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	2200      	movs	r2, #0
 8016c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f7f9 feb2 	bl	80109c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2202      	movs	r2, #2
 8016c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681a      	ldr	r2, [r3, #0]
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	4619      	mov	r1, r3
 8016c6e:	4610      	mov	r0, r2
 8016c70:	f000 fa38 	bl	80170e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2201      	movs	r2, #1
 8016c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016c7c:	2300      	movs	r3, #0
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3708      	adds	r7, #8
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}

08016c86 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016c86:	b480      	push	{r7}
 8016c88:	b085      	sub	sp, #20
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2202      	movs	r2, #2
 8016c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	f003 0307 	and.w	r3, r3, #7
 8016ca0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	2b06      	cmp	r3, #6
 8016ca6:	d007      	beq.n	8016cb8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	f042 0201 	orr.w	r2, r2, #1
 8016cb6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2201      	movs	r2, #1
 8016cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8016cc0:	2300      	movs	r3, #0
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3714      	adds	r7, #20
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr

08016cce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016cce:	b480      	push	{r7}
 8016cd0:	b085      	sub	sp, #20
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	68da      	ldr	r2, [r3, #12]
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	f042 0201 	orr.w	r2, r2, #1
 8016ce4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	689b      	ldr	r3, [r3, #8]
 8016cec:	f003 0307 	and.w	r3, r3, #7
 8016cf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	2b06      	cmp	r3, #6
 8016cf6:	d007      	beq.n	8016d08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	681a      	ldr	r2, [r3, #0]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	f042 0201 	orr.w	r2, r2, #1
 8016d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016d08:	2300      	movs	r3, #0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3714      	adds	r7, #20
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d14:	4770      	bx	lr

08016d16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016d16:	b580      	push	{r7, lr}
 8016d18:	b082      	sub	sp, #8
 8016d1a:	af00      	add	r7, sp, #0
 8016d1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	691b      	ldr	r3, [r3, #16]
 8016d24:	f003 0302 	and.w	r3, r3, #2
 8016d28:	2b02      	cmp	r3, #2
 8016d2a:	d122      	bne.n	8016d72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	f003 0302 	and.w	r3, r3, #2
 8016d36:	2b02      	cmp	r3, #2
 8016d38:	d11b      	bne.n	8016d72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f06f 0202 	mvn.w	r2, #2
 8016d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2201      	movs	r2, #1
 8016d48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	699b      	ldr	r3, [r3, #24]
 8016d50:	f003 0303 	and.w	r3, r3, #3
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d003      	beq.n	8016d60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016d58:	6878      	ldr	r0, [r7, #4]
 8016d5a:	f000 f9a5 	bl	80170a8 <HAL_TIM_IC_CaptureCallback>
 8016d5e:	e005      	b.n	8016d6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f000 f997 	bl	8017094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 f9a8 	bl	80170bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	691b      	ldr	r3, [r3, #16]
 8016d78:	f003 0304 	and.w	r3, r3, #4
 8016d7c:	2b04      	cmp	r3, #4
 8016d7e:	d122      	bne.n	8016dc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	68db      	ldr	r3, [r3, #12]
 8016d86:	f003 0304 	and.w	r3, r3, #4
 8016d8a:	2b04      	cmp	r3, #4
 8016d8c:	d11b      	bne.n	8016dc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	f06f 0204 	mvn.w	r2, #4
 8016d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2202      	movs	r2, #2
 8016d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	699b      	ldr	r3, [r3, #24]
 8016da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d003      	beq.n	8016db4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016dac:	6878      	ldr	r0, [r7, #4]
 8016dae:	f000 f97b 	bl	80170a8 <HAL_TIM_IC_CaptureCallback>
 8016db2:	e005      	b.n	8016dc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f000 f96d 	bl	8017094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f000 f97e 	bl	80170bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	691b      	ldr	r3, [r3, #16]
 8016dcc:	f003 0308 	and.w	r3, r3, #8
 8016dd0:	2b08      	cmp	r3, #8
 8016dd2:	d122      	bne.n	8016e1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	f003 0308 	and.w	r3, r3, #8
 8016dde:	2b08      	cmp	r3, #8
 8016de0:	d11b      	bne.n	8016e1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f06f 0208 	mvn.w	r2, #8
 8016dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2204      	movs	r2, #4
 8016df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	69db      	ldr	r3, [r3, #28]
 8016df8:	f003 0303 	and.w	r3, r3, #3
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d003      	beq.n	8016e08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	f000 f951 	bl	80170a8 <HAL_TIM_IC_CaptureCallback>
 8016e06:	e005      	b.n	8016e14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f000 f943 	bl	8017094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f000 f954 	bl	80170bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2200      	movs	r2, #0
 8016e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	691b      	ldr	r3, [r3, #16]
 8016e20:	f003 0310 	and.w	r3, r3, #16
 8016e24:	2b10      	cmp	r3, #16
 8016e26:	d122      	bne.n	8016e6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	68db      	ldr	r3, [r3, #12]
 8016e2e:	f003 0310 	and.w	r3, r3, #16
 8016e32:	2b10      	cmp	r3, #16
 8016e34:	d11b      	bne.n	8016e6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f06f 0210 	mvn.w	r2, #16
 8016e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2208      	movs	r2, #8
 8016e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	69db      	ldr	r3, [r3, #28]
 8016e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d003      	beq.n	8016e5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 f927 	bl	80170a8 <HAL_TIM_IC_CaptureCallback>
 8016e5a:	e005      	b.n	8016e68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f000 f919 	bl	8017094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 f92a 	bl	80170bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	691b      	ldr	r3, [r3, #16]
 8016e74:	f003 0301 	and.w	r3, r3, #1
 8016e78:	2b01      	cmp	r3, #1
 8016e7a:	d10e      	bne.n	8016e9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	68db      	ldr	r3, [r3, #12]
 8016e82:	f003 0301 	and.w	r3, r3, #1
 8016e86:	2b01      	cmp	r3, #1
 8016e88:	d107      	bne.n	8016e9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	f06f 0201 	mvn.w	r2, #1
 8016e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f7f9 fc95 	bl	80107c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	691b      	ldr	r3, [r3, #16]
 8016ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ea4:	2b80      	cmp	r3, #128	; 0x80
 8016ea6:	d10e      	bne.n	8016ec6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	68db      	ldr	r3, [r3, #12]
 8016eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016eb2:	2b80      	cmp	r3, #128	; 0x80
 8016eb4:	d107      	bne.n	8016ec6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f000 faa1 	bl	8017408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	691b      	ldr	r3, [r3, #16]
 8016ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ed0:	2b40      	cmp	r3, #64	; 0x40
 8016ed2:	d10e      	bne.n	8016ef2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	68db      	ldr	r3, [r3, #12]
 8016eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ede:	2b40      	cmp	r3, #64	; 0x40
 8016ee0:	d107      	bne.n	8016ef2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f000 f8ef 	bl	80170d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	691b      	ldr	r3, [r3, #16]
 8016ef8:	f003 0320 	and.w	r3, r3, #32
 8016efc:	2b20      	cmp	r3, #32
 8016efe:	d10e      	bne.n	8016f1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	68db      	ldr	r3, [r3, #12]
 8016f06:	f003 0320 	and.w	r3, r3, #32
 8016f0a:	2b20      	cmp	r3, #32
 8016f0c:	d107      	bne.n	8016f1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	f06f 0220 	mvn.w	r2, #32
 8016f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f000 fa6b 	bl	80173f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016f1e:	bf00      	nop
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}

08016f26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016f26:	b580      	push	{r7, lr}
 8016f28:	b084      	sub	sp, #16
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	6078      	str	r0, [r7, #4]
 8016f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d101      	bne.n	8016f3e <HAL_TIM_ConfigClockSource+0x18>
 8016f3a:	2302      	movs	r3, #2
 8016f3c:	e0a6      	b.n	801708c <HAL_TIM_ConfigClockSource+0x166>
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2201      	movs	r2, #1
 8016f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	2202      	movs	r2, #2
 8016f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	689b      	ldr	r3, [r3, #8]
 8016f54:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8016f5c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016f64:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	68fa      	ldr	r2, [r7, #12]
 8016f6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2b40      	cmp	r3, #64	; 0x40
 8016f74:	d067      	beq.n	8017046 <HAL_TIM_ConfigClockSource+0x120>
 8016f76:	2b40      	cmp	r3, #64	; 0x40
 8016f78:	d80b      	bhi.n	8016f92 <HAL_TIM_ConfigClockSource+0x6c>
 8016f7a:	2b10      	cmp	r3, #16
 8016f7c:	d073      	beq.n	8017066 <HAL_TIM_ConfigClockSource+0x140>
 8016f7e:	2b10      	cmp	r3, #16
 8016f80:	d802      	bhi.n	8016f88 <HAL_TIM_ConfigClockSource+0x62>
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d06f      	beq.n	8017066 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8016f86:	e078      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8016f88:	2b20      	cmp	r3, #32
 8016f8a:	d06c      	beq.n	8017066 <HAL_TIM_ConfigClockSource+0x140>
 8016f8c:	2b30      	cmp	r3, #48	; 0x30
 8016f8e:	d06a      	beq.n	8017066 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8016f90:	e073      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8016f92:	2b70      	cmp	r3, #112	; 0x70
 8016f94:	d00d      	beq.n	8016fb2 <HAL_TIM_ConfigClockSource+0x8c>
 8016f96:	2b70      	cmp	r3, #112	; 0x70
 8016f98:	d804      	bhi.n	8016fa4 <HAL_TIM_ConfigClockSource+0x7e>
 8016f9a:	2b50      	cmp	r3, #80	; 0x50
 8016f9c:	d033      	beq.n	8017006 <HAL_TIM_ConfigClockSource+0xe0>
 8016f9e:	2b60      	cmp	r3, #96	; 0x60
 8016fa0:	d041      	beq.n	8017026 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8016fa2:	e06a      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8016fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016fa8:	d066      	beq.n	8017078 <HAL_TIM_ConfigClockSource+0x152>
 8016faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016fae:	d017      	beq.n	8016fe0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8016fb0:	e063      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6818      	ldr	r0, [r3, #0]
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	6899      	ldr	r1, [r3, #8]
 8016fba:	683b      	ldr	r3, [r7, #0]
 8016fbc:	685a      	ldr	r2, [r3, #4]
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	68db      	ldr	r3, [r3, #12]
 8016fc2:	f000 f989 	bl	80172d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	689b      	ldr	r3, [r3, #8]
 8016fcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8016fd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	68fa      	ldr	r2, [r7, #12]
 8016fdc:	609a      	str	r2, [r3, #8]
      break;
 8016fde:	e04c      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6818      	ldr	r0, [r3, #0]
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	6899      	ldr	r1, [r3, #8]
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	685a      	ldr	r2, [r3, #4]
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	68db      	ldr	r3, [r3, #12]
 8016ff0:	f000 f972 	bl	80172d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	689a      	ldr	r2, [r3, #8]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017002:	609a      	str	r2, [r3, #8]
      break;
 8017004:	e039      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6818      	ldr	r0, [r3, #0]
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	6859      	ldr	r1, [r3, #4]
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	68db      	ldr	r3, [r3, #12]
 8017012:	461a      	mov	r2, r3
 8017014:	f000 f8e6 	bl	80171e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	2150      	movs	r1, #80	; 0x50
 801701e:	4618      	mov	r0, r3
 8017020:	f000 f93f 	bl	80172a2 <TIM_ITRx_SetConfig>
      break;
 8017024:	e029      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6818      	ldr	r0, [r3, #0]
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	6859      	ldr	r1, [r3, #4]
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	68db      	ldr	r3, [r3, #12]
 8017032:	461a      	mov	r2, r3
 8017034:	f000 f905 	bl	8017242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	2160      	movs	r1, #96	; 0x60
 801703e:	4618      	mov	r0, r3
 8017040:	f000 f92f 	bl	80172a2 <TIM_ITRx_SetConfig>
      break;
 8017044:	e019      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6818      	ldr	r0, [r3, #0]
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	6859      	ldr	r1, [r3, #4]
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	68db      	ldr	r3, [r3, #12]
 8017052:	461a      	mov	r2, r3
 8017054:	f000 f8c6 	bl	80171e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2140      	movs	r1, #64	; 0x40
 801705e:	4618      	mov	r0, r3
 8017060:	f000 f91f 	bl	80172a2 <TIM_ITRx_SetConfig>
      break;
 8017064:	e009      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	4619      	mov	r1, r3
 8017070:	4610      	mov	r0, r2
 8017072:	f000 f916 	bl	80172a2 <TIM_ITRx_SetConfig>
      break;
 8017076:	e000      	b.n	801707a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8017078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2201      	movs	r2, #1
 801707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	2200      	movs	r2, #0
 8017086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801708a:	2300      	movs	r3, #0
}
 801708c:	4618      	mov	r0, r3
 801708e:	3710      	adds	r7, #16
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}

08017094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017094:	b480      	push	{r7}
 8017096:	b083      	sub	sp, #12
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801709c:	bf00      	nop
 801709e:	370c      	adds	r7, #12
 80170a0:	46bd      	mov	sp, r7
 80170a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a6:	4770      	bx	lr

080170a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170a8:	b480      	push	{r7}
 80170aa:	b083      	sub	sp, #12
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80170b0:	bf00      	nop
 80170b2:	370c      	adds	r7, #12
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr

080170bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80170bc:	b480      	push	{r7}
 80170be:	b083      	sub	sp, #12
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80170c4:	bf00      	nop
 80170c6:	370c      	adds	r7, #12
 80170c8:	46bd      	mov	sp, r7
 80170ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ce:	4770      	bx	lr

080170d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b083      	sub	sp, #12
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80170d8:	bf00      	nop
 80170da:	370c      	adds	r7, #12
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b085      	sub	sp, #20
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
 80170ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	4a34      	ldr	r2, [pc, #208]	; (80171c8 <TIM_Base_SetConfig+0xe4>)
 80170f8:	4293      	cmp	r3, r2
 80170fa:	d00f      	beq.n	801711c <TIM_Base_SetConfig+0x38>
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017102:	d00b      	beq.n	801711c <TIM_Base_SetConfig+0x38>
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	4a31      	ldr	r2, [pc, #196]	; (80171cc <TIM_Base_SetConfig+0xe8>)
 8017108:	4293      	cmp	r3, r2
 801710a:	d007      	beq.n	801711c <TIM_Base_SetConfig+0x38>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	4a30      	ldr	r2, [pc, #192]	; (80171d0 <TIM_Base_SetConfig+0xec>)
 8017110:	4293      	cmp	r3, r2
 8017112:	d003      	beq.n	801711c <TIM_Base_SetConfig+0x38>
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	4a2f      	ldr	r2, [pc, #188]	; (80171d4 <TIM_Base_SetConfig+0xf0>)
 8017118:	4293      	cmp	r3, r2
 801711a:	d108      	bne.n	801712e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	68fa      	ldr	r2, [r7, #12]
 801712a:	4313      	orrs	r3, r2
 801712c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	4a25      	ldr	r2, [pc, #148]	; (80171c8 <TIM_Base_SetConfig+0xe4>)
 8017132:	4293      	cmp	r3, r2
 8017134:	d01b      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801713c:	d017      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	4a22      	ldr	r2, [pc, #136]	; (80171cc <TIM_Base_SetConfig+0xe8>)
 8017142:	4293      	cmp	r3, r2
 8017144:	d013      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	4a21      	ldr	r2, [pc, #132]	; (80171d0 <TIM_Base_SetConfig+0xec>)
 801714a:	4293      	cmp	r3, r2
 801714c:	d00f      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	4a20      	ldr	r2, [pc, #128]	; (80171d4 <TIM_Base_SetConfig+0xf0>)
 8017152:	4293      	cmp	r3, r2
 8017154:	d00b      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	4a1f      	ldr	r2, [pc, #124]	; (80171d8 <TIM_Base_SetConfig+0xf4>)
 801715a:	4293      	cmp	r3, r2
 801715c:	d007      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	4a1e      	ldr	r2, [pc, #120]	; (80171dc <TIM_Base_SetConfig+0xf8>)
 8017162:	4293      	cmp	r3, r2
 8017164:	d003      	beq.n	801716e <TIM_Base_SetConfig+0x8a>
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	4a1d      	ldr	r2, [pc, #116]	; (80171e0 <TIM_Base_SetConfig+0xfc>)
 801716a:	4293      	cmp	r3, r2
 801716c:	d108      	bne.n	8017180 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	68db      	ldr	r3, [r3, #12]
 801717a:	68fa      	ldr	r2, [r7, #12]
 801717c:	4313      	orrs	r3, r2
 801717e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	695b      	ldr	r3, [r3, #20]
 801718a:	4313      	orrs	r3, r2
 801718c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	68fa      	ldr	r2, [r7, #12]
 8017192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	689a      	ldr	r2, [r3, #8]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	681a      	ldr	r2, [r3, #0]
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	4a08      	ldr	r2, [pc, #32]	; (80171c8 <TIM_Base_SetConfig+0xe4>)
 80171a8:	4293      	cmp	r3, r2
 80171aa:	d103      	bne.n	80171b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	691a      	ldr	r2, [r3, #16]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2201      	movs	r2, #1
 80171b8:	615a      	str	r2, [r3, #20]
}
 80171ba:	bf00      	nop
 80171bc:	3714      	adds	r7, #20
 80171be:	46bd      	mov	sp, r7
 80171c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c4:	4770      	bx	lr
 80171c6:	bf00      	nop
 80171c8:	40010000 	.word	0x40010000
 80171cc:	40000400 	.word	0x40000400
 80171d0:	40000800 	.word	0x40000800
 80171d4:	40000c00 	.word	0x40000c00
 80171d8:	40014000 	.word	0x40014000
 80171dc:	40014400 	.word	0x40014400
 80171e0:	40014800 	.word	0x40014800

080171e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80171e4:	b480      	push	{r7}
 80171e6:	b087      	sub	sp, #28
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	6a1b      	ldr	r3, [r3, #32]
 80171f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	6a1b      	ldr	r3, [r3, #32]
 80171fa:	f023 0201 	bic.w	r2, r3, #1
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	699b      	ldr	r3, [r3, #24]
 8017206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801720e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	011b      	lsls	r3, r3, #4
 8017214:	693a      	ldr	r2, [r7, #16]
 8017216:	4313      	orrs	r3, r2
 8017218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	f023 030a 	bic.w	r3, r3, #10
 8017220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017222:	697a      	ldr	r2, [r7, #20]
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	4313      	orrs	r3, r2
 8017228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	693a      	ldr	r2, [r7, #16]
 801722e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	697a      	ldr	r2, [r7, #20]
 8017234:	621a      	str	r2, [r3, #32]
}
 8017236:	bf00      	nop
 8017238:	371c      	adds	r7, #28
 801723a:	46bd      	mov	sp, r7
 801723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017240:	4770      	bx	lr

08017242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017242:	b480      	push	{r7}
 8017244:	b087      	sub	sp, #28
 8017246:	af00      	add	r7, sp, #0
 8017248:	60f8      	str	r0, [r7, #12]
 801724a:	60b9      	str	r1, [r7, #8]
 801724c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	6a1b      	ldr	r3, [r3, #32]
 8017252:	f023 0210 	bic.w	r2, r3, #16
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	699b      	ldr	r3, [r3, #24]
 801725e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	6a1b      	ldr	r3, [r3, #32]
 8017264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801726c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	031b      	lsls	r3, r3, #12
 8017272:	697a      	ldr	r2, [r7, #20]
 8017274:	4313      	orrs	r3, r2
 8017276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017278:	693b      	ldr	r3, [r7, #16]
 801727a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801727e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	011b      	lsls	r3, r3, #4
 8017284:	693a      	ldr	r2, [r7, #16]
 8017286:	4313      	orrs	r3, r2
 8017288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	697a      	ldr	r2, [r7, #20]
 801728e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	693a      	ldr	r2, [r7, #16]
 8017294:	621a      	str	r2, [r3, #32]
}
 8017296:	bf00      	nop
 8017298:	371c      	adds	r7, #28
 801729a:	46bd      	mov	sp, r7
 801729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a0:	4770      	bx	lr

080172a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80172a2:	b480      	push	{r7}
 80172a4:	b085      	sub	sp, #20
 80172a6:	af00      	add	r7, sp, #0
 80172a8:	6078      	str	r0, [r7, #4]
 80172aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	689b      	ldr	r3, [r3, #8]
 80172b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80172b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80172ba:	683a      	ldr	r2, [r7, #0]
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	4313      	orrs	r3, r2
 80172c0:	f043 0307 	orr.w	r3, r3, #7
 80172c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	68fa      	ldr	r2, [r7, #12]
 80172ca:	609a      	str	r2, [r3, #8]
}
 80172cc:	bf00      	nop
 80172ce:	3714      	adds	r7, #20
 80172d0:	46bd      	mov	sp, r7
 80172d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d6:	4770      	bx	lr

080172d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80172d8:	b480      	push	{r7}
 80172da:	b087      	sub	sp, #28
 80172dc:	af00      	add	r7, sp, #0
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	607a      	str	r2, [r7, #4]
 80172e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	689b      	ldr	r3, [r3, #8]
 80172ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80172f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	021a      	lsls	r2, r3, #8
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	431a      	orrs	r2, r3
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	4313      	orrs	r3, r2
 8017300:	697a      	ldr	r2, [r7, #20]
 8017302:	4313      	orrs	r3, r2
 8017304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	697a      	ldr	r2, [r7, #20]
 801730a:	609a      	str	r2, [r3, #8]
}
 801730c:	bf00      	nop
 801730e:	371c      	adds	r7, #28
 8017310:	46bd      	mov	sp, r7
 8017312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017316:	4770      	bx	lr

08017318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017318:	b480      	push	{r7}
 801731a:	b085      	sub	sp, #20
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017328:	2b01      	cmp	r3, #1
 801732a:	d101      	bne.n	8017330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801732c:	2302      	movs	r3, #2
 801732e:	e050      	b.n	80173d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2201      	movs	r2, #1
 8017334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2202      	movs	r2, #2
 801733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	689b      	ldr	r3, [r3, #8]
 801734e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	68fa      	ldr	r2, [r7, #12]
 801735e:	4313      	orrs	r3, r2
 8017360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	68fa      	ldr	r2, [r7, #12]
 8017368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	4a1c      	ldr	r2, [pc, #112]	; (80173e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8017370:	4293      	cmp	r3, r2
 8017372:	d018      	beq.n	80173a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801737c:	d013      	beq.n	80173a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	4a18      	ldr	r2, [pc, #96]	; (80173e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d00e      	beq.n	80173a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	4a16      	ldr	r2, [pc, #88]	; (80173e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801738e:	4293      	cmp	r3, r2
 8017390:	d009      	beq.n	80173a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	4a15      	ldr	r2, [pc, #84]	; (80173ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8017398:	4293      	cmp	r3, r2
 801739a:	d004      	beq.n	80173a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	4a13      	ldr	r2, [pc, #76]	; (80173f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80173a2:	4293      	cmp	r3, r2
 80173a4:	d10c      	bne.n	80173c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80173ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80173ae:	683b      	ldr	r3, [r7, #0]
 80173b0:	685b      	ldr	r3, [r3, #4]
 80173b2:	68ba      	ldr	r2, [r7, #8]
 80173b4:	4313      	orrs	r3, r2
 80173b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	68ba      	ldr	r2, [r7, #8]
 80173be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2201      	movs	r2, #1
 80173c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2200      	movs	r2, #0
 80173cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80173d0:	2300      	movs	r3, #0
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3714      	adds	r7, #20
 80173d6:	46bd      	mov	sp, r7
 80173d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop
 80173e0:	40010000 	.word	0x40010000
 80173e4:	40000400 	.word	0x40000400
 80173e8:	40000800 	.word	0x40000800
 80173ec:	40000c00 	.word	0x40000c00
 80173f0:	40014000 	.word	0x40014000

080173f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80173f4:	b480      	push	{r7}
 80173f6:	b083      	sub	sp, #12
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80173fc:	bf00      	nop
 80173fe:	370c      	adds	r7, #12
 8017400:	46bd      	mov	sp, r7
 8017402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017406:	4770      	bx	lr

08017408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017408:	b480      	push	{r7}
 801740a:	b083      	sub	sp, #12
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017410:	bf00      	nop
 8017412:	370c      	adds	r7, #12
 8017414:	46bd      	mov	sp, r7
 8017416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741a:	4770      	bx	lr

0801741c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801741c:	b480      	push	{r7}
 801741e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8017420:	bf00      	nop
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
	...

0801742c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801742c:	b480      	push	{r7}
 801742e:	b085      	sub	sp, #20
 8017430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017432:	f3ef 8305 	mrs	r3, IPSR
 8017436:	60bb      	str	r3, [r7, #8]
  return(result);
 8017438:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801743a:	2b00      	cmp	r3, #0
 801743c:	d10f      	bne.n	801745e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801743e:	f3ef 8310 	mrs	r3, PRIMASK
 8017442:	607b      	str	r3, [r7, #4]
  return(result);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d105      	bne.n	8017456 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801744a:	f3ef 8311 	mrs	r3, BASEPRI
 801744e:	603b      	str	r3, [r7, #0]
  return(result);
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d007      	beq.n	8017466 <osKernelInitialize+0x3a>
 8017456:	4b0e      	ldr	r3, [pc, #56]	; (8017490 <osKernelInitialize+0x64>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	2b02      	cmp	r3, #2
 801745c:	d103      	bne.n	8017466 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801745e:	f06f 0305 	mvn.w	r3, #5
 8017462:	60fb      	str	r3, [r7, #12]
 8017464:	e00c      	b.n	8017480 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017466:	4b0a      	ldr	r3, [pc, #40]	; (8017490 <osKernelInitialize+0x64>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d105      	bne.n	801747a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801746e:	4b08      	ldr	r3, [pc, #32]	; (8017490 <osKernelInitialize+0x64>)
 8017470:	2201      	movs	r2, #1
 8017472:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017474:	2300      	movs	r3, #0
 8017476:	60fb      	str	r3, [r7, #12]
 8017478:	e002      	b.n	8017480 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801747a:	f04f 33ff 	mov.w	r3, #4294967295
 801747e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8017480:	68fb      	ldr	r3, [r7, #12]
}
 8017482:	4618      	mov	r0, r3
 8017484:	3714      	adds	r7, #20
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop
 8017490:	200060e8 	.word	0x200060e8

08017494 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017494:	b580      	push	{r7, lr}
 8017496:	b084      	sub	sp, #16
 8017498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801749a:	f3ef 8305 	mrs	r3, IPSR
 801749e:	60bb      	str	r3, [r7, #8]
  return(result);
 80174a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d10f      	bne.n	80174c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174a6:	f3ef 8310 	mrs	r3, PRIMASK
 80174aa:	607b      	str	r3, [r7, #4]
  return(result);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d105      	bne.n	80174be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80174b2:	f3ef 8311 	mrs	r3, BASEPRI
 80174b6:	603b      	str	r3, [r7, #0]
  return(result);
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d007      	beq.n	80174ce <osKernelStart+0x3a>
 80174be:	4b0f      	ldr	r3, [pc, #60]	; (80174fc <osKernelStart+0x68>)
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2b02      	cmp	r3, #2
 80174c4:	d103      	bne.n	80174ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80174c6:	f06f 0305 	mvn.w	r3, #5
 80174ca:	60fb      	str	r3, [r7, #12]
 80174cc:	e010      	b.n	80174f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80174ce:	4b0b      	ldr	r3, [pc, #44]	; (80174fc <osKernelStart+0x68>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2b01      	cmp	r3, #1
 80174d4:	d109      	bne.n	80174ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80174d6:	f7ff ffa1 	bl	801741c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80174da:	4b08      	ldr	r3, [pc, #32]	; (80174fc <osKernelStart+0x68>)
 80174dc:	2202      	movs	r2, #2
 80174de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80174e0:	f001 f8bc 	bl	801865c <vTaskStartScheduler>
      stat = osOK;
 80174e4:	2300      	movs	r3, #0
 80174e6:	60fb      	str	r3, [r7, #12]
 80174e8:	e002      	b.n	80174f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80174ea:	f04f 33ff 	mov.w	r3, #4294967295
 80174ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80174f0:	68fb      	ldr	r3, [r7, #12]
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3710      	adds	r7, #16
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	bf00      	nop
 80174fc:	200060e8 	.word	0x200060e8

08017500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017500:	b580      	push	{r7, lr}
 8017502:	b090      	sub	sp, #64	; 0x40
 8017504:	af04      	add	r7, sp, #16
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801750c:	2300      	movs	r3, #0
 801750e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017510:	f3ef 8305 	mrs	r3, IPSR
 8017514:	61fb      	str	r3, [r7, #28]
  return(result);
 8017516:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8017518:	2b00      	cmp	r3, #0
 801751a:	f040 808f 	bne.w	801763c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801751e:	f3ef 8310 	mrs	r3, PRIMASK
 8017522:	61bb      	str	r3, [r7, #24]
  return(result);
 8017524:	69bb      	ldr	r3, [r7, #24]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d105      	bne.n	8017536 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801752a:	f3ef 8311 	mrs	r3, BASEPRI
 801752e:	617b      	str	r3, [r7, #20]
  return(result);
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d003      	beq.n	801753e <osThreadNew+0x3e>
 8017536:	4b44      	ldr	r3, [pc, #272]	; (8017648 <osThreadNew+0x148>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2b02      	cmp	r3, #2
 801753c:	d07e      	beq.n	801763c <osThreadNew+0x13c>
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d07b      	beq.n	801763c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8017544:	2380      	movs	r3, #128	; 0x80
 8017546:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8017548:	2318      	movs	r3, #24
 801754a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801754c:	2300      	movs	r3, #0
 801754e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8017550:	f04f 33ff 	mov.w	r3, #4294967295
 8017554:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d045      	beq.n	80175e8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d002      	beq.n	801756a <osThreadNew+0x6a>
        name = attr->name;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	699b      	ldr	r3, [r3, #24]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d002      	beq.n	8017578 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	699b      	ldr	r3, [r3, #24]
 8017576:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801757a:	2b00      	cmp	r3, #0
 801757c:	d008      	beq.n	8017590 <osThreadNew+0x90>
 801757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017580:	2b38      	cmp	r3, #56	; 0x38
 8017582:	d805      	bhi.n	8017590 <osThreadNew+0x90>
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	685b      	ldr	r3, [r3, #4]
 8017588:	f003 0301 	and.w	r3, r3, #1
 801758c:	2b00      	cmp	r3, #0
 801758e:	d001      	beq.n	8017594 <osThreadNew+0x94>
        return (NULL);
 8017590:	2300      	movs	r3, #0
 8017592:	e054      	b.n	801763e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	695b      	ldr	r3, [r3, #20]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d003      	beq.n	80175a4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	695b      	ldr	r3, [r3, #20]
 80175a0:	089b      	lsrs	r3, r3, #2
 80175a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	689b      	ldr	r3, [r3, #8]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d00e      	beq.n	80175ca <osThreadNew+0xca>
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	68db      	ldr	r3, [r3, #12]
 80175b0:	2b5b      	cmp	r3, #91	; 0x5b
 80175b2:	d90a      	bls.n	80175ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d006      	beq.n	80175ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	695b      	ldr	r3, [r3, #20]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d002      	beq.n	80175ca <osThreadNew+0xca>
        mem = 1;
 80175c4:	2301      	movs	r3, #1
 80175c6:	623b      	str	r3, [r7, #32]
 80175c8:	e010      	b.n	80175ec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	689b      	ldr	r3, [r3, #8]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d10c      	bne.n	80175ec <osThreadNew+0xec>
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	68db      	ldr	r3, [r3, #12]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d108      	bne.n	80175ec <osThreadNew+0xec>
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	691b      	ldr	r3, [r3, #16]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d104      	bne.n	80175ec <osThreadNew+0xec>
          mem = 0;
 80175e2:	2300      	movs	r3, #0
 80175e4:	623b      	str	r3, [r7, #32]
 80175e6:	e001      	b.n	80175ec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80175e8:	2300      	movs	r3, #0
 80175ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80175ec:	6a3b      	ldr	r3, [r7, #32]
 80175ee:	2b01      	cmp	r3, #1
 80175f0:	d110      	bne.n	8017614 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80175fa:	9202      	str	r2, [sp, #8]
 80175fc:	9301      	str	r3, [sp, #4]
 80175fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017600:	9300      	str	r3, [sp, #0]
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017608:	68f8      	ldr	r0, [r7, #12]
 801760a:	f000 fddb 	bl	80181c4 <xTaskCreateStatic>
 801760e:	4603      	mov	r3, r0
 8017610:	613b      	str	r3, [r7, #16]
 8017612:	e013      	b.n	801763c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d110      	bne.n	801763c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801761c:	b29a      	uxth	r2, r3
 801761e:	f107 0310 	add.w	r3, r7, #16
 8017622:	9301      	str	r3, [sp, #4]
 8017624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017626:	9300      	str	r3, [sp, #0]
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801762c:	68f8      	ldr	r0, [r7, #12]
 801762e:	f000 fe23 	bl	8018278 <xTaskCreate>
 8017632:	4603      	mov	r3, r0
 8017634:	2b01      	cmp	r3, #1
 8017636:	d001      	beq.n	801763c <osThreadNew+0x13c>
          hTask = NULL;
 8017638:	2300      	movs	r3, #0
 801763a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801763c:	693b      	ldr	r3, [r7, #16]
}
 801763e:	4618      	mov	r0, r3
 8017640:	3730      	adds	r7, #48	; 0x30
 8017642:	46bd      	mov	sp, r7
 8017644:	bd80      	pop	{r7, pc}
 8017646:	bf00      	nop
 8017648:	200060e8 	.word	0x200060e8

0801764c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	60b9      	str	r1, [r7, #8]
 8017656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	4a07      	ldr	r2, [pc, #28]	; (8017678 <vApplicationGetIdleTaskMemory+0x2c>)
 801765c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	4a06      	ldr	r2, [pc, #24]	; (801767c <vApplicationGetIdleTaskMemory+0x30>)
 8017662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2280      	movs	r2, #128	; 0x80
 8017668:	601a      	str	r2, [r3, #0]
}
 801766a:	bf00      	nop
 801766c:	3714      	adds	r7, #20
 801766e:	46bd      	mov	sp, r7
 8017670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	200060ec 	.word	0x200060ec
 801767c:	20006148 	.word	0x20006148

08017680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017680:	b480      	push	{r7}
 8017682:	b085      	sub	sp, #20
 8017684:	af00      	add	r7, sp, #0
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	4a07      	ldr	r2, [pc, #28]	; (80176ac <vApplicationGetTimerTaskMemory+0x2c>)
 8017690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017692:	68bb      	ldr	r3, [r7, #8]
 8017694:	4a06      	ldr	r2, [pc, #24]	; (80176b0 <vApplicationGetTimerTaskMemory+0x30>)
 8017696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801769e:	601a      	str	r2, [r3, #0]
}
 80176a0:	bf00      	nop
 80176a2:	3714      	adds	r7, #20
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr
 80176ac:	20006348 	.word	0x20006348
 80176b0:	200063a4 	.word	0x200063a4

080176b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80176b4:	b480      	push	{r7}
 80176b6:	b083      	sub	sp, #12
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	f103 0208 	add.w	r2, r3, #8
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	f04f 32ff 	mov.w	r2, #4294967295
 80176cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f103 0208 	add.w	r2, r3, #8
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f103 0208 	add.w	r2, r3, #8
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2200      	movs	r2, #0
 80176e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80176e8:	bf00      	nop
 80176ea:	370c      	adds	r7, #12
 80176ec:	46bd      	mov	sp, r7
 80176ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f2:	4770      	bx	lr

080176f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80176f4:	b480      	push	{r7}
 80176f6:	b083      	sub	sp, #12
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2200      	movs	r2, #0
 8017700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017702:	bf00      	nop
 8017704:	370c      	adds	r7, #12
 8017706:	46bd      	mov	sp, r7
 8017708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770c:	4770      	bx	lr

0801770e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801770e:	b480      	push	{r7}
 8017710:	b085      	sub	sp, #20
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
 8017716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	685b      	ldr	r3, [r3, #4]
 801771c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	68fa      	ldr	r2, [r7, #12]
 8017722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	689a      	ldr	r2, [r3, #8]
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	689b      	ldr	r3, [r3, #8]
 8017730:	683a      	ldr	r2, [r7, #0]
 8017732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	683a      	ldr	r2, [r7, #0]
 8017738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801773a:	683b      	ldr	r3, [r7, #0]
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	1c5a      	adds	r2, r3, #1
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	601a      	str	r2, [r3, #0]
}
 801774a:	bf00      	nop
 801774c:	3714      	adds	r7, #20
 801774e:	46bd      	mov	sp, r7
 8017750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017754:	4770      	bx	lr

08017756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017756:	b480      	push	{r7}
 8017758:	b085      	sub	sp, #20
 801775a:	af00      	add	r7, sp, #0
 801775c:	6078      	str	r0, [r7, #4]
 801775e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801776c:	d103      	bne.n	8017776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	691b      	ldr	r3, [r3, #16]
 8017772:	60fb      	str	r3, [r7, #12]
 8017774:	e00c      	b.n	8017790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	3308      	adds	r3, #8
 801777a:	60fb      	str	r3, [r7, #12]
 801777c:	e002      	b.n	8017784 <vListInsert+0x2e>
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	60fb      	str	r3, [r7, #12]
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	685b      	ldr	r3, [r3, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	68ba      	ldr	r2, [r7, #8]
 801778c:	429a      	cmp	r2, r3
 801778e:	d2f6      	bcs.n	801777e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	685a      	ldr	r2, [r3, #4]
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	683a      	ldr	r2, [r7, #0]
 801779e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	68fa      	ldr	r2, [r7, #12]
 80177a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	683a      	ldr	r2, [r7, #0]
 80177aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	687a      	ldr	r2, [r7, #4]
 80177b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	1c5a      	adds	r2, r3, #1
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	601a      	str	r2, [r3, #0]
}
 80177bc:	bf00      	nop
 80177be:	3714      	adds	r7, #20
 80177c0:	46bd      	mov	sp, r7
 80177c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c6:	4770      	bx	lr

080177c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80177c8:	b480      	push	{r7}
 80177ca:	b085      	sub	sp, #20
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	691b      	ldr	r3, [r3, #16]
 80177d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	685b      	ldr	r3, [r3, #4]
 80177da:	687a      	ldr	r2, [r7, #4]
 80177dc:	6892      	ldr	r2, [r2, #8]
 80177de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	689b      	ldr	r3, [r3, #8]
 80177e4:	687a      	ldr	r2, [r7, #4]
 80177e6:	6852      	ldr	r2, [r2, #4]
 80177e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	685b      	ldr	r3, [r3, #4]
 80177ee:	687a      	ldr	r2, [r7, #4]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d103      	bne.n	80177fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	689a      	ldr	r2, [r3, #8]
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2200      	movs	r2, #0
 8017800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	1e5a      	subs	r2, r3, #1
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	681b      	ldr	r3, [r3, #0]
}
 8017810:	4618      	mov	r0, r3
 8017812:	3714      	adds	r7, #20
 8017814:	46bd      	mov	sp, r7
 8017816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781a:	4770      	bx	lr

0801781c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b084      	sub	sp, #16
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d109      	bne.n	8017844 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017834:	f383 8811 	msr	BASEPRI, r3
 8017838:	f3bf 8f6f 	isb	sy
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	60bb      	str	r3, [r7, #8]
 8017842:	e7fe      	b.n	8017842 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8017844:	f002 f88a 	bl	801995c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	681a      	ldr	r2, [r3, #0]
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017850:	68f9      	ldr	r1, [r7, #12]
 8017852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017854:	fb01 f303 	mul.w	r3, r1, r3
 8017858:	441a      	add	r2, r3
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	2200      	movs	r2, #0
 8017862:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681a      	ldr	r2, [r3, #0]
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017874:	3b01      	subs	r3, #1
 8017876:	68f9      	ldr	r1, [r7, #12]
 8017878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801787a:	fb01 f303 	mul.w	r3, r1, r3
 801787e:	441a      	add	r2, r3
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	22ff      	movs	r2, #255	; 0xff
 8017888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	22ff      	movs	r2, #255	; 0xff
 8017890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d114      	bne.n	80178c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	691b      	ldr	r3, [r3, #16]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d01a      	beq.n	80178d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	3310      	adds	r3, #16
 80178a6:	4618      	mov	r0, r3
 80178a8:	f001 f958 	bl	8018b5c <xTaskRemoveFromEventList>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d012      	beq.n	80178d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80178b2:	4b0d      	ldr	r3, [pc, #52]	; (80178e8 <xQueueGenericReset+0xcc>)
 80178b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178b8:	601a      	str	r2, [r3, #0]
 80178ba:	f3bf 8f4f 	dsb	sy
 80178be:	f3bf 8f6f 	isb	sy
 80178c2:	e009      	b.n	80178d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	3310      	adds	r3, #16
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7ff fef3 	bl	80176b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	3324      	adds	r3, #36	; 0x24
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7ff feee 	bl	80176b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80178d8:	f002 f86e 	bl	80199b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80178dc:	2301      	movs	r3, #1
}
 80178de:	4618      	mov	r0, r3
 80178e0:	3710      	adds	r7, #16
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}
 80178e6:	bf00      	nop
 80178e8:	e000ed04 	.word	0xe000ed04

080178ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b08e      	sub	sp, #56	; 0x38
 80178f0:	af02      	add	r7, sp, #8
 80178f2:	60f8      	str	r0, [r7, #12]
 80178f4:	60b9      	str	r1, [r7, #8]
 80178f6:	607a      	str	r2, [r7, #4]
 80178f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d109      	bne.n	8017914 <xQueueGenericCreateStatic+0x28>
 8017900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017904:	f383 8811 	msr	BASEPRI, r3
 8017908:	f3bf 8f6f 	isb	sy
 801790c:	f3bf 8f4f 	dsb	sy
 8017910:	62bb      	str	r3, [r7, #40]	; 0x28
 8017912:	e7fe      	b.n	8017912 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d109      	bne.n	801792e <xQueueGenericCreateStatic+0x42>
 801791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791e:	f383 8811 	msr	BASEPRI, r3
 8017922:	f3bf 8f6f 	isb	sy
 8017926:	f3bf 8f4f 	dsb	sy
 801792a:	627b      	str	r3, [r7, #36]	; 0x24
 801792c:	e7fe      	b.n	801792c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d002      	beq.n	801793a <xQueueGenericCreateStatic+0x4e>
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d001      	beq.n	801793e <xQueueGenericCreateStatic+0x52>
 801793a:	2301      	movs	r3, #1
 801793c:	e000      	b.n	8017940 <xQueueGenericCreateStatic+0x54>
 801793e:	2300      	movs	r3, #0
 8017940:	2b00      	cmp	r3, #0
 8017942:	d109      	bne.n	8017958 <xQueueGenericCreateStatic+0x6c>
 8017944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017948:	f383 8811 	msr	BASEPRI, r3
 801794c:	f3bf 8f6f 	isb	sy
 8017950:	f3bf 8f4f 	dsb	sy
 8017954:	623b      	str	r3, [r7, #32]
 8017956:	e7fe      	b.n	8017956 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d102      	bne.n	8017964 <xQueueGenericCreateStatic+0x78>
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d101      	bne.n	8017968 <xQueueGenericCreateStatic+0x7c>
 8017964:	2301      	movs	r3, #1
 8017966:	e000      	b.n	801796a <xQueueGenericCreateStatic+0x7e>
 8017968:	2300      	movs	r3, #0
 801796a:	2b00      	cmp	r3, #0
 801796c:	d109      	bne.n	8017982 <xQueueGenericCreateStatic+0x96>
 801796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017972:	f383 8811 	msr	BASEPRI, r3
 8017976:	f3bf 8f6f 	isb	sy
 801797a:	f3bf 8f4f 	dsb	sy
 801797e:	61fb      	str	r3, [r7, #28]
 8017980:	e7fe      	b.n	8017980 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017982:	2350      	movs	r3, #80	; 0x50
 8017984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	2b50      	cmp	r3, #80	; 0x50
 801798a:	d009      	beq.n	80179a0 <xQueueGenericCreateStatic+0xb4>
 801798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017990:	f383 8811 	msr	BASEPRI, r3
 8017994:	f3bf 8f6f 	isb	sy
 8017998:	f3bf 8f4f 	dsb	sy
 801799c:	61bb      	str	r3, [r7, #24]
 801799e:	e7fe      	b.n	801799e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80179a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80179a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d00d      	beq.n	80179c8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80179ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ae:	2201      	movs	r2, #1
 80179b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80179b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80179b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	4613      	mov	r3, r2
 80179be:	687a      	ldr	r2, [r7, #4]
 80179c0:	68b9      	ldr	r1, [r7, #8]
 80179c2:	68f8      	ldr	r0, [r7, #12]
 80179c4:	f000 f805 	bl	80179d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80179c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3730      	adds	r7, #48	; 0x30
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b084      	sub	sp, #16
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	60f8      	str	r0, [r7, #12]
 80179da:	60b9      	str	r1, [r7, #8]
 80179dc:	607a      	str	r2, [r7, #4]
 80179de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d103      	bne.n	80179ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80179e6:	69bb      	ldr	r3, [r7, #24]
 80179e8:	69ba      	ldr	r2, [r7, #24]
 80179ea:	601a      	str	r2, [r3, #0]
 80179ec:	e002      	b.n	80179f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80179ee:	69bb      	ldr	r3, [r7, #24]
 80179f0:	687a      	ldr	r2, [r7, #4]
 80179f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80179f4:	69bb      	ldr	r3, [r7, #24]
 80179f6:	68fa      	ldr	r2, [r7, #12]
 80179f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80179fa:	69bb      	ldr	r3, [r7, #24]
 80179fc:	68ba      	ldr	r2, [r7, #8]
 80179fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017a00:	2101      	movs	r1, #1
 8017a02:	69b8      	ldr	r0, [r7, #24]
 8017a04:	f7ff ff0a 	bl	801781c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017a08:	69bb      	ldr	r3, [r7, #24]
 8017a0a:	78fa      	ldrb	r2, [r7, #3]
 8017a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017a10:	bf00      	nop
 8017a12:	3710      	adds	r7, #16
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b08e      	sub	sp, #56	; 0x38
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	60f8      	str	r0, [r7, #12]
 8017a20:	60b9      	str	r1, [r7, #8]
 8017a22:	607a      	str	r2, [r7, #4]
 8017a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017a26:	2300      	movs	r3, #0
 8017a28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d109      	bne.n	8017a48 <xQueueGenericSend+0x30>
 8017a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a38:	f383 8811 	msr	BASEPRI, r3
 8017a3c:	f3bf 8f6f 	isb	sy
 8017a40:	f3bf 8f4f 	dsb	sy
 8017a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a46:	e7fe      	b.n	8017a46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d103      	bne.n	8017a56 <xQueueGenericSend+0x3e>
 8017a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d101      	bne.n	8017a5a <xQueueGenericSend+0x42>
 8017a56:	2301      	movs	r3, #1
 8017a58:	e000      	b.n	8017a5c <xQueueGenericSend+0x44>
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d109      	bne.n	8017a74 <xQueueGenericSend+0x5c>
 8017a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a64:	f383 8811 	msr	BASEPRI, r3
 8017a68:	f3bf 8f6f 	isb	sy
 8017a6c:	f3bf 8f4f 	dsb	sy
 8017a70:	627b      	str	r3, [r7, #36]	; 0x24
 8017a72:	e7fe      	b.n	8017a72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017a74:	683b      	ldr	r3, [r7, #0]
 8017a76:	2b02      	cmp	r3, #2
 8017a78:	d103      	bne.n	8017a82 <xQueueGenericSend+0x6a>
 8017a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	d101      	bne.n	8017a86 <xQueueGenericSend+0x6e>
 8017a82:	2301      	movs	r3, #1
 8017a84:	e000      	b.n	8017a88 <xQueueGenericSend+0x70>
 8017a86:	2300      	movs	r3, #0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d109      	bne.n	8017aa0 <xQueueGenericSend+0x88>
 8017a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a90:	f383 8811 	msr	BASEPRI, r3
 8017a94:	f3bf 8f6f 	isb	sy
 8017a98:	f3bf 8f4f 	dsb	sy
 8017a9c:	623b      	str	r3, [r7, #32]
 8017a9e:	e7fe      	b.n	8017a9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017aa0:	f001 fa12 	bl	8018ec8 <xTaskGetSchedulerState>
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d102      	bne.n	8017ab0 <xQueueGenericSend+0x98>
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d101      	bne.n	8017ab4 <xQueueGenericSend+0x9c>
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	e000      	b.n	8017ab6 <xQueueGenericSend+0x9e>
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d109      	bne.n	8017ace <xQueueGenericSend+0xb6>
 8017aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017abe:	f383 8811 	msr	BASEPRI, r3
 8017ac2:	f3bf 8f6f 	isb	sy
 8017ac6:	f3bf 8f4f 	dsb	sy
 8017aca:	61fb      	str	r3, [r7, #28]
 8017acc:	e7fe      	b.n	8017acc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ace:	f001 ff45 	bl	801995c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d302      	bcc.n	8017ae4 <xQueueGenericSend+0xcc>
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	d129      	bne.n	8017b38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ae4:	683a      	ldr	r2, [r7, #0]
 8017ae6:	68b9      	ldr	r1, [r7, #8]
 8017ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017aea:	f000 f9ff 	bl	8017eec <prvCopyDataToQueue>
 8017aee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d010      	beq.n	8017b1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017afa:	3324      	adds	r3, #36	; 0x24
 8017afc:	4618      	mov	r0, r3
 8017afe:	f001 f82d 	bl	8018b5c <xTaskRemoveFromEventList>
 8017b02:	4603      	mov	r3, r0
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d013      	beq.n	8017b30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017b08:	4b3f      	ldr	r3, [pc, #252]	; (8017c08 <xQueueGenericSend+0x1f0>)
 8017b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b0e:	601a      	str	r2, [r3, #0]
 8017b10:	f3bf 8f4f 	dsb	sy
 8017b14:	f3bf 8f6f 	isb	sy
 8017b18:	e00a      	b.n	8017b30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d007      	beq.n	8017b30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017b20:	4b39      	ldr	r3, [pc, #228]	; (8017c08 <xQueueGenericSend+0x1f0>)
 8017b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b26:	601a      	str	r2, [r3, #0]
 8017b28:	f3bf 8f4f 	dsb	sy
 8017b2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017b30:	f001 ff42 	bl	80199b8 <vPortExitCritical>
				return pdPASS;
 8017b34:	2301      	movs	r3, #1
 8017b36:	e063      	b.n	8017c00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d103      	bne.n	8017b46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017b3e:	f001 ff3b 	bl	80199b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017b42:	2300      	movs	r3, #0
 8017b44:	e05c      	b.n	8017c00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d106      	bne.n	8017b5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017b4c:	f107 0314 	add.w	r3, r7, #20
 8017b50:	4618      	mov	r0, r3
 8017b52:	f001 f865 	bl	8018c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017b56:	2301      	movs	r3, #1
 8017b58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017b5a:	f001 ff2d 	bl	80199b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017b5e:	f000 fde1 	bl	8018724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017b62:	f001 fefb 	bl	801995c <vPortEnterCritical>
 8017b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b6c:	b25b      	sxtb	r3, r3
 8017b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b72:	d103      	bne.n	8017b7c <xQueueGenericSend+0x164>
 8017b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b76:	2200      	movs	r2, #0
 8017b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b82:	b25b      	sxtb	r3, r3
 8017b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b88:	d103      	bne.n	8017b92 <xQueueGenericSend+0x17a>
 8017b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b92:	f001 ff11 	bl	80199b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b96:	1d3a      	adds	r2, r7, #4
 8017b98:	f107 0314 	add.w	r3, r7, #20
 8017b9c:	4611      	mov	r1, r2
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f001 f854 	bl	8018c4c <xTaskCheckForTimeOut>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d124      	bne.n	8017bf4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bac:	f000 fa96 	bl	80180dc <prvIsQueueFull>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d018      	beq.n	8017be8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb8:	3310      	adds	r3, #16
 8017bba:	687a      	ldr	r2, [r7, #4]
 8017bbc:	4611      	mov	r1, r2
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f000 ff7e 	bl	8018ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bc6:	f000 fa21 	bl	801800c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017bca:	f000 fdb9 	bl	8018740 <xTaskResumeAll>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	f47f af7c 	bne.w	8017ace <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8017bd6:	4b0c      	ldr	r3, [pc, #48]	; (8017c08 <xQueueGenericSend+0x1f0>)
 8017bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bdc:	601a      	str	r2, [r3, #0]
 8017bde:	f3bf 8f4f 	dsb	sy
 8017be2:	f3bf 8f6f 	isb	sy
 8017be6:	e772      	b.n	8017ace <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bea:	f000 fa0f 	bl	801800c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017bee:	f000 fda7 	bl	8018740 <xTaskResumeAll>
 8017bf2:	e76c      	b.n	8017ace <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bf6:	f000 fa09 	bl	801800c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017bfa:	f000 fda1 	bl	8018740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017bfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	3738      	adds	r7, #56	; 0x38
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}
 8017c08:	e000ed04 	.word	0xe000ed04

08017c0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b08e      	sub	sp, #56	; 0x38
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	60f8      	str	r0, [r7, #12]
 8017c14:	60b9      	str	r1, [r7, #8]
 8017c16:	607a      	str	r2, [r7, #4]
 8017c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d109      	bne.n	8017c38 <xQueueGenericSendFromISR+0x2c>
 8017c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c28:	f383 8811 	msr	BASEPRI, r3
 8017c2c:	f3bf 8f6f 	isb	sy
 8017c30:	f3bf 8f4f 	dsb	sy
 8017c34:	627b      	str	r3, [r7, #36]	; 0x24
 8017c36:	e7fe      	b.n	8017c36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c38:	68bb      	ldr	r3, [r7, #8]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d103      	bne.n	8017c46 <xQueueGenericSendFromISR+0x3a>
 8017c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d101      	bne.n	8017c4a <xQueueGenericSendFromISR+0x3e>
 8017c46:	2301      	movs	r3, #1
 8017c48:	e000      	b.n	8017c4c <xQueueGenericSendFromISR+0x40>
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d109      	bne.n	8017c64 <xQueueGenericSendFromISR+0x58>
 8017c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c54:	f383 8811 	msr	BASEPRI, r3
 8017c58:	f3bf 8f6f 	isb	sy
 8017c5c:	f3bf 8f4f 	dsb	sy
 8017c60:	623b      	str	r3, [r7, #32]
 8017c62:	e7fe      	b.n	8017c62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c64:	683b      	ldr	r3, [r7, #0]
 8017c66:	2b02      	cmp	r3, #2
 8017c68:	d103      	bne.n	8017c72 <xQueueGenericSendFromISR+0x66>
 8017c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c6e:	2b01      	cmp	r3, #1
 8017c70:	d101      	bne.n	8017c76 <xQueueGenericSendFromISR+0x6a>
 8017c72:	2301      	movs	r3, #1
 8017c74:	e000      	b.n	8017c78 <xQueueGenericSendFromISR+0x6c>
 8017c76:	2300      	movs	r3, #0
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d109      	bne.n	8017c90 <xQueueGenericSendFromISR+0x84>
 8017c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c80:	f383 8811 	msr	BASEPRI, r3
 8017c84:	f3bf 8f6f 	isb	sy
 8017c88:	f3bf 8f4f 	dsb	sy
 8017c8c:	61fb      	str	r3, [r7, #28]
 8017c8e:	e7fe      	b.n	8017c8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017c90:	f001 ff40 	bl	8019b14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017c94:	f3ef 8211 	mrs	r2, BASEPRI
 8017c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c9c:	f383 8811 	msr	BASEPRI, r3
 8017ca0:	f3bf 8f6f 	isb	sy
 8017ca4:	f3bf 8f4f 	dsb	sy
 8017ca8:	61ba      	str	r2, [r7, #24]
 8017caa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017cac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cb8:	429a      	cmp	r2, r3
 8017cba:	d302      	bcc.n	8017cc2 <xQueueGenericSendFromISR+0xb6>
 8017cbc:	683b      	ldr	r3, [r7, #0]
 8017cbe:	2b02      	cmp	r3, #2
 8017cc0:	d12c      	bne.n	8017d1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ccc:	683a      	ldr	r2, [r7, #0]
 8017cce:	68b9      	ldr	r1, [r7, #8]
 8017cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cd2:	f000 f90b 	bl	8017eec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017cd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cde:	d112      	bne.n	8017d06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d016      	beq.n	8017d16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cea:	3324      	adds	r3, #36	; 0x24
 8017cec:	4618      	mov	r0, r3
 8017cee:	f000 ff35 	bl	8018b5c <xTaskRemoveFromEventList>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d00e      	beq.n	8017d16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d00b      	beq.n	8017d16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	2201      	movs	r2, #1
 8017d02:	601a      	str	r2, [r3, #0]
 8017d04:	e007      	b.n	8017d16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d0a:	3301      	adds	r3, #1
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	b25a      	sxtb	r2, r3
 8017d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017d16:	2301      	movs	r3, #1
 8017d18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017d1a:	e001      	b.n	8017d20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8017d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3738      	adds	r7, #56	; 0x38
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b08c      	sub	sp, #48	; 0x30
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017d40:	2300      	movs	r3, #0
 8017d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d109      	bne.n	8017d62 <xQueueReceive+0x2e>
	__asm volatile
 8017d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d52:	f383 8811 	msr	BASEPRI, r3
 8017d56:	f3bf 8f6f 	isb	sy
 8017d5a:	f3bf 8f4f 	dsb	sy
 8017d5e:	623b      	str	r3, [r7, #32]
 8017d60:	e7fe      	b.n	8017d60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d103      	bne.n	8017d70 <xQueueReceive+0x3c>
 8017d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d101      	bne.n	8017d74 <xQueueReceive+0x40>
 8017d70:	2301      	movs	r3, #1
 8017d72:	e000      	b.n	8017d76 <xQueueReceive+0x42>
 8017d74:	2300      	movs	r3, #0
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d109      	bne.n	8017d8e <xQueueReceive+0x5a>
 8017d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d7e:	f383 8811 	msr	BASEPRI, r3
 8017d82:	f3bf 8f6f 	isb	sy
 8017d86:	f3bf 8f4f 	dsb	sy
 8017d8a:	61fb      	str	r3, [r7, #28]
 8017d8c:	e7fe      	b.n	8017d8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017d8e:	f001 f89b 	bl	8018ec8 <xTaskGetSchedulerState>
 8017d92:	4603      	mov	r3, r0
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d102      	bne.n	8017d9e <xQueueReceive+0x6a>
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d101      	bne.n	8017da2 <xQueueReceive+0x6e>
 8017d9e:	2301      	movs	r3, #1
 8017da0:	e000      	b.n	8017da4 <xQueueReceive+0x70>
 8017da2:	2300      	movs	r3, #0
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d109      	bne.n	8017dbc <xQueueReceive+0x88>
 8017da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dac:	f383 8811 	msr	BASEPRI, r3
 8017db0:	f3bf 8f6f 	isb	sy
 8017db4:	f3bf 8f4f 	dsb	sy
 8017db8:	61bb      	str	r3, [r7, #24]
 8017dba:	e7fe      	b.n	8017dba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017dbc:	f001 fdce 	bl	801995c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d01f      	beq.n	8017e0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017dcc:	68b9      	ldr	r1, [r7, #8]
 8017dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017dd0:	f000 f8f6 	bl	8017fc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	1e5a      	subs	r2, r3, #1
 8017dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dde:	691b      	ldr	r3, [r3, #16]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d00f      	beq.n	8017e04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de6:	3310      	adds	r3, #16
 8017de8:	4618      	mov	r0, r3
 8017dea:	f000 feb7 	bl	8018b5c <xTaskRemoveFromEventList>
 8017dee:	4603      	mov	r3, r0
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d007      	beq.n	8017e04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017df4:	4b3c      	ldr	r3, [pc, #240]	; (8017ee8 <xQueueReceive+0x1b4>)
 8017df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dfa:	601a      	str	r2, [r3, #0]
 8017dfc:	f3bf 8f4f 	dsb	sy
 8017e00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017e04:	f001 fdd8 	bl	80199b8 <vPortExitCritical>
				return pdPASS;
 8017e08:	2301      	movs	r3, #1
 8017e0a:	e069      	b.n	8017ee0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d103      	bne.n	8017e1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017e12:	f001 fdd1 	bl	80199b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017e16:	2300      	movs	r3, #0
 8017e18:	e062      	b.n	8017ee0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d106      	bne.n	8017e2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017e20:	f107 0310 	add.w	r3, r7, #16
 8017e24:	4618      	mov	r0, r3
 8017e26:	f000 fefb 	bl	8018c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017e2e:	f001 fdc3 	bl	80199b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017e32:	f000 fc77 	bl	8018724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017e36:	f001 fd91 	bl	801995c <vPortEnterCritical>
 8017e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e40:	b25b      	sxtb	r3, r3
 8017e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e46:	d103      	bne.n	8017e50 <xQueueReceive+0x11c>
 8017e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e56:	b25b      	sxtb	r3, r3
 8017e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e5c:	d103      	bne.n	8017e66 <xQueueReceive+0x132>
 8017e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e60:	2200      	movs	r2, #0
 8017e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e66:	f001 fda7 	bl	80199b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017e6a:	1d3a      	adds	r2, r7, #4
 8017e6c:	f107 0310 	add.w	r3, r7, #16
 8017e70:	4611      	mov	r1, r2
 8017e72:	4618      	mov	r0, r3
 8017e74:	f000 feea 	bl	8018c4c <xTaskCheckForTimeOut>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d123      	bne.n	8017ec6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e80:	f000 f916 	bl	80180b0 <prvIsQueueEmpty>
 8017e84:	4603      	mov	r3, r0
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d017      	beq.n	8017eba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e8c:	3324      	adds	r3, #36	; 0x24
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	4611      	mov	r1, r2
 8017e92:	4618      	mov	r0, r3
 8017e94:	f000 fe14 	bl	8018ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e9a:	f000 f8b7 	bl	801800c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017e9e:	f000 fc4f 	bl	8018740 <xTaskResumeAll>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d189      	bne.n	8017dbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8017ea8:	4b0f      	ldr	r3, [pc, #60]	; (8017ee8 <xQueueReceive+0x1b4>)
 8017eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017eae:	601a      	str	r2, [r3, #0]
 8017eb0:	f3bf 8f4f 	dsb	sy
 8017eb4:	f3bf 8f6f 	isb	sy
 8017eb8:	e780      	b.n	8017dbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ebc:	f000 f8a6 	bl	801800c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017ec0:	f000 fc3e 	bl	8018740 <xTaskResumeAll>
 8017ec4:	e77a      	b.n	8017dbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ec8:	f000 f8a0 	bl	801800c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017ecc:	f000 fc38 	bl	8018740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ed2:	f000 f8ed 	bl	80180b0 <prvIsQueueEmpty>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	f43f af6f 	beq.w	8017dbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017ede:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3730      	adds	r7, #48	; 0x30
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	e000ed04 	.word	0xe000ed04

08017eec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b086      	sub	sp, #24
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	60f8      	str	r0, [r7, #12]
 8017ef4:	60b9      	str	r1, [r7, #8]
 8017ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017ef8:	2300      	movs	r3, #0
 8017efa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d10d      	bne.n	8017f26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d14d      	bne.n	8017fae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	689b      	ldr	r3, [r3, #8]
 8017f16:	4618      	mov	r0, r3
 8017f18:	f000 fff4 	bl	8018f04 <xTaskPriorityDisinherit>
 8017f1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	2200      	movs	r2, #0
 8017f22:	609a      	str	r2, [r3, #8]
 8017f24:	e043      	b.n	8017fae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d119      	bne.n	8017f60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	6858      	ldr	r0, [r3, #4]
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f34:	461a      	mov	r2, r3
 8017f36:	68b9      	ldr	r1, [r7, #8]
 8017f38:	f002 f82a 	bl	8019f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	685a      	ldr	r2, [r3, #4]
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f44:	441a      	add	r2, r3
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	685a      	ldr	r2, [r3, #4]
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	689b      	ldr	r3, [r3, #8]
 8017f52:	429a      	cmp	r2, r3
 8017f54:	d32b      	bcc.n	8017fae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	681a      	ldr	r2, [r3, #0]
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	605a      	str	r2, [r3, #4]
 8017f5e:	e026      	b.n	8017fae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	68d8      	ldr	r0, [r3, #12]
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f68:	461a      	mov	r2, r3
 8017f6a:	68b9      	ldr	r1, [r7, #8]
 8017f6c:	f002 f810 	bl	8019f90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	68da      	ldr	r2, [r3, #12]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f78:	425b      	negs	r3, r3
 8017f7a:	441a      	add	r2, r3
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	68da      	ldr	r2, [r3, #12]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	d207      	bcs.n	8017f9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	689a      	ldr	r2, [r3, #8]
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f94:	425b      	negs	r3, r3
 8017f96:	441a      	add	r2, r3
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2b02      	cmp	r3, #2
 8017fa0:	d105      	bne.n	8017fae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fa2:	693b      	ldr	r3, [r7, #16]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d002      	beq.n	8017fae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017fa8:	693b      	ldr	r3, [r7, #16]
 8017faa:	3b01      	subs	r3, #1
 8017fac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017fae:	693b      	ldr	r3, [r7, #16]
 8017fb0:	1c5a      	adds	r2, r3, #1
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017fb6:	697b      	ldr	r3, [r7, #20]
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	3718      	adds	r7, #24
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}

08017fc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d018      	beq.n	8018004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	68da      	ldr	r2, [r3, #12]
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fda:	441a      	add	r2, r3
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	68da      	ldr	r2, [r3, #12]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	689b      	ldr	r3, [r3, #8]
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d303      	bcc.n	8017ff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	68d9      	ldr	r1, [r3, #12]
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	6838      	ldr	r0, [r7, #0]
 8018000:	f001 ffc6 	bl	8019f90 <memcpy>
	}
}
 8018004:	bf00      	nop
 8018006:	3708      	adds	r7, #8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}

0801800c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b084      	sub	sp, #16
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018014:	f001 fca2 	bl	801995c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801801e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018020:	e011      	b.n	8018046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018026:	2b00      	cmp	r3, #0
 8018028:	d012      	beq.n	8018050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	3324      	adds	r3, #36	; 0x24
 801802e:	4618      	mov	r0, r3
 8018030:	f000 fd94 	bl	8018b5c <xTaskRemoveFromEventList>
 8018034:	4603      	mov	r3, r0
 8018036:	2b00      	cmp	r3, #0
 8018038:	d001      	beq.n	801803e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801803a:	f000 fe67 	bl	8018d0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801803e:	7bfb      	ldrb	r3, [r7, #15]
 8018040:	3b01      	subs	r3, #1
 8018042:	b2db      	uxtb	r3, r3
 8018044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801804a:	2b00      	cmp	r3, #0
 801804c:	dce9      	bgt.n	8018022 <prvUnlockQueue+0x16>
 801804e:	e000      	b.n	8018052 <prvUnlockQueue+0x46>
					break;
 8018050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	22ff      	movs	r2, #255	; 0xff
 8018056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801805a:	f001 fcad 	bl	80199b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801805e:	f001 fc7d 	bl	801995c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801806a:	e011      	b.n	8018090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	691b      	ldr	r3, [r3, #16]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d012      	beq.n	801809a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	3310      	adds	r3, #16
 8018078:	4618      	mov	r0, r3
 801807a:	f000 fd6f 	bl	8018b5c <xTaskRemoveFromEventList>
 801807e:	4603      	mov	r3, r0
 8018080:	2b00      	cmp	r3, #0
 8018082:	d001      	beq.n	8018088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018084:	f000 fe42 	bl	8018d0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018088:	7bbb      	ldrb	r3, [r7, #14]
 801808a:	3b01      	subs	r3, #1
 801808c:	b2db      	uxtb	r3, r3
 801808e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018094:	2b00      	cmp	r3, #0
 8018096:	dce9      	bgt.n	801806c <prvUnlockQueue+0x60>
 8018098:	e000      	b.n	801809c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801809a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	22ff      	movs	r2, #255	; 0xff
 80180a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80180a4:	f001 fc88 	bl	80199b8 <vPortExitCritical>
}
 80180a8:	bf00      	nop
 80180aa:	3710      	adds	r7, #16
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}

080180b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80180b8:	f001 fc50 	bl	801995c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d102      	bne.n	80180ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80180c4:	2301      	movs	r3, #1
 80180c6:	60fb      	str	r3, [r7, #12]
 80180c8:	e001      	b.n	80180ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80180ca:	2300      	movs	r3, #0
 80180cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80180ce:	f001 fc73 	bl	80199b8 <vPortExitCritical>

	return xReturn;
 80180d2:	68fb      	ldr	r3, [r7, #12]
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3710      	adds	r7, #16
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}

080180dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80180e4:	f001 fc3a 	bl	801995c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d102      	bne.n	80180fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80180f4:	2301      	movs	r3, #1
 80180f6:	60fb      	str	r3, [r7, #12]
 80180f8:	e001      	b.n	80180fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80180fa:	2300      	movs	r3, #0
 80180fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80180fe:	f001 fc5b 	bl	80199b8 <vPortExitCritical>

	return xReturn;
 8018102:	68fb      	ldr	r3, [r7, #12]
}
 8018104:	4618      	mov	r0, r3
 8018106:	3710      	adds	r7, #16
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}

0801810c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801810c:	b480      	push	{r7}
 801810e:	b085      	sub	sp, #20
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
 8018114:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018116:	2300      	movs	r3, #0
 8018118:	60fb      	str	r3, [r7, #12]
 801811a:	e014      	b.n	8018146 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801811c:	4a0e      	ldr	r2, [pc, #56]	; (8018158 <vQueueAddToRegistry+0x4c>)
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d10b      	bne.n	8018140 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018128:	490b      	ldr	r1, [pc, #44]	; (8018158 <vQueueAddToRegistry+0x4c>)
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	683a      	ldr	r2, [r7, #0]
 801812e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018132:	4a09      	ldr	r2, [pc, #36]	; (8018158 <vQueueAddToRegistry+0x4c>)
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	00db      	lsls	r3, r3, #3
 8018138:	4413      	add	r3, r2
 801813a:	687a      	ldr	r2, [r7, #4]
 801813c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801813e:	e005      	b.n	801814c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	3301      	adds	r3, #1
 8018144:	60fb      	str	r3, [r7, #12]
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	2b07      	cmp	r3, #7
 801814a:	d9e7      	bls.n	801811c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801814c:	bf00      	nop
 801814e:	3714      	adds	r7, #20
 8018150:	46bd      	mov	sp, r7
 8018152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018156:	4770      	bx	lr
 8018158:	2000e660 	.word	0x2000e660

0801815c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801815c:	b580      	push	{r7, lr}
 801815e:	b086      	sub	sp, #24
 8018160:	af00      	add	r7, sp, #0
 8018162:	60f8      	str	r0, [r7, #12]
 8018164:	60b9      	str	r1, [r7, #8]
 8018166:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801816c:	f001 fbf6 	bl	801995c <vPortEnterCritical>
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018176:	b25b      	sxtb	r3, r3
 8018178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801817c:	d103      	bne.n	8018186 <vQueueWaitForMessageRestricted+0x2a>
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	2200      	movs	r2, #0
 8018182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018186:	697b      	ldr	r3, [r7, #20]
 8018188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801818c:	b25b      	sxtb	r3, r3
 801818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018192:	d103      	bne.n	801819c <vQueueWaitForMessageRestricted+0x40>
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	2200      	movs	r2, #0
 8018198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801819c:	f001 fc0c 	bl	80199b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80181a0:	697b      	ldr	r3, [r7, #20]
 80181a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d106      	bne.n	80181b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	3324      	adds	r3, #36	; 0x24
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	68b9      	ldr	r1, [r7, #8]
 80181b0:	4618      	mov	r0, r3
 80181b2:	f000 fca9 	bl	8018b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80181b6:	6978      	ldr	r0, [r7, #20]
 80181b8:	f7ff ff28 	bl	801800c <prvUnlockQueue>
	}
 80181bc:	bf00      	nop
 80181be:	3718      	adds	r7, #24
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}

080181c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b08e      	sub	sp, #56	; 0x38
 80181c8:	af04      	add	r7, sp, #16
 80181ca:	60f8      	str	r0, [r7, #12]
 80181cc:	60b9      	str	r1, [r7, #8]
 80181ce:	607a      	str	r2, [r7, #4]
 80181d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80181d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d109      	bne.n	80181ec <xTaskCreateStatic+0x28>
 80181d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181dc:	f383 8811 	msr	BASEPRI, r3
 80181e0:	f3bf 8f6f 	isb	sy
 80181e4:	f3bf 8f4f 	dsb	sy
 80181e8:	623b      	str	r3, [r7, #32]
 80181ea:	e7fe      	b.n	80181ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80181ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d109      	bne.n	8018206 <xTaskCreateStatic+0x42>
 80181f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f6:	f383 8811 	msr	BASEPRI, r3
 80181fa:	f3bf 8f6f 	isb	sy
 80181fe:	f3bf 8f4f 	dsb	sy
 8018202:	61fb      	str	r3, [r7, #28]
 8018204:	e7fe      	b.n	8018204 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018206:	235c      	movs	r3, #92	; 0x5c
 8018208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801820a:	693b      	ldr	r3, [r7, #16]
 801820c:	2b5c      	cmp	r3, #92	; 0x5c
 801820e:	d009      	beq.n	8018224 <xTaskCreateStatic+0x60>
 8018210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018214:	f383 8811 	msr	BASEPRI, r3
 8018218:	f3bf 8f6f 	isb	sy
 801821c:	f3bf 8f4f 	dsb	sy
 8018220:	61bb      	str	r3, [r7, #24]
 8018222:	e7fe      	b.n	8018222 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018224:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018228:	2b00      	cmp	r3, #0
 801822a:	d01e      	beq.n	801826a <xTaskCreateStatic+0xa6>
 801822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801822e:	2b00      	cmp	r3, #0
 8018230:	d01b      	beq.n	801826a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018234:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801823a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823e:	2202      	movs	r2, #2
 8018240:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018244:	2300      	movs	r3, #0
 8018246:	9303      	str	r3, [sp, #12]
 8018248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824a:	9302      	str	r3, [sp, #8]
 801824c:	f107 0314 	add.w	r3, r7, #20
 8018250:	9301      	str	r3, [sp, #4]
 8018252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	687a      	ldr	r2, [r7, #4]
 801825a:	68b9      	ldr	r1, [r7, #8]
 801825c:	68f8      	ldr	r0, [r7, #12]
 801825e:	f000 f850 	bl	8018302 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018264:	f000 f8dc 	bl	8018420 <prvAddNewTaskToReadyList>
 8018268:	e001      	b.n	801826e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801826a:	2300      	movs	r3, #0
 801826c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801826e:	697b      	ldr	r3, [r7, #20]
	}
 8018270:	4618      	mov	r0, r3
 8018272:	3728      	adds	r7, #40	; 0x28
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}

08018278 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018278:	b580      	push	{r7, lr}
 801827a:	b08c      	sub	sp, #48	; 0x30
 801827c:	af04      	add	r7, sp, #16
 801827e:	60f8      	str	r0, [r7, #12]
 8018280:	60b9      	str	r1, [r7, #8]
 8018282:	603b      	str	r3, [r7, #0]
 8018284:	4613      	mov	r3, r2
 8018286:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018288:	88fb      	ldrh	r3, [r7, #6]
 801828a:	009b      	lsls	r3, r3, #2
 801828c:	4618      	mov	r0, r3
 801828e:	f001 fc7f 	bl	8019b90 <pvPortMalloc>
 8018292:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d00e      	beq.n	80182b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801829a:	205c      	movs	r0, #92	; 0x5c
 801829c:	f001 fc78 	bl	8019b90 <pvPortMalloc>
 80182a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80182a2:	69fb      	ldr	r3, [r7, #28]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d003      	beq.n	80182b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	697a      	ldr	r2, [r7, #20]
 80182ac:	631a      	str	r2, [r3, #48]	; 0x30
 80182ae:	e005      	b.n	80182bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80182b0:	6978      	ldr	r0, [r7, #20]
 80182b2:	f001 fd2f 	bl	8019d14 <vPortFree>
 80182b6:	e001      	b.n	80182bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80182b8:	2300      	movs	r3, #0
 80182ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80182bc:	69fb      	ldr	r3, [r7, #28]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d017      	beq.n	80182f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	2200      	movs	r2, #0
 80182c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80182ca:	88fa      	ldrh	r2, [r7, #6]
 80182cc:	2300      	movs	r3, #0
 80182ce:	9303      	str	r3, [sp, #12]
 80182d0:	69fb      	ldr	r3, [r7, #28]
 80182d2:	9302      	str	r3, [sp, #8]
 80182d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182d6:	9301      	str	r3, [sp, #4]
 80182d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182da:	9300      	str	r3, [sp, #0]
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	68b9      	ldr	r1, [r7, #8]
 80182e0:	68f8      	ldr	r0, [r7, #12]
 80182e2:	f000 f80e 	bl	8018302 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80182e6:	69f8      	ldr	r0, [r7, #28]
 80182e8:	f000 f89a 	bl	8018420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80182ec:	2301      	movs	r3, #1
 80182ee:	61bb      	str	r3, [r7, #24]
 80182f0:	e002      	b.n	80182f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80182f2:	f04f 33ff 	mov.w	r3, #4294967295
 80182f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80182f8:	69bb      	ldr	r3, [r7, #24]
	}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3720      	adds	r7, #32
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}

08018302 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018302:	b580      	push	{r7, lr}
 8018304:	b088      	sub	sp, #32
 8018306:	af00      	add	r7, sp, #0
 8018308:	60f8      	str	r0, [r7, #12]
 801830a:	60b9      	str	r1, [r7, #8]
 801830c:	607a      	str	r2, [r7, #4]
 801830e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018312:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	009b      	lsls	r3, r3, #2
 8018318:	461a      	mov	r2, r3
 801831a:	21a5      	movs	r1, #165	; 0xa5
 801831c:	f001 fe43 	bl	8019fa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801832a:	3b01      	subs	r3, #1
 801832c:	009b      	lsls	r3, r3, #2
 801832e:	4413      	add	r3, r2
 8018330:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	f023 0307 	bic.w	r3, r3, #7
 8018338:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801833a:	69bb      	ldr	r3, [r7, #24]
 801833c:	f003 0307 	and.w	r3, r3, #7
 8018340:	2b00      	cmp	r3, #0
 8018342:	d009      	beq.n	8018358 <prvInitialiseNewTask+0x56>
 8018344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018348:	f383 8811 	msr	BASEPRI, r3
 801834c:	f3bf 8f6f 	isb	sy
 8018350:	f3bf 8f4f 	dsb	sy
 8018354:	617b      	str	r3, [r7, #20]
 8018356:	e7fe      	b.n	8018356 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d01f      	beq.n	801839e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801835e:	2300      	movs	r3, #0
 8018360:	61fb      	str	r3, [r7, #28]
 8018362:	e012      	b.n	801838a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018364:	68ba      	ldr	r2, [r7, #8]
 8018366:	69fb      	ldr	r3, [r7, #28]
 8018368:	4413      	add	r3, r2
 801836a:	7819      	ldrb	r1, [r3, #0]
 801836c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801836e:	69fb      	ldr	r3, [r7, #28]
 8018370:	4413      	add	r3, r2
 8018372:	3334      	adds	r3, #52	; 0x34
 8018374:	460a      	mov	r2, r1
 8018376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018378:	68ba      	ldr	r2, [r7, #8]
 801837a:	69fb      	ldr	r3, [r7, #28]
 801837c:	4413      	add	r3, r2
 801837e:	781b      	ldrb	r3, [r3, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d006      	beq.n	8018392 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018384:	69fb      	ldr	r3, [r7, #28]
 8018386:	3301      	adds	r3, #1
 8018388:	61fb      	str	r3, [r7, #28]
 801838a:	69fb      	ldr	r3, [r7, #28]
 801838c:	2b0f      	cmp	r3, #15
 801838e:	d9e9      	bls.n	8018364 <prvInitialiseNewTask+0x62>
 8018390:	e000      	b.n	8018394 <prvInitialiseNewTask+0x92>
			{
				break;
 8018392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018396:	2200      	movs	r2, #0
 8018398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801839c:	e003      	b.n	80183a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a0:	2200      	movs	r2, #0
 80183a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80183a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a8:	2b37      	cmp	r3, #55	; 0x37
 80183aa:	d901      	bls.n	80183b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80183ac:	2337      	movs	r3, #55	; 0x37
 80183ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80183b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80183b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80183bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183be:	2200      	movs	r2, #0
 80183c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80183c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c4:	3304      	adds	r3, #4
 80183c6:	4618      	mov	r0, r3
 80183c8:	f7ff f994 	bl	80176f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80183cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ce:	3318      	adds	r3, #24
 80183d0:	4618      	mov	r0, r3
 80183d2:	f7ff f98f 	bl	80176f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80183d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80183dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80183e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80183e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80183ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ee:	2200      	movs	r2, #0
 80183f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80183f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183f4:	2200      	movs	r2, #0
 80183f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80183fa:	683a      	ldr	r2, [r7, #0]
 80183fc:	68f9      	ldr	r1, [r7, #12]
 80183fe:	69b8      	ldr	r0, [r7, #24]
 8018400:	f001 f986 	bl	8019710 <pxPortInitialiseStack>
 8018404:	4602      	mov	r2, r0
 8018406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840c:	2b00      	cmp	r3, #0
 801840e:	d002      	beq.n	8018416 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018416:	bf00      	nop
 8018418:	3720      	adds	r7, #32
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
	...

08018420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b082      	sub	sp, #8
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018428:	f001 fa98 	bl	801995c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801842c:	4b2d      	ldr	r3, [pc, #180]	; (80184e4 <prvAddNewTaskToReadyList+0xc4>)
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	3301      	adds	r3, #1
 8018432:	4a2c      	ldr	r2, [pc, #176]	; (80184e4 <prvAddNewTaskToReadyList+0xc4>)
 8018434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018436:	4b2c      	ldr	r3, [pc, #176]	; (80184e8 <prvAddNewTaskToReadyList+0xc8>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d109      	bne.n	8018452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801843e:	4a2a      	ldr	r2, [pc, #168]	; (80184e8 <prvAddNewTaskToReadyList+0xc8>)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018444:	4b27      	ldr	r3, [pc, #156]	; (80184e4 <prvAddNewTaskToReadyList+0xc4>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2b01      	cmp	r3, #1
 801844a:	d110      	bne.n	801846e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801844c:	f000 fc82 	bl	8018d54 <prvInitialiseTaskLists>
 8018450:	e00d      	b.n	801846e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018452:	4b26      	ldr	r3, [pc, #152]	; (80184ec <prvAddNewTaskToReadyList+0xcc>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d109      	bne.n	801846e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801845a:	4b23      	ldr	r3, [pc, #140]	; (80184e8 <prvAddNewTaskToReadyList+0xc8>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018464:	429a      	cmp	r2, r3
 8018466:	d802      	bhi.n	801846e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018468:	4a1f      	ldr	r2, [pc, #124]	; (80184e8 <prvAddNewTaskToReadyList+0xc8>)
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801846e:	4b20      	ldr	r3, [pc, #128]	; (80184f0 <prvAddNewTaskToReadyList+0xd0>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	3301      	adds	r3, #1
 8018474:	4a1e      	ldr	r2, [pc, #120]	; (80184f0 <prvAddNewTaskToReadyList+0xd0>)
 8018476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018478:	4b1d      	ldr	r3, [pc, #116]	; (80184f0 <prvAddNewTaskToReadyList+0xd0>)
 801847a:	681a      	ldr	r2, [r3, #0]
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018484:	4b1b      	ldr	r3, [pc, #108]	; (80184f4 <prvAddNewTaskToReadyList+0xd4>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	429a      	cmp	r2, r3
 801848a:	d903      	bls.n	8018494 <prvAddNewTaskToReadyList+0x74>
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018490:	4a18      	ldr	r2, [pc, #96]	; (80184f4 <prvAddNewTaskToReadyList+0xd4>)
 8018492:	6013      	str	r3, [r2, #0]
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018498:	4613      	mov	r3, r2
 801849a:	009b      	lsls	r3, r3, #2
 801849c:	4413      	add	r3, r2
 801849e:	009b      	lsls	r3, r3, #2
 80184a0:	4a15      	ldr	r2, [pc, #84]	; (80184f8 <prvAddNewTaskToReadyList+0xd8>)
 80184a2:	441a      	add	r2, r3
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	3304      	adds	r3, #4
 80184a8:	4619      	mov	r1, r3
 80184aa:	4610      	mov	r0, r2
 80184ac:	f7ff f92f 	bl	801770e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80184b0:	f001 fa82 	bl	80199b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80184b4:	4b0d      	ldr	r3, [pc, #52]	; (80184ec <prvAddNewTaskToReadyList+0xcc>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d00e      	beq.n	80184da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80184bc:	4b0a      	ldr	r3, [pc, #40]	; (80184e8 <prvAddNewTaskToReadyList+0xc8>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184c6:	429a      	cmp	r2, r3
 80184c8:	d207      	bcs.n	80184da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80184ca:	4b0c      	ldr	r3, [pc, #48]	; (80184fc <prvAddNewTaskToReadyList+0xdc>)
 80184cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184d0:	601a      	str	r2, [r3, #0]
 80184d2:	f3bf 8f4f 	dsb	sy
 80184d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80184da:	bf00      	nop
 80184dc:	3708      	adds	r7, #8
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	20006c78 	.word	0x20006c78
 80184e8:	200067a4 	.word	0x200067a4
 80184ec:	20006c84 	.word	0x20006c84
 80184f0:	20006c94 	.word	0x20006c94
 80184f4:	20006c80 	.word	0x20006c80
 80184f8:	200067a8 	.word	0x200067a8
 80184fc:	e000ed04 	.word	0xe000ed04

08018500 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8018500:	b580      	push	{r7, lr}
 8018502:	b08a      	sub	sp, #40	; 0x28
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801850a:	2300      	movs	r3, #0
 801850c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d109      	bne.n	8018528 <vTaskDelayUntil+0x28>
 8018514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018518:	f383 8811 	msr	BASEPRI, r3
 801851c:	f3bf 8f6f 	isb	sy
 8018520:	f3bf 8f4f 	dsb	sy
 8018524:	617b      	str	r3, [r7, #20]
 8018526:	e7fe      	b.n	8018526 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d109      	bne.n	8018542 <vTaskDelayUntil+0x42>
 801852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018532:	f383 8811 	msr	BASEPRI, r3
 8018536:	f3bf 8f6f 	isb	sy
 801853a:	f3bf 8f4f 	dsb	sy
 801853e:	613b      	str	r3, [r7, #16]
 8018540:	e7fe      	b.n	8018540 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8018542:	4b29      	ldr	r3, [pc, #164]	; (80185e8 <vTaskDelayUntil+0xe8>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d009      	beq.n	801855e <vTaskDelayUntil+0x5e>
 801854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801854e:	f383 8811 	msr	BASEPRI, r3
 8018552:	f3bf 8f6f 	isb	sy
 8018556:	f3bf 8f4f 	dsb	sy
 801855a:	60fb      	str	r3, [r7, #12]
 801855c:	e7fe      	b.n	801855c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 801855e:	f000 f8e1 	bl	8018724 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8018562:	4b22      	ldr	r3, [pc, #136]	; (80185ec <vTaskDelayUntil+0xec>)
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	683a      	ldr	r2, [r7, #0]
 801856e:	4413      	add	r3, r2
 8018570:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	6a3a      	ldr	r2, [r7, #32]
 8018578:	429a      	cmp	r2, r3
 801857a:	d20b      	bcs.n	8018594 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	69fa      	ldr	r2, [r7, #28]
 8018582:	429a      	cmp	r2, r3
 8018584:	d211      	bcs.n	80185aa <vTaskDelayUntil+0xaa>
 8018586:	69fa      	ldr	r2, [r7, #28]
 8018588:	6a3b      	ldr	r3, [r7, #32]
 801858a:	429a      	cmp	r2, r3
 801858c:	d90d      	bls.n	80185aa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 801858e:	2301      	movs	r3, #1
 8018590:	627b      	str	r3, [r7, #36]	; 0x24
 8018592:	e00a      	b.n	80185aa <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	69fa      	ldr	r2, [r7, #28]
 801859a:	429a      	cmp	r2, r3
 801859c:	d303      	bcc.n	80185a6 <vTaskDelayUntil+0xa6>
 801859e:	69fa      	ldr	r2, [r7, #28]
 80185a0:	6a3b      	ldr	r3, [r7, #32]
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d901      	bls.n	80185aa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80185a6:	2301      	movs	r3, #1
 80185a8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	69fa      	ldr	r2, [r7, #28]
 80185ae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80185b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d006      	beq.n	80185c4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80185b6:	69fa      	ldr	r2, [r7, #28]
 80185b8:	6a3b      	ldr	r3, [r7, #32]
 80185ba:	1ad3      	subs	r3, r2, r3
 80185bc:	2100      	movs	r1, #0
 80185be:	4618      	mov	r0, r3
 80185c0:	f000 fd0c 	bl	8018fdc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80185c4:	f000 f8bc 	bl	8018740 <xTaskResumeAll>
 80185c8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80185ca:	69bb      	ldr	r3, [r7, #24]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d107      	bne.n	80185e0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80185d0:	4b07      	ldr	r3, [pc, #28]	; (80185f0 <vTaskDelayUntil+0xf0>)
 80185d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185d6:	601a      	str	r2, [r3, #0]
 80185d8:	f3bf 8f4f 	dsb	sy
 80185dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80185e0:	bf00      	nop
 80185e2:	3728      	adds	r7, #40	; 0x28
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}
 80185e8:	20006ca0 	.word	0x20006ca0
 80185ec:	20006c7c 	.word	0x20006c7c
 80185f0:	e000ed04 	.word	0xe000ed04

080185f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b084      	sub	sp, #16
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80185fc:	2300      	movs	r3, #0
 80185fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d016      	beq.n	8018634 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018606:	4b13      	ldr	r3, [pc, #76]	; (8018654 <vTaskDelay+0x60>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d009      	beq.n	8018622 <vTaskDelay+0x2e>
 801860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018612:	f383 8811 	msr	BASEPRI, r3
 8018616:	f3bf 8f6f 	isb	sy
 801861a:	f3bf 8f4f 	dsb	sy
 801861e:	60bb      	str	r3, [r7, #8]
 8018620:	e7fe      	b.n	8018620 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8018622:	f000 f87f 	bl	8018724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018626:	2100      	movs	r1, #0
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f000 fcd7 	bl	8018fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801862e:	f000 f887 	bl	8018740 <xTaskResumeAll>
 8018632:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d107      	bne.n	801864a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801863a:	4b07      	ldr	r3, [pc, #28]	; (8018658 <vTaskDelay+0x64>)
 801863c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018640:	601a      	str	r2, [r3, #0]
 8018642:	f3bf 8f4f 	dsb	sy
 8018646:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801864a:	bf00      	nop
 801864c:	3710      	adds	r7, #16
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	20006ca0 	.word	0x20006ca0
 8018658:	e000ed04 	.word	0xe000ed04

0801865c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b08a      	sub	sp, #40	; 0x28
 8018660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018662:	2300      	movs	r3, #0
 8018664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018666:	2300      	movs	r3, #0
 8018668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801866a:	463a      	mov	r2, r7
 801866c:	1d39      	adds	r1, r7, #4
 801866e:	f107 0308 	add.w	r3, r7, #8
 8018672:	4618      	mov	r0, r3
 8018674:	f7fe ffea 	bl	801764c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018678:	6839      	ldr	r1, [r7, #0]
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	68ba      	ldr	r2, [r7, #8]
 801867e:	9202      	str	r2, [sp, #8]
 8018680:	9301      	str	r3, [sp, #4]
 8018682:	2300      	movs	r3, #0
 8018684:	9300      	str	r3, [sp, #0]
 8018686:	2300      	movs	r3, #0
 8018688:	460a      	mov	r2, r1
 801868a:	4920      	ldr	r1, [pc, #128]	; (801870c <vTaskStartScheduler+0xb0>)
 801868c:	4820      	ldr	r0, [pc, #128]	; (8018710 <vTaskStartScheduler+0xb4>)
 801868e:	f7ff fd99 	bl	80181c4 <xTaskCreateStatic>
 8018692:	4602      	mov	r2, r0
 8018694:	4b1f      	ldr	r3, [pc, #124]	; (8018714 <vTaskStartScheduler+0xb8>)
 8018696:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018698:	4b1e      	ldr	r3, [pc, #120]	; (8018714 <vTaskStartScheduler+0xb8>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d002      	beq.n	80186a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80186a0:	2301      	movs	r3, #1
 80186a2:	617b      	str	r3, [r7, #20]
 80186a4:	e001      	b.n	80186aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80186a6:	2300      	movs	r3, #0
 80186a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	2b01      	cmp	r3, #1
 80186ae:	d102      	bne.n	80186b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80186b0:	f000 fce8 	bl	8019084 <xTimerCreateTimerTask>
 80186b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	2b01      	cmp	r3, #1
 80186ba:	d115      	bne.n	80186e8 <vTaskStartScheduler+0x8c>
 80186bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c0:	f383 8811 	msr	BASEPRI, r3
 80186c4:	f3bf 8f6f 	isb	sy
 80186c8:	f3bf 8f4f 	dsb	sy
 80186cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80186ce:	4b12      	ldr	r3, [pc, #72]	; (8018718 <vTaskStartScheduler+0xbc>)
 80186d0:	f04f 32ff 	mov.w	r2, #4294967295
 80186d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80186d6:	4b11      	ldr	r3, [pc, #68]	; (801871c <vTaskStartScheduler+0xc0>)
 80186d8:	2201      	movs	r2, #1
 80186da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80186dc:	4b10      	ldr	r3, [pc, #64]	; (8018720 <vTaskStartScheduler+0xc4>)
 80186de:	2200      	movs	r2, #0
 80186e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80186e2:	f001 f89d 	bl	8019820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80186e6:	e00d      	b.n	8018704 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80186e8:	697b      	ldr	r3, [r7, #20]
 80186ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186ee:	d109      	bne.n	8018704 <vTaskStartScheduler+0xa8>
 80186f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f4:	f383 8811 	msr	BASEPRI, r3
 80186f8:	f3bf 8f6f 	isb	sy
 80186fc:	f3bf 8f4f 	dsb	sy
 8018700:	60fb      	str	r3, [r7, #12]
 8018702:	e7fe      	b.n	8018702 <vTaskStartScheduler+0xa6>
}
 8018704:	bf00      	nop
 8018706:	3718      	adds	r7, #24
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	0801aaa4 	.word	0x0801aaa4
 8018710:	08018d25 	.word	0x08018d25
 8018714:	20006c9c 	.word	0x20006c9c
 8018718:	20006c98 	.word	0x20006c98
 801871c:	20006c84 	.word	0x20006c84
 8018720:	20006c7c 	.word	0x20006c7c

08018724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018724:	b480      	push	{r7}
 8018726:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018728:	4b04      	ldr	r3, [pc, #16]	; (801873c <vTaskSuspendAll+0x18>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	3301      	adds	r3, #1
 801872e:	4a03      	ldr	r2, [pc, #12]	; (801873c <vTaskSuspendAll+0x18>)
 8018730:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018732:	bf00      	nop
 8018734:	46bd      	mov	sp, r7
 8018736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801873a:	4770      	bx	lr
 801873c:	20006ca0 	.word	0x20006ca0

08018740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018746:	2300      	movs	r3, #0
 8018748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801874a:	2300      	movs	r3, #0
 801874c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801874e:	4b41      	ldr	r3, [pc, #260]	; (8018854 <xTaskResumeAll+0x114>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d109      	bne.n	801876a <xTaskResumeAll+0x2a>
 8018756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801875a:	f383 8811 	msr	BASEPRI, r3
 801875e:	f3bf 8f6f 	isb	sy
 8018762:	f3bf 8f4f 	dsb	sy
 8018766:	603b      	str	r3, [r7, #0]
 8018768:	e7fe      	b.n	8018768 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801876a:	f001 f8f7 	bl	801995c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801876e:	4b39      	ldr	r3, [pc, #228]	; (8018854 <xTaskResumeAll+0x114>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	3b01      	subs	r3, #1
 8018774:	4a37      	ldr	r2, [pc, #220]	; (8018854 <xTaskResumeAll+0x114>)
 8018776:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018778:	4b36      	ldr	r3, [pc, #216]	; (8018854 <xTaskResumeAll+0x114>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d162      	bne.n	8018846 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018780:	4b35      	ldr	r3, [pc, #212]	; (8018858 <xTaskResumeAll+0x118>)
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d05e      	beq.n	8018846 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018788:	e02f      	b.n	80187ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801878a:	4b34      	ldr	r3, [pc, #208]	; (801885c <xTaskResumeAll+0x11c>)
 801878c:	68db      	ldr	r3, [r3, #12]
 801878e:	68db      	ldr	r3, [r3, #12]
 8018790:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	3318      	adds	r3, #24
 8018796:	4618      	mov	r0, r3
 8018798:	f7ff f816 	bl	80177c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	3304      	adds	r3, #4
 80187a0:	4618      	mov	r0, r3
 80187a2:	f7ff f811 	bl	80177c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187aa:	4b2d      	ldr	r3, [pc, #180]	; (8018860 <xTaskResumeAll+0x120>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	d903      	bls.n	80187ba <xTaskResumeAll+0x7a>
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187b6:	4a2a      	ldr	r2, [pc, #168]	; (8018860 <xTaskResumeAll+0x120>)
 80187b8:	6013      	str	r3, [r2, #0]
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187be:	4613      	mov	r3, r2
 80187c0:	009b      	lsls	r3, r3, #2
 80187c2:	4413      	add	r3, r2
 80187c4:	009b      	lsls	r3, r3, #2
 80187c6:	4a27      	ldr	r2, [pc, #156]	; (8018864 <xTaskResumeAll+0x124>)
 80187c8:	441a      	add	r2, r3
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	3304      	adds	r3, #4
 80187ce:	4619      	mov	r1, r3
 80187d0:	4610      	mov	r0, r2
 80187d2:	f7fe ff9c 	bl	801770e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187da:	4b23      	ldr	r3, [pc, #140]	; (8018868 <xTaskResumeAll+0x128>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187e0:	429a      	cmp	r2, r3
 80187e2:	d302      	bcc.n	80187ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80187e4:	4b21      	ldr	r3, [pc, #132]	; (801886c <xTaskResumeAll+0x12c>)
 80187e6:	2201      	movs	r2, #1
 80187e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80187ea:	4b1c      	ldr	r3, [pc, #112]	; (801885c <xTaskResumeAll+0x11c>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d1cb      	bne.n	801878a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d001      	beq.n	80187fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80187f8:	f000 fb46 	bl	8018e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80187fc:	4b1c      	ldr	r3, [pc, #112]	; (8018870 <xTaskResumeAll+0x130>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d010      	beq.n	801882a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018808:	f000 f846 	bl	8018898 <xTaskIncrementTick>
 801880c:	4603      	mov	r3, r0
 801880e:	2b00      	cmp	r3, #0
 8018810:	d002      	beq.n	8018818 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8018812:	4b16      	ldr	r3, [pc, #88]	; (801886c <xTaskResumeAll+0x12c>)
 8018814:	2201      	movs	r2, #1
 8018816:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	3b01      	subs	r3, #1
 801881c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d1f1      	bne.n	8018808 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8018824:	4b12      	ldr	r3, [pc, #72]	; (8018870 <xTaskResumeAll+0x130>)
 8018826:	2200      	movs	r2, #0
 8018828:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801882a:	4b10      	ldr	r3, [pc, #64]	; (801886c <xTaskResumeAll+0x12c>)
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d009      	beq.n	8018846 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018832:	2301      	movs	r3, #1
 8018834:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018836:	4b0f      	ldr	r3, [pc, #60]	; (8018874 <xTaskResumeAll+0x134>)
 8018838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801883c:	601a      	str	r2, [r3, #0]
 801883e:	f3bf 8f4f 	dsb	sy
 8018842:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018846:	f001 f8b7 	bl	80199b8 <vPortExitCritical>

	return xAlreadyYielded;
 801884a:	68bb      	ldr	r3, [r7, #8]
}
 801884c:	4618      	mov	r0, r3
 801884e:	3710      	adds	r7, #16
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}
 8018854:	20006ca0 	.word	0x20006ca0
 8018858:	20006c78 	.word	0x20006c78
 801885c:	20006c38 	.word	0x20006c38
 8018860:	20006c80 	.word	0x20006c80
 8018864:	200067a8 	.word	0x200067a8
 8018868:	200067a4 	.word	0x200067a4
 801886c:	20006c8c 	.word	0x20006c8c
 8018870:	20006c88 	.word	0x20006c88
 8018874:	e000ed04 	.word	0xe000ed04

08018878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018878:	b480      	push	{r7}
 801887a:	b083      	sub	sp, #12
 801887c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801887e:	4b05      	ldr	r3, [pc, #20]	; (8018894 <xTaskGetTickCount+0x1c>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018884:	687b      	ldr	r3, [r7, #4]
}
 8018886:	4618      	mov	r0, r3
 8018888:	370c      	adds	r7, #12
 801888a:	46bd      	mov	sp, r7
 801888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018890:	4770      	bx	lr
 8018892:	bf00      	nop
 8018894:	20006c7c 	.word	0x20006c7c

08018898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b086      	sub	sp, #24
 801889c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801889e:	2300      	movs	r3, #0
 80188a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80188a2:	4b4e      	ldr	r3, [pc, #312]	; (80189dc <xTaskIncrementTick+0x144>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	f040 8088 	bne.w	80189bc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80188ac:	4b4c      	ldr	r3, [pc, #304]	; (80189e0 <xTaskIncrementTick+0x148>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	3301      	adds	r3, #1
 80188b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80188b4:	4a4a      	ldr	r2, [pc, #296]	; (80189e0 <xTaskIncrementTick+0x148>)
 80188b6:	693b      	ldr	r3, [r7, #16]
 80188b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d11f      	bne.n	8018900 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80188c0:	4b48      	ldr	r3, [pc, #288]	; (80189e4 <xTaskIncrementTick+0x14c>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d009      	beq.n	80188de <xTaskIncrementTick+0x46>
 80188ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ce:	f383 8811 	msr	BASEPRI, r3
 80188d2:	f3bf 8f6f 	isb	sy
 80188d6:	f3bf 8f4f 	dsb	sy
 80188da:	603b      	str	r3, [r7, #0]
 80188dc:	e7fe      	b.n	80188dc <xTaskIncrementTick+0x44>
 80188de:	4b41      	ldr	r3, [pc, #260]	; (80189e4 <xTaskIncrementTick+0x14c>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	60fb      	str	r3, [r7, #12]
 80188e4:	4b40      	ldr	r3, [pc, #256]	; (80189e8 <xTaskIncrementTick+0x150>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	4a3e      	ldr	r2, [pc, #248]	; (80189e4 <xTaskIncrementTick+0x14c>)
 80188ea:	6013      	str	r3, [r2, #0]
 80188ec:	4a3e      	ldr	r2, [pc, #248]	; (80189e8 <xTaskIncrementTick+0x150>)
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	6013      	str	r3, [r2, #0]
 80188f2:	4b3e      	ldr	r3, [pc, #248]	; (80189ec <xTaskIncrementTick+0x154>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	3301      	adds	r3, #1
 80188f8:	4a3c      	ldr	r2, [pc, #240]	; (80189ec <xTaskIncrementTick+0x154>)
 80188fa:	6013      	str	r3, [r2, #0]
 80188fc:	f000 fac4 	bl	8018e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018900:	4b3b      	ldr	r3, [pc, #236]	; (80189f0 <xTaskIncrementTick+0x158>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	693a      	ldr	r2, [r7, #16]
 8018906:	429a      	cmp	r2, r3
 8018908:	d349      	bcc.n	801899e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801890a:	4b36      	ldr	r3, [pc, #216]	; (80189e4 <xTaskIncrementTick+0x14c>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d104      	bne.n	801891e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018914:	4b36      	ldr	r3, [pc, #216]	; (80189f0 <xTaskIncrementTick+0x158>)
 8018916:	f04f 32ff 	mov.w	r2, #4294967295
 801891a:	601a      	str	r2, [r3, #0]
					break;
 801891c:	e03f      	b.n	801899e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801891e:	4b31      	ldr	r3, [pc, #196]	; (80189e4 <xTaskIncrementTick+0x14c>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	68db      	ldr	r3, [r3, #12]
 8018924:	68db      	ldr	r3, [r3, #12]
 8018926:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	685b      	ldr	r3, [r3, #4]
 801892c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801892e:	693a      	ldr	r2, [r7, #16]
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	429a      	cmp	r2, r3
 8018934:	d203      	bcs.n	801893e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018936:	4a2e      	ldr	r2, [pc, #184]	; (80189f0 <xTaskIncrementTick+0x158>)
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801893c:	e02f      	b.n	801899e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801893e:	68bb      	ldr	r3, [r7, #8]
 8018940:	3304      	adds	r3, #4
 8018942:	4618      	mov	r0, r3
 8018944:	f7fe ff40 	bl	80177c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018948:	68bb      	ldr	r3, [r7, #8]
 801894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801894c:	2b00      	cmp	r3, #0
 801894e:	d004      	beq.n	801895a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	3318      	adds	r3, #24
 8018954:	4618      	mov	r0, r3
 8018956:	f7fe ff37 	bl	80177c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801895e:	4b25      	ldr	r3, [pc, #148]	; (80189f4 <xTaskIncrementTick+0x15c>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	429a      	cmp	r2, r3
 8018964:	d903      	bls.n	801896e <xTaskIncrementTick+0xd6>
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801896a:	4a22      	ldr	r2, [pc, #136]	; (80189f4 <xTaskIncrementTick+0x15c>)
 801896c:	6013      	str	r3, [r2, #0]
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018972:	4613      	mov	r3, r2
 8018974:	009b      	lsls	r3, r3, #2
 8018976:	4413      	add	r3, r2
 8018978:	009b      	lsls	r3, r3, #2
 801897a:	4a1f      	ldr	r2, [pc, #124]	; (80189f8 <xTaskIncrementTick+0x160>)
 801897c:	441a      	add	r2, r3
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	3304      	adds	r3, #4
 8018982:	4619      	mov	r1, r3
 8018984:	4610      	mov	r0, r2
 8018986:	f7fe fec2 	bl	801770e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801898a:	68bb      	ldr	r3, [r7, #8]
 801898c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801898e:	4b1b      	ldr	r3, [pc, #108]	; (80189fc <xTaskIncrementTick+0x164>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018994:	429a      	cmp	r2, r3
 8018996:	d3b8      	bcc.n	801890a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8018998:	2301      	movs	r3, #1
 801899a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801899c:	e7b5      	b.n	801890a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801899e:	4b17      	ldr	r3, [pc, #92]	; (80189fc <xTaskIncrementTick+0x164>)
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189a4:	4914      	ldr	r1, [pc, #80]	; (80189f8 <xTaskIncrementTick+0x160>)
 80189a6:	4613      	mov	r3, r2
 80189a8:	009b      	lsls	r3, r3, #2
 80189aa:	4413      	add	r3, r2
 80189ac:	009b      	lsls	r3, r3, #2
 80189ae:	440b      	add	r3, r1
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2b01      	cmp	r3, #1
 80189b4:	d907      	bls.n	80189c6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80189b6:	2301      	movs	r3, #1
 80189b8:	617b      	str	r3, [r7, #20]
 80189ba:	e004      	b.n	80189c6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80189bc:	4b10      	ldr	r3, [pc, #64]	; (8018a00 <xTaskIncrementTick+0x168>)
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	3301      	adds	r3, #1
 80189c2:	4a0f      	ldr	r2, [pc, #60]	; (8018a00 <xTaskIncrementTick+0x168>)
 80189c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80189c6:	4b0f      	ldr	r3, [pc, #60]	; (8018a04 <xTaskIncrementTick+0x16c>)
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d001      	beq.n	80189d2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80189ce:	2301      	movs	r3, #1
 80189d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80189d2:	697b      	ldr	r3, [r7, #20]
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3718      	adds	r7, #24
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}
 80189dc:	20006ca0 	.word	0x20006ca0
 80189e0:	20006c7c 	.word	0x20006c7c
 80189e4:	20006c30 	.word	0x20006c30
 80189e8:	20006c34 	.word	0x20006c34
 80189ec:	20006c90 	.word	0x20006c90
 80189f0:	20006c98 	.word	0x20006c98
 80189f4:	20006c80 	.word	0x20006c80
 80189f8:	200067a8 	.word	0x200067a8
 80189fc:	200067a4 	.word	0x200067a4
 8018a00:	20006c88 	.word	0x20006c88
 8018a04:	20006c8c 	.word	0x20006c8c

08018a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018a08:	b480      	push	{r7}
 8018a0a:	b085      	sub	sp, #20
 8018a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018a0e:	4b27      	ldr	r3, [pc, #156]	; (8018aac <vTaskSwitchContext+0xa4>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d003      	beq.n	8018a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018a16:	4b26      	ldr	r3, [pc, #152]	; (8018ab0 <vTaskSwitchContext+0xa8>)
 8018a18:	2201      	movs	r2, #1
 8018a1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018a1c:	e040      	b.n	8018aa0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8018a1e:	4b24      	ldr	r3, [pc, #144]	; (8018ab0 <vTaskSwitchContext+0xa8>)
 8018a20:	2200      	movs	r2, #0
 8018a22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a24:	4b23      	ldr	r3, [pc, #140]	; (8018ab4 <vTaskSwitchContext+0xac>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	60fb      	str	r3, [r7, #12]
 8018a2a:	e00f      	b.n	8018a4c <vTaskSwitchContext+0x44>
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d109      	bne.n	8018a46 <vTaskSwitchContext+0x3e>
 8018a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a36:	f383 8811 	msr	BASEPRI, r3
 8018a3a:	f3bf 8f6f 	isb	sy
 8018a3e:	f3bf 8f4f 	dsb	sy
 8018a42:	607b      	str	r3, [r7, #4]
 8018a44:	e7fe      	b.n	8018a44 <vTaskSwitchContext+0x3c>
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	3b01      	subs	r3, #1
 8018a4a:	60fb      	str	r3, [r7, #12]
 8018a4c:	491a      	ldr	r1, [pc, #104]	; (8018ab8 <vTaskSwitchContext+0xb0>)
 8018a4e:	68fa      	ldr	r2, [r7, #12]
 8018a50:	4613      	mov	r3, r2
 8018a52:	009b      	lsls	r3, r3, #2
 8018a54:	4413      	add	r3, r2
 8018a56:	009b      	lsls	r3, r3, #2
 8018a58:	440b      	add	r3, r1
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d0e5      	beq.n	8018a2c <vTaskSwitchContext+0x24>
 8018a60:	68fa      	ldr	r2, [r7, #12]
 8018a62:	4613      	mov	r3, r2
 8018a64:	009b      	lsls	r3, r3, #2
 8018a66:	4413      	add	r3, r2
 8018a68:	009b      	lsls	r3, r3, #2
 8018a6a:	4a13      	ldr	r2, [pc, #76]	; (8018ab8 <vTaskSwitchContext+0xb0>)
 8018a6c:	4413      	add	r3, r2
 8018a6e:	60bb      	str	r3, [r7, #8]
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	685b      	ldr	r3, [r3, #4]
 8018a74:	685a      	ldr	r2, [r3, #4]
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	605a      	str	r2, [r3, #4]
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	685a      	ldr	r2, [r3, #4]
 8018a7e:	68bb      	ldr	r3, [r7, #8]
 8018a80:	3308      	adds	r3, #8
 8018a82:	429a      	cmp	r2, r3
 8018a84:	d104      	bne.n	8018a90 <vTaskSwitchContext+0x88>
 8018a86:	68bb      	ldr	r3, [r7, #8]
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	685a      	ldr	r2, [r3, #4]
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	605a      	str	r2, [r3, #4]
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	4a09      	ldr	r2, [pc, #36]	; (8018abc <vTaskSwitchContext+0xb4>)
 8018a98:	6013      	str	r3, [r2, #0]
 8018a9a:	4a06      	ldr	r2, [pc, #24]	; (8018ab4 <vTaskSwitchContext+0xac>)
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	6013      	str	r3, [r2, #0]
}
 8018aa0:	bf00      	nop
 8018aa2:	3714      	adds	r7, #20
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aaa:	4770      	bx	lr
 8018aac:	20006ca0 	.word	0x20006ca0
 8018ab0:	20006c8c 	.word	0x20006c8c
 8018ab4:	20006c80 	.word	0x20006c80
 8018ab8:	200067a8 	.word	0x200067a8
 8018abc:	200067a4 	.word	0x200067a4

08018ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b084      	sub	sp, #16
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d109      	bne.n	8018ae4 <vTaskPlaceOnEventList+0x24>
 8018ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad4:	f383 8811 	msr	BASEPRI, r3
 8018ad8:	f3bf 8f6f 	isb	sy
 8018adc:	f3bf 8f4f 	dsb	sy
 8018ae0:	60fb      	str	r3, [r7, #12]
 8018ae2:	e7fe      	b.n	8018ae2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018ae4:	4b07      	ldr	r3, [pc, #28]	; (8018b04 <vTaskPlaceOnEventList+0x44>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	3318      	adds	r3, #24
 8018aea:	4619      	mov	r1, r3
 8018aec:	6878      	ldr	r0, [r7, #4]
 8018aee:	f7fe fe32 	bl	8017756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018af2:	2101      	movs	r1, #1
 8018af4:	6838      	ldr	r0, [r7, #0]
 8018af6:	f000 fa71 	bl	8018fdc <prvAddCurrentTaskToDelayedList>
}
 8018afa:	bf00      	nop
 8018afc:	3710      	adds	r7, #16
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}
 8018b02:	bf00      	nop
 8018b04:	200067a4 	.word	0x200067a4

08018b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b086      	sub	sp, #24
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	60f8      	str	r0, [r7, #12]
 8018b10:	60b9      	str	r1, [r7, #8]
 8018b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d109      	bne.n	8018b2e <vTaskPlaceOnEventListRestricted+0x26>
 8018b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1e:	f383 8811 	msr	BASEPRI, r3
 8018b22:	f3bf 8f6f 	isb	sy
 8018b26:	f3bf 8f4f 	dsb	sy
 8018b2a:	617b      	str	r3, [r7, #20]
 8018b2c:	e7fe      	b.n	8018b2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018b2e:	4b0a      	ldr	r3, [pc, #40]	; (8018b58 <vTaskPlaceOnEventListRestricted+0x50>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	3318      	adds	r3, #24
 8018b34:	4619      	mov	r1, r3
 8018b36:	68f8      	ldr	r0, [r7, #12]
 8018b38:	f7fe fde9 	bl	801770e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d002      	beq.n	8018b48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8018b42:	f04f 33ff 	mov.w	r3, #4294967295
 8018b46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018b48:	6879      	ldr	r1, [r7, #4]
 8018b4a:	68b8      	ldr	r0, [r7, #8]
 8018b4c:	f000 fa46 	bl	8018fdc <prvAddCurrentTaskToDelayedList>
	}
 8018b50:	bf00      	nop
 8018b52:	3718      	adds	r7, #24
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	200067a4 	.word	0x200067a4

08018b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b086      	sub	sp, #24
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	68db      	ldr	r3, [r3, #12]
 8018b68:	68db      	ldr	r3, [r3, #12]
 8018b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018b6c:	693b      	ldr	r3, [r7, #16]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d109      	bne.n	8018b86 <xTaskRemoveFromEventList+0x2a>
 8018b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b76:	f383 8811 	msr	BASEPRI, r3
 8018b7a:	f3bf 8f6f 	isb	sy
 8018b7e:	f3bf 8f4f 	dsb	sy
 8018b82:	60fb      	str	r3, [r7, #12]
 8018b84:	e7fe      	b.n	8018b84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	3318      	adds	r3, #24
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7fe fe1c 	bl	80177c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b90:	4b1d      	ldr	r3, [pc, #116]	; (8018c08 <xTaskRemoveFromEventList+0xac>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d11d      	bne.n	8018bd4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018b98:	693b      	ldr	r3, [r7, #16]
 8018b9a:	3304      	adds	r3, #4
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7fe fe13 	bl	80177c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018ba2:	693b      	ldr	r3, [r7, #16]
 8018ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ba6:	4b19      	ldr	r3, [pc, #100]	; (8018c0c <xTaskRemoveFromEventList+0xb0>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	429a      	cmp	r2, r3
 8018bac:	d903      	bls.n	8018bb6 <xTaskRemoveFromEventList+0x5a>
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb2:	4a16      	ldr	r2, [pc, #88]	; (8018c0c <xTaskRemoveFromEventList+0xb0>)
 8018bb4:	6013      	str	r3, [r2, #0]
 8018bb6:	693b      	ldr	r3, [r7, #16]
 8018bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bba:	4613      	mov	r3, r2
 8018bbc:	009b      	lsls	r3, r3, #2
 8018bbe:	4413      	add	r3, r2
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	4a13      	ldr	r2, [pc, #76]	; (8018c10 <xTaskRemoveFromEventList+0xb4>)
 8018bc4:	441a      	add	r2, r3
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	3304      	adds	r3, #4
 8018bca:	4619      	mov	r1, r3
 8018bcc:	4610      	mov	r0, r2
 8018bce:	f7fe fd9e 	bl	801770e <vListInsertEnd>
 8018bd2:	e005      	b.n	8018be0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018bd4:	693b      	ldr	r3, [r7, #16]
 8018bd6:	3318      	adds	r3, #24
 8018bd8:	4619      	mov	r1, r3
 8018bda:	480e      	ldr	r0, [pc, #56]	; (8018c14 <xTaskRemoveFromEventList+0xb8>)
 8018bdc:	f7fe fd97 	bl	801770e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018be0:	693b      	ldr	r3, [r7, #16]
 8018be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018be4:	4b0c      	ldr	r3, [pc, #48]	; (8018c18 <xTaskRemoveFromEventList+0xbc>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d905      	bls.n	8018bfa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018bee:	2301      	movs	r3, #1
 8018bf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018bf2:	4b0a      	ldr	r3, [pc, #40]	; (8018c1c <xTaskRemoveFromEventList+0xc0>)
 8018bf4:	2201      	movs	r2, #1
 8018bf6:	601a      	str	r2, [r3, #0]
 8018bf8:	e001      	b.n	8018bfe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018bfe:	697b      	ldr	r3, [r7, #20]
}
 8018c00:	4618      	mov	r0, r3
 8018c02:	3718      	adds	r7, #24
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}
 8018c08:	20006ca0 	.word	0x20006ca0
 8018c0c:	20006c80 	.word	0x20006c80
 8018c10:	200067a8 	.word	0x200067a8
 8018c14:	20006c38 	.word	0x20006c38
 8018c18:	200067a4 	.word	0x200067a4
 8018c1c:	20006c8c 	.word	0x20006c8c

08018c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018c28:	4b06      	ldr	r3, [pc, #24]	; (8018c44 <vTaskInternalSetTimeOutState+0x24>)
 8018c2a:	681a      	ldr	r2, [r3, #0]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018c30:	4b05      	ldr	r3, [pc, #20]	; (8018c48 <vTaskInternalSetTimeOutState+0x28>)
 8018c32:	681a      	ldr	r2, [r3, #0]
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	605a      	str	r2, [r3, #4]
}
 8018c38:	bf00      	nop
 8018c3a:	370c      	adds	r7, #12
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c42:	4770      	bx	lr
 8018c44:	20006c90 	.word	0x20006c90
 8018c48:	20006c7c 	.word	0x20006c7c

08018c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b088      	sub	sp, #32
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
 8018c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d109      	bne.n	8018c70 <xTaskCheckForTimeOut+0x24>
 8018c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c60:	f383 8811 	msr	BASEPRI, r3
 8018c64:	f3bf 8f6f 	isb	sy
 8018c68:	f3bf 8f4f 	dsb	sy
 8018c6c:	613b      	str	r3, [r7, #16]
 8018c6e:	e7fe      	b.n	8018c6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8018c70:	683b      	ldr	r3, [r7, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d109      	bne.n	8018c8a <xTaskCheckForTimeOut+0x3e>
 8018c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c7a:	f383 8811 	msr	BASEPRI, r3
 8018c7e:	f3bf 8f6f 	isb	sy
 8018c82:	f3bf 8f4f 	dsb	sy
 8018c86:	60fb      	str	r3, [r7, #12]
 8018c88:	e7fe      	b.n	8018c88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8018c8a:	f000 fe67 	bl	801995c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018c8e:	4b1d      	ldr	r3, [pc, #116]	; (8018d04 <xTaskCheckForTimeOut+0xb8>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	685b      	ldr	r3, [r3, #4]
 8018c98:	69ba      	ldr	r2, [r7, #24]
 8018c9a:	1ad3      	subs	r3, r2, r3
 8018c9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018c9e:	683b      	ldr	r3, [r7, #0]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ca6:	d102      	bne.n	8018cae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018ca8:	2300      	movs	r3, #0
 8018caa:	61fb      	str	r3, [r7, #28]
 8018cac:	e023      	b.n	8018cf6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681a      	ldr	r2, [r3, #0]
 8018cb2:	4b15      	ldr	r3, [pc, #84]	; (8018d08 <xTaskCheckForTimeOut+0xbc>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	429a      	cmp	r2, r3
 8018cb8:	d007      	beq.n	8018cca <xTaskCheckForTimeOut+0x7e>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	69ba      	ldr	r2, [r7, #24]
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	d302      	bcc.n	8018cca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018cc4:	2301      	movs	r3, #1
 8018cc6:	61fb      	str	r3, [r7, #28]
 8018cc8:	e015      	b.n	8018cf6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	697a      	ldr	r2, [r7, #20]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d20b      	bcs.n	8018cec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018cd4:	683b      	ldr	r3, [r7, #0]
 8018cd6:	681a      	ldr	r2, [r3, #0]
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	1ad2      	subs	r2, r2, r3
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	f7ff ff9d 	bl	8018c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	61fb      	str	r3, [r7, #28]
 8018cea:	e004      	b.n	8018cf6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	2200      	movs	r2, #0
 8018cf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018cf6:	f000 fe5f 	bl	80199b8 <vPortExitCritical>

	return xReturn;
 8018cfa:	69fb      	ldr	r3, [r7, #28]
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3720      	adds	r7, #32
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	20006c7c 	.word	0x20006c7c
 8018d08:	20006c90 	.word	0x20006c90

08018d0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018d0c:	b480      	push	{r7}
 8018d0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018d10:	4b03      	ldr	r3, [pc, #12]	; (8018d20 <vTaskMissedYield+0x14>)
 8018d12:	2201      	movs	r2, #1
 8018d14:	601a      	str	r2, [r3, #0]
}
 8018d16:	bf00      	nop
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr
 8018d20:	20006c8c 	.word	0x20006c8c

08018d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018d2c:	f000 f852 	bl	8018dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018d30:	4b06      	ldr	r3, [pc, #24]	; (8018d4c <prvIdleTask+0x28>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b01      	cmp	r3, #1
 8018d36:	d9f9      	bls.n	8018d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018d38:	4b05      	ldr	r3, [pc, #20]	; (8018d50 <prvIdleTask+0x2c>)
 8018d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d3e:	601a      	str	r2, [r3, #0]
 8018d40:	f3bf 8f4f 	dsb	sy
 8018d44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018d48:	e7f0      	b.n	8018d2c <prvIdleTask+0x8>
 8018d4a:	bf00      	nop
 8018d4c:	200067a8 	.word	0x200067a8
 8018d50:	e000ed04 	.word	0xe000ed04

08018d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	607b      	str	r3, [r7, #4]
 8018d5e:	e00c      	b.n	8018d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	4613      	mov	r3, r2
 8018d64:	009b      	lsls	r3, r3, #2
 8018d66:	4413      	add	r3, r2
 8018d68:	009b      	lsls	r3, r3, #2
 8018d6a:	4a12      	ldr	r2, [pc, #72]	; (8018db4 <prvInitialiseTaskLists+0x60>)
 8018d6c:	4413      	add	r3, r2
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7fe fca0 	bl	80176b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	3301      	adds	r3, #1
 8018d78:	607b      	str	r3, [r7, #4]
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2b37      	cmp	r3, #55	; 0x37
 8018d7e:	d9ef      	bls.n	8018d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018d80:	480d      	ldr	r0, [pc, #52]	; (8018db8 <prvInitialiseTaskLists+0x64>)
 8018d82:	f7fe fc97 	bl	80176b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018d86:	480d      	ldr	r0, [pc, #52]	; (8018dbc <prvInitialiseTaskLists+0x68>)
 8018d88:	f7fe fc94 	bl	80176b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018d8c:	480c      	ldr	r0, [pc, #48]	; (8018dc0 <prvInitialiseTaskLists+0x6c>)
 8018d8e:	f7fe fc91 	bl	80176b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018d92:	480c      	ldr	r0, [pc, #48]	; (8018dc4 <prvInitialiseTaskLists+0x70>)
 8018d94:	f7fe fc8e 	bl	80176b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018d98:	480b      	ldr	r0, [pc, #44]	; (8018dc8 <prvInitialiseTaskLists+0x74>)
 8018d9a:	f7fe fc8b 	bl	80176b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018d9e:	4b0b      	ldr	r3, [pc, #44]	; (8018dcc <prvInitialiseTaskLists+0x78>)
 8018da0:	4a05      	ldr	r2, [pc, #20]	; (8018db8 <prvInitialiseTaskLists+0x64>)
 8018da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018da4:	4b0a      	ldr	r3, [pc, #40]	; (8018dd0 <prvInitialiseTaskLists+0x7c>)
 8018da6:	4a05      	ldr	r2, [pc, #20]	; (8018dbc <prvInitialiseTaskLists+0x68>)
 8018da8:	601a      	str	r2, [r3, #0]
}
 8018daa:	bf00      	nop
 8018dac:	3708      	adds	r7, #8
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	200067a8 	.word	0x200067a8
 8018db8:	20006c08 	.word	0x20006c08
 8018dbc:	20006c1c 	.word	0x20006c1c
 8018dc0:	20006c38 	.word	0x20006c38
 8018dc4:	20006c4c 	.word	0x20006c4c
 8018dc8:	20006c64 	.word	0x20006c64
 8018dcc:	20006c30 	.word	0x20006c30
 8018dd0:	20006c34 	.word	0x20006c34

08018dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018dda:	e019      	b.n	8018e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018ddc:	f000 fdbe 	bl	801995c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018de0:	4b0f      	ldr	r3, [pc, #60]	; (8018e20 <prvCheckTasksWaitingTermination+0x4c>)
 8018de2:	68db      	ldr	r3, [r3, #12]
 8018de4:	68db      	ldr	r3, [r3, #12]
 8018de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	3304      	adds	r3, #4
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7fe fceb 	bl	80177c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018df2:	4b0c      	ldr	r3, [pc, #48]	; (8018e24 <prvCheckTasksWaitingTermination+0x50>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	3b01      	subs	r3, #1
 8018df8:	4a0a      	ldr	r2, [pc, #40]	; (8018e24 <prvCheckTasksWaitingTermination+0x50>)
 8018dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018dfc:	4b0a      	ldr	r3, [pc, #40]	; (8018e28 <prvCheckTasksWaitingTermination+0x54>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	3b01      	subs	r3, #1
 8018e02:	4a09      	ldr	r2, [pc, #36]	; (8018e28 <prvCheckTasksWaitingTermination+0x54>)
 8018e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018e06:	f000 fdd7 	bl	80199b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018e0a:	6878      	ldr	r0, [r7, #4]
 8018e0c:	f000 f80e 	bl	8018e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018e10:	4b05      	ldr	r3, [pc, #20]	; (8018e28 <prvCheckTasksWaitingTermination+0x54>)
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d1e1      	bne.n	8018ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018e18:	bf00      	nop
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	20006c4c 	.word	0x20006c4c
 8018e24:	20006c78 	.word	0x20006c78
 8018e28:	20006c60 	.word	0x20006c60

08018e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b084      	sub	sp, #16
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d108      	bne.n	8018e50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e42:	4618      	mov	r0, r3
 8018e44:	f000 ff66 	bl	8019d14 <vPortFree>
				vPortFree( pxTCB );
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f000 ff63 	bl	8019d14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018e4e:	e017      	b.n	8018e80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d103      	bne.n	8018e62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f000 ff5a 	bl	8019d14 <vPortFree>
	}
 8018e60:	e00e      	b.n	8018e80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e68:	2b02      	cmp	r3, #2
 8018e6a:	d009      	beq.n	8018e80 <prvDeleteTCB+0x54>
 8018e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e70:	f383 8811 	msr	BASEPRI, r3
 8018e74:	f3bf 8f6f 	isb	sy
 8018e78:	f3bf 8f4f 	dsb	sy
 8018e7c:	60fb      	str	r3, [r7, #12]
 8018e7e:	e7fe      	b.n	8018e7e <prvDeleteTCB+0x52>
	}
 8018e80:	bf00      	nop
 8018e82:	3710      	adds	r7, #16
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}

08018e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018e88:	b480      	push	{r7}
 8018e8a:	b083      	sub	sp, #12
 8018e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e8e:	4b0c      	ldr	r3, [pc, #48]	; (8018ec0 <prvResetNextTaskUnblockTime+0x38>)
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d104      	bne.n	8018ea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018e98:	4b0a      	ldr	r3, [pc, #40]	; (8018ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8018e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8018e9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018ea0:	e008      	b.n	8018eb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ea2:	4b07      	ldr	r3, [pc, #28]	; (8018ec0 <prvResetNextTaskUnblockTime+0x38>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	68db      	ldr	r3, [r3, #12]
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	4a04      	ldr	r2, [pc, #16]	; (8018ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8018eb2:	6013      	str	r3, [r2, #0]
}
 8018eb4:	bf00      	nop
 8018eb6:	370c      	adds	r7, #12
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ebe:	4770      	bx	lr
 8018ec0:	20006c30 	.word	0x20006c30
 8018ec4:	20006c98 	.word	0x20006c98

08018ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018ec8:	b480      	push	{r7}
 8018eca:	b083      	sub	sp, #12
 8018ecc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018ece:	4b0b      	ldr	r3, [pc, #44]	; (8018efc <xTaskGetSchedulerState+0x34>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d102      	bne.n	8018edc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018ed6:	2301      	movs	r3, #1
 8018ed8:	607b      	str	r3, [r7, #4]
 8018eda:	e008      	b.n	8018eee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018edc:	4b08      	ldr	r3, [pc, #32]	; (8018f00 <xTaskGetSchedulerState+0x38>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d102      	bne.n	8018eea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018ee4:	2302      	movs	r3, #2
 8018ee6:	607b      	str	r3, [r7, #4]
 8018ee8:	e001      	b.n	8018eee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018eea:	2300      	movs	r3, #0
 8018eec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018eee:	687b      	ldr	r3, [r7, #4]
	}
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	370c      	adds	r7, #12
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efa:	4770      	bx	lr
 8018efc:	20006c84 	.word	0x20006c84
 8018f00:	20006ca0 	.word	0x20006ca0

08018f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b086      	sub	sp, #24
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018f10:	2300      	movs	r3, #0
 8018f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d054      	beq.n	8018fc4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018f1a:	4b2d      	ldr	r3, [pc, #180]	; (8018fd0 <xTaskPriorityDisinherit+0xcc>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	693a      	ldr	r2, [r7, #16]
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d009      	beq.n	8018f38 <xTaskPriorityDisinherit+0x34>
 8018f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f28:	f383 8811 	msr	BASEPRI, r3
 8018f2c:	f3bf 8f6f 	isb	sy
 8018f30:	f3bf 8f4f 	dsb	sy
 8018f34:	60fb      	str	r3, [r7, #12]
 8018f36:	e7fe      	b.n	8018f36 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8018f38:	693b      	ldr	r3, [r7, #16]
 8018f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d109      	bne.n	8018f54 <xTaskPriorityDisinherit+0x50>
 8018f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f44:	f383 8811 	msr	BASEPRI, r3
 8018f48:	f3bf 8f6f 	isb	sy
 8018f4c:	f3bf 8f4f 	dsb	sy
 8018f50:	60bb      	str	r3, [r7, #8]
 8018f52:	e7fe      	b.n	8018f52 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f58:	1e5a      	subs	r2, r3, #1
 8018f5a:	693b      	ldr	r3, [r7, #16]
 8018f5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018f5e:	693b      	ldr	r3, [r7, #16]
 8018f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f62:	693b      	ldr	r3, [r7, #16]
 8018f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d02c      	beq.n	8018fc4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d128      	bne.n	8018fc4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	3304      	adds	r3, #4
 8018f76:	4618      	mov	r0, r3
 8018f78:	f7fe fc26 	bl	80177c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018f80:	693b      	ldr	r3, [r7, #16]
 8018f82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f84:	693b      	ldr	r3, [r7, #16]
 8018f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f94:	4b0f      	ldr	r3, [pc, #60]	; (8018fd4 <xTaskPriorityDisinherit+0xd0>)
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	429a      	cmp	r2, r3
 8018f9a:	d903      	bls.n	8018fa4 <xTaskPriorityDisinherit+0xa0>
 8018f9c:	693b      	ldr	r3, [r7, #16]
 8018f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fa0:	4a0c      	ldr	r2, [pc, #48]	; (8018fd4 <xTaskPriorityDisinherit+0xd0>)
 8018fa2:	6013      	str	r3, [r2, #0]
 8018fa4:	693b      	ldr	r3, [r7, #16]
 8018fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fa8:	4613      	mov	r3, r2
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	4413      	add	r3, r2
 8018fae:	009b      	lsls	r3, r3, #2
 8018fb0:	4a09      	ldr	r2, [pc, #36]	; (8018fd8 <xTaskPriorityDisinherit+0xd4>)
 8018fb2:	441a      	add	r2, r3
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	3304      	adds	r3, #4
 8018fb8:	4619      	mov	r1, r3
 8018fba:	4610      	mov	r0, r2
 8018fbc:	f7fe fba7 	bl	801770e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018fc0:	2301      	movs	r3, #1
 8018fc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018fc4:	697b      	ldr	r3, [r7, #20]
	}
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	3718      	adds	r7, #24
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}
 8018fce:	bf00      	nop
 8018fd0:	200067a4 	.word	0x200067a4
 8018fd4:	20006c80 	.word	0x20006c80
 8018fd8:	200067a8 	.word	0x200067a8

08018fdc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b084      	sub	sp, #16
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
 8018fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018fe6:	4b21      	ldr	r3, [pc, #132]	; (801906c <prvAddCurrentTaskToDelayedList+0x90>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018fec:	4b20      	ldr	r3, [pc, #128]	; (8019070 <prvAddCurrentTaskToDelayedList+0x94>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	3304      	adds	r3, #4
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7fe fbe8 	bl	80177c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ffe:	d10a      	bne.n	8019016 <prvAddCurrentTaskToDelayedList+0x3a>
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d007      	beq.n	8019016 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019006:	4b1a      	ldr	r3, [pc, #104]	; (8019070 <prvAddCurrentTaskToDelayedList+0x94>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	3304      	adds	r3, #4
 801900c:	4619      	mov	r1, r3
 801900e:	4819      	ldr	r0, [pc, #100]	; (8019074 <prvAddCurrentTaskToDelayedList+0x98>)
 8019010:	f7fe fb7d 	bl	801770e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019014:	e026      	b.n	8019064 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019016:	68fa      	ldr	r2, [r7, #12]
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	4413      	add	r3, r2
 801901c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801901e:	4b14      	ldr	r3, [pc, #80]	; (8019070 <prvAddCurrentTaskToDelayedList+0x94>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	68ba      	ldr	r2, [r7, #8]
 8019024:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019026:	68ba      	ldr	r2, [r7, #8]
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	429a      	cmp	r2, r3
 801902c:	d209      	bcs.n	8019042 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801902e:	4b12      	ldr	r3, [pc, #72]	; (8019078 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019030:	681a      	ldr	r2, [r3, #0]
 8019032:	4b0f      	ldr	r3, [pc, #60]	; (8019070 <prvAddCurrentTaskToDelayedList+0x94>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	3304      	adds	r3, #4
 8019038:	4619      	mov	r1, r3
 801903a:	4610      	mov	r0, r2
 801903c:	f7fe fb8b 	bl	8017756 <vListInsert>
}
 8019040:	e010      	b.n	8019064 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019042:	4b0e      	ldr	r3, [pc, #56]	; (801907c <prvAddCurrentTaskToDelayedList+0xa0>)
 8019044:	681a      	ldr	r2, [r3, #0]
 8019046:	4b0a      	ldr	r3, [pc, #40]	; (8019070 <prvAddCurrentTaskToDelayedList+0x94>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	3304      	adds	r3, #4
 801904c:	4619      	mov	r1, r3
 801904e:	4610      	mov	r0, r2
 8019050:	f7fe fb81 	bl	8017756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019054:	4b0a      	ldr	r3, [pc, #40]	; (8019080 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	68ba      	ldr	r2, [r7, #8]
 801905a:	429a      	cmp	r2, r3
 801905c:	d202      	bcs.n	8019064 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801905e:	4a08      	ldr	r2, [pc, #32]	; (8019080 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	6013      	str	r3, [r2, #0]
}
 8019064:	bf00      	nop
 8019066:	3710      	adds	r7, #16
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}
 801906c:	20006c7c 	.word	0x20006c7c
 8019070:	200067a4 	.word	0x200067a4
 8019074:	20006c64 	.word	0x20006c64
 8019078:	20006c34 	.word	0x20006c34
 801907c:	20006c30 	.word	0x20006c30
 8019080:	20006c98 	.word	0x20006c98

08019084 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b08a      	sub	sp, #40	; 0x28
 8019088:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801908a:	2300      	movs	r3, #0
 801908c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801908e:	f000 faff 	bl	8019690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019092:	4b1c      	ldr	r3, [pc, #112]	; (8019104 <xTimerCreateTimerTask+0x80>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d021      	beq.n	80190de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801909a:	2300      	movs	r3, #0
 801909c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801909e:	2300      	movs	r3, #0
 80190a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80190a2:	1d3a      	adds	r2, r7, #4
 80190a4:	f107 0108 	add.w	r1, r7, #8
 80190a8:	f107 030c 	add.w	r3, r7, #12
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7fe fae7 	bl	8017680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80190b2:	6879      	ldr	r1, [r7, #4]
 80190b4:	68bb      	ldr	r3, [r7, #8]
 80190b6:	68fa      	ldr	r2, [r7, #12]
 80190b8:	9202      	str	r2, [sp, #8]
 80190ba:	9301      	str	r3, [sp, #4]
 80190bc:	2302      	movs	r3, #2
 80190be:	9300      	str	r3, [sp, #0]
 80190c0:	2300      	movs	r3, #0
 80190c2:	460a      	mov	r2, r1
 80190c4:	4910      	ldr	r1, [pc, #64]	; (8019108 <xTimerCreateTimerTask+0x84>)
 80190c6:	4811      	ldr	r0, [pc, #68]	; (801910c <xTimerCreateTimerTask+0x88>)
 80190c8:	f7ff f87c 	bl	80181c4 <xTaskCreateStatic>
 80190cc:	4602      	mov	r2, r0
 80190ce:	4b10      	ldr	r3, [pc, #64]	; (8019110 <xTimerCreateTimerTask+0x8c>)
 80190d0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80190d2:	4b0f      	ldr	r3, [pc, #60]	; (8019110 <xTimerCreateTimerTask+0x8c>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d001      	beq.n	80190de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80190da:	2301      	movs	r3, #1
 80190dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d109      	bne.n	80190f8 <xTimerCreateTimerTask+0x74>
 80190e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190e8:	f383 8811 	msr	BASEPRI, r3
 80190ec:	f3bf 8f6f 	isb	sy
 80190f0:	f3bf 8f4f 	dsb	sy
 80190f4:	613b      	str	r3, [r7, #16]
 80190f6:	e7fe      	b.n	80190f6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80190f8:	697b      	ldr	r3, [r7, #20]
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3718      	adds	r7, #24
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	20006cd4 	.word	0x20006cd4
 8019108:	0801aaac 	.word	0x0801aaac
 801910c:	08019245 	.word	0x08019245
 8019110:	20006cd8 	.word	0x20006cd8

08019114 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b08a      	sub	sp, #40	; 0x28
 8019118:	af00      	add	r7, sp, #0
 801911a:	60f8      	str	r0, [r7, #12]
 801911c:	60b9      	str	r1, [r7, #8]
 801911e:	607a      	str	r2, [r7, #4]
 8019120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019122:	2300      	movs	r3, #0
 8019124:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d109      	bne.n	8019140 <xTimerGenericCommand+0x2c>
 801912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019130:	f383 8811 	msr	BASEPRI, r3
 8019134:	f3bf 8f6f 	isb	sy
 8019138:	f3bf 8f4f 	dsb	sy
 801913c:	623b      	str	r3, [r7, #32]
 801913e:	e7fe      	b.n	801913e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019140:	4b19      	ldr	r3, [pc, #100]	; (80191a8 <xTimerGenericCommand+0x94>)
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d02a      	beq.n	801919e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019154:	68bb      	ldr	r3, [r7, #8]
 8019156:	2b05      	cmp	r3, #5
 8019158:	dc18      	bgt.n	801918c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801915a:	f7ff feb5 	bl	8018ec8 <xTaskGetSchedulerState>
 801915e:	4603      	mov	r3, r0
 8019160:	2b02      	cmp	r3, #2
 8019162:	d109      	bne.n	8019178 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019164:	4b10      	ldr	r3, [pc, #64]	; (80191a8 <xTimerGenericCommand+0x94>)
 8019166:	6818      	ldr	r0, [r3, #0]
 8019168:	f107 0110 	add.w	r1, r7, #16
 801916c:	2300      	movs	r3, #0
 801916e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019170:	f7fe fc52 	bl	8017a18 <xQueueGenericSend>
 8019174:	6278      	str	r0, [r7, #36]	; 0x24
 8019176:	e012      	b.n	801919e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019178:	4b0b      	ldr	r3, [pc, #44]	; (80191a8 <xTimerGenericCommand+0x94>)
 801917a:	6818      	ldr	r0, [r3, #0]
 801917c:	f107 0110 	add.w	r1, r7, #16
 8019180:	2300      	movs	r3, #0
 8019182:	2200      	movs	r2, #0
 8019184:	f7fe fc48 	bl	8017a18 <xQueueGenericSend>
 8019188:	6278      	str	r0, [r7, #36]	; 0x24
 801918a:	e008      	b.n	801919e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801918c:	4b06      	ldr	r3, [pc, #24]	; (80191a8 <xTimerGenericCommand+0x94>)
 801918e:	6818      	ldr	r0, [r3, #0]
 8019190:	f107 0110 	add.w	r1, r7, #16
 8019194:	2300      	movs	r3, #0
 8019196:	683a      	ldr	r2, [r7, #0]
 8019198:	f7fe fd38 	bl	8017c0c <xQueueGenericSendFromISR>
 801919c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80191a0:	4618      	mov	r0, r3
 80191a2:	3728      	adds	r7, #40	; 0x28
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	20006cd4 	.word	0x20006cd4

080191ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b088      	sub	sp, #32
 80191b0:	af02      	add	r7, sp, #8
 80191b2:	6078      	str	r0, [r7, #4]
 80191b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80191b6:	4b22      	ldr	r3, [pc, #136]	; (8019240 <prvProcessExpiredTimer+0x94>)
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	68db      	ldr	r3, [r3, #12]
 80191bc:	68db      	ldr	r3, [r3, #12]
 80191be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	3304      	adds	r3, #4
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7fe faff 	bl	80177c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191d0:	f003 0304 	and.w	r3, r3, #4
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d021      	beq.n	801921c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80191d8:	697b      	ldr	r3, [r7, #20]
 80191da:	699a      	ldr	r2, [r3, #24]
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	18d1      	adds	r1, r2, r3
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	683a      	ldr	r2, [r7, #0]
 80191e4:	6978      	ldr	r0, [r7, #20]
 80191e6:	f000 f8d1 	bl	801938c <prvInsertTimerInActiveList>
 80191ea:	4603      	mov	r3, r0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d01e      	beq.n	801922e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80191f0:	2300      	movs	r3, #0
 80191f2:	9300      	str	r3, [sp, #0]
 80191f4:	2300      	movs	r3, #0
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	2100      	movs	r1, #0
 80191fa:	6978      	ldr	r0, [r7, #20]
 80191fc:	f7ff ff8a 	bl	8019114 <xTimerGenericCommand>
 8019200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019202:	693b      	ldr	r3, [r7, #16]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d112      	bne.n	801922e <prvProcessExpiredTimer+0x82>
 8019208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801920c:	f383 8811 	msr	BASEPRI, r3
 8019210:	f3bf 8f6f 	isb	sy
 8019214:	f3bf 8f4f 	dsb	sy
 8019218:	60fb      	str	r3, [r7, #12]
 801921a:	e7fe      	b.n	801921a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801921c:	697b      	ldr	r3, [r7, #20]
 801921e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019222:	f023 0301 	bic.w	r3, r3, #1
 8019226:	b2da      	uxtb	r2, r3
 8019228:	697b      	ldr	r3, [r7, #20]
 801922a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801922e:	697b      	ldr	r3, [r7, #20]
 8019230:	6a1b      	ldr	r3, [r3, #32]
 8019232:	6978      	ldr	r0, [r7, #20]
 8019234:	4798      	blx	r3
}
 8019236:	bf00      	nop
 8019238:	3718      	adds	r7, #24
 801923a:	46bd      	mov	sp, r7
 801923c:	bd80      	pop	{r7, pc}
 801923e:	bf00      	nop
 8019240:	20006ccc 	.word	0x20006ccc

08019244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b084      	sub	sp, #16
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801924c:	f107 0308 	add.w	r3, r7, #8
 8019250:	4618      	mov	r0, r3
 8019252:	f000 f857 	bl	8019304 <prvGetNextExpireTime>
 8019256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	4619      	mov	r1, r3
 801925c:	68f8      	ldr	r0, [r7, #12]
 801925e:	f000 f803 	bl	8019268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019262:	f000 f8d5 	bl	8019410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019266:	e7f1      	b.n	801924c <prvTimerTask+0x8>

08019268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b084      	sub	sp, #16
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019272:	f7ff fa57 	bl	8018724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019276:	f107 0308 	add.w	r3, r7, #8
 801927a:	4618      	mov	r0, r3
 801927c:	f000 f866 	bl	801934c <prvSampleTimeNow>
 8019280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019282:	68bb      	ldr	r3, [r7, #8]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d130      	bne.n	80192ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d10a      	bne.n	80192a4 <prvProcessTimerOrBlockTask+0x3c>
 801928e:	687a      	ldr	r2, [r7, #4]
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	429a      	cmp	r2, r3
 8019294:	d806      	bhi.n	80192a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019296:	f7ff fa53 	bl	8018740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801929a:	68f9      	ldr	r1, [r7, #12]
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7ff ff85 	bl	80191ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80192a2:	e024      	b.n	80192ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80192a4:	683b      	ldr	r3, [r7, #0]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d008      	beq.n	80192bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80192aa:	4b13      	ldr	r3, [pc, #76]	; (80192f8 <prvProcessTimerOrBlockTask+0x90>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d101      	bne.n	80192b8 <prvProcessTimerOrBlockTask+0x50>
 80192b4:	2301      	movs	r3, #1
 80192b6:	e000      	b.n	80192ba <prvProcessTimerOrBlockTask+0x52>
 80192b8:	2300      	movs	r3, #0
 80192ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80192bc:	4b0f      	ldr	r3, [pc, #60]	; (80192fc <prvProcessTimerOrBlockTask+0x94>)
 80192be:	6818      	ldr	r0, [r3, #0]
 80192c0:	687a      	ldr	r2, [r7, #4]
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	1ad3      	subs	r3, r2, r3
 80192c6:	683a      	ldr	r2, [r7, #0]
 80192c8:	4619      	mov	r1, r3
 80192ca:	f7fe ff47 	bl	801815c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80192ce:	f7ff fa37 	bl	8018740 <xTaskResumeAll>
 80192d2:	4603      	mov	r3, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d10a      	bne.n	80192ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80192d8:	4b09      	ldr	r3, [pc, #36]	; (8019300 <prvProcessTimerOrBlockTask+0x98>)
 80192da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192de:	601a      	str	r2, [r3, #0]
 80192e0:	f3bf 8f4f 	dsb	sy
 80192e4:	f3bf 8f6f 	isb	sy
}
 80192e8:	e001      	b.n	80192ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80192ea:	f7ff fa29 	bl	8018740 <xTaskResumeAll>
}
 80192ee:	bf00      	nop
 80192f0:	3710      	adds	r7, #16
 80192f2:	46bd      	mov	sp, r7
 80192f4:	bd80      	pop	{r7, pc}
 80192f6:	bf00      	nop
 80192f8:	20006cd0 	.word	0x20006cd0
 80192fc:	20006cd4 	.word	0x20006cd4
 8019300:	e000ed04 	.word	0xe000ed04

08019304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019304:	b480      	push	{r7}
 8019306:	b085      	sub	sp, #20
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801930c:	4b0e      	ldr	r3, [pc, #56]	; (8019348 <prvGetNextExpireTime+0x44>)
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d101      	bne.n	801931a <prvGetNextExpireTime+0x16>
 8019316:	2201      	movs	r2, #1
 8019318:	e000      	b.n	801931c <prvGetNextExpireTime+0x18>
 801931a:	2200      	movs	r2, #0
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d105      	bne.n	8019334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019328:	4b07      	ldr	r3, [pc, #28]	; (8019348 <prvGetNextExpireTime+0x44>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	68db      	ldr	r3, [r3, #12]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	60fb      	str	r3, [r7, #12]
 8019332:	e001      	b.n	8019338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019334:	2300      	movs	r3, #0
 8019336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019338:	68fb      	ldr	r3, [r7, #12]
}
 801933a:	4618      	mov	r0, r3
 801933c:	3714      	adds	r7, #20
 801933e:	46bd      	mov	sp, r7
 8019340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019344:	4770      	bx	lr
 8019346:	bf00      	nop
 8019348:	20006ccc 	.word	0x20006ccc

0801934c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b084      	sub	sp, #16
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019354:	f7ff fa90 	bl	8018878 <xTaskGetTickCount>
 8019358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801935a:	4b0b      	ldr	r3, [pc, #44]	; (8019388 <prvSampleTimeNow+0x3c>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	68fa      	ldr	r2, [r7, #12]
 8019360:	429a      	cmp	r2, r3
 8019362:	d205      	bcs.n	8019370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019364:	f000 f930 	bl	80195c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2201      	movs	r2, #1
 801936c:	601a      	str	r2, [r3, #0]
 801936e:	e002      	b.n	8019376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2200      	movs	r2, #0
 8019374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019376:	4a04      	ldr	r2, [pc, #16]	; (8019388 <prvSampleTimeNow+0x3c>)
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801937c:	68fb      	ldr	r3, [r7, #12]
}
 801937e:	4618      	mov	r0, r3
 8019380:	3710      	adds	r7, #16
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
 8019386:	bf00      	nop
 8019388:	20006cdc 	.word	0x20006cdc

0801938c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b086      	sub	sp, #24
 8019390:	af00      	add	r7, sp, #0
 8019392:	60f8      	str	r0, [r7, #12]
 8019394:	60b9      	str	r1, [r7, #8]
 8019396:	607a      	str	r2, [r7, #4]
 8019398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801939a:	2300      	movs	r3, #0
 801939c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	68ba      	ldr	r2, [r7, #8]
 80193a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	68fa      	ldr	r2, [r7, #12]
 80193a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80193aa:	68ba      	ldr	r2, [r7, #8]
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	429a      	cmp	r2, r3
 80193b0:	d812      	bhi.n	80193d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80193b2:	687a      	ldr	r2, [r7, #4]
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	1ad2      	subs	r2, r2, r3
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	699b      	ldr	r3, [r3, #24]
 80193bc:	429a      	cmp	r2, r3
 80193be:	d302      	bcc.n	80193c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80193c0:	2301      	movs	r3, #1
 80193c2:	617b      	str	r3, [r7, #20]
 80193c4:	e01b      	b.n	80193fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80193c6:	4b10      	ldr	r3, [pc, #64]	; (8019408 <prvInsertTimerInActiveList+0x7c>)
 80193c8:	681a      	ldr	r2, [r3, #0]
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	3304      	adds	r3, #4
 80193ce:	4619      	mov	r1, r3
 80193d0:	4610      	mov	r0, r2
 80193d2:	f7fe f9c0 	bl	8017756 <vListInsert>
 80193d6:	e012      	b.n	80193fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	683b      	ldr	r3, [r7, #0]
 80193dc:	429a      	cmp	r2, r3
 80193de:	d206      	bcs.n	80193ee <prvInsertTimerInActiveList+0x62>
 80193e0:	68ba      	ldr	r2, [r7, #8]
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d302      	bcc.n	80193ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80193e8:	2301      	movs	r3, #1
 80193ea:	617b      	str	r3, [r7, #20]
 80193ec:	e007      	b.n	80193fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80193ee:	4b07      	ldr	r3, [pc, #28]	; (801940c <prvInsertTimerInActiveList+0x80>)
 80193f0:	681a      	ldr	r2, [r3, #0]
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	3304      	adds	r3, #4
 80193f6:	4619      	mov	r1, r3
 80193f8:	4610      	mov	r0, r2
 80193fa:	f7fe f9ac 	bl	8017756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80193fe:	697b      	ldr	r3, [r7, #20]
}
 8019400:	4618      	mov	r0, r3
 8019402:	3718      	adds	r7, #24
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}
 8019408:	20006cd0 	.word	0x20006cd0
 801940c:	20006ccc 	.word	0x20006ccc

08019410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b08e      	sub	sp, #56	; 0x38
 8019414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019416:	e0c6      	b.n	80195a6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	2b00      	cmp	r3, #0
 801941c:	da17      	bge.n	801944e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801941e:	1d3b      	adds	r3, r7, #4
 8019420:	3304      	adds	r3, #4
 8019422:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019426:	2b00      	cmp	r3, #0
 8019428:	d109      	bne.n	801943e <prvProcessReceivedCommands+0x2e>
 801942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801942e:	f383 8811 	msr	BASEPRI, r3
 8019432:	f3bf 8f6f 	isb	sy
 8019436:	f3bf 8f4f 	dsb	sy
 801943a:	61fb      	str	r3, [r7, #28]
 801943c:	e7fe      	b.n	801943c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019444:	6850      	ldr	r0, [r2, #4]
 8019446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019448:	6892      	ldr	r2, [r2, #8]
 801944a:	4611      	mov	r1, r2
 801944c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2b00      	cmp	r3, #0
 8019452:	f2c0 80a7 	blt.w	80195a4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945c:	695b      	ldr	r3, [r3, #20]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d004      	beq.n	801946c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019464:	3304      	adds	r3, #4
 8019466:	4618      	mov	r0, r3
 8019468:	f7fe f9ae 	bl	80177c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801946c:	463b      	mov	r3, r7
 801946e:	4618      	mov	r0, r3
 8019470:	f7ff ff6c 	bl	801934c <prvSampleTimeNow>
 8019474:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	2b09      	cmp	r3, #9
 801947a:	f200 8094 	bhi.w	80195a6 <prvProcessReceivedCommands+0x196>
 801947e:	a201      	add	r2, pc, #4	; (adr r2, 8019484 <prvProcessReceivedCommands+0x74>)
 8019480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019484:	080194ad 	.word	0x080194ad
 8019488:	080194ad 	.word	0x080194ad
 801948c:	080194ad 	.word	0x080194ad
 8019490:	0801951f 	.word	0x0801951f
 8019494:	08019533 	.word	0x08019533
 8019498:	0801957b 	.word	0x0801957b
 801949c:	080194ad 	.word	0x080194ad
 80194a0:	080194ad 	.word	0x080194ad
 80194a4:	0801951f 	.word	0x0801951f
 80194a8:	08019533 	.word	0x08019533
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80194ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194b2:	f043 0301 	orr.w	r3, r3, #1
 80194b6:	b2da      	uxtb	r2, r3
 80194b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80194be:	68ba      	ldr	r2, [r7, #8]
 80194c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194c2:	699b      	ldr	r3, [r3, #24]
 80194c4:	18d1      	adds	r1, r2, r3
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194cc:	f7ff ff5e 	bl	801938c <prvInsertTimerInActiveList>
 80194d0:	4603      	mov	r3, r0
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d067      	beq.n	80195a6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80194d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d8:	6a1b      	ldr	r3, [r3, #32]
 80194da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194e4:	f003 0304 	and.w	r3, r3, #4
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d05c      	beq.n	80195a6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80194ec:	68ba      	ldr	r2, [r7, #8]
 80194ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f0:	699b      	ldr	r3, [r3, #24]
 80194f2:	441a      	add	r2, r3
 80194f4:	2300      	movs	r3, #0
 80194f6:	9300      	str	r3, [sp, #0]
 80194f8:	2300      	movs	r3, #0
 80194fa:	2100      	movs	r1, #0
 80194fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194fe:	f7ff fe09 	bl	8019114 <xTimerGenericCommand>
 8019502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019504:	6a3b      	ldr	r3, [r7, #32]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d14d      	bne.n	80195a6 <prvProcessReceivedCommands+0x196>
 801950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801950e:	f383 8811 	msr	BASEPRI, r3
 8019512:	f3bf 8f6f 	isb	sy
 8019516:	f3bf 8f4f 	dsb	sy
 801951a:	61bb      	str	r3, [r7, #24]
 801951c:	e7fe      	b.n	801951c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019524:	f023 0301 	bic.w	r3, r3, #1
 8019528:	b2da      	uxtb	r2, r3
 801952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019530:	e039      	b.n	80195a6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019538:	f043 0301 	orr.w	r3, r3, #1
 801953c:	b2da      	uxtb	r2, r3
 801953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019544:	68ba      	ldr	r2, [r7, #8]
 8019546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019548:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801954c:	699b      	ldr	r3, [r3, #24]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d109      	bne.n	8019566 <prvProcessReceivedCommands+0x156>
 8019552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019556:	f383 8811 	msr	BASEPRI, r3
 801955a:	f3bf 8f6f 	isb	sy
 801955e:	f3bf 8f4f 	dsb	sy
 8019562:	617b      	str	r3, [r7, #20]
 8019564:	e7fe      	b.n	8019564 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019568:	699a      	ldr	r2, [r3, #24]
 801956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801956c:	18d1      	adds	r1, r2, r3
 801956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019574:	f7ff ff0a 	bl	801938c <prvInsertTimerInActiveList>
					break;
 8019578:	e015      	b.n	80195a6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019580:	f003 0302 	and.w	r3, r3, #2
 8019584:	2b00      	cmp	r3, #0
 8019586:	d103      	bne.n	8019590 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8019588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801958a:	f000 fbc3 	bl	8019d14 <vPortFree>
 801958e:	e00a      	b.n	80195a6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019596:	f023 0301 	bic.w	r3, r3, #1
 801959a:	b2da      	uxtb	r2, r3
 801959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80195a2:	e000      	b.n	80195a6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80195a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80195a6:	4b07      	ldr	r3, [pc, #28]	; (80195c4 <prvProcessReceivedCommands+0x1b4>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	1d39      	adds	r1, r7, #4
 80195ac:	2200      	movs	r2, #0
 80195ae:	4618      	mov	r0, r3
 80195b0:	f7fe fbc0 	bl	8017d34 <xQueueReceive>
 80195b4:	4603      	mov	r3, r0
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	f47f af2e 	bne.w	8019418 <prvProcessReceivedCommands+0x8>
	}
}
 80195bc:	bf00      	nop
 80195be:	3730      	adds	r7, #48	; 0x30
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd80      	pop	{r7, pc}
 80195c4:	20006cd4 	.word	0x20006cd4

080195c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b088      	sub	sp, #32
 80195cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80195ce:	e047      	b.n	8019660 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80195d0:	4b2d      	ldr	r3, [pc, #180]	; (8019688 <prvSwitchTimerLists+0xc0>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	68db      	ldr	r3, [r3, #12]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195da:	4b2b      	ldr	r3, [pc, #172]	; (8019688 <prvSwitchTimerLists+0xc0>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	68db      	ldr	r3, [r3, #12]
 80195e0:	68db      	ldr	r3, [r3, #12]
 80195e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	3304      	adds	r3, #4
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7fe f8ed 	bl	80177c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	6a1b      	ldr	r3, [r3, #32]
 80195f2:	68f8      	ldr	r0, [r7, #12]
 80195f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195fc:	f003 0304 	and.w	r3, r3, #4
 8019600:	2b00      	cmp	r3, #0
 8019602:	d02d      	beq.n	8019660 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	699b      	ldr	r3, [r3, #24]
 8019608:	693a      	ldr	r2, [r7, #16]
 801960a:	4413      	add	r3, r2
 801960c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801960e:	68ba      	ldr	r2, [r7, #8]
 8019610:	693b      	ldr	r3, [r7, #16]
 8019612:	429a      	cmp	r2, r3
 8019614:	d90e      	bls.n	8019634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	68ba      	ldr	r2, [r7, #8]
 801961a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	68fa      	ldr	r2, [r7, #12]
 8019620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019622:	4b19      	ldr	r3, [pc, #100]	; (8019688 <prvSwitchTimerLists+0xc0>)
 8019624:	681a      	ldr	r2, [r3, #0]
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	3304      	adds	r3, #4
 801962a:	4619      	mov	r1, r3
 801962c:	4610      	mov	r0, r2
 801962e:	f7fe f892 	bl	8017756 <vListInsert>
 8019632:	e015      	b.n	8019660 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019634:	2300      	movs	r3, #0
 8019636:	9300      	str	r3, [sp, #0]
 8019638:	2300      	movs	r3, #0
 801963a:	693a      	ldr	r2, [r7, #16]
 801963c:	2100      	movs	r1, #0
 801963e:	68f8      	ldr	r0, [r7, #12]
 8019640:	f7ff fd68 	bl	8019114 <xTimerGenericCommand>
 8019644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d109      	bne.n	8019660 <prvSwitchTimerLists+0x98>
 801964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019650:	f383 8811 	msr	BASEPRI, r3
 8019654:	f3bf 8f6f 	isb	sy
 8019658:	f3bf 8f4f 	dsb	sy
 801965c:	603b      	str	r3, [r7, #0]
 801965e:	e7fe      	b.n	801965e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019660:	4b09      	ldr	r3, [pc, #36]	; (8019688 <prvSwitchTimerLists+0xc0>)
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d1b2      	bne.n	80195d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801966a:	4b07      	ldr	r3, [pc, #28]	; (8019688 <prvSwitchTimerLists+0xc0>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019670:	4b06      	ldr	r3, [pc, #24]	; (801968c <prvSwitchTimerLists+0xc4>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4a04      	ldr	r2, [pc, #16]	; (8019688 <prvSwitchTimerLists+0xc0>)
 8019676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019678:	4a04      	ldr	r2, [pc, #16]	; (801968c <prvSwitchTimerLists+0xc4>)
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	6013      	str	r3, [r2, #0]
}
 801967e:	bf00      	nop
 8019680:	3718      	adds	r7, #24
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	20006ccc 	.word	0x20006ccc
 801968c:	20006cd0 	.word	0x20006cd0

08019690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019696:	f000 f961 	bl	801995c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801969a:	4b15      	ldr	r3, [pc, #84]	; (80196f0 <prvCheckForValidListAndQueue+0x60>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d120      	bne.n	80196e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80196a2:	4814      	ldr	r0, [pc, #80]	; (80196f4 <prvCheckForValidListAndQueue+0x64>)
 80196a4:	f7fe f806 	bl	80176b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80196a8:	4813      	ldr	r0, [pc, #76]	; (80196f8 <prvCheckForValidListAndQueue+0x68>)
 80196aa:	f7fe f803 	bl	80176b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80196ae:	4b13      	ldr	r3, [pc, #76]	; (80196fc <prvCheckForValidListAndQueue+0x6c>)
 80196b0:	4a10      	ldr	r2, [pc, #64]	; (80196f4 <prvCheckForValidListAndQueue+0x64>)
 80196b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80196b4:	4b12      	ldr	r3, [pc, #72]	; (8019700 <prvCheckForValidListAndQueue+0x70>)
 80196b6:	4a10      	ldr	r2, [pc, #64]	; (80196f8 <prvCheckForValidListAndQueue+0x68>)
 80196b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80196ba:	2300      	movs	r3, #0
 80196bc:	9300      	str	r3, [sp, #0]
 80196be:	4b11      	ldr	r3, [pc, #68]	; (8019704 <prvCheckForValidListAndQueue+0x74>)
 80196c0:	4a11      	ldr	r2, [pc, #68]	; (8019708 <prvCheckForValidListAndQueue+0x78>)
 80196c2:	2110      	movs	r1, #16
 80196c4:	200a      	movs	r0, #10
 80196c6:	f7fe f911 	bl	80178ec <xQueueGenericCreateStatic>
 80196ca:	4602      	mov	r2, r0
 80196cc:	4b08      	ldr	r3, [pc, #32]	; (80196f0 <prvCheckForValidListAndQueue+0x60>)
 80196ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80196d0:	4b07      	ldr	r3, [pc, #28]	; (80196f0 <prvCheckForValidListAndQueue+0x60>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d005      	beq.n	80196e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80196d8:	4b05      	ldr	r3, [pc, #20]	; (80196f0 <prvCheckForValidListAndQueue+0x60>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	490b      	ldr	r1, [pc, #44]	; (801970c <prvCheckForValidListAndQueue+0x7c>)
 80196de:	4618      	mov	r0, r3
 80196e0:	f7fe fd14 	bl	801810c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80196e4:	f000 f968 	bl	80199b8 <vPortExitCritical>
}
 80196e8:	bf00      	nop
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
 80196ee:	bf00      	nop
 80196f0:	20006cd4 	.word	0x20006cd4
 80196f4:	20006ca4 	.word	0x20006ca4
 80196f8:	20006cb8 	.word	0x20006cb8
 80196fc:	20006ccc 	.word	0x20006ccc
 8019700:	20006cd0 	.word	0x20006cd0
 8019704:	20006d80 	.word	0x20006d80
 8019708:	20006ce0 	.word	0x20006ce0
 801970c:	0801aab4 	.word	0x0801aab4

08019710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019710:	b480      	push	{r7}
 8019712:	b085      	sub	sp, #20
 8019714:	af00      	add	r7, sp, #0
 8019716:	60f8      	str	r0, [r7, #12]
 8019718:	60b9      	str	r1, [r7, #8]
 801971a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	3b04      	subs	r3, #4
 8019720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	3b04      	subs	r3, #4
 801972e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	f023 0201 	bic.w	r2, r3, #1
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	3b04      	subs	r3, #4
 801973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019740:	4a0c      	ldr	r2, [pc, #48]	; (8019774 <pxPortInitialiseStack+0x64>)
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	3b14      	subs	r3, #20
 801974a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801974c:	687a      	ldr	r2, [r7, #4]
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	3b04      	subs	r3, #4
 8019756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	f06f 0202 	mvn.w	r2, #2
 801975e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	3b20      	subs	r3, #32
 8019764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019766:	68fb      	ldr	r3, [r7, #12]
}
 8019768:	4618      	mov	r0, r3
 801976a:	3714      	adds	r7, #20
 801976c:	46bd      	mov	sp, r7
 801976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019772:	4770      	bx	lr
 8019774:	08019779 	.word	0x08019779

08019778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019778:	b480      	push	{r7}
 801977a:	b085      	sub	sp, #20
 801977c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801977e:	2300      	movs	r3, #0
 8019780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019782:	4b11      	ldr	r3, [pc, #68]	; (80197c8 <prvTaskExitError+0x50>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801978a:	d009      	beq.n	80197a0 <prvTaskExitError+0x28>
 801978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019790:	f383 8811 	msr	BASEPRI, r3
 8019794:	f3bf 8f6f 	isb	sy
 8019798:	f3bf 8f4f 	dsb	sy
 801979c:	60fb      	str	r3, [r7, #12]
 801979e:	e7fe      	b.n	801979e <prvTaskExitError+0x26>
 80197a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197a4:	f383 8811 	msr	BASEPRI, r3
 80197a8:	f3bf 8f6f 	isb	sy
 80197ac:	f3bf 8f4f 	dsb	sy
 80197b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80197b2:	bf00      	nop
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d0fc      	beq.n	80197b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80197ba:	bf00      	nop
 80197bc:	3714      	adds	r7, #20
 80197be:	46bd      	mov	sp, r7
 80197c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c4:	4770      	bx	lr
 80197c6:	bf00      	nop
 80197c8:	20000010 	.word	0x20000010
 80197cc:	00000000 	.word	0x00000000

080197d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80197d0:	4b07      	ldr	r3, [pc, #28]	; (80197f0 <pxCurrentTCBConst2>)
 80197d2:	6819      	ldr	r1, [r3, #0]
 80197d4:	6808      	ldr	r0, [r1, #0]
 80197d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197da:	f380 8809 	msr	PSP, r0
 80197de:	f3bf 8f6f 	isb	sy
 80197e2:	f04f 0000 	mov.w	r0, #0
 80197e6:	f380 8811 	msr	BASEPRI, r0
 80197ea:	4770      	bx	lr
 80197ec:	f3af 8000 	nop.w

080197f0 <pxCurrentTCBConst2>:
 80197f0:	200067a4 	.word	0x200067a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80197f4:	bf00      	nop
 80197f6:	bf00      	nop

080197f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80197f8:	4808      	ldr	r0, [pc, #32]	; (801981c <prvPortStartFirstTask+0x24>)
 80197fa:	6800      	ldr	r0, [r0, #0]
 80197fc:	6800      	ldr	r0, [r0, #0]
 80197fe:	f380 8808 	msr	MSP, r0
 8019802:	f04f 0000 	mov.w	r0, #0
 8019806:	f380 8814 	msr	CONTROL, r0
 801980a:	b662      	cpsie	i
 801980c:	b661      	cpsie	f
 801980e:	f3bf 8f4f 	dsb	sy
 8019812:	f3bf 8f6f 	isb	sy
 8019816:	df00      	svc	0
 8019818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801981a:	bf00      	nop
 801981c:	e000ed08 	.word	0xe000ed08

08019820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b086      	sub	sp, #24
 8019824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019826:	4b44      	ldr	r3, [pc, #272]	; (8019938 <xPortStartScheduler+0x118>)
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	4a44      	ldr	r2, [pc, #272]	; (801993c <xPortStartScheduler+0x11c>)
 801982c:	4293      	cmp	r3, r2
 801982e:	d109      	bne.n	8019844 <xPortStartScheduler+0x24>
 8019830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019834:	f383 8811 	msr	BASEPRI, r3
 8019838:	f3bf 8f6f 	isb	sy
 801983c:	f3bf 8f4f 	dsb	sy
 8019840:	613b      	str	r3, [r7, #16]
 8019842:	e7fe      	b.n	8019842 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019844:	4b3c      	ldr	r3, [pc, #240]	; (8019938 <xPortStartScheduler+0x118>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	4a3d      	ldr	r2, [pc, #244]	; (8019940 <xPortStartScheduler+0x120>)
 801984a:	4293      	cmp	r3, r2
 801984c:	d109      	bne.n	8019862 <xPortStartScheduler+0x42>
 801984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019852:	f383 8811 	msr	BASEPRI, r3
 8019856:	f3bf 8f6f 	isb	sy
 801985a:	f3bf 8f4f 	dsb	sy
 801985e:	60fb      	str	r3, [r7, #12]
 8019860:	e7fe      	b.n	8019860 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019862:	4b38      	ldr	r3, [pc, #224]	; (8019944 <xPortStartScheduler+0x124>)
 8019864:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019866:	697b      	ldr	r3, [r7, #20]
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	b2db      	uxtb	r3, r3
 801986c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801986e:	697b      	ldr	r3, [r7, #20]
 8019870:	22ff      	movs	r2, #255	; 0xff
 8019872:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019874:	697b      	ldr	r3, [r7, #20]
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	b2db      	uxtb	r3, r3
 801987a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801987c:	78fb      	ldrb	r3, [r7, #3]
 801987e:	b2db      	uxtb	r3, r3
 8019880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019884:	b2da      	uxtb	r2, r3
 8019886:	4b30      	ldr	r3, [pc, #192]	; (8019948 <xPortStartScheduler+0x128>)
 8019888:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801988a:	4b30      	ldr	r3, [pc, #192]	; (801994c <xPortStartScheduler+0x12c>)
 801988c:	2207      	movs	r2, #7
 801988e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019890:	e009      	b.n	80198a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8019892:	4b2e      	ldr	r3, [pc, #184]	; (801994c <xPortStartScheduler+0x12c>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	3b01      	subs	r3, #1
 8019898:	4a2c      	ldr	r2, [pc, #176]	; (801994c <xPortStartScheduler+0x12c>)
 801989a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801989c:	78fb      	ldrb	r3, [r7, #3]
 801989e:	b2db      	uxtb	r3, r3
 80198a0:	005b      	lsls	r3, r3, #1
 80198a2:	b2db      	uxtb	r3, r3
 80198a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80198a6:	78fb      	ldrb	r3, [r7, #3]
 80198a8:	b2db      	uxtb	r3, r3
 80198aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198ae:	2b80      	cmp	r3, #128	; 0x80
 80198b0:	d0ef      	beq.n	8019892 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80198b2:	4b26      	ldr	r3, [pc, #152]	; (801994c <xPortStartScheduler+0x12c>)
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	f1c3 0307 	rsb	r3, r3, #7
 80198ba:	2b04      	cmp	r3, #4
 80198bc:	d009      	beq.n	80198d2 <xPortStartScheduler+0xb2>
 80198be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c2:	f383 8811 	msr	BASEPRI, r3
 80198c6:	f3bf 8f6f 	isb	sy
 80198ca:	f3bf 8f4f 	dsb	sy
 80198ce:	60bb      	str	r3, [r7, #8]
 80198d0:	e7fe      	b.n	80198d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80198d2:	4b1e      	ldr	r3, [pc, #120]	; (801994c <xPortStartScheduler+0x12c>)
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	021b      	lsls	r3, r3, #8
 80198d8:	4a1c      	ldr	r2, [pc, #112]	; (801994c <xPortStartScheduler+0x12c>)
 80198da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80198dc:	4b1b      	ldr	r3, [pc, #108]	; (801994c <xPortStartScheduler+0x12c>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80198e4:	4a19      	ldr	r2, [pc, #100]	; (801994c <xPortStartScheduler+0x12c>)
 80198e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	b2da      	uxtb	r2, r3
 80198ec:	697b      	ldr	r3, [r7, #20]
 80198ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80198f0:	4b17      	ldr	r3, [pc, #92]	; (8019950 <xPortStartScheduler+0x130>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	4a16      	ldr	r2, [pc, #88]	; (8019950 <xPortStartScheduler+0x130>)
 80198f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80198fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80198fc:	4b14      	ldr	r3, [pc, #80]	; (8019950 <xPortStartScheduler+0x130>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	4a13      	ldr	r2, [pc, #76]	; (8019950 <xPortStartScheduler+0x130>)
 8019902:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019908:	f000 f8d6 	bl	8019ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801990c:	4b11      	ldr	r3, [pc, #68]	; (8019954 <xPortStartScheduler+0x134>)
 801990e:	2200      	movs	r2, #0
 8019910:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019912:	f000 f8f5 	bl	8019b00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019916:	4b10      	ldr	r3, [pc, #64]	; (8019958 <xPortStartScheduler+0x138>)
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	4a0f      	ldr	r2, [pc, #60]	; (8019958 <xPortStartScheduler+0x138>)
 801991c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019920:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019922:	f7ff ff69 	bl	80197f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019926:	f7ff f86f 	bl	8018a08 <vTaskSwitchContext>
	prvTaskExitError();
 801992a:	f7ff ff25 	bl	8019778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801992e:	2300      	movs	r3, #0
}
 8019930:	4618      	mov	r0, r3
 8019932:	3718      	adds	r7, #24
 8019934:	46bd      	mov	sp, r7
 8019936:	bd80      	pop	{r7, pc}
 8019938:	e000ed00 	.word	0xe000ed00
 801993c:	410fc271 	.word	0x410fc271
 8019940:	410fc270 	.word	0x410fc270
 8019944:	e000e400 	.word	0xe000e400
 8019948:	20006dd0 	.word	0x20006dd0
 801994c:	20006dd4 	.word	0x20006dd4
 8019950:	e000ed20 	.word	0xe000ed20
 8019954:	20000010 	.word	0x20000010
 8019958:	e000ef34 	.word	0xe000ef34

0801995c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801995c:	b480      	push	{r7}
 801995e:	b083      	sub	sp, #12
 8019960:	af00      	add	r7, sp, #0
 8019962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019966:	f383 8811 	msr	BASEPRI, r3
 801996a:	f3bf 8f6f 	isb	sy
 801996e:	f3bf 8f4f 	dsb	sy
 8019972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019974:	4b0e      	ldr	r3, [pc, #56]	; (80199b0 <vPortEnterCritical+0x54>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	3301      	adds	r3, #1
 801997a:	4a0d      	ldr	r2, [pc, #52]	; (80199b0 <vPortEnterCritical+0x54>)
 801997c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801997e:	4b0c      	ldr	r3, [pc, #48]	; (80199b0 <vPortEnterCritical+0x54>)
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	2b01      	cmp	r3, #1
 8019984:	d10e      	bne.n	80199a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019986:	4b0b      	ldr	r3, [pc, #44]	; (80199b4 <vPortEnterCritical+0x58>)
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	b2db      	uxtb	r3, r3
 801998c:	2b00      	cmp	r3, #0
 801998e:	d009      	beq.n	80199a4 <vPortEnterCritical+0x48>
 8019990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019994:	f383 8811 	msr	BASEPRI, r3
 8019998:	f3bf 8f6f 	isb	sy
 801999c:	f3bf 8f4f 	dsb	sy
 80199a0:	603b      	str	r3, [r7, #0]
 80199a2:	e7fe      	b.n	80199a2 <vPortEnterCritical+0x46>
	}
}
 80199a4:	bf00      	nop
 80199a6:	370c      	adds	r7, #12
 80199a8:	46bd      	mov	sp, r7
 80199aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ae:	4770      	bx	lr
 80199b0:	20000010 	.word	0x20000010
 80199b4:	e000ed04 	.word	0xe000ed04

080199b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80199b8:	b480      	push	{r7}
 80199ba:	b083      	sub	sp, #12
 80199bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80199be:	4b11      	ldr	r3, [pc, #68]	; (8019a04 <vPortExitCritical+0x4c>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d109      	bne.n	80199da <vPortExitCritical+0x22>
 80199c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199ca:	f383 8811 	msr	BASEPRI, r3
 80199ce:	f3bf 8f6f 	isb	sy
 80199d2:	f3bf 8f4f 	dsb	sy
 80199d6:	607b      	str	r3, [r7, #4]
 80199d8:	e7fe      	b.n	80199d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80199da:	4b0a      	ldr	r3, [pc, #40]	; (8019a04 <vPortExitCritical+0x4c>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	3b01      	subs	r3, #1
 80199e0:	4a08      	ldr	r2, [pc, #32]	; (8019a04 <vPortExitCritical+0x4c>)
 80199e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80199e4:	4b07      	ldr	r3, [pc, #28]	; (8019a04 <vPortExitCritical+0x4c>)
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d104      	bne.n	80199f6 <vPortExitCritical+0x3e>
 80199ec:	2300      	movs	r3, #0
 80199ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80199f6:	bf00      	nop
 80199f8:	370c      	adds	r7, #12
 80199fa:	46bd      	mov	sp, r7
 80199fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a00:	4770      	bx	lr
 8019a02:	bf00      	nop
 8019a04:	20000010 	.word	0x20000010
	...

08019a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019a10:	f3ef 8009 	mrs	r0, PSP
 8019a14:	f3bf 8f6f 	isb	sy
 8019a18:	4b15      	ldr	r3, [pc, #84]	; (8019a70 <pxCurrentTCBConst>)
 8019a1a:	681a      	ldr	r2, [r3, #0]
 8019a1c:	f01e 0f10 	tst.w	lr, #16
 8019a20:	bf08      	it	eq
 8019a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a2a:	6010      	str	r0, [r2, #0]
 8019a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019a34:	f380 8811 	msr	BASEPRI, r0
 8019a38:	f3bf 8f4f 	dsb	sy
 8019a3c:	f3bf 8f6f 	isb	sy
 8019a40:	f7fe ffe2 	bl	8018a08 <vTaskSwitchContext>
 8019a44:	f04f 0000 	mov.w	r0, #0
 8019a48:	f380 8811 	msr	BASEPRI, r0
 8019a4c:	bc09      	pop	{r0, r3}
 8019a4e:	6819      	ldr	r1, [r3, #0]
 8019a50:	6808      	ldr	r0, [r1, #0]
 8019a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a56:	f01e 0f10 	tst.w	lr, #16
 8019a5a:	bf08      	it	eq
 8019a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019a60:	f380 8809 	msr	PSP, r0
 8019a64:	f3bf 8f6f 	isb	sy
 8019a68:	4770      	bx	lr
 8019a6a:	bf00      	nop
 8019a6c:	f3af 8000 	nop.w

08019a70 <pxCurrentTCBConst>:
 8019a70:	200067a4 	.word	0x200067a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019a74:	bf00      	nop
 8019a76:	bf00      	nop

08019a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b082      	sub	sp, #8
 8019a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8019a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a82:	f383 8811 	msr	BASEPRI, r3
 8019a86:	f3bf 8f6f 	isb	sy
 8019a8a:	f3bf 8f4f 	dsb	sy
 8019a8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019a90:	f7fe ff02 	bl	8018898 <xTaskIncrementTick>
 8019a94:	4603      	mov	r3, r0
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d003      	beq.n	8019aa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019a9a:	4b06      	ldr	r3, [pc, #24]	; (8019ab4 <SysTick_Handler+0x3c>)
 8019a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019aa0:	601a      	str	r2, [r3, #0]
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8019aac:	bf00      	nop
 8019aae:	3708      	adds	r7, #8
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	bd80      	pop	{r7, pc}
 8019ab4:	e000ed04 	.word	0xe000ed04

08019ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019ab8:	b480      	push	{r7}
 8019aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019abc:	4b0b      	ldr	r3, [pc, #44]	; (8019aec <vPortSetupTimerInterrupt+0x34>)
 8019abe:	2200      	movs	r2, #0
 8019ac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019ac2:	4b0b      	ldr	r3, [pc, #44]	; (8019af0 <vPortSetupTimerInterrupt+0x38>)
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019ac8:	4b0a      	ldr	r3, [pc, #40]	; (8019af4 <vPortSetupTimerInterrupt+0x3c>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	4a0a      	ldr	r2, [pc, #40]	; (8019af8 <vPortSetupTimerInterrupt+0x40>)
 8019ace:	fba2 2303 	umull	r2, r3, r2, r3
 8019ad2:	099b      	lsrs	r3, r3, #6
 8019ad4:	4a09      	ldr	r2, [pc, #36]	; (8019afc <vPortSetupTimerInterrupt+0x44>)
 8019ad6:	3b01      	subs	r3, #1
 8019ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019ada:	4b04      	ldr	r3, [pc, #16]	; (8019aec <vPortSetupTimerInterrupt+0x34>)
 8019adc:	2207      	movs	r2, #7
 8019ade:	601a      	str	r2, [r3, #0]
}
 8019ae0:	bf00      	nop
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae8:	4770      	bx	lr
 8019aea:	bf00      	nop
 8019aec:	e000e010 	.word	0xe000e010
 8019af0:	e000e018 	.word	0xe000e018
 8019af4:	20000000 	.word	0x20000000
 8019af8:	10624dd3 	.word	0x10624dd3
 8019afc:	e000e014 	.word	0xe000e014

08019b00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019b00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019b10 <vPortEnableVFP+0x10>
 8019b04:	6801      	ldr	r1, [r0, #0]
 8019b06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019b0a:	6001      	str	r1, [r0, #0]
 8019b0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019b0e:	bf00      	nop
 8019b10:	e000ed88 	.word	0xe000ed88

08019b14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019b14:	b480      	push	{r7}
 8019b16:	b085      	sub	sp, #20
 8019b18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019b1a:	f3ef 8305 	mrs	r3, IPSR
 8019b1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	2b0f      	cmp	r3, #15
 8019b24:	d913      	bls.n	8019b4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019b26:	4a16      	ldr	r2, [pc, #88]	; (8019b80 <vPortValidateInterruptPriority+0x6c>)
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	4413      	add	r3, r2
 8019b2c:	781b      	ldrb	r3, [r3, #0]
 8019b2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019b30:	4b14      	ldr	r3, [pc, #80]	; (8019b84 <vPortValidateInterruptPriority+0x70>)
 8019b32:	781b      	ldrb	r3, [r3, #0]
 8019b34:	7afa      	ldrb	r2, [r7, #11]
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d209      	bcs.n	8019b4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8019b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b3e:	f383 8811 	msr	BASEPRI, r3
 8019b42:	f3bf 8f6f 	isb	sy
 8019b46:	f3bf 8f4f 	dsb	sy
 8019b4a:	607b      	str	r3, [r7, #4]
 8019b4c:	e7fe      	b.n	8019b4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019b4e:	4b0e      	ldr	r3, [pc, #56]	; (8019b88 <vPortValidateInterruptPriority+0x74>)
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019b56:	4b0d      	ldr	r3, [pc, #52]	; (8019b8c <vPortValidateInterruptPriority+0x78>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	429a      	cmp	r2, r3
 8019b5c:	d909      	bls.n	8019b72 <vPortValidateInterruptPriority+0x5e>
 8019b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b62:	f383 8811 	msr	BASEPRI, r3
 8019b66:	f3bf 8f6f 	isb	sy
 8019b6a:	f3bf 8f4f 	dsb	sy
 8019b6e:	603b      	str	r3, [r7, #0]
 8019b70:	e7fe      	b.n	8019b70 <vPortValidateInterruptPriority+0x5c>
	}
 8019b72:	bf00      	nop
 8019b74:	3714      	adds	r7, #20
 8019b76:	46bd      	mov	sp, r7
 8019b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7c:	4770      	bx	lr
 8019b7e:	bf00      	nop
 8019b80:	e000e3f0 	.word	0xe000e3f0
 8019b84:	20006dd0 	.word	0x20006dd0
 8019b88:	e000ed0c 	.word	0xe000ed0c
 8019b8c:	20006dd4 	.word	0x20006dd4

08019b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b08a      	sub	sp, #40	; 0x28
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019b9c:	f7fe fdc2 	bl	8018724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019ba0:	4b57      	ldr	r3, [pc, #348]	; (8019d00 <pvPortMalloc+0x170>)
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d101      	bne.n	8019bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019ba8:	f000 f90c 	bl	8019dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019bac:	4b55      	ldr	r3, [pc, #340]	; (8019d04 <pvPortMalloc+0x174>)
 8019bae:	681a      	ldr	r2, [r3, #0]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	4013      	ands	r3, r2
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	f040 808c 	bne.w	8019cd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d01c      	beq.n	8019bfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8019bc0:	2208      	movs	r2, #8
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	4413      	add	r3, r2
 8019bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f003 0307 	and.w	r3, r3, #7
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d013      	beq.n	8019bfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	f023 0307 	bic.w	r3, r3, #7
 8019bd8:	3308      	adds	r3, #8
 8019bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	f003 0307 	and.w	r3, r3, #7
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d009      	beq.n	8019bfa <pvPortMalloc+0x6a>
 8019be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bea:	f383 8811 	msr	BASEPRI, r3
 8019bee:	f3bf 8f6f 	isb	sy
 8019bf2:	f3bf 8f4f 	dsb	sy
 8019bf6:	617b      	str	r3, [r7, #20]
 8019bf8:	e7fe      	b.n	8019bf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d068      	beq.n	8019cd2 <pvPortMalloc+0x142>
 8019c00:	4b41      	ldr	r3, [pc, #260]	; (8019d08 <pvPortMalloc+0x178>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	687a      	ldr	r2, [r7, #4]
 8019c06:	429a      	cmp	r2, r3
 8019c08:	d863      	bhi.n	8019cd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019c0a:	4b40      	ldr	r3, [pc, #256]	; (8019d0c <pvPortMalloc+0x17c>)
 8019c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019c0e:	4b3f      	ldr	r3, [pc, #252]	; (8019d0c <pvPortMalloc+0x17c>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019c14:	e004      	b.n	8019c20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c22:	685b      	ldr	r3, [r3, #4]
 8019c24:	687a      	ldr	r2, [r7, #4]
 8019c26:	429a      	cmp	r2, r3
 8019c28:	d903      	bls.n	8019c32 <pvPortMalloc+0xa2>
 8019c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d1f1      	bne.n	8019c16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019c32:	4b33      	ldr	r3, [pc, #204]	; (8019d00 <pvPortMalloc+0x170>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c38:	429a      	cmp	r2, r3
 8019c3a:	d04a      	beq.n	8019cd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019c3c:	6a3b      	ldr	r3, [r7, #32]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	2208      	movs	r2, #8
 8019c42:	4413      	add	r3, r2
 8019c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c48:	681a      	ldr	r2, [r3, #0]
 8019c4a:	6a3b      	ldr	r3, [r7, #32]
 8019c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c50:	685a      	ldr	r2, [r3, #4]
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	1ad2      	subs	r2, r2, r3
 8019c56:	2308      	movs	r3, #8
 8019c58:	005b      	lsls	r3, r3, #1
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	d91e      	bls.n	8019c9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	4413      	add	r3, r2
 8019c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c66:	69bb      	ldr	r3, [r7, #24]
 8019c68:	f003 0307 	and.w	r3, r3, #7
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d009      	beq.n	8019c84 <pvPortMalloc+0xf4>
 8019c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c74:	f383 8811 	msr	BASEPRI, r3
 8019c78:	f3bf 8f6f 	isb	sy
 8019c7c:	f3bf 8f4f 	dsb	sy
 8019c80:	613b      	str	r3, [r7, #16]
 8019c82:	e7fe      	b.n	8019c82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c86:	685a      	ldr	r2, [r3, #4]
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	1ad2      	subs	r2, r2, r3
 8019c8c:	69bb      	ldr	r3, [r7, #24]
 8019c8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c92:	687a      	ldr	r2, [r7, #4]
 8019c94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019c96:	69b8      	ldr	r0, [r7, #24]
 8019c98:	f000 f8f6 	bl	8019e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019c9c:	4b1a      	ldr	r3, [pc, #104]	; (8019d08 <pvPortMalloc+0x178>)
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca2:	685b      	ldr	r3, [r3, #4]
 8019ca4:	1ad3      	subs	r3, r2, r3
 8019ca6:	4a18      	ldr	r2, [pc, #96]	; (8019d08 <pvPortMalloc+0x178>)
 8019ca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019caa:	4b17      	ldr	r3, [pc, #92]	; (8019d08 <pvPortMalloc+0x178>)
 8019cac:	681a      	ldr	r2, [r3, #0]
 8019cae:	4b18      	ldr	r3, [pc, #96]	; (8019d10 <pvPortMalloc+0x180>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	429a      	cmp	r2, r3
 8019cb4:	d203      	bcs.n	8019cbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019cb6:	4b14      	ldr	r3, [pc, #80]	; (8019d08 <pvPortMalloc+0x178>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	4a15      	ldr	r2, [pc, #84]	; (8019d10 <pvPortMalloc+0x180>)
 8019cbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc0:	685a      	ldr	r2, [r3, #4]
 8019cc2:	4b10      	ldr	r3, [pc, #64]	; (8019d04 <pvPortMalloc+0x174>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	431a      	orrs	r2, r3
 8019cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cce:	2200      	movs	r2, #0
 8019cd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019cd2:	f7fe fd35 	bl	8018740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019cd6:	69fb      	ldr	r3, [r7, #28]
 8019cd8:	f003 0307 	and.w	r3, r3, #7
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d009      	beq.n	8019cf4 <pvPortMalloc+0x164>
 8019ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce4:	f383 8811 	msr	BASEPRI, r3
 8019ce8:	f3bf 8f6f 	isb	sy
 8019cec:	f3bf 8f4f 	dsb	sy
 8019cf0:	60fb      	str	r3, [r7, #12]
 8019cf2:	e7fe      	b.n	8019cf2 <pvPortMalloc+0x162>
	return pvReturn;
 8019cf4:	69fb      	ldr	r3, [r7, #28]
}
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	3728      	adds	r7, #40	; 0x28
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}
 8019cfe:	bf00      	nop
 8019d00:	2000a9e0 	.word	0x2000a9e0
 8019d04:	2000a9ec 	.word	0x2000a9ec
 8019d08:	2000a9e4 	.word	0x2000a9e4
 8019d0c:	2000a9d8 	.word	0x2000a9d8
 8019d10:	2000a9e8 	.word	0x2000a9e8

08019d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b086      	sub	sp, #24
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d046      	beq.n	8019db4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019d26:	2308      	movs	r3, #8
 8019d28:	425b      	negs	r3, r3
 8019d2a:	697a      	ldr	r2, [r7, #20]
 8019d2c:	4413      	add	r3, r2
 8019d2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019d34:	693b      	ldr	r3, [r7, #16]
 8019d36:	685a      	ldr	r2, [r3, #4]
 8019d38:	4b20      	ldr	r3, [pc, #128]	; (8019dbc <vPortFree+0xa8>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	4013      	ands	r3, r2
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d109      	bne.n	8019d56 <vPortFree+0x42>
 8019d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d46:	f383 8811 	msr	BASEPRI, r3
 8019d4a:	f3bf 8f6f 	isb	sy
 8019d4e:	f3bf 8f4f 	dsb	sy
 8019d52:	60fb      	str	r3, [r7, #12]
 8019d54:	e7fe      	b.n	8019d54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019d56:	693b      	ldr	r3, [r7, #16]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d009      	beq.n	8019d72 <vPortFree+0x5e>
 8019d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d62:	f383 8811 	msr	BASEPRI, r3
 8019d66:	f3bf 8f6f 	isb	sy
 8019d6a:	f3bf 8f4f 	dsb	sy
 8019d6e:	60bb      	str	r3, [r7, #8]
 8019d70:	e7fe      	b.n	8019d70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019d72:	693b      	ldr	r3, [r7, #16]
 8019d74:	685a      	ldr	r2, [r3, #4]
 8019d76:	4b11      	ldr	r3, [pc, #68]	; (8019dbc <vPortFree+0xa8>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4013      	ands	r3, r2
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d019      	beq.n	8019db4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019d80:	693b      	ldr	r3, [r7, #16]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d115      	bne.n	8019db4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019d88:	693b      	ldr	r3, [r7, #16]
 8019d8a:	685a      	ldr	r2, [r3, #4]
 8019d8c:	4b0b      	ldr	r3, [pc, #44]	; (8019dbc <vPortFree+0xa8>)
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	43db      	mvns	r3, r3
 8019d92:	401a      	ands	r2, r3
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019d98:	f7fe fcc4 	bl	8018724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	685a      	ldr	r2, [r3, #4]
 8019da0:	4b07      	ldr	r3, [pc, #28]	; (8019dc0 <vPortFree+0xac>)
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	4413      	add	r3, r2
 8019da6:	4a06      	ldr	r2, [pc, #24]	; (8019dc0 <vPortFree+0xac>)
 8019da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019daa:	6938      	ldr	r0, [r7, #16]
 8019dac:	f000 f86c 	bl	8019e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019db0:	f7fe fcc6 	bl	8018740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019db4:	bf00      	nop
 8019db6:	3718      	adds	r7, #24
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	2000a9ec 	.word	0x2000a9ec
 8019dc0:	2000a9e4 	.word	0x2000a9e4

08019dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019dc4:	b480      	push	{r7}
 8019dc6:	b085      	sub	sp, #20
 8019dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019dd0:	4b27      	ldr	r3, [pc, #156]	; (8019e70 <prvHeapInit+0xac>)
 8019dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	f003 0307 	and.w	r3, r3, #7
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d00c      	beq.n	8019df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	3307      	adds	r3, #7
 8019de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	f023 0307 	bic.w	r3, r3, #7
 8019dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019dec:	68ba      	ldr	r2, [r7, #8]
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	1ad3      	subs	r3, r2, r3
 8019df2:	4a1f      	ldr	r2, [pc, #124]	; (8019e70 <prvHeapInit+0xac>)
 8019df4:	4413      	add	r3, r2
 8019df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019dfc:	4a1d      	ldr	r2, [pc, #116]	; (8019e74 <prvHeapInit+0xb0>)
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019e02:	4b1c      	ldr	r3, [pc, #112]	; (8019e74 <prvHeapInit+0xb0>)
 8019e04:	2200      	movs	r2, #0
 8019e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	68ba      	ldr	r2, [r7, #8]
 8019e0c:	4413      	add	r3, r2
 8019e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019e10:	2208      	movs	r2, #8
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	1a9b      	subs	r3, r3, r2
 8019e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f023 0307 	bic.w	r3, r3, #7
 8019e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	4a15      	ldr	r2, [pc, #84]	; (8019e78 <prvHeapInit+0xb4>)
 8019e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019e26:	4b14      	ldr	r3, [pc, #80]	; (8019e78 <prvHeapInit+0xb4>)
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019e2e:	4b12      	ldr	r3, [pc, #72]	; (8019e78 <prvHeapInit+0xb4>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	2200      	movs	r2, #0
 8019e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	68fa      	ldr	r2, [r7, #12]
 8019e3e:	1ad2      	subs	r2, r2, r3
 8019e40:	683b      	ldr	r3, [r7, #0]
 8019e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019e44:	4b0c      	ldr	r3, [pc, #48]	; (8019e78 <prvHeapInit+0xb4>)
 8019e46:	681a      	ldr	r2, [r3, #0]
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	4a0a      	ldr	r2, [pc, #40]	; (8019e7c <prvHeapInit+0xb8>)
 8019e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	4a09      	ldr	r2, [pc, #36]	; (8019e80 <prvHeapInit+0xbc>)
 8019e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019e5c:	4b09      	ldr	r3, [pc, #36]	; (8019e84 <prvHeapInit+0xc0>)
 8019e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019e62:	601a      	str	r2, [r3, #0]
}
 8019e64:	bf00      	nop
 8019e66:	3714      	adds	r7, #20
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6e:	4770      	bx	lr
 8019e70:	20006dd8 	.word	0x20006dd8
 8019e74:	2000a9d8 	.word	0x2000a9d8
 8019e78:	2000a9e0 	.word	0x2000a9e0
 8019e7c:	2000a9e8 	.word	0x2000a9e8
 8019e80:	2000a9e4 	.word	0x2000a9e4
 8019e84:	2000a9ec 	.word	0x2000a9ec

08019e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b085      	sub	sp, #20
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019e90:	4b28      	ldr	r3, [pc, #160]	; (8019f34 <prvInsertBlockIntoFreeList+0xac>)
 8019e92:	60fb      	str	r3, [r7, #12]
 8019e94:	e002      	b.n	8019e9c <prvInsertBlockIntoFreeList+0x14>
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	60fb      	str	r3, [r7, #12]
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	687a      	ldr	r2, [r7, #4]
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d8f7      	bhi.n	8019e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	68ba      	ldr	r2, [r7, #8]
 8019eb0:	4413      	add	r3, r2
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	d108      	bne.n	8019eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	685a      	ldr	r2, [r3, #4]
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	685b      	ldr	r3, [r3, #4]
 8019ec0:	441a      	add	r2, r3
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	685b      	ldr	r3, [r3, #4]
 8019ed2:	68ba      	ldr	r2, [r7, #8]
 8019ed4:	441a      	add	r2, r3
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	429a      	cmp	r2, r3
 8019edc:	d118      	bne.n	8019f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	681a      	ldr	r2, [r3, #0]
 8019ee2:	4b15      	ldr	r3, [pc, #84]	; (8019f38 <prvInsertBlockIntoFreeList+0xb0>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d00d      	beq.n	8019f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	685a      	ldr	r2, [r3, #4]
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	441a      	add	r2, r3
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	681a      	ldr	r2, [r3, #0]
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	601a      	str	r2, [r3, #0]
 8019f04:	e008      	b.n	8019f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019f06:	4b0c      	ldr	r3, [pc, #48]	; (8019f38 <prvInsertBlockIntoFreeList+0xb0>)
 8019f08:	681a      	ldr	r2, [r3, #0]
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	601a      	str	r2, [r3, #0]
 8019f0e:	e003      	b.n	8019f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	681a      	ldr	r2, [r3, #0]
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019f18:	68fa      	ldr	r2, [r7, #12]
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	d002      	beq.n	8019f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	687a      	ldr	r2, [r7, #4]
 8019f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019f26:	bf00      	nop
 8019f28:	3714      	adds	r7, #20
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f30:	4770      	bx	lr
 8019f32:	bf00      	nop
 8019f34:	2000a9d8 	.word	0x2000a9d8
 8019f38:	2000a9e0 	.word	0x2000a9e0

08019f3c <__errno>:
 8019f3c:	4b01      	ldr	r3, [pc, #4]	; (8019f44 <__errno+0x8>)
 8019f3e:	6818      	ldr	r0, [r3, #0]
 8019f40:	4770      	bx	lr
 8019f42:	bf00      	nop
 8019f44:	20000014 	.word	0x20000014

08019f48 <__libc_init_array>:
 8019f48:	b570      	push	{r4, r5, r6, lr}
 8019f4a:	4e0d      	ldr	r6, [pc, #52]	; (8019f80 <__libc_init_array+0x38>)
 8019f4c:	4c0d      	ldr	r4, [pc, #52]	; (8019f84 <__libc_init_array+0x3c>)
 8019f4e:	1ba4      	subs	r4, r4, r6
 8019f50:	10a4      	asrs	r4, r4, #2
 8019f52:	2500      	movs	r5, #0
 8019f54:	42a5      	cmp	r5, r4
 8019f56:	d109      	bne.n	8019f6c <__libc_init_array+0x24>
 8019f58:	4e0b      	ldr	r6, [pc, #44]	; (8019f88 <__libc_init_array+0x40>)
 8019f5a:	4c0c      	ldr	r4, [pc, #48]	; (8019f8c <__libc_init_array+0x44>)
 8019f5c:	f000 fc30 	bl	801a7c0 <_init>
 8019f60:	1ba4      	subs	r4, r4, r6
 8019f62:	10a4      	asrs	r4, r4, #2
 8019f64:	2500      	movs	r5, #0
 8019f66:	42a5      	cmp	r5, r4
 8019f68:	d105      	bne.n	8019f76 <__libc_init_array+0x2e>
 8019f6a:	bd70      	pop	{r4, r5, r6, pc}
 8019f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019f70:	4798      	blx	r3
 8019f72:	3501      	adds	r5, #1
 8019f74:	e7ee      	b.n	8019f54 <__libc_init_array+0xc>
 8019f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019f7a:	4798      	blx	r3
 8019f7c:	3501      	adds	r5, #1
 8019f7e:	e7f2      	b.n	8019f66 <__libc_init_array+0x1e>
 8019f80:	0801ab40 	.word	0x0801ab40
 8019f84:	0801ab40 	.word	0x0801ab40
 8019f88:	0801ab40 	.word	0x0801ab40
 8019f8c:	0801ab44 	.word	0x0801ab44

08019f90 <memcpy>:
 8019f90:	b510      	push	{r4, lr}
 8019f92:	1e43      	subs	r3, r0, #1
 8019f94:	440a      	add	r2, r1
 8019f96:	4291      	cmp	r1, r2
 8019f98:	d100      	bne.n	8019f9c <memcpy+0xc>
 8019f9a:	bd10      	pop	{r4, pc}
 8019f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fa4:	e7f7      	b.n	8019f96 <memcpy+0x6>

08019fa6 <memset>:
 8019fa6:	4402      	add	r2, r0
 8019fa8:	4603      	mov	r3, r0
 8019faa:	4293      	cmp	r3, r2
 8019fac:	d100      	bne.n	8019fb0 <memset+0xa>
 8019fae:	4770      	bx	lr
 8019fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8019fb4:	e7f9      	b.n	8019faa <memset+0x4>
	...

08019fb8 <siprintf>:
 8019fb8:	b40e      	push	{r1, r2, r3}
 8019fba:	b500      	push	{lr}
 8019fbc:	b09c      	sub	sp, #112	; 0x70
 8019fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8019fc0:	9002      	str	r0, [sp, #8]
 8019fc2:	9006      	str	r0, [sp, #24]
 8019fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019fc8:	4809      	ldr	r0, [pc, #36]	; (8019ff0 <siprintf+0x38>)
 8019fca:	9107      	str	r1, [sp, #28]
 8019fcc:	9104      	str	r1, [sp, #16]
 8019fce:	4909      	ldr	r1, [pc, #36]	; (8019ff4 <siprintf+0x3c>)
 8019fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019fd4:	9105      	str	r1, [sp, #20]
 8019fd6:	6800      	ldr	r0, [r0, #0]
 8019fd8:	9301      	str	r3, [sp, #4]
 8019fda:	a902      	add	r1, sp, #8
 8019fdc:	f000 f86e 	bl	801a0bc <_svfiprintf_r>
 8019fe0:	9b02      	ldr	r3, [sp, #8]
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	701a      	strb	r2, [r3, #0]
 8019fe6:	b01c      	add	sp, #112	; 0x70
 8019fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019fec:	b003      	add	sp, #12
 8019fee:	4770      	bx	lr
 8019ff0:	20000014 	.word	0x20000014
 8019ff4:	ffff0208 	.word	0xffff0208

08019ff8 <strcpy>:
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ffe:	f803 2b01 	strb.w	r2, [r3], #1
 801a002:	2a00      	cmp	r2, #0
 801a004:	d1f9      	bne.n	8019ffa <strcpy+0x2>
 801a006:	4770      	bx	lr

0801a008 <__ssputs_r>:
 801a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a00c:	688e      	ldr	r6, [r1, #8]
 801a00e:	429e      	cmp	r6, r3
 801a010:	4682      	mov	sl, r0
 801a012:	460c      	mov	r4, r1
 801a014:	4690      	mov	r8, r2
 801a016:	4699      	mov	r9, r3
 801a018:	d837      	bhi.n	801a08a <__ssputs_r+0x82>
 801a01a:	898a      	ldrh	r2, [r1, #12]
 801a01c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a020:	d031      	beq.n	801a086 <__ssputs_r+0x7e>
 801a022:	6825      	ldr	r5, [r4, #0]
 801a024:	6909      	ldr	r1, [r1, #16]
 801a026:	1a6f      	subs	r7, r5, r1
 801a028:	6965      	ldr	r5, [r4, #20]
 801a02a:	2302      	movs	r3, #2
 801a02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a030:	fb95 f5f3 	sdiv	r5, r5, r3
 801a034:	f109 0301 	add.w	r3, r9, #1
 801a038:	443b      	add	r3, r7
 801a03a:	429d      	cmp	r5, r3
 801a03c:	bf38      	it	cc
 801a03e:	461d      	movcc	r5, r3
 801a040:	0553      	lsls	r3, r2, #21
 801a042:	d530      	bpl.n	801a0a6 <__ssputs_r+0x9e>
 801a044:	4629      	mov	r1, r5
 801a046:	f000 fb21 	bl	801a68c <_malloc_r>
 801a04a:	4606      	mov	r6, r0
 801a04c:	b950      	cbnz	r0, 801a064 <__ssputs_r+0x5c>
 801a04e:	230c      	movs	r3, #12
 801a050:	f8ca 3000 	str.w	r3, [sl]
 801a054:	89a3      	ldrh	r3, [r4, #12]
 801a056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a05a:	81a3      	strh	r3, [r4, #12]
 801a05c:	f04f 30ff 	mov.w	r0, #4294967295
 801a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a064:	463a      	mov	r2, r7
 801a066:	6921      	ldr	r1, [r4, #16]
 801a068:	f7ff ff92 	bl	8019f90 <memcpy>
 801a06c:	89a3      	ldrh	r3, [r4, #12]
 801a06e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a076:	81a3      	strh	r3, [r4, #12]
 801a078:	6126      	str	r6, [r4, #16]
 801a07a:	6165      	str	r5, [r4, #20]
 801a07c:	443e      	add	r6, r7
 801a07e:	1bed      	subs	r5, r5, r7
 801a080:	6026      	str	r6, [r4, #0]
 801a082:	60a5      	str	r5, [r4, #8]
 801a084:	464e      	mov	r6, r9
 801a086:	454e      	cmp	r6, r9
 801a088:	d900      	bls.n	801a08c <__ssputs_r+0x84>
 801a08a:	464e      	mov	r6, r9
 801a08c:	4632      	mov	r2, r6
 801a08e:	4641      	mov	r1, r8
 801a090:	6820      	ldr	r0, [r4, #0]
 801a092:	f000 fa93 	bl	801a5bc <memmove>
 801a096:	68a3      	ldr	r3, [r4, #8]
 801a098:	1b9b      	subs	r3, r3, r6
 801a09a:	60a3      	str	r3, [r4, #8]
 801a09c:	6823      	ldr	r3, [r4, #0]
 801a09e:	441e      	add	r6, r3
 801a0a0:	6026      	str	r6, [r4, #0]
 801a0a2:	2000      	movs	r0, #0
 801a0a4:	e7dc      	b.n	801a060 <__ssputs_r+0x58>
 801a0a6:	462a      	mov	r2, r5
 801a0a8:	f000 fb4a 	bl	801a740 <_realloc_r>
 801a0ac:	4606      	mov	r6, r0
 801a0ae:	2800      	cmp	r0, #0
 801a0b0:	d1e2      	bne.n	801a078 <__ssputs_r+0x70>
 801a0b2:	6921      	ldr	r1, [r4, #16]
 801a0b4:	4650      	mov	r0, sl
 801a0b6:	f000 fa9b 	bl	801a5f0 <_free_r>
 801a0ba:	e7c8      	b.n	801a04e <__ssputs_r+0x46>

0801a0bc <_svfiprintf_r>:
 801a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0c0:	461d      	mov	r5, r3
 801a0c2:	898b      	ldrh	r3, [r1, #12]
 801a0c4:	061f      	lsls	r7, r3, #24
 801a0c6:	b09d      	sub	sp, #116	; 0x74
 801a0c8:	4680      	mov	r8, r0
 801a0ca:	460c      	mov	r4, r1
 801a0cc:	4616      	mov	r6, r2
 801a0ce:	d50f      	bpl.n	801a0f0 <_svfiprintf_r+0x34>
 801a0d0:	690b      	ldr	r3, [r1, #16]
 801a0d2:	b96b      	cbnz	r3, 801a0f0 <_svfiprintf_r+0x34>
 801a0d4:	2140      	movs	r1, #64	; 0x40
 801a0d6:	f000 fad9 	bl	801a68c <_malloc_r>
 801a0da:	6020      	str	r0, [r4, #0]
 801a0dc:	6120      	str	r0, [r4, #16]
 801a0de:	b928      	cbnz	r0, 801a0ec <_svfiprintf_r+0x30>
 801a0e0:	230c      	movs	r3, #12
 801a0e2:	f8c8 3000 	str.w	r3, [r8]
 801a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ea:	e0c8      	b.n	801a27e <_svfiprintf_r+0x1c2>
 801a0ec:	2340      	movs	r3, #64	; 0x40
 801a0ee:	6163      	str	r3, [r4, #20]
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	9309      	str	r3, [sp, #36]	; 0x24
 801a0f4:	2320      	movs	r3, #32
 801a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0fa:	2330      	movs	r3, #48	; 0x30
 801a0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a100:	9503      	str	r5, [sp, #12]
 801a102:	f04f 0b01 	mov.w	fp, #1
 801a106:	4637      	mov	r7, r6
 801a108:	463d      	mov	r5, r7
 801a10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a10e:	b10b      	cbz	r3, 801a114 <_svfiprintf_r+0x58>
 801a110:	2b25      	cmp	r3, #37	; 0x25
 801a112:	d13e      	bne.n	801a192 <_svfiprintf_r+0xd6>
 801a114:	ebb7 0a06 	subs.w	sl, r7, r6
 801a118:	d00b      	beq.n	801a132 <_svfiprintf_r+0x76>
 801a11a:	4653      	mov	r3, sl
 801a11c:	4632      	mov	r2, r6
 801a11e:	4621      	mov	r1, r4
 801a120:	4640      	mov	r0, r8
 801a122:	f7ff ff71 	bl	801a008 <__ssputs_r>
 801a126:	3001      	adds	r0, #1
 801a128:	f000 80a4 	beq.w	801a274 <_svfiprintf_r+0x1b8>
 801a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a12e:	4453      	add	r3, sl
 801a130:	9309      	str	r3, [sp, #36]	; 0x24
 801a132:	783b      	ldrb	r3, [r7, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	f000 809d 	beq.w	801a274 <_svfiprintf_r+0x1b8>
 801a13a:	2300      	movs	r3, #0
 801a13c:	f04f 32ff 	mov.w	r2, #4294967295
 801a140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a144:	9304      	str	r3, [sp, #16]
 801a146:	9307      	str	r3, [sp, #28]
 801a148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a14c:	931a      	str	r3, [sp, #104]	; 0x68
 801a14e:	462f      	mov	r7, r5
 801a150:	2205      	movs	r2, #5
 801a152:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a156:	4850      	ldr	r0, [pc, #320]	; (801a298 <_svfiprintf_r+0x1dc>)
 801a158:	f7f5 ff8a 	bl	8010070 <memchr>
 801a15c:	9b04      	ldr	r3, [sp, #16]
 801a15e:	b9d0      	cbnz	r0, 801a196 <_svfiprintf_r+0xda>
 801a160:	06d9      	lsls	r1, r3, #27
 801a162:	bf44      	itt	mi
 801a164:	2220      	movmi	r2, #32
 801a166:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a16a:	071a      	lsls	r2, r3, #28
 801a16c:	bf44      	itt	mi
 801a16e:	222b      	movmi	r2, #43	; 0x2b
 801a170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a174:	782a      	ldrb	r2, [r5, #0]
 801a176:	2a2a      	cmp	r2, #42	; 0x2a
 801a178:	d015      	beq.n	801a1a6 <_svfiprintf_r+0xea>
 801a17a:	9a07      	ldr	r2, [sp, #28]
 801a17c:	462f      	mov	r7, r5
 801a17e:	2000      	movs	r0, #0
 801a180:	250a      	movs	r5, #10
 801a182:	4639      	mov	r1, r7
 801a184:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a188:	3b30      	subs	r3, #48	; 0x30
 801a18a:	2b09      	cmp	r3, #9
 801a18c:	d94d      	bls.n	801a22a <_svfiprintf_r+0x16e>
 801a18e:	b1b8      	cbz	r0, 801a1c0 <_svfiprintf_r+0x104>
 801a190:	e00f      	b.n	801a1b2 <_svfiprintf_r+0xf6>
 801a192:	462f      	mov	r7, r5
 801a194:	e7b8      	b.n	801a108 <_svfiprintf_r+0x4c>
 801a196:	4a40      	ldr	r2, [pc, #256]	; (801a298 <_svfiprintf_r+0x1dc>)
 801a198:	1a80      	subs	r0, r0, r2
 801a19a:	fa0b f000 	lsl.w	r0, fp, r0
 801a19e:	4318      	orrs	r0, r3
 801a1a0:	9004      	str	r0, [sp, #16]
 801a1a2:	463d      	mov	r5, r7
 801a1a4:	e7d3      	b.n	801a14e <_svfiprintf_r+0x92>
 801a1a6:	9a03      	ldr	r2, [sp, #12]
 801a1a8:	1d11      	adds	r1, r2, #4
 801a1aa:	6812      	ldr	r2, [r2, #0]
 801a1ac:	9103      	str	r1, [sp, #12]
 801a1ae:	2a00      	cmp	r2, #0
 801a1b0:	db01      	blt.n	801a1b6 <_svfiprintf_r+0xfa>
 801a1b2:	9207      	str	r2, [sp, #28]
 801a1b4:	e004      	b.n	801a1c0 <_svfiprintf_r+0x104>
 801a1b6:	4252      	negs	r2, r2
 801a1b8:	f043 0302 	orr.w	r3, r3, #2
 801a1bc:	9207      	str	r2, [sp, #28]
 801a1be:	9304      	str	r3, [sp, #16]
 801a1c0:	783b      	ldrb	r3, [r7, #0]
 801a1c2:	2b2e      	cmp	r3, #46	; 0x2e
 801a1c4:	d10c      	bne.n	801a1e0 <_svfiprintf_r+0x124>
 801a1c6:	787b      	ldrb	r3, [r7, #1]
 801a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 801a1ca:	d133      	bne.n	801a234 <_svfiprintf_r+0x178>
 801a1cc:	9b03      	ldr	r3, [sp, #12]
 801a1ce:	1d1a      	adds	r2, r3, #4
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	9203      	str	r2, [sp, #12]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	bfb8      	it	lt
 801a1d8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1dc:	3702      	adds	r7, #2
 801a1de:	9305      	str	r3, [sp, #20]
 801a1e0:	4d2e      	ldr	r5, [pc, #184]	; (801a29c <_svfiprintf_r+0x1e0>)
 801a1e2:	7839      	ldrb	r1, [r7, #0]
 801a1e4:	2203      	movs	r2, #3
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	f7f5 ff42 	bl	8010070 <memchr>
 801a1ec:	b138      	cbz	r0, 801a1fe <_svfiprintf_r+0x142>
 801a1ee:	2340      	movs	r3, #64	; 0x40
 801a1f0:	1b40      	subs	r0, r0, r5
 801a1f2:	fa03 f000 	lsl.w	r0, r3, r0
 801a1f6:	9b04      	ldr	r3, [sp, #16]
 801a1f8:	4303      	orrs	r3, r0
 801a1fa:	3701      	adds	r7, #1
 801a1fc:	9304      	str	r3, [sp, #16]
 801a1fe:	7839      	ldrb	r1, [r7, #0]
 801a200:	4827      	ldr	r0, [pc, #156]	; (801a2a0 <_svfiprintf_r+0x1e4>)
 801a202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a206:	2206      	movs	r2, #6
 801a208:	1c7e      	adds	r6, r7, #1
 801a20a:	f7f5 ff31 	bl	8010070 <memchr>
 801a20e:	2800      	cmp	r0, #0
 801a210:	d038      	beq.n	801a284 <_svfiprintf_r+0x1c8>
 801a212:	4b24      	ldr	r3, [pc, #144]	; (801a2a4 <_svfiprintf_r+0x1e8>)
 801a214:	bb13      	cbnz	r3, 801a25c <_svfiprintf_r+0x1a0>
 801a216:	9b03      	ldr	r3, [sp, #12]
 801a218:	3307      	adds	r3, #7
 801a21a:	f023 0307 	bic.w	r3, r3, #7
 801a21e:	3308      	adds	r3, #8
 801a220:	9303      	str	r3, [sp, #12]
 801a222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a224:	444b      	add	r3, r9
 801a226:	9309      	str	r3, [sp, #36]	; 0x24
 801a228:	e76d      	b.n	801a106 <_svfiprintf_r+0x4a>
 801a22a:	fb05 3202 	mla	r2, r5, r2, r3
 801a22e:	2001      	movs	r0, #1
 801a230:	460f      	mov	r7, r1
 801a232:	e7a6      	b.n	801a182 <_svfiprintf_r+0xc6>
 801a234:	2300      	movs	r3, #0
 801a236:	3701      	adds	r7, #1
 801a238:	9305      	str	r3, [sp, #20]
 801a23a:	4619      	mov	r1, r3
 801a23c:	250a      	movs	r5, #10
 801a23e:	4638      	mov	r0, r7
 801a240:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a244:	3a30      	subs	r2, #48	; 0x30
 801a246:	2a09      	cmp	r2, #9
 801a248:	d903      	bls.n	801a252 <_svfiprintf_r+0x196>
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d0c8      	beq.n	801a1e0 <_svfiprintf_r+0x124>
 801a24e:	9105      	str	r1, [sp, #20]
 801a250:	e7c6      	b.n	801a1e0 <_svfiprintf_r+0x124>
 801a252:	fb05 2101 	mla	r1, r5, r1, r2
 801a256:	2301      	movs	r3, #1
 801a258:	4607      	mov	r7, r0
 801a25a:	e7f0      	b.n	801a23e <_svfiprintf_r+0x182>
 801a25c:	ab03      	add	r3, sp, #12
 801a25e:	9300      	str	r3, [sp, #0]
 801a260:	4622      	mov	r2, r4
 801a262:	4b11      	ldr	r3, [pc, #68]	; (801a2a8 <_svfiprintf_r+0x1ec>)
 801a264:	a904      	add	r1, sp, #16
 801a266:	4640      	mov	r0, r8
 801a268:	f3af 8000 	nop.w
 801a26c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a270:	4681      	mov	r9, r0
 801a272:	d1d6      	bne.n	801a222 <_svfiprintf_r+0x166>
 801a274:	89a3      	ldrh	r3, [r4, #12]
 801a276:	065b      	lsls	r3, r3, #25
 801a278:	f53f af35 	bmi.w	801a0e6 <_svfiprintf_r+0x2a>
 801a27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a27e:	b01d      	add	sp, #116	; 0x74
 801a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a284:	ab03      	add	r3, sp, #12
 801a286:	9300      	str	r3, [sp, #0]
 801a288:	4622      	mov	r2, r4
 801a28a:	4b07      	ldr	r3, [pc, #28]	; (801a2a8 <_svfiprintf_r+0x1ec>)
 801a28c:	a904      	add	r1, sp, #16
 801a28e:	4640      	mov	r0, r8
 801a290:	f000 f882 	bl	801a398 <_printf_i>
 801a294:	e7ea      	b.n	801a26c <_svfiprintf_r+0x1b0>
 801a296:	bf00      	nop
 801a298:	0801ab04 	.word	0x0801ab04
 801a29c:	0801ab0a 	.word	0x0801ab0a
 801a2a0:	0801ab0e 	.word	0x0801ab0e
 801a2a4:	00000000 	.word	0x00000000
 801a2a8:	0801a009 	.word	0x0801a009

0801a2ac <_printf_common>:
 801a2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2b0:	4691      	mov	r9, r2
 801a2b2:	461f      	mov	r7, r3
 801a2b4:	688a      	ldr	r2, [r1, #8]
 801a2b6:	690b      	ldr	r3, [r1, #16]
 801a2b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	bfb8      	it	lt
 801a2c0:	4613      	movlt	r3, r2
 801a2c2:	f8c9 3000 	str.w	r3, [r9]
 801a2c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a2ca:	4606      	mov	r6, r0
 801a2cc:	460c      	mov	r4, r1
 801a2ce:	b112      	cbz	r2, 801a2d6 <_printf_common+0x2a>
 801a2d0:	3301      	adds	r3, #1
 801a2d2:	f8c9 3000 	str.w	r3, [r9]
 801a2d6:	6823      	ldr	r3, [r4, #0]
 801a2d8:	0699      	lsls	r1, r3, #26
 801a2da:	bf42      	ittt	mi
 801a2dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a2e0:	3302      	addmi	r3, #2
 801a2e2:	f8c9 3000 	strmi.w	r3, [r9]
 801a2e6:	6825      	ldr	r5, [r4, #0]
 801a2e8:	f015 0506 	ands.w	r5, r5, #6
 801a2ec:	d107      	bne.n	801a2fe <_printf_common+0x52>
 801a2ee:	f104 0a19 	add.w	sl, r4, #25
 801a2f2:	68e3      	ldr	r3, [r4, #12]
 801a2f4:	f8d9 2000 	ldr.w	r2, [r9]
 801a2f8:	1a9b      	subs	r3, r3, r2
 801a2fa:	42ab      	cmp	r3, r5
 801a2fc:	dc28      	bgt.n	801a350 <_printf_common+0xa4>
 801a2fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a302:	6822      	ldr	r2, [r4, #0]
 801a304:	3300      	adds	r3, #0
 801a306:	bf18      	it	ne
 801a308:	2301      	movne	r3, #1
 801a30a:	0692      	lsls	r2, r2, #26
 801a30c:	d42d      	bmi.n	801a36a <_printf_common+0xbe>
 801a30e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a312:	4639      	mov	r1, r7
 801a314:	4630      	mov	r0, r6
 801a316:	47c0      	blx	r8
 801a318:	3001      	adds	r0, #1
 801a31a:	d020      	beq.n	801a35e <_printf_common+0xb2>
 801a31c:	6823      	ldr	r3, [r4, #0]
 801a31e:	68e5      	ldr	r5, [r4, #12]
 801a320:	f8d9 2000 	ldr.w	r2, [r9]
 801a324:	f003 0306 	and.w	r3, r3, #6
 801a328:	2b04      	cmp	r3, #4
 801a32a:	bf08      	it	eq
 801a32c:	1aad      	subeq	r5, r5, r2
 801a32e:	68a3      	ldr	r3, [r4, #8]
 801a330:	6922      	ldr	r2, [r4, #16]
 801a332:	bf0c      	ite	eq
 801a334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a338:	2500      	movne	r5, #0
 801a33a:	4293      	cmp	r3, r2
 801a33c:	bfc4      	itt	gt
 801a33e:	1a9b      	subgt	r3, r3, r2
 801a340:	18ed      	addgt	r5, r5, r3
 801a342:	f04f 0900 	mov.w	r9, #0
 801a346:	341a      	adds	r4, #26
 801a348:	454d      	cmp	r5, r9
 801a34a:	d11a      	bne.n	801a382 <_printf_common+0xd6>
 801a34c:	2000      	movs	r0, #0
 801a34e:	e008      	b.n	801a362 <_printf_common+0xb6>
 801a350:	2301      	movs	r3, #1
 801a352:	4652      	mov	r2, sl
 801a354:	4639      	mov	r1, r7
 801a356:	4630      	mov	r0, r6
 801a358:	47c0      	blx	r8
 801a35a:	3001      	adds	r0, #1
 801a35c:	d103      	bne.n	801a366 <_printf_common+0xba>
 801a35e:	f04f 30ff 	mov.w	r0, #4294967295
 801a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a366:	3501      	adds	r5, #1
 801a368:	e7c3      	b.n	801a2f2 <_printf_common+0x46>
 801a36a:	18e1      	adds	r1, r4, r3
 801a36c:	1c5a      	adds	r2, r3, #1
 801a36e:	2030      	movs	r0, #48	; 0x30
 801a370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a374:	4422      	add	r2, r4
 801a376:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a37a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a37e:	3302      	adds	r3, #2
 801a380:	e7c5      	b.n	801a30e <_printf_common+0x62>
 801a382:	2301      	movs	r3, #1
 801a384:	4622      	mov	r2, r4
 801a386:	4639      	mov	r1, r7
 801a388:	4630      	mov	r0, r6
 801a38a:	47c0      	blx	r8
 801a38c:	3001      	adds	r0, #1
 801a38e:	d0e6      	beq.n	801a35e <_printf_common+0xb2>
 801a390:	f109 0901 	add.w	r9, r9, #1
 801a394:	e7d8      	b.n	801a348 <_printf_common+0x9c>
	...

0801a398 <_printf_i>:
 801a398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a39c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a3a0:	460c      	mov	r4, r1
 801a3a2:	7e09      	ldrb	r1, [r1, #24]
 801a3a4:	b085      	sub	sp, #20
 801a3a6:	296e      	cmp	r1, #110	; 0x6e
 801a3a8:	4617      	mov	r7, r2
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	4698      	mov	r8, r3
 801a3ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a3b0:	f000 80b3 	beq.w	801a51a <_printf_i+0x182>
 801a3b4:	d822      	bhi.n	801a3fc <_printf_i+0x64>
 801a3b6:	2963      	cmp	r1, #99	; 0x63
 801a3b8:	d036      	beq.n	801a428 <_printf_i+0x90>
 801a3ba:	d80a      	bhi.n	801a3d2 <_printf_i+0x3a>
 801a3bc:	2900      	cmp	r1, #0
 801a3be:	f000 80b9 	beq.w	801a534 <_printf_i+0x19c>
 801a3c2:	2958      	cmp	r1, #88	; 0x58
 801a3c4:	f000 8083 	beq.w	801a4ce <_printf_i+0x136>
 801a3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a3d0:	e032      	b.n	801a438 <_printf_i+0xa0>
 801a3d2:	2964      	cmp	r1, #100	; 0x64
 801a3d4:	d001      	beq.n	801a3da <_printf_i+0x42>
 801a3d6:	2969      	cmp	r1, #105	; 0x69
 801a3d8:	d1f6      	bne.n	801a3c8 <_printf_i+0x30>
 801a3da:	6820      	ldr	r0, [r4, #0]
 801a3dc:	6813      	ldr	r3, [r2, #0]
 801a3de:	0605      	lsls	r5, r0, #24
 801a3e0:	f103 0104 	add.w	r1, r3, #4
 801a3e4:	d52a      	bpl.n	801a43c <_printf_i+0xa4>
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	6011      	str	r1, [r2, #0]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	da03      	bge.n	801a3f6 <_printf_i+0x5e>
 801a3ee:	222d      	movs	r2, #45	; 0x2d
 801a3f0:	425b      	negs	r3, r3
 801a3f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a3f6:	486f      	ldr	r0, [pc, #444]	; (801a5b4 <_printf_i+0x21c>)
 801a3f8:	220a      	movs	r2, #10
 801a3fa:	e039      	b.n	801a470 <_printf_i+0xd8>
 801a3fc:	2973      	cmp	r1, #115	; 0x73
 801a3fe:	f000 809d 	beq.w	801a53c <_printf_i+0x1a4>
 801a402:	d808      	bhi.n	801a416 <_printf_i+0x7e>
 801a404:	296f      	cmp	r1, #111	; 0x6f
 801a406:	d020      	beq.n	801a44a <_printf_i+0xb2>
 801a408:	2970      	cmp	r1, #112	; 0x70
 801a40a:	d1dd      	bne.n	801a3c8 <_printf_i+0x30>
 801a40c:	6823      	ldr	r3, [r4, #0]
 801a40e:	f043 0320 	orr.w	r3, r3, #32
 801a412:	6023      	str	r3, [r4, #0]
 801a414:	e003      	b.n	801a41e <_printf_i+0x86>
 801a416:	2975      	cmp	r1, #117	; 0x75
 801a418:	d017      	beq.n	801a44a <_printf_i+0xb2>
 801a41a:	2978      	cmp	r1, #120	; 0x78
 801a41c:	d1d4      	bne.n	801a3c8 <_printf_i+0x30>
 801a41e:	2378      	movs	r3, #120	; 0x78
 801a420:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a424:	4864      	ldr	r0, [pc, #400]	; (801a5b8 <_printf_i+0x220>)
 801a426:	e055      	b.n	801a4d4 <_printf_i+0x13c>
 801a428:	6813      	ldr	r3, [r2, #0]
 801a42a:	1d19      	adds	r1, r3, #4
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	6011      	str	r1, [r2, #0]
 801a430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a438:	2301      	movs	r3, #1
 801a43a:	e08c      	b.n	801a556 <_printf_i+0x1be>
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	6011      	str	r1, [r2, #0]
 801a440:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a444:	bf18      	it	ne
 801a446:	b21b      	sxthne	r3, r3
 801a448:	e7cf      	b.n	801a3ea <_printf_i+0x52>
 801a44a:	6813      	ldr	r3, [r2, #0]
 801a44c:	6825      	ldr	r5, [r4, #0]
 801a44e:	1d18      	adds	r0, r3, #4
 801a450:	6010      	str	r0, [r2, #0]
 801a452:	0628      	lsls	r0, r5, #24
 801a454:	d501      	bpl.n	801a45a <_printf_i+0xc2>
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	e002      	b.n	801a460 <_printf_i+0xc8>
 801a45a:	0668      	lsls	r0, r5, #25
 801a45c:	d5fb      	bpl.n	801a456 <_printf_i+0xbe>
 801a45e:	881b      	ldrh	r3, [r3, #0]
 801a460:	4854      	ldr	r0, [pc, #336]	; (801a5b4 <_printf_i+0x21c>)
 801a462:	296f      	cmp	r1, #111	; 0x6f
 801a464:	bf14      	ite	ne
 801a466:	220a      	movne	r2, #10
 801a468:	2208      	moveq	r2, #8
 801a46a:	2100      	movs	r1, #0
 801a46c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a470:	6865      	ldr	r5, [r4, #4]
 801a472:	60a5      	str	r5, [r4, #8]
 801a474:	2d00      	cmp	r5, #0
 801a476:	f2c0 8095 	blt.w	801a5a4 <_printf_i+0x20c>
 801a47a:	6821      	ldr	r1, [r4, #0]
 801a47c:	f021 0104 	bic.w	r1, r1, #4
 801a480:	6021      	str	r1, [r4, #0]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d13d      	bne.n	801a502 <_printf_i+0x16a>
 801a486:	2d00      	cmp	r5, #0
 801a488:	f040 808e 	bne.w	801a5a8 <_printf_i+0x210>
 801a48c:	4665      	mov	r5, ip
 801a48e:	2a08      	cmp	r2, #8
 801a490:	d10b      	bne.n	801a4aa <_printf_i+0x112>
 801a492:	6823      	ldr	r3, [r4, #0]
 801a494:	07db      	lsls	r3, r3, #31
 801a496:	d508      	bpl.n	801a4aa <_printf_i+0x112>
 801a498:	6923      	ldr	r3, [r4, #16]
 801a49a:	6862      	ldr	r2, [r4, #4]
 801a49c:	429a      	cmp	r2, r3
 801a49e:	bfde      	ittt	le
 801a4a0:	2330      	movle	r3, #48	; 0x30
 801a4a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a4a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a4aa:	ebac 0305 	sub.w	r3, ip, r5
 801a4ae:	6123      	str	r3, [r4, #16]
 801a4b0:	f8cd 8000 	str.w	r8, [sp]
 801a4b4:	463b      	mov	r3, r7
 801a4b6:	aa03      	add	r2, sp, #12
 801a4b8:	4621      	mov	r1, r4
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	f7ff fef6 	bl	801a2ac <_printf_common>
 801a4c0:	3001      	adds	r0, #1
 801a4c2:	d14d      	bne.n	801a560 <_printf_i+0x1c8>
 801a4c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a4c8:	b005      	add	sp, #20
 801a4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4ce:	4839      	ldr	r0, [pc, #228]	; (801a5b4 <_printf_i+0x21c>)
 801a4d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a4d4:	6813      	ldr	r3, [r2, #0]
 801a4d6:	6821      	ldr	r1, [r4, #0]
 801a4d8:	1d1d      	adds	r5, r3, #4
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	6015      	str	r5, [r2, #0]
 801a4de:	060a      	lsls	r2, r1, #24
 801a4e0:	d50b      	bpl.n	801a4fa <_printf_i+0x162>
 801a4e2:	07ca      	lsls	r2, r1, #31
 801a4e4:	bf44      	itt	mi
 801a4e6:	f041 0120 	orrmi.w	r1, r1, #32
 801a4ea:	6021      	strmi	r1, [r4, #0]
 801a4ec:	b91b      	cbnz	r3, 801a4f6 <_printf_i+0x15e>
 801a4ee:	6822      	ldr	r2, [r4, #0]
 801a4f0:	f022 0220 	bic.w	r2, r2, #32
 801a4f4:	6022      	str	r2, [r4, #0]
 801a4f6:	2210      	movs	r2, #16
 801a4f8:	e7b7      	b.n	801a46a <_printf_i+0xd2>
 801a4fa:	064d      	lsls	r5, r1, #25
 801a4fc:	bf48      	it	mi
 801a4fe:	b29b      	uxthmi	r3, r3
 801a500:	e7ef      	b.n	801a4e2 <_printf_i+0x14a>
 801a502:	4665      	mov	r5, ip
 801a504:	fbb3 f1f2 	udiv	r1, r3, r2
 801a508:	fb02 3311 	mls	r3, r2, r1, r3
 801a50c:	5cc3      	ldrb	r3, [r0, r3]
 801a50e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a512:	460b      	mov	r3, r1
 801a514:	2900      	cmp	r1, #0
 801a516:	d1f5      	bne.n	801a504 <_printf_i+0x16c>
 801a518:	e7b9      	b.n	801a48e <_printf_i+0xf6>
 801a51a:	6813      	ldr	r3, [r2, #0]
 801a51c:	6825      	ldr	r5, [r4, #0]
 801a51e:	6961      	ldr	r1, [r4, #20]
 801a520:	1d18      	adds	r0, r3, #4
 801a522:	6010      	str	r0, [r2, #0]
 801a524:	0628      	lsls	r0, r5, #24
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	d501      	bpl.n	801a52e <_printf_i+0x196>
 801a52a:	6019      	str	r1, [r3, #0]
 801a52c:	e002      	b.n	801a534 <_printf_i+0x19c>
 801a52e:	066a      	lsls	r2, r5, #25
 801a530:	d5fb      	bpl.n	801a52a <_printf_i+0x192>
 801a532:	8019      	strh	r1, [r3, #0]
 801a534:	2300      	movs	r3, #0
 801a536:	6123      	str	r3, [r4, #16]
 801a538:	4665      	mov	r5, ip
 801a53a:	e7b9      	b.n	801a4b0 <_printf_i+0x118>
 801a53c:	6813      	ldr	r3, [r2, #0]
 801a53e:	1d19      	adds	r1, r3, #4
 801a540:	6011      	str	r1, [r2, #0]
 801a542:	681d      	ldr	r5, [r3, #0]
 801a544:	6862      	ldr	r2, [r4, #4]
 801a546:	2100      	movs	r1, #0
 801a548:	4628      	mov	r0, r5
 801a54a:	f7f5 fd91 	bl	8010070 <memchr>
 801a54e:	b108      	cbz	r0, 801a554 <_printf_i+0x1bc>
 801a550:	1b40      	subs	r0, r0, r5
 801a552:	6060      	str	r0, [r4, #4]
 801a554:	6863      	ldr	r3, [r4, #4]
 801a556:	6123      	str	r3, [r4, #16]
 801a558:	2300      	movs	r3, #0
 801a55a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a55e:	e7a7      	b.n	801a4b0 <_printf_i+0x118>
 801a560:	6923      	ldr	r3, [r4, #16]
 801a562:	462a      	mov	r2, r5
 801a564:	4639      	mov	r1, r7
 801a566:	4630      	mov	r0, r6
 801a568:	47c0      	blx	r8
 801a56a:	3001      	adds	r0, #1
 801a56c:	d0aa      	beq.n	801a4c4 <_printf_i+0x12c>
 801a56e:	6823      	ldr	r3, [r4, #0]
 801a570:	079b      	lsls	r3, r3, #30
 801a572:	d413      	bmi.n	801a59c <_printf_i+0x204>
 801a574:	68e0      	ldr	r0, [r4, #12]
 801a576:	9b03      	ldr	r3, [sp, #12]
 801a578:	4298      	cmp	r0, r3
 801a57a:	bfb8      	it	lt
 801a57c:	4618      	movlt	r0, r3
 801a57e:	e7a3      	b.n	801a4c8 <_printf_i+0x130>
 801a580:	2301      	movs	r3, #1
 801a582:	464a      	mov	r2, r9
 801a584:	4639      	mov	r1, r7
 801a586:	4630      	mov	r0, r6
 801a588:	47c0      	blx	r8
 801a58a:	3001      	adds	r0, #1
 801a58c:	d09a      	beq.n	801a4c4 <_printf_i+0x12c>
 801a58e:	3501      	adds	r5, #1
 801a590:	68e3      	ldr	r3, [r4, #12]
 801a592:	9a03      	ldr	r2, [sp, #12]
 801a594:	1a9b      	subs	r3, r3, r2
 801a596:	42ab      	cmp	r3, r5
 801a598:	dcf2      	bgt.n	801a580 <_printf_i+0x1e8>
 801a59a:	e7eb      	b.n	801a574 <_printf_i+0x1dc>
 801a59c:	2500      	movs	r5, #0
 801a59e:	f104 0919 	add.w	r9, r4, #25
 801a5a2:	e7f5      	b.n	801a590 <_printf_i+0x1f8>
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d1ac      	bne.n	801a502 <_printf_i+0x16a>
 801a5a8:	7803      	ldrb	r3, [r0, #0]
 801a5aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a5ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a5b2:	e76c      	b.n	801a48e <_printf_i+0xf6>
 801a5b4:	0801ab15 	.word	0x0801ab15
 801a5b8:	0801ab26 	.word	0x0801ab26

0801a5bc <memmove>:
 801a5bc:	4288      	cmp	r0, r1
 801a5be:	b510      	push	{r4, lr}
 801a5c0:	eb01 0302 	add.w	r3, r1, r2
 801a5c4:	d807      	bhi.n	801a5d6 <memmove+0x1a>
 801a5c6:	1e42      	subs	r2, r0, #1
 801a5c8:	4299      	cmp	r1, r3
 801a5ca:	d00a      	beq.n	801a5e2 <memmove+0x26>
 801a5cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a5d4:	e7f8      	b.n	801a5c8 <memmove+0xc>
 801a5d6:	4283      	cmp	r3, r0
 801a5d8:	d9f5      	bls.n	801a5c6 <memmove+0xa>
 801a5da:	1881      	adds	r1, r0, r2
 801a5dc:	1ad2      	subs	r2, r2, r3
 801a5de:	42d3      	cmn	r3, r2
 801a5e0:	d100      	bne.n	801a5e4 <memmove+0x28>
 801a5e2:	bd10      	pop	{r4, pc}
 801a5e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a5ec:	e7f7      	b.n	801a5de <memmove+0x22>
	...

0801a5f0 <_free_r>:
 801a5f0:	b538      	push	{r3, r4, r5, lr}
 801a5f2:	4605      	mov	r5, r0
 801a5f4:	2900      	cmp	r1, #0
 801a5f6:	d045      	beq.n	801a684 <_free_r+0x94>
 801a5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5fc:	1f0c      	subs	r4, r1, #4
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	bfb8      	it	lt
 801a602:	18e4      	addlt	r4, r4, r3
 801a604:	f000 f8d2 	bl	801a7ac <__malloc_lock>
 801a608:	4a1f      	ldr	r2, [pc, #124]	; (801a688 <_free_r+0x98>)
 801a60a:	6813      	ldr	r3, [r2, #0]
 801a60c:	4610      	mov	r0, r2
 801a60e:	b933      	cbnz	r3, 801a61e <_free_r+0x2e>
 801a610:	6063      	str	r3, [r4, #4]
 801a612:	6014      	str	r4, [r2, #0]
 801a614:	4628      	mov	r0, r5
 801a616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a61a:	f000 b8c8 	b.w	801a7ae <__malloc_unlock>
 801a61e:	42a3      	cmp	r3, r4
 801a620:	d90c      	bls.n	801a63c <_free_r+0x4c>
 801a622:	6821      	ldr	r1, [r4, #0]
 801a624:	1862      	adds	r2, r4, r1
 801a626:	4293      	cmp	r3, r2
 801a628:	bf04      	itt	eq
 801a62a:	681a      	ldreq	r2, [r3, #0]
 801a62c:	685b      	ldreq	r3, [r3, #4]
 801a62e:	6063      	str	r3, [r4, #4]
 801a630:	bf04      	itt	eq
 801a632:	1852      	addeq	r2, r2, r1
 801a634:	6022      	streq	r2, [r4, #0]
 801a636:	6004      	str	r4, [r0, #0]
 801a638:	e7ec      	b.n	801a614 <_free_r+0x24>
 801a63a:	4613      	mov	r3, r2
 801a63c:	685a      	ldr	r2, [r3, #4]
 801a63e:	b10a      	cbz	r2, 801a644 <_free_r+0x54>
 801a640:	42a2      	cmp	r2, r4
 801a642:	d9fa      	bls.n	801a63a <_free_r+0x4a>
 801a644:	6819      	ldr	r1, [r3, #0]
 801a646:	1858      	adds	r0, r3, r1
 801a648:	42a0      	cmp	r0, r4
 801a64a:	d10b      	bne.n	801a664 <_free_r+0x74>
 801a64c:	6820      	ldr	r0, [r4, #0]
 801a64e:	4401      	add	r1, r0
 801a650:	1858      	adds	r0, r3, r1
 801a652:	4282      	cmp	r2, r0
 801a654:	6019      	str	r1, [r3, #0]
 801a656:	d1dd      	bne.n	801a614 <_free_r+0x24>
 801a658:	6810      	ldr	r0, [r2, #0]
 801a65a:	6852      	ldr	r2, [r2, #4]
 801a65c:	605a      	str	r2, [r3, #4]
 801a65e:	4401      	add	r1, r0
 801a660:	6019      	str	r1, [r3, #0]
 801a662:	e7d7      	b.n	801a614 <_free_r+0x24>
 801a664:	d902      	bls.n	801a66c <_free_r+0x7c>
 801a666:	230c      	movs	r3, #12
 801a668:	602b      	str	r3, [r5, #0]
 801a66a:	e7d3      	b.n	801a614 <_free_r+0x24>
 801a66c:	6820      	ldr	r0, [r4, #0]
 801a66e:	1821      	adds	r1, r4, r0
 801a670:	428a      	cmp	r2, r1
 801a672:	bf04      	itt	eq
 801a674:	6811      	ldreq	r1, [r2, #0]
 801a676:	6852      	ldreq	r2, [r2, #4]
 801a678:	6062      	str	r2, [r4, #4]
 801a67a:	bf04      	itt	eq
 801a67c:	1809      	addeq	r1, r1, r0
 801a67e:	6021      	streq	r1, [r4, #0]
 801a680:	605c      	str	r4, [r3, #4]
 801a682:	e7c7      	b.n	801a614 <_free_r+0x24>
 801a684:	bd38      	pop	{r3, r4, r5, pc}
 801a686:	bf00      	nop
 801a688:	2000a9f0 	.word	0x2000a9f0

0801a68c <_malloc_r>:
 801a68c:	b570      	push	{r4, r5, r6, lr}
 801a68e:	1ccd      	adds	r5, r1, #3
 801a690:	f025 0503 	bic.w	r5, r5, #3
 801a694:	3508      	adds	r5, #8
 801a696:	2d0c      	cmp	r5, #12
 801a698:	bf38      	it	cc
 801a69a:	250c      	movcc	r5, #12
 801a69c:	2d00      	cmp	r5, #0
 801a69e:	4606      	mov	r6, r0
 801a6a0:	db01      	blt.n	801a6a6 <_malloc_r+0x1a>
 801a6a2:	42a9      	cmp	r1, r5
 801a6a4:	d903      	bls.n	801a6ae <_malloc_r+0x22>
 801a6a6:	230c      	movs	r3, #12
 801a6a8:	6033      	str	r3, [r6, #0]
 801a6aa:	2000      	movs	r0, #0
 801a6ac:	bd70      	pop	{r4, r5, r6, pc}
 801a6ae:	f000 f87d 	bl	801a7ac <__malloc_lock>
 801a6b2:	4a21      	ldr	r2, [pc, #132]	; (801a738 <_malloc_r+0xac>)
 801a6b4:	6814      	ldr	r4, [r2, #0]
 801a6b6:	4621      	mov	r1, r4
 801a6b8:	b991      	cbnz	r1, 801a6e0 <_malloc_r+0x54>
 801a6ba:	4c20      	ldr	r4, [pc, #128]	; (801a73c <_malloc_r+0xb0>)
 801a6bc:	6823      	ldr	r3, [r4, #0]
 801a6be:	b91b      	cbnz	r3, 801a6c8 <_malloc_r+0x3c>
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f000 f863 	bl	801a78c <_sbrk_r>
 801a6c6:	6020      	str	r0, [r4, #0]
 801a6c8:	4629      	mov	r1, r5
 801a6ca:	4630      	mov	r0, r6
 801a6cc:	f000 f85e 	bl	801a78c <_sbrk_r>
 801a6d0:	1c43      	adds	r3, r0, #1
 801a6d2:	d124      	bne.n	801a71e <_malloc_r+0x92>
 801a6d4:	230c      	movs	r3, #12
 801a6d6:	6033      	str	r3, [r6, #0]
 801a6d8:	4630      	mov	r0, r6
 801a6da:	f000 f868 	bl	801a7ae <__malloc_unlock>
 801a6de:	e7e4      	b.n	801a6aa <_malloc_r+0x1e>
 801a6e0:	680b      	ldr	r3, [r1, #0]
 801a6e2:	1b5b      	subs	r3, r3, r5
 801a6e4:	d418      	bmi.n	801a718 <_malloc_r+0x8c>
 801a6e6:	2b0b      	cmp	r3, #11
 801a6e8:	d90f      	bls.n	801a70a <_malloc_r+0x7e>
 801a6ea:	600b      	str	r3, [r1, #0]
 801a6ec:	50cd      	str	r5, [r1, r3]
 801a6ee:	18cc      	adds	r4, r1, r3
 801a6f0:	4630      	mov	r0, r6
 801a6f2:	f000 f85c 	bl	801a7ae <__malloc_unlock>
 801a6f6:	f104 000b 	add.w	r0, r4, #11
 801a6fa:	1d23      	adds	r3, r4, #4
 801a6fc:	f020 0007 	bic.w	r0, r0, #7
 801a700:	1ac3      	subs	r3, r0, r3
 801a702:	d0d3      	beq.n	801a6ac <_malloc_r+0x20>
 801a704:	425a      	negs	r2, r3
 801a706:	50e2      	str	r2, [r4, r3]
 801a708:	e7d0      	b.n	801a6ac <_malloc_r+0x20>
 801a70a:	428c      	cmp	r4, r1
 801a70c:	684b      	ldr	r3, [r1, #4]
 801a70e:	bf16      	itet	ne
 801a710:	6063      	strne	r3, [r4, #4]
 801a712:	6013      	streq	r3, [r2, #0]
 801a714:	460c      	movne	r4, r1
 801a716:	e7eb      	b.n	801a6f0 <_malloc_r+0x64>
 801a718:	460c      	mov	r4, r1
 801a71a:	6849      	ldr	r1, [r1, #4]
 801a71c:	e7cc      	b.n	801a6b8 <_malloc_r+0x2c>
 801a71e:	1cc4      	adds	r4, r0, #3
 801a720:	f024 0403 	bic.w	r4, r4, #3
 801a724:	42a0      	cmp	r0, r4
 801a726:	d005      	beq.n	801a734 <_malloc_r+0xa8>
 801a728:	1a21      	subs	r1, r4, r0
 801a72a:	4630      	mov	r0, r6
 801a72c:	f000 f82e 	bl	801a78c <_sbrk_r>
 801a730:	3001      	adds	r0, #1
 801a732:	d0cf      	beq.n	801a6d4 <_malloc_r+0x48>
 801a734:	6025      	str	r5, [r4, #0]
 801a736:	e7db      	b.n	801a6f0 <_malloc_r+0x64>
 801a738:	2000a9f0 	.word	0x2000a9f0
 801a73c:	2000a9f4 	.word	0x2000a9f4

0801a740 <_realloc_r>:
 801a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a742:	4607      	mov	r7, r0
 801a744:	4614      	mov	r4, r2
 801a746:	460e      	mov	r6, r1
 801a748:	b921      	cbnz	r1, 801a754 <_realloc_r+0x14>
 801a74a:	4611      	mov	r1, r2
 801a74c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a750:	f7ff bf9c 	b.w	801a68c <_malloc_r>
 801a754:	b922      	cbnz	r2, 801a760 <_realloc_r+0x20>
 801a756:	f7ff ff4b 	bl	801a5f0 <_free_r>
 801a75a:	4625      	mov	r5, r4
 801a75c:	4628      	mov	r0, r5
 801a75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a760:	f000 f826 	bl	801a7b0 <_malloc_usable_size_r>
 801a764:	42a0      	cmp	r0, r4
 801a766:	d20f      	bcs.n	801a788 <_realloc_r+0x48>
 801a768:	4621      	mov	r1, r4
 801a76a:	4638      	mov	r0, r7
 801a76c:	f7ff ff8e 	bl	801a68c <_malloc_r>
 801a770:	4605      	mov	r5, r0
 801a772:	2800      	cmp	r0, #0
 801a774:	d0f2      	beq.n	801a75c <_realloc_r+0x1c>
 801a776:	4631      	mov	r1, r6
 801a778:	4622      	mov	r2, r4
 801a77a:	f7ff fc09 	bl	8019f90 <memcpy>
 801a77e:	4631      	mov	r1, r6
 801a780:	4638      	mov	r0, r7
 801a782:	f7ff ff35 	bl	801a5f0 <_free_r>
 801a786:	e7e9      	b.n	801a75c <_realloc_r+0x1c>
 801a788:	4635      	mov	r5, r6
 801a78a:	e7e7      	b.n	801a75c <_realloc_r+0x1c>

0801a78c <_sbrk_r>:
 801a78c:	b538      	push	{r3, r4, r5, lr}
 801a78e:	4c06      	ldr	r4, [pc, #24]	; (801a7a8 <_sbrk_r+0x1c>)
 801a790:	2300      	movs	r3, #0
 801a792:	4605      	mov	r5, r0
 801a794:	4608      	mov	r0, r1
 801a796:	6023      	str	r3, [r4, #0]
 801a798:	f7f6 f9d6 	bl	8010b48 <_sbrk>
 801a79c:	1c43      	adds	r3, r0, #1
 801a79e:	d102      	bne.n	801a7a6 <_sbrk_r+0x1a>
 801a7a0:	6823      	ldr	r3, [r4, #0]
 801a7a2:	b103      	cbz	r3, 801a7a6 <_sbrk_r+0x1a>
 801a7a4:	602b      	str	r3, [r5, #0]
 801a7a6:	bd38      	pop	{r3, r4, r5, pc}
 801a7a8:	2000e6a0 	.word	0x2000e6a0

0801a7ac <__malloc_lock>:
 801a7ac:	4770      	bx	lr

0801a7ae <__malloc_unlock>:
 801a7ae:	4770      	bx	lr

0801a7b0 <_malloc_usable_size_r>:
 801a7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7b4:	1f18      	subs	r0, r3, #4
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	bfbc      	itt	lt
 801a7ba:	580b      	ldrlt	r3, [r1, r0]
 801a7bc:	18c0      	addlt	r0, r0, r3
 801a7be:	4770      	bx	lr

0801a7c0 <_init>:
 801a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c2:	bf00      	nop
 801a7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7c6:	bc08      	pop	{r3}
 801a7c8:	469e      	mov	lr, r3
 801a7ca:	4770      	bx	lr

0801a7cc <_fini>:
 801a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ce:	bf00      	nop
 801a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7d2:	bc08      	pop	{r3}
 801a7d4:	469e      	mov	lr, r3
 801a7d6:	4770      	bx	lr
