
snes_gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800a008  0800a008  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a35c  0800a35c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a364  0800a364  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008628  20000078  0800a3e4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200086a0  0800a3e4  000286a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022243  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044e8  00000000  00000000  000422eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c0  00000000  00000000  000467d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001600  00000000  00000000  00047f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005832  00000000  00000000  00049598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a61  00000000  00000000  0004edca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000983e6  00000000  00000000  0006482b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fcc11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  000fcc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ff0 	.word	0x08009ff0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009ff0 	.word	0x08009ff0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f002 fa44 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f81c 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f92a 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f900 	bl	80007c4 <MX_DMA_Init>
  MX_TIM1_Init();
 80005c4:	f000 f8ae 	bl	8000724 <MX_TIM1_Init>
  MX_I2C1_Init();
 80005c8:	f000 f87e 	bl	80006c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f006 fb42 	bl	8006c54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <main+0x38>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x3c>)
 80005d6:	f006 fba7 	bl	8006d28 <osThreadNew>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <main+0x40>)
 80005de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f006 fb6c 	bl	8006cbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x34>
 80005e6:	bf00      	nop
 80005e8:	0800a2e0 	.word	0x0800a2e0
 80005ec:	08000945 	.word	0x08000945
 80005f0:	200049f4 	.word	0x200049f4

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 f8e7 	bl	80097d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xd0>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000668:	2319      	movs	r3, #25
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000674:	2305      	movs	r3, #5
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f005 fa91 	bl	8005ba4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000688:	f000 f97b 	bl	8000982 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fceb 	bl	8006084 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b4:	f000 f965 	bl	8000982 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f003 fa29 	bl	8003b5c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f937 	bl	8000982 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20004a58 	.word	0x20004a58
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_TIM1_Init+0x98>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MX_TIM1_Init+0x9c>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM1_Init+0x98>)
 8000748:	2247      	movs	r2, #71	; 0x47
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_TIM1_Init+0x98>)
 8000754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM1_Init+0x98>)
 800076e:	f005 fe73 	bl	8006458 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f903 	bl	8000982 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM1_Init+0x98>)
 800078a:	f005 ffe0 	bl	800674e <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000794:	f000 f8f5 	bl	8000982 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM1_Init+0x98>)
 80007a6:	f006 f9cb 	bl	8006b40 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f8e7 	bl	8000982 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20004aac 	.word	0x20004aac
 80007c0:	40010000 	.word	0x40010000

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_DMA_Init+0x4c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <MX_DMA_Init+0x4c>)
 80007d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_DMA_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	200b      	movs	r0, #11
 80007ec:	f002 fa22 	bl	8002c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007f0:	200b      	movs	r0, #11
 80007f2:	f002 fa3b 	bl	8002c6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2011      	movs	r0, #17
 80007fc:	f002 fa1a 	bl	8002c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000800:	2011      	movs	r0, #17
 8000802:	f002 fa33 	bl	8002c6c <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_GPIO_Init+0x120>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a40      	ldr	r2, [pc, #256]	; (8000934 <MX_GPIO_Init+0x120>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_GPIO_Init+0x120>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <MX_GPIO_Init+0x120>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a39      	ldr	r2, [pc, #228]	; (8000934 <MX_GPIO_Init+0x120>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_GPIO_Init+0x120>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_GPIO_Init+0x120>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a32      	ldr	r2, [pc, #200]	; (8000934 <MX_GPIO_Init+0x120>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_GPIO_Init+0x120>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_GPIO_Init+0x120>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <MX_GPIO_Init+0x120>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0x120>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDpin_Pin|X2_Max_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80008a0:	4825      	ldr	r0, [pc, #148]	; (8000938 <MX_GPIO_Init+0x124>)
 80008a2:	f003 f941 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SNES_Latch_Pin|SNES_Clock_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2130      	movs	r1, #48	; 0x30
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <MX_GPIO_Init+0x128>)
 80008ac:	f003 f93c 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X1_Center_Pin|X1_Max_Pin|Y1_Center_Pin|Button1_Pin
 80008b0:	2200      	movs	r2, #0
 80008b2:	f24f 41cf 	movw	r1, #62671	; 0xf4cf
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <MX_GPIO_Init+0x12c>)
 80008b8:	f003 f936 	bl	8003b28 <HAL_GPIO_WritePin>
                          |Button2_Pin|Button3_Pin|Button4_Pin|X2_Center_Pin
                          |Y1_Max_Pin|Y2_Center_Pin|Y2_Max_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LEDpin_Pin X2_Max_Pin */
  GPIO_InitStruct.Pin = LEDpin_Pin|X2_Max_Pin;
 80008bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008c2:	2311      	movs	r3, #17
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_GPIO_Init+0x124>)
 80008d6:	f002 ff8d 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SNES_Latch_Pin SNES_Clock_Pin */
  GPIO_InitStruct.Pin = SNES_Latch_Pin|SNES_Clock_Pin;
 80008da:	2330      	movs	r3, #48	; 0x30
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_GPIO_Init+0x128>)
 80008f2:	f002 ff7f 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNES_Data_Pin */
  GPIO_InitStruct.Pin = SNES_Data_Pin;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SNES_Data_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_GPIO_Init+0x128>)
 800090a:	f002 ff73 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : X1_Center_Pin X1_Max_Pin Y1_Center_Pin Button1_Pin
                           Button2_Pin Button3_Pin Button4_Pin X2_Center_Pin
                           Y1_Max_Pin Y2_Center_Pin Y2_Max_Pin */
  GPIO_InitStruct.Pin = X1_Center_Pin|X1_Max_Pin|Y1_Center_Pin|Button1_Pin
 800090e:	f24f 43cf 	movw	r3, #62671	; 0xf4cf
 8000912:	617b      	str	r3, [r7, #20]
                          |Button2_Pin|Button3_Pin|Button4_Pin|X2_Center_Pin
                          |Y1_Max_Pin|Y2_Center_Pin|Y2_Max_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000914:	2311      	movs	r3, #17
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_GPIO_Init+0x12c>)
 8000928:	f002 ff64 	bl	80037f4 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400

08000944 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  snesMain(&hi2c1,&htim1);
 800094c:	4903      	ldr	r1, [pc, #12]	; (800095c <StartDefaultTask+0x18>)
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <StartDefaultTask+0x1c>)
 8000950:	f002 f80e 	bl	8002970 <snesMain>
  /* USER CODE END 5 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20004aac 	.word	0x20004aac
 8000960:	20004a58 	.word	0x20004a58

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f002 f885 	bl	8002a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000986:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x6>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f002 f92f 	bl	8002c34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <HAL_I2C_MspInit+0x160>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f040 8099 	bne.w	8000b3a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	2304      	movs	r3, #4
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4842      	ldr	r0, [pc, #264]	; (8000b4c <HAL_I2C_MspInit+0x168>)
 8000a42:	f002 fed7 	bl	80037f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b3f      	ldr	r3, [pc, #252]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a64:	4a3b      	ldr	r2, [pc, #236]	; (8000b54 <HAL_I2C_MspInit+0x170>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a6e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a90:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000aa4:	f002 f8f0 	bl	8002c88 <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000aae:	f7ff ff68 	bl	8000982 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_I2C_MspInit+0x178>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ace:	2240      	movs	r2, #64	; 0x40
 8000ad0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000afe:	4816      	ldr	r0, [pc, #88]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000b00:	f002 f8c2 	bl	8002c88 <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000b0a:	f7ff ff3a 	bl	8000982 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	201f      	movs	r0, #31
 8000b20:	f002 f888 	bl	8002c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b24:	201f      	movs	r0, #31
 8000b26:	f002 f8a1 	bl	8002c6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	2020      	movs	r0, #32
 8000b30:	f002 f880 	bl	8002c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b34:	2020      	movs	r0, #32
 8000b36:	f002 f899 	bl	8002c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	20004aec 	.word	0x20004aec
 8000b54:	40026010 	.word	0x40026010
 8000b58:	200049f8 	.word	0x200049f8
 8000b5c:	400260a0 	.word	0x400260a0

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10d      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_TIM_Base_MspInit+0x40>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <HAL_TIM_Base_MspInit+0x40>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_TIM_Base_MspInit+0x40>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f002 f83b 	bl	8002c34 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f002 f854 	bl	8002c6c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_InitTick+0xa8>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_InitTick+0xa8>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_InitTick+0xa8>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be0:	f107 0210 	add.w	r2, r7, #16
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 fc02 	bl	80063f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bf0:	f005 fbec 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_InitTick+0xac>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	0c9b      	lsrs	r3, r3, #18
 8000c04:	3b01      	subs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c2c:	f005 fc14 	bl	8006458 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c38:	f005 fc5d 	bl	80064f6 <HAL_TIM_Base_Start_IT>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	e000      	b.n	8000c42 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3730      	adds	r7, #48	; 0x30
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	431bde83 	.word	0x431bde83
 8000c54:	20004b4c 	.word	0x20004b4c

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA1_Stream0_IRQHandler+0x10>)
 8000c8a:	f002 f925 	bl	8002ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20004aec 	.word	0x20004aec

08000c98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <DMA1_Stream6_IRQHandler+0x10>)
 8000c9e:	f002 f91b 	bl	8002ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200049f8 	.word	0x200049f8

08000cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM2_IRQHandler+0x10>)
 8000cb2:	f005 fc44 	bl	800653e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20004b4c 	.word	0x20004b4c

08000cc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <I2C1_EV_IRQHandler+0x10>)
 8000cc6:	f003 f997 	bl	8003ff8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20004a58 	.word	0x20004a58

08000cd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <I2C1_ER_IRQHandler+0x10>)
 8000cda:	f003 fafa 	bl	80042d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20004a58 	.word	0x20004a58

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f008 fd28 	bl	800976c <__errno>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	230c      	movs	r3, #12
 8000d20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20010000 	.word	0x20010000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	20000094 	.word	0x20000094
 8000d50:	200086a0 	.word	0x200086a0

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SystemInit+0x28>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <SystemInit+0x28>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SystemInit+0x28>)
 8000d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <getDataProfileOffset>:

uint32_t data[DATA_INIT_SIZE];
uint8_t currentProfileIndex = 0;

struct rebindEntry* getDataProfileOffset(uint8_t profileIndex) //RW
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	return (struct rebindEntry*)data + (PROFILE_SIZE * profileIndex);
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	025b      	lsls	r3, r3, #9
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <getDataProfileOffset+0x28>)
 8000d98:	4413      	add	r3, r2
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20004b8c 	.word	0x20004b8c

08000dac <getFlashProfileOffset>:

struct rebindEntry* getFlashProfileOffset(uint8_t profileIndex) //RO
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	 return (struct rebindEntry*)flashReadData() + (PROFILE_SIZE * profileIndex);
 8000db6:	f000 fc5d 	bl	8001674 <flashReadData>
 8000dba:	4601      	mov	r1, r0
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	440b      	add	r3, r1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <profileSave>:


void profileSave(uint8_t newProfileIndex) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if (newProfileIndex != currentProfileIndex) //If we're saving to a new profile
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <profileSave+0x68>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	79fa      	ldrb	r2, [r7, #7]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d020      	beq.n	8000e26 <profileSave+0x56>
			{
		struct rebindEntry *newProfile = getDataProfileOffset(newProfileIndex); //Pointer to new profile
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ffca 	bl	8000d80 <getDataProfileOffset>
 8000dec:	60f8      	str	r0, [r7, #12]
		memcpy(newProfile, currentProfile, PROFILE_SIZE); //Save current profile to new slot
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <profileSave+0x6c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000df6:	4619      	mov	r1, r3
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f008 fce1 	bl	80097c0 <memcpy>
		memcpy(currentProfile,getFlashProfileOffset(currentProfileIndex),
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <profileSave+0x6c>)
 8000e00:	681c      	ldr	r4, [r3, #0]
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <profileSave+0x68>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffd0 	bl	8000dac <getFlashProfileOffset>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e12:	4619      	mov	r1, r3
 8000e14:	4620      	mov	r0, r4
 8000e16:	f008 fcd3 	bl	80097c0 <memcpy>
				PROFILE_SIZE); //Reload current profile from flash so it isn't overwritten
		currentProfile = newProfile; //Point rebind to the new profile
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <profileSave+0x6c>)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6013      	str	r3, [r2, #0]
		currentProfileIndex = newProfileIndex; //Update selected profile number
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <profileSave+0x68>)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	7013      	strb	r3, [r2, #0]
	}

	flashWriteData(data, sizeof(data)); //Save profile
 8000e26:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <profileSave+0x70>)
 8000e2c:	f000 fc30 	bl	8001690 <flashWriteData>
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	20000098 	.word	0x20000098
 8000e3c:	20007b8c 	.word	0x20007b8c
 8000e40:	20004b8c 	.word	0x20004b8c

08000e44 <profileSelect>:

void profileSelect(uint8_t profile) {
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	//Load profile from flash
	memcpy(getDataProfileOffset(profile), getFlashProfileOffset(currentProfileIndex), PROFILE_SIZE); //Copy data for this profile in from flash, this discards any changes
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff95 	bl	8000d80 <getDataProfileOffset>
 8000e56:	4604      	mov	r4, r0
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <profileSelect+0x4c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffa5 	bl	8000dac <getFlashProfileOffset>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f008 fca8 	bl	80097c0 <memcpy>
	currentProfileIndex = profile;
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <profileSelect+0x4c>)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	7013      	strb	r3, [r2, #0]
	currentProfile = getDataProfileOffset(currentProfileIndex);
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <profileSelect+0x4c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <getDataProfileOffset>
 8000e80:	4602      	mov	r2, r0
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <profileSelect+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000098 	.word	0x20000098
 8000e94:	20007b8c 	.word	0x20007b8c

08000e98 <profileGetSelectedIndex>:

uint8_t profileGetSelectedIndex() {
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	return currentProfileIndex;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <profileGetSelectedIndex+0x14>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000098 	.word	0x20000098

08000eb0 <bindGetBindCount>:

uint8_t bindGetBindCount() {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
	int i = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < REBIND_COUNT; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	e01a      	b.n	8000ef6 <bindGetBindCount+0x46>
		if (currentProfile[i].buttonsPressed == 0 || currentProfile[i].buttonsPressed == 65535)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <bindGetBindCount+0x5c>)
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	440b      	add	r3, r1
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d012      	beq.n	8000efc <bindGetBindCount+0x4c>
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <bindGetBindCount+0x5c>)
 8000ed8:	6819      	ldr	r1, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	440b      	add	r3, r1
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d005      	beq.n	8000efc <bindGetBindCount+0x4c>
	for (i = 0; i < REBIND_COUNT; i++)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8000efa:	dde1      	ble.n	8000ec0 <bindGetBindCount+0x10>
			break;
	return i;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	b2db      	uxtb	r3, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20007b8c 	.word	0x20007b8c

08000f10 <bindKey>:

void bindKey(uint16_t buttonsPressed, uint16_t buttonsToPress,
		uint8_t rapidFire) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	70fb      	strb	r3, [r7, #3]
	uint8_t rebindPos = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
	for (rebindPos = 0; rebindPos < bindGetBindCount(); rebindPos++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e00e      	b.n	8000f4a <bindKey+0x3a>
		if (currentProfile[rebindPos].buttonsPressed == buttonsPressed)
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <bindKey+0x90>)
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	440b      	add	r3, r1
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d00a      	beq.n	8000f5a <bindKey+0x4a>
	for (rebindPos = 0; rebindPos < bindGetBindCount(); rebindPos++)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <bindGetBindCount>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d3e9      	bcc.n	8000f2c <bindKey+0x1c>
 8000f58:	e000      	b.n	8000f5c <bindKey+0x4c>
			break;
 8000f5a:	bf00      	nop
	currentProfile[rebindPos].buttonsPressed = buttonsPressed;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <bindKey+0x90>)
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	440b      	add	r3, r1
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	801a      	strh	r2, [r3, #0]
	currentProfile[rebindPos].buttonsToPress = buttonsToPress;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <bindKey+0x90>)
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	440b      	add	r3, r1
 8000f80:	88ba      	ldrh	r2, [r7, #4]
 8000f82:	805a      	strh	r2, [r3, #2]
	currentProfile[rebindPos].rapidFire = rapidFire;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <bindKey+0x90>)
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	440b      	add	r3, r1
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	711a      	strb	r2, [r3, #4]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20007b8c 	.word	0x20007b8c

08000fa4 <bindClearAll>:

void bindClearAll() {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
	for (int i = 0; i < REBIND_COUNT; i++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	e022      	b.n	8000ff6 <bindClearAll+0x52>
		currentProfile[i].buttonsPressed = 65535;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <bindClearAll+0x64>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc4:	801a      	strh	r2, [r3, #0]
		currentProfile[i].buttonsToPress = 65535;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <bindClearAll+0x64>)
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fda:	805a      	strh	r2, [r3, #2]
		currentProfile[i].rapidFire = 255;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <bindClearAll+0x64>)
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	440b      	add	r3, r1
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	711a      	strb	r2, [r3, #4]
	for (int i = 0; i < REBIND_COUNT; i++) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffa:	ddd9      	ble.n	8000fb0 <bindClearAll+0xc>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	20007b8c 	.word	0x20007b8c

0800100c <bindCycleRapidFire>:

void bindCycleRapidFire(struct rebindEntry *entry) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	entry->rapidFire++;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	711a      	strb	r2, [r3, #4]
	entry->rapidFire %= 5;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791a      	ldrb	r2, [r3, #4]
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <bindCycleRapidFire+0x3c>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	0899      	lsrs	r1, r3, #2
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	711a      	strb	r2, [r3, #4]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	cccccccd 	.word	0xcccccccd

0800104c <bindGPIODefaultState>:

//End Rebinds

//Set pins to default state (axis centered, no buttons pressed)
void bindGPIODefaultState() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2101      	movs	r1, #1
 8001054:	4825      	ldr	r0, [pc, #148]	; (80010ec <bindGPIODefaultState+0xa0>)
 8001056:	f002 fd67 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2104      	movs	r1, #4
 800105e:	4823      	ldr	r0, [pc, #140]	; (80010ec <bindGPIODefaultState+0xa0>)
 8001060:	f002 fd62 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	4820      	ldr	r0, [pc, #128]	; (80010ec <bindGPIODefaultState+0xa0>)
 800106c:	f002 fd5c 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	481d      	ldr	r0, [pc, #116]	; (80010ec <bindGPIODefaultState+0xa0>)
 8001076:	f002 fd57 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2102      	movs	r1, #2
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <bindGPIODefaultState+0xa0>)
 8001080:	f002 fd52 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <bindGPIODefaultState+0xa0>)
 800108a:	f002 fd4d 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <bindGPIODefaultState+0xa4>)
 8001096:	f002 fd47 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4813      	ldr	r0, [pc, #76]	; (80010ec <bindGPIODefaultState+0xa0>)
 80010a0:	f002 fd42 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <bindGPIODefaultState+0xa0>)
 80010ac:	f002 fd3c 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <bindGPIODefaultState+0xa0>)
 80010b8:	f002 fd36 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <bindGPIODefaultState+0xa0>)
 80010c4:	f002 fd30 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <bindGPIODefaultState+0xa0>)
 80010d0:	f002 fd2a 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2110      	movs	r1, #16
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <bindGPIODefaultState+0xa8>)
 80010da:	f002 fd25 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2120      	movs	r1, #32
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <bindGPIODefaultState+0xa8>)
 80010e4:	f002 fd20 	bl	8003b28 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020000 	.word	0x40020000

080010f8 <bindProcess>:

//Main Loop Processing Functions
void bindProcess(uint16_t *buttons) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	//Process button rebinds
	uint16_t realButtons = *buttons;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	81fb      	strh	r3, [r7, #14]
	uint16_t bindButtonsToPress = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < REBIND_COUNT; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e07b      	b.n	8001208 <bindProcess+0x110>
		if (currentProfile[i].buttonsPressed == 0 || currentProfile[i].buttonsPressed == 65535) //Bail at the first empty entry
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <bindProcess+0x12c>)
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	440b      	add	r3, r1
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d073      	beq.n	800120e <bindProcess+0x116>
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <bindProcess+0x12c>)
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	440b      	add	r3, r1
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113c:	4293      	cmp	r3, r2
 800113e:	d066      	beq.n	800120e <bindProcess+0x116>
				{
			break;
		}

		if ((realButtons & currentProfile[i].buttonsPressed)
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <bindProcess+0x12c>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	440b      	add	r3, r1
 8001150:	881a      	ldrh	r2, [r3, #0]
				== currentProfile[i].buttonsPressed) {
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	4013      	ands	r3, r2
 8001156:	b299      	uxth	r1, r3
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <bindProcess+0x12c>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4403      	add	r3, r0
 8001168:	881b      	ldrh	r3, [r3, #0]
		if ((realButtons & currentProfile[i].buttonsPressed)
 800116a:	4299      	cmp	r1, r3
 800116c:	d149      	bne.n	8001202 <bindProcess+0x10a>
			*buttons = *buttons ^ currentProfile[i].buttonsPressed; //Remove the pressed buttons from buttons
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	8819      	ldrh	r1, [r3, #0]
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <bindProcess+0x12c>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4403      	add	r3, r0
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	404b      	eors	r3, r1
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	801a      	strh	r2, [r3, #0]
			if (currentProfile[i].rapidFire != 0) {
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <bindProcess+0x12c>)
 800118e:	6819      	ldr	r1, [r3, #0]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	440b      	add	r3, r1
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d023      	beq.n	80011ea <bindProcess+0xf2>
				uint32_t ticks = HAL_GetTick()
 80011a2:	f001 fc83 	bl	8002aac <HAL_GetTick>
						/ (RAPID_FIRE_BASE_TIME * currentProfile[i].rapidFire);
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <bindProcess+0x12c>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	440b      	add	r3, r1
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2396      	movs	r3, #150	; 0x96
 80011bc:	fb03 f302 	mul.w	r3, r3, r2
				uint32_t ticks = HAL_GetTick()
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	60bb      	str	r3, [r7, #8]
				if ((ticks % 2) == 1) {
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d018      	beq.n	8001202 <bindProcess+0x10a>
					bindButtonsToPress |= currentProfile[i].buttonsToPress; //Store the buttons to press in another variable so they don't get cleared by other binds
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <bindProcess+0x12c>)
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	440b      	add	r3, r1
 80011e0:	885a      	ldrh	r2, [r3, #2]
 80011e2:	8afb      	ldrh	r3, [r7, #22]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	82fb      	strh	r3, [r7, #22]
 80011e8:	e00b      	b.n	8001202 <bindProcess+0x10a>
				}
			} else {
				bindButtonsToPress |= currentProfile[i].buttonsToPress; //Store the buttons to press in another variable so they don't get cleared by other binds
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <bindProcess+0x12c>)
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	440b      	add	r3, r1
 80011fa:	885a      	ldrh	r2, [r3, #2]
 80011fc:	8afb      	ldrh	r3, [r7, #22]
 80011fe:	4313      	orrs	r3, r2
 8001200:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < REBIND_COUNT; i++) {
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	3301      	adds	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2b7f      	cmp	r3, #127	; 0x7f
 800120c:	dd80      	ble.n	8001110 <bindProcess+0x18>
			}
		}
	}

	*buttons |= bindButtonsToPress; //Add buttonsToPress to buttons
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	881a      	ldrh	r2, [r3, #0]
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	4313      	orrs	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	801a      	strh	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20007b8c 	.word	0x20007b8c

08001228 <buttonsProcess>:

void buttonsProcess(uint16_t buttons) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	//4 Buttons
	if (buttons & (1)) // B button
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <buttonsProcess+0x22>
		HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001242:	4879      	ldr	r0, [pc, #484]	; (8001428 <buttonsProcess+0x200>)
 8001244:	f002 fc70 	bl	8003b28 <HAL_GPIO_WritePin>
 8001248:	e005      	b.n	8001256 <buttonsProcess+0x2e>
	else
		HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001250:	4875      	ldr	r0, [pc, #468]	; (8001428 <buttonsProcess+0x200>)
 8001252:	f002 fc69 	bl	8003b28 <HAL_GPIO_WritePin>
	if (buttons & (1 << 1)) // Y button
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <buttonsProcess+0x46>
		HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001266:	4870      	ldr	r0, [pc, #448]	; (8001428 <buttonsProcess+0x200>)
 8001268:	f002 fc5e 	bl	8003b28 <HAL_GPIO_WritePin>
 800126c:	e005      	b.n	800127a <buttonsProcess+0x52>
	else
		HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001274:	486c      	ldr	r0, [pc, #432]	; (8001428 <buttonsProcess+0x200>)
 8001276:	f002 fc57 	bl	8003b28 <HAL_GPIO_WritePin>
	if (buttons & (1 << 8)) // A button
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <buttonsProcess+0x6a>
		HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4867      	ldr	r0, [pc, #412]	; (8001428 <buttonsProcess+0x200>)
 800128c:	f002 fc4c 	bl	8003b28 <HAL_GPIO_WritePin>
 8001290:	e005      	b.n	800129e <buttonsProcess+0x76>
	else
		HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	4863      	ldr	r0, [pc, #396]	; (8001428 <buttonsProcess+0x200>)
 800129a:	f002 fc45 	bl	8003b28 <HAL_GPIO_WritePin>
	if (buttons & (1 << 9)) // X button
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <buttonsProcess+0x8e>
		HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ae:	485e      	ldr	r0, [pc, #376]	; (8001428 <buttonsProcess+0x200>)
 80012b0:	f002 fc3a 	bl	8003b28 <HAL_GPIO_WritePin>
 80012b4:	e005      	b.n	80012c2 <buttonsProcess+0x9a>
	else
		HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012bc:	485a      	ldr	r0, [pc, #360]	; (8001428 <buttonsProcess+0x200>)
 80012be:	f002 fc33 	bl	8003b28 <HAL_GPIO_WritePin>

	//4 Axis
	////X2
	if (buttons & (1 << 2)) // Select button
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00c      	beq.n	80012e6 <buttonsProcess+0xbe>
			{

		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d2:	4855      	ldr	r0, [pc, #340]	; (8001428 <buttonsProcess+0x200>)
 80012d4:	f002 fc28 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	4853      	ldr	r0, [pc, #332]	; (800142c <buttonsProcess+0x204>)
 80012e0:	f002 fc22 	bl	8003b28 <HAL_GPIO_WritePin>
 80012e4:	e01d      	b.n	8001322 <buttonsProcess+0xfa>
	} else if (buttons & (1 << 3)) // Start Button
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <buttonsProcess+0xe2>
			{

		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	484c      	ldr	r0, [pc, #304]	; (8001428 <buttonsProcess+0x200>)
 80012f8:	f002 fc16 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	484a      	ldr	r0, [pc, #296]	; (800142c <buttonsProcess+0x204>)
 8001304:	f002 fc10 	bl	8003b28 <HAL_GPIO_WritePin>
 8001308:	e00b      	b.n	8001322 <buttonsProcess+0xfa>

	} else // X2 Centered
	{
		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001310:	4845      	ldr	r0, [pc, #276]	; (8001428 <buttonsProcess+0x200>)
 8001312:	f002 fc09 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131c:	4843      	ldr	r0, [pc, #268]	; (800142c <buttonsProcess+0x204>)
 800131e:	f002 fc03 	bl	8003b28 <HAL_GPIO_WritePin>
	}

	////Y1
	if (buttons & (1 << 4)) // Up button
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <buttonsProcess+0x11a>
			{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2104      	movs	r1, #4
 8001330:	483d      	ldr	r0, [pc, #244]	; (8001428 <buttonsProcess+0x200>)
 8001332:	f002 fbf9 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2108      	movs	r1, #8
 800133a:	483b      	ldr	r0, [pc, #236]	; (8001428 <buttonsProcess+0x200>)
 800133c:	f002 fbf4 	bl	8003b28 <HAL_GPIO_WritePin>
 8001340:	e019      	b.n	8001376 <buttonsProcess+0x14e>
	} else if (buttons & (1 << 5)) // Down Button
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00a      	beq.n	8001362 <buttonsProcess+0x13a>
			{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2104      	movs	r1, #4
 8001350:	4835      	ldr	r0, [pc, #212]	; (8001428 <buttonsProcess+0x200>)
 8001352:	f002 fbe9 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2108      	movs	r1, #8
 800135a:	4833      	ldr	r0, [pc, #204]	; (8001428 <buttonsProcess+0x200>)
 800135c:	f002 fbe4 	bl	8003b28 <HAL_GPIO_WritePin>
 8001360:	e009      	b.n	8001376 <buttonsProcess+0x14e>
	} else // Y1 Centered
	{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2104      	movs	r1, #4
 8001366:	4830      	ldr	r0, [pc, #192]	; (8001428 <buttonsProcess+0x200>)
 8001368:	f002 fbde 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2108      	movs	r1, #8
 8001370:	482d      	ldr	r0, [pc, #180]	; (8001428 <buttonsProcess+0x200>)
 8001372:	f002 fbd9 	bl	8003b28 <HAL_GPIO_WritePin>
	}

	////X1
	if (buttons & (1 << 6)) // Left button
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00a      	beq.n	8001396 <buttonsProcess+0x16e>
			{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2101      	movs	r1, #1
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <buttonsProcess+0x200>)
 8001386:	f002 fbcf 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2102      	movs	r1, #2
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <buttonsProcess+0x200>)
 8001390:	f002 fbca 	bl	8003b28 <HAL_GPIO_WritePin>
 8001394:	e019      	b.n	80013ca <buttonsProcess+0x1a2>
	} else if (buttons & (1 << 7)) // Right Button
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <buttonsProcess+0x18e>
			{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2101      	movs	r1, #1
 80013a4:	4820      	ldr	r0, [pc, #128]	; (8001428 <buttonsProcess+0x200>)
 80013a6:	f002 fbbf 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2102      	movs	r1, #2
 80013ae:	481e      	ldr	r0, [pc, #120]	; (8001428 <buttonsProcess+0x200>)
 80013b0:	f002 fbba 	bl	8003b28 <HAL_GPIO_WritePin>
 80013b4:	e009      	b.n	80013ca <buttonsProcess+0x1a2>
	} else // X1 Centered
	{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2101      	movs	r1, #1
 80013ba:	481b      	ldr	r0, [pc, #108]	; (8001428 <buttonsProcess+0x200>)
 80013bc:	f002 fbb4 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2102      	movs	r1, #2
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <buttonsProcess+0x200>)
 80013c6:	f002 fbaf 	bl	8003b28 <HAL_GPIO_WritePin>
	}

	////Y2
	if (buttons & (1 << 10)) // Left Shoulder button
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <buttonsProcess+0x1c2>
			{
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2140      	movs	r1, #64	; 0x40
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <buttonsProcess+0x200>)
 80013da:	f002 fba5 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <buttonsProcess+0x200>)
 80013e4:	f002 fba0 	bl	8003b28 <HAL_GPIO_WritePin>
	} else // Y2 Centered
	{
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
	}
}
 80013e8:	e019      	b.n	800141e <buttonsProcess+0x1f6>
	} else if (buttons & (1 << 11)) // Right Shoulder Button
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00a      	beq.n	800140a <buttonsProcess+0x1e2>
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <buttonsProcess+0x200>)
 80013fa:	f002 fb95 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <buttonsProcess+0x200>)
 8001404:	f002 fb90 	bl	8003b28 <HAL_GPIO_WritePin>
}
 8001408:	e009      	b.n	800141e <buttonsProcess+0x1f6>
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <buttonsProcess+0x200>)
 8001410:	f002 fb8a 	bl	8003b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <buttonsProcess+0x200>)
 800141a:	f002 fb85 	bl	8003b28 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800

08001430 <buttonsToString>:

void buttonsToString(char *stringBuffer, uint16_t buttons, char *prefix) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	460b      	mov	r3, r1
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	817b      	strh	r3, [r7, #10]
	char buffer[32] = { 0 };
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2220      	movs	r2, #32
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f008 f9c5 	bl	80097d6 <memset>
	strcpy(buffer, prefix);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f008 f9e8 	bl	8009828 <strcpy>
	uint8_t offset = strlen(buffer);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fec9 	bl	80001f4 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t written = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (int i = 0; i < 12; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
 8001472:	e0c4      	b.n	80015fe <buttonsToString+0x1ce>
		if (buttons & (1 << i)) {
 8001474:	897a      	ldrh	r2, [r7, #10]
 8001476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001478:	fa42 f303 	asr.w	r3, r2, r3
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80b9 	beq.w	80015f8 <buttonsToString+0x1c8>
			written = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			switch (i) {
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148e:	2b0b      	cmp	r3, #11
 8001490:	f200 80a3 	bhi.w	80015da <buttonsToString+0x1aa>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <buttonsToString+0x6c>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014e3 	.word	0x080014e3
 80014a0:	0800150f 	.word	0x0800150f
 80014a4:	080015c3 	.word	0x080015c3
 80014a8:	080015a9 	.word	0x080015a9
 80014ac:	08001525 	.word	0x08001525
 80014b0:	08001537 	.word	0x08001537
 80014b4:	0800154d 	.word	0x0800154d
 80014b8:	08001563 	.word	0x08001563
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014f9 	.word	0x080014f9
 80014c4:	0800157d 	.word	0x0800157d
 80014c8:	08001593 	.word	0x08001593
			case 8:
				sprintf(buffer + offset, "A+");
 80014cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014d0:	f107 0210 	add.w	r2, r7, #16
 80014d4:	4413      	add	r3, r2
 80014d6:	4a5b      	ldr	r2, [pc, #364]	; (8001644 <buttonsToString+0x214>)
 80014d8:	8811      	ldrh	r1, [r2, #0]
 80014da:	7892      	ldrb	r2, [r2, #2]
 80014dc:	8019      	strh	r1, [r3, #0]
 80014de:	709a      	strb	r2, [r3, #2]
				break;
 80014e0:	e07b      	b.n	80015da <buttonsToString+0x1aa>
			case 0:
				sprintf(buffer + offset, "B+");
 80014e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014e6:	f107 0210 	add.w	r2, r7, #16
 80014ea:	4413      	add	r3, r2
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <buttonsToString+0x218>)
 80014ee:	8811      	ldrh	r1, [r2, #0]
 80014f0:	7892      	ldrb	r2, [r2, #2]
 80014f2:	8019      	strh	r1, [r3, #0]
 80014f4:	709a      	strb	r2, [r3, #2]
				break;
 80014f6:	e070      	b.n	80015da <buttonsToString+0x1aa>
			case 9:
				sprintf(buffer + offset, "X+");
 80014f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014fc:	f107 0210 	add.w	r2, r7, #16
 8001500:	4413      	add	r3, r2
 8001502:	4a52      	ldr	r2, [pc, #328]	; (800164c <buttonsToString+0x21c>)
 8001504:	8811      	ldrh	r1, [r2, #0]
 8001506:	7892      	ldrb	r2, [r2, #2]
 8001508:	8019      	strh	r1, [r3, #0]
 800150a:	709a      	strb	r2, [r3, #2]
				break;
 800150c:	e065      	b.n	80015da <buttonsToString+0x1aa>
			case 1:
				sprintf(buffer + offset, "Y+");
 800150e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001512:	f107 0210 	add.w	r2, r7, #16
 8001516:	4413      	add	r3, r2
 8001518:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <buttonsToString+0x220>)
 800151a:	8811      	ldrh	r1, [r2, #0]
 800151c:	7892      	ldrb	r2, [r2, #2]
 800151e:	8019      	strh	r1, [r3, #0]
 8001520:	709a      	strb	r2, [r3, #2]
				break;
 8001522:	e05a      	b.n	80015da <buttonsToString+0x1aa>
			case 4:
				sprintf(buffer + offset, "Up+");
 8001524:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001528:	f107 0210 	add.w	r2, r7, #16
 800152c:	4413      	add	r3, r2
 800152e:	4a49      	ldr	r2, [pc, #292]	; (8001654 <buttonsToString+0x224>)
 8001530:	6810      	ldr	r0, [r2, #0]
 8001532:	6018      	str	r0, [r3, #0]
				break;
 8001534:	e051      	b.n	80015da <buttonsToString+0x1aa>
			case 5:
				sprintf(buffer + offset, "Down+");
 8001536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800153a:	f107 0210 	add.w	r2, r7, #16
 800153e:	4413      	add	r3, r2
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <buttonsToString+0x228>)
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	6018      	str	r0, [r3, #0]
 8001546:	8892      	ldrh	r2, [r2, #4]
 8001548:	809a      	strh	r2, [r3, #4]
				break;
 800154a:	e046      	b.n	80015da <buttonsToString+0x1aa>
			case 6:
				sprintf(buffer + offset, "Left+");
 800154c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	4413      	add	r3, r2
 8001556:	4a41      	ldr	r2, [pc, #260]	; (800165c <buttonsToString+0x22c>)
 8001558:	6810      	ldr	r0, [r2, #0]
 800155a:	6018      	str	r0, [r3, #0]
 800155c:	8892      	ldrh	r2, [r2, #4]
 800155e:	809a      	strh	r2, [r3, #4]
				break;
 8001560:	e03b      	b.n	80015da <buttonsToString+0x1aa>
			case 7:
				sprintf(buffer + offset, "Right+");
 8001562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001566:	f107 0210 	add.w	r2, r7, #16
 800156a:	4413      	add	r3, r2
 800156c:	4a3c      	ldr	r2, [pc, #240]	; (8001660 <buttonsToString+0x230>)
 800156e:	6810      	ldr	r0, [r2, #0]
 8001570:	6018      	str	r0, [r3, #0]
 8001572:	8891      	ldrh	r1, [r2, #4]
 8001574:	7992      	ldrb	r2, [r2, #6]
 8001576:	8099      	strh	r1, [r3, #4]
 8001578:	719a      	strb	r2, [r3, #6]
				break;
 800157a:	e02e      	b.n	80015da <buttonsToString+0x1aa>
			case 10:
				sprintf(buffer + offset, "L+");
 800157c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001580:	f107 0210 	add.w	r2, r7, #16
 8001584:	4413      	add	r3, r2
 8001586:	4a37      	ldr	r2, [pc, #220]	; (8001664 <buttonsToString+0x234>)
 8001588:	8811      	ldrh	r1, [r2, #0]
 800158a:	7892      	ldrb	r2, [r2, #2]
 800158c:	8019      	strh	r1, [r3, #0]
 800158e:	709a      	strb	r2, [r3, #2]
				break;
 8001590:	e023      	b.n	80015da <buttonsToString+0x1aa>
			case 11:
				sprintf(buffer + offset, "R+");
 8001592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001596:	f107 0210 	add.w	r2, r7, #16
 800159a:	4413      	add	r3, r2
 800159c:	4a32      	ldr	r2, [pc, #200]	; (8001668 <buttonsToString+0x238>)
 800159e:	8811      	ldrh	r1, [r2, #0]
 80015a0:	7892      	ldrb	r2, [r2, #2]
 80015a2:	8019      	strh	r1, [r3, #0]
 80015a4:	709a      	strb	r2, [r3, #2]
				break;
 80015a6:	e018      	b.n	80015da <buttonsToString+0x1aa>
			case 3:
				sprintf(buffer + offset, "Start+");
 80015a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015ac:	f107 0210 	add.w	r2, r7, #16
 80015b0:	4413      	add	r3, r2
 80015b2:	4a2e      	ldr	r2, [pc, #184]	; (800166c <buttonsToString+0x23c>)
 80015b4:	6810      	ldr	r0, [r2, #0]
 80015b6:	6018      	str	r0, [r3, #0]
 80015b8:	8891      	ldrh	r1, [r2, #4]
 80015ba:	7992      	ldrb	r2, [r2, #6]
 80015bc:	8099      	strh	r1, [r3, #4]
 80015be:	719a      	strb	r2, [r3, #6]
				break;
 80015c0:	e00b      	b.n	80015da <buttonsToString+0x1aa>
			case 2:
				sprintf(buffer + offset, "Select+");
 80015c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015c6:	f107 0210 	add.w	r2, r7, #16
 80015ca:	4413      	add	r3, r2
 80015cc:	4928      	ldr	r1, [pc, #160]	; (8001670 <buttonsToString+0x240>)
 80015ce:	461a      	mov	r2, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	cb03      	ldmia	r3!, {r0, r1}
 80015d4:	6010      	str	r0, [r2, #0]
 80015d6:	6051      	str	r1, [r2, #4]
				break;
 80015d8:	bf00      	nop
			}
			offset += strlen(buffer + offset);
 80015da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015de:	f107 0210 	add.w	r2, r7, #16
 80015e2:	4413      	add	r3, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fe05 	bl	80001f4 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015f2:	4413      	add	r3, r2
 80015f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (int i = 0; i < 12; i++) {
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fa:	3301      	adds	r3, #1
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
 80015fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001600:	2b0b      	cmp	r3, #11
 8001602:	f77f af37 	ble.w	8001474 <buttonsToString+0x44>
		}
	}
	if (written)
 8001606:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00c      	beq.n	8001628 <buttonsToString+0x1f8>
		buffer[strlen(buffer) - 1] = 0; //Remove the final plus
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fdee 	bl	80001f4 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	3b01      	subs	r3, #1
 800161c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001620:	4413      	add	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	f803 2c28 	strb.w	r2, [r3, #-40]
	buffer[16] = 0; //Cap length at 16 chars
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3020 	strb.w	r3, [r7, #32]
	memcpy(stringBuffer, buffer, 17); //Copy 16 chars + terminator
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	2211      	movs	r2, #17
 8001634:	4619      	mov	r1, r3
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f008 f8c2 	bl	80097c0 <memcpy>
}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0800a014 	.word	0x0800a014
 8001648:	0800a018 	.word	0x0800a018
 800164c:	0800a01c 	.word	0x0800a01c
 8001650:	0800a020 	.word	0x0800a020
 8001654:	0800a024 	.word	0x0800a024
 8001658:	0800a028 	.word	0x0800a028
 800165c:	0800a030 	.word	0x0800a030
 8001660:	0800a038 	.word	0x0800a038
 8001664:	0800a040 	.word	0x0800a040
 8001668:	0800a044 	.word	0x0800a044
 800166c:	0800a048 	.word	0x0800a048
 8001670:	0800a050 	.word	0x0800a050

08001674 <flashReadData>:
#include <snestogameport/flash.h>

//Flash Read/Write

uint32_t* flashReadData() {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
	uint32_t address = 0x08020000;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <flashReadData+0x18>)
 800167c:	607b      	str	r3, [r7, #4]
	return (uint32_t*) address;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	08020000 	.word	0x08020000

08001690 <flashWriteData>:

void flashWriteData(uint32_t *data, uint32_t size) {
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	//TODO: Find working wear leveling library
	uint32_t address = 0x08020000; // Sector 5 start address
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <flashWriteData+0x60>)
 800169c:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 800169e:	f001 fef1 	bl	8003484 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_1);
 80016a2:	2100      	movs	r1, #0
 80016a4:	2005      	movs	r0, #5
 80016a6:	f002 f85d 	bl	8003764 <FLASH_Erase_Sector>
	for (int i = 0; i < (size / 4); i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e013      	b.n	80016d8 <flashWriteData+0x48>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + (i * 4),
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	18d1      	adds	r1, r2, r3
				*(data + i));
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	681b      	ldr	r3, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + (i * 4),
 80016c4:	f04f 0400 	mov.w	r4, #0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	2002      	movs	r0, #2
 80016ce:	f001 fe85 	bl	80033dc <HAL_FLASH_Program>
	for (int i = 0; i < (size / 4); i++) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	089a      	lsrs	r2, r3, #2
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d8e6      	bhi.n	80016b0 <flashWriteData+0x20>
	}
	HAL_FLASH_Lock();
 80016e2:	f001 fef1 	bl	80034c8 <HAL_FLASH_Lock>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	08020000 	.word	0x08020000

080016f4 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4603      	mov	r3, r0
 8001704:	70fb      	strb	r3, [r7, #3]
 8001706:	460b      	mov	r3, r1
 8001708:	70bb      	strb	r3, [r7, #2]
 800170a:	4613      	mov	r3, r2
 800170c:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8001712:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <lcdInit+0x15c>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <lcdInit+0x15c>)
 8001720:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001722:	4a4b      	ldr	r2, [pc, #300]	; (8001850 <lcdInit+0x15c>)
 8001724:	78bb      	ldrb	r3, [r7, #2]
 8001726:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001728:	4a49      	ldr	r2, [pc, #292]	; (8001850 <lcdInit+0x15c>)
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 800172e:	4b48      	ldr	r3, [pc, #288]	; (8001850 <lcdInit+0x15c>)
 8001730:	2208      	movs	r2, #8
 8001732:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001734:	4b47      	ldr	r3, [pc, #284]	; (8001854 <lcdInit+0x160>)
 8001736:	2234      	movs	r2, #52	; 0x34
 8001738:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <lcdInit+0x160>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <lcdInit+0x160>)
 8001740:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <lcdInit+0x160>)
 8001744:	2230      	movs	r2, #48	; 0x30
 8001746:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]
 800174c:	e030      	b.n	80017b0 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <lcdInit+0x15c>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <lcdInit+0x15c>)
 8001754:	799b      	ldrb	r3, [r3, #6]
 8001756:	b299      	uxth	r1, r3
 8001758:	2303      	movs	r3, #3
 800175a:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <lcdInit+0x160>)
 800175c:	f002 fb36 	bl	8003dcc <HAL_I2C_Master_Transmit_DMA>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <lcdInit+0x76>
            return false;
 8001766:	2300      	movs	r3, #0
 8001768:	e06d      	b.n	8001846 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 800176a:	f006 fc99 	bl	80080a0 <xTaskGetTickCount>
 800176e:	4603      	mov	r3, r0
 8001770:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001772:	e002      	b.n	800177a <lcdInit+0x86>
            vTaskDelay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f006 fb51 	bl	8007e1c <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <lcdInit+0x15c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 feb6 	bl	80044f0 <HAL_I2C_GetState>
 8001784:	4603      	mov	r3, r0
 8001786:	2b20      	cmp	r3, #32
 8001788:	d1f4      	bne.n	8001774 <lcdInit+0x80>
        }

        if (i == 2) {
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d106      	bne.n	800179e <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f006 fac6 	bl	8007d28 <vTaskDelayUntil>
 800179c:	e005      	b.n	80017aa <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2105      	movs	r1, #5
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 fabf 	bl	8007d28 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	3301      	adds	r3, #1
 80017ae:	75fb      	strb	r3, [r7, #23]
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d9cb      	bls.n	800174e <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <lcdInit+0x160>)
 80017b8:	222c      	movs	r2, #44	; 0x2c
 80017ba:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <lcdInit+0x160>)
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <lcdInit+0x160>)
 80017c2:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <lcdInit+0x160>)
 80017c6:	2228      	movs	r2, #40	; 0x28
 80017c8:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <lcdInit+0x15c>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <lcdInit+0x15c>)
 80017d0:	799b      	ldrb	r3, [r3, #6]
 80017d2:	b299      	uxth	r1, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <lcdInit+0x160>)
 80017d8:	f002 faf8 	bl	8003dcc <HAL_I2C_Master_Transmit_DMA>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <lcdInit+0xf8>
        return false;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e02f      	b.n	8001846 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f006 fb18 	bl	8007e1c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <lcdInit+0x15c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fe7d 	bl	80044f0 <HAL_I2C_GetState>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d1f4      	bne.n	80017e6 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <lcdInit+0x15c>)
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d904      	bls.n	8001818 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	b2db      	uxtb	r3, r3
 8001816:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001818:	f107 030f 	add.w	r3, r7, #15
 800181c:	4619      	mov	r1, r3
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f98c 	bl	8001b3c <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001824:	2101      	movs	r1, #1
 8001826:	2001      	movs	r0, #1
 8001828:	f000 f816 	bl	8001858 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 800182c:	2101      	movs	r1, #1
 800182e:	2007      	movs	r0, #7
 8001830:	f000 f812 	bl	8001858 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001834:	2101      	movs	r1, #1
 8001836:	2002      	movs	r0, #2
 8001838:	f000 f80e 	bl	8001858 <lcdCommand>
    lcdCursorHome();
 800183c:	2101      	movs	r1, #1
 800183e:	2005      	movs	r0, #5
 8001840:	f000 f80a 	bl	8001858 <lcdCommand>

    return true;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200000a4 	.word	0x200000a4
 8001854:	2000009c 	.word	0x2000009c

08001858 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d06e      	beq.n	8001950 <lcdCommand+0xf8>
 8001872:	2b01      	cmp	r3, #1
 8001874:	f040 80b4 	bne.w	80019e0 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	3b01      	subs	r3, #1
 800187c:	2b07      	cmp	r3, #7
 800187e:	d864      	bhi.n	800194a <lcdCommand+0xf2>
 8001880:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <lcdCommand+0x30>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	080018a9 	.word	0x080018a9
 800188c:	080018d9 	.word	0x080018d9
 8001890:	080018b9 	.word	0x080018b9
 8001894:	080018c9 	.word	0x080018c9
 8001898:	080018fd 	.word	0x080018fd
 800189c:	08001931 	.word	0x08001931
 80018a0:	08001921 	.word	0x08001921
 80018a4:	0800193b 	.word	0x0800193b
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80018a8:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <lcdCommand+0x1f0>)
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <lcdCommand+0x1f0>)
 80018b4:	721a      	strb	r2, [r3, #8]
                    break;
 80018b6:	e04a      	b.n	800194e <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80018b8:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <lcdCommand+0x1f0>)
 80018ba:	7a1b      	ldrb	r3, [r3, #8]
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <lcdCommand+0x1f0>)
 80018c4:	721a      	strb	r2, [r3, #8]
                    break;
 80018c6:	e042      	b.n	800194e <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80018c8:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <lcdCommand+0x1f0>)
 80018ca:	7a1b      	ldrb	r3, [r3, #8]
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <lcdCommand+0x1f0>)
 80018d4:	721a      	strb	r2, [r3, #8]
                    break;
 80018d6:	e03a      	b.n	800194e <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80018dc:	f107 030f 	add.w	r3, r7, #15
 80018e0:	4619      	mov	r1, r3
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f92a 	bl	8001b3c <lcdWriteByte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <lcdCommand+0x9a>
                        return false;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e0a6      	b.n	8001a40 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 80018f2:	2002      	movs	r0, #2
 80018f4:	f006 fa92 	bl	8007e1c <vTaskDelay>
                        return true;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0a1      	b.n	8001a40 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 80018fc:	2302      	movs	r3, #2
 80018fe:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001900:	f107 030f 	add.w	r3, r7, #15
 8001904:	4619      	mov	r1, r3
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f918 	bl	8001b3c <lcdWriteByte>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <lcdCommand+0xbe>
                        return false;
 8001912:	2300      	movs	r3, #0
 8001914:	e094      	b.n	8001a40 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001916:	2002      	movs	r0, #2
 8001918:	f006 fa80 	bl	8007e1c <vTaskDelay>
                        return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e08f      	b.n	8001a40 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <lcdCommand+0x1f0>)
 8001922:	7a5b      	ldrb	r3, [r3, #9]
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <lcdCommand+0x1f0>)
 800192c:	725a      	strb	r2, [r3, #9]
                    break;
 800192e:	e00e      	b.n	800194e <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <lcdCommand+0x1f0>)
 8001932:	7a5a      	ldrb	r2, [r3, #9]
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <lcdCommand+0x1f0>)
 8001936:	725a      	strb	r2, [r3, #9]
                    break;
 8001938:	e009      	b.n	800194e <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <lcdCommand+0x1f0>)
 800193c:	7a5b      	ldrb	r3, [r3, #9]
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <lcdCommand+0x1f0>)
 8001946:	725a      	strb	r2, [r3, #9]
                    break;
 8001948:	e001      	b.n	800194e <lcdCommand+0xf6>

                default:
                    return false;
 800194a:	2300      	movs	r3, #0
 800194c:	e078      	b.n	8001a40 <lcdCommand+0x1e8>
            }

            break;
 800194e:	e049      	b.n	80019e4 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b01      	subs	r3, #1
 8001954:	2b07      	cmp	r3, #7
 8001956:	d840      	bhi.n	80019da <lcdCommand+0x182>
 8001958:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <lcdCommand+0x108>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001981 	.word	0x08001981
 8001964:	080019db 	.word	0x080019db
 8001968:	08001991 	.word	0x08001991
 800196c:	080019a1 	.word	0x080019a1
 8001970:	080019db 	.word	0x080019db
 8001974:	080019c1 	.word	0x080019c1
 8001978:	080019b1 	.word	0x080019b1
 800197c:	080019cb 	.word	0x080019cb
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <lcdCommand+0x1f0>)
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <lcdCommand+0x1f0>)
 800198c:	721a      	strb	r2, [r3, #8]
                    break;
 800198e:	e026      	b.n	80019de <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <lcdCommand+0x1f0>)
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	f023 0302 	bic.w	r3, r3, #2
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <lcdCommand+0x1f0>)
 800199c:	721a      	strb	r2, [r3, #8]
                    break;
 800199e:	e01e      	b.n	80019de <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <lcdCommand+0x1f0>)
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <lcdCommand+0x1f0>)
 80019ac:	721a      	strb	r2, [r3, #8]
                    break;
 80019ae:	e016      	b.n	80019de <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <lcdCommand+0x1f0>)
 80019b2:	7a5b      	ldrb	r3, [r3, #9]
 80019b4:	f023 0302 	bic.w	r3, r3, #2
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <lcdCommand+0x1f0>)
 80019bc:	725a      	strb	r2, [r3, #9]
                    break;
 80019be:	e00e      	b.n	80019de <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <lcdCommand+0x1f0>)
 80019c2:	7a5a      	ldrb	r2, [r3, #9]
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <lcdCommand+0x1f0>)
 80019c6:	725a      	strb	r2, [r3, #9]
                    break;
 80019c8:	e009      	b.n	80019de <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <lcdCommand+0x1f0>)
 80019cc:	7a5b      	ldrb	r3, [r3, #9]
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <lcdCommand+0x1f0>)
 80019d6:	725a      	strb	r2, [r3, #9]
                    break;
 80019d8:	e001      	b.n	80019de <lcdCommand+0x186>

                default:
                    return false;
 80019da:	2300      	movs	r3, #0
 80019dc:	e030      	b.n	8001a40 <lcdCommand+0x1e8>
            }

            break;
 80019de:	e001      	b.n	80019e4 <lcdCommand+0x18c>

        default:
            return false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e02d      	b.n	8001a40 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	d821      	bhi.n	8001a30 <lcdCommand+0x1d8>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <lcdCommand+0x19c>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a15 	.word	0x08001a15
 80019f8:	08001a31 	.word	0x08001a31
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a15 	.word	0x08001a15
 8001a04:	08001a31 	.word	0x08001a31
 8001a08:	08001a23 	.word	0x08001a23
 8001a0c:	08001a23 	.word	0x08001a23
 8001a10:	08001a23 	.word	0x08001a23
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <lcdCommand+0x1f0>)
 8001a16:	7a1b      	ldrb	r3, [r3, #8]
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	73fb      	strb	r3, [r7, #15]
            break;
 8001a20:	e007      	b.n	8001a32 <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <lcdCommand+0x1f0>)
 8001a24:	7a5b      	ldrb	r3, [r3, #9]
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	73fb      	strb	r3, [r7, #15]
            break;
 8001a2e:	e000      	b.n	8001a32 <lcdCommand+0x1da>

        default:
            break;
 8001a30:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001a32:	f107 030f 	add.w	r3, r7, #15
 8001a36:	4619      	mov	r1, r3
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 f87f 	bl	8001b3c <lcdWriteByte>
 8001a3e:	4603      	mov	r3, r0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200000a4 	.word	0x200000a4

08001a4c <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <lcdBacklight+0x4c>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <lcdBacklight+0x4c>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <lcdBacklight+0x4c>)
 8001a62:	799b      	ldrb	r3, [r3, #6]
 8001a64:	b299      	uxth	r1, r3
 8001a66:	2301      	movs	r3, #1
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <lcdBacklight+0x50>)
 8001a6a:	f002 f9af 	bl	8003dcc <HAL_I2C_Master_Transmit_DMA>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <lcdBacklight+0x32>
        return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e00b      	b.n	8001a90 <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f006 f9cf 	bl	8007e1c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <lcdBacklight+0x4c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fd34 	bl	80044f0 <HAL_I2C_GetState>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d1f4      	bne.n	8001a78 <lcdBacklight+0x2c>
    }

    return true;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200000a4 	.word	0x200000a4
 8001a9c:	200000ab 	.word	0x200000ab

08001aa0 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <lcdSetCursorPosition+0x50>)
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	79ba      	ldrb	r2, [r7, #6]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d303      	bcc.n	8001ac2 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <lcdSetCursorPosition+0x50>)
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <lcdSetCursorPosition+0x54>)
 8001ac6:	5cd2      	ldrb	r2, [r2, r3]
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4413      	add	r3, r2
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001ada:	f107 030f 	add.w	r3, r7, #15
 8001ade:	4619      	mov	r1, r3
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 f82b 	bl	8001b3c <lcdWriteByte>
 8001ae6:	4603      	mov	r3, r0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200000a4 	.word	0x200000a4
 8001af4:	0800a31c 	.word	0x0800a31c

08001af8 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e00e      	b.n	8001b28 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 f812 	bl	8001b3c <lcdWriteByte>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <lcdPrintStr+0x2a>
            return false;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e007      	b.n	8001b32 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	3301      	adds	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3ec      	bcc.n	8001b0a <lcdPrintStr+0x12>
        }
    }

    return true;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001b48:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <lcdWriteByte+0xdc>)
 8001b4a:	79da      	ldrb	r2, [r3, #7]
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f023 030f 	bic.w	r3, r3, #15
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <lcdWriteByte+0xe0>)
 8001b68:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <lcdWriteByte+0xe0>)
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <lcdWriteByte+0xe0>)
 8001b70:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <lcdWriteByte+0xdc>)
 8001b74:	79da      	ldrb	r2, [r3, #7]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	f023 030f 	bic.w	r3, r3, #15
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b25b      	sxtb	r3, r3
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <lcdWriteByte+0xe0>)
 8001b92:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <lcdWriteByte+0xdc>)
 8001b96:	79da      	ldrb	r2, [r3, #7]
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <lcdWriteByte+0xe0>)
 8001bb2:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <lcdWriteByte+0xe0>)
 8001bb6:	78da      	ldrb	r2, [r3, #3]
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <lcdWriteByte+0xe0>)
 8001bba:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <lcdWriteByte+0xdc>)
 8001bbe:	79da      	ldrb	r2, [r3, #7]
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	b25a      	sxtb	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <lcdWriteByte+0xe0>)
 8001bd8:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <lcdWriteByte+0xdc>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <lcdWriteByte+0xdc>)
 8001be0:	799b      	ldrb	r3, [r3, #6]
 8001be2:	b299      	uxth	r1, r3
 8001be4:	2306      	movs	r3, #6
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <lcdWriteByte+0xe0>)
 8001be8:	f002 f8f0 	bl	8003dcc <HAL_I2C_Master_Transmit_DMA>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <lcdWriteByte+0xc0>
        return false;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e00b      	b.n	8001c0e <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f006 f910 	bl	8007e1c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <lcdWriteByte+0xdc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 fc75 	bl	80044f0 <HAL_I2C_GetState>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d1f4      	bne.n	8001bf6 <lcdWriteByte+0xba>
    }

    return true;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200000a4 	.word	0x200000a4
 8001c1c:	2000009c 	.word	0x2000009c

08001c20 <menuInitMenuEntry>:

uint32_t menuLastButtonsPressedTime = 0;
uint16_t menuLastButtonsPressed = 0;

//Registers a menu entry's name, help message, and callback function
void menuInitMenuEntry(char *name, char *help, void *callback) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	strcpy(menuItems[menuNumEntries].name, name);
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <menuInitMenuEntry+0x68>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	2354      	movs	r3, #84	; 0x54
 8001c34:	fb03 f302 	mul.w	r3, r3, r2
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <menuInitMenuEntry+0x6c>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f007 fdf2 	bl	8009828 <strcpy>
	strcpy(menuItems[menuNumEntries].help, help);
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <menuInitMenuEntry+0x68>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2354      	movs	r3, #84	; 0x54
 8001c4c:	fb03 f302 	mul.w	r3, r3, r2
 8001c50:	3310      	adds	r3, #16
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <menuInitMenuEntry+0x6c>)
 8001c54:	4413      	add	r3, r2
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 fde5 	bl	8009828 <strcpy>
	menuItems[menuNumEntries].callback = callback;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <menuInitMenuEntry+0x68>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <menuInitMenuEntry+0x6c>)
 8001c66:	2354      	movs	r3, #84	; 0x54
 8001c68:	fb03 f301 	mul.w	r3, r3, r1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3350      	adds	r3, #80	; 0x50
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	601a      	str	r2, [r3, #0]
	menuNumEntries++;
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <menuInitMenuEntry+0x68>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <menuInitMenuEntry+0x68>)
 8001c7e:	701a      	strb	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200000b0 	.word	0x200000b0
 8001c8c:	20007b90 	.word	0x20007b90

08001c90 <menuDeactivate>:

//Hide menu, clearMessage to clear the screen immediately, otherwise leave the screen alone
void menuDeactivate(uint8_t _clearMessage) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	menuActive = 0;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <menuDeactivate+0x28>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
	if (_clearMessage)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <menuDeactivate+0x1a>
		screenClear();
 8001ca6:	f000 fcdd 	bl	8002664 <screenClear>
	menuActiveSubmenuCallback = 0;
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <menuDeactivate+0x2c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200000b1 	.word	0x200000b1
 8001cbc:	200000b4 	.word	0x200000b4

08001cc0 <menuActivate>:

//Show the menu
void menuActivate() {
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
	menuActive = 1;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <menuActivate+0x1c>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
	menuActiveSubmenuCallback = 0;
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <menuActivate+0x20>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200000b1 	.word	0x200000b1
 8001ce0:	200000b4 	.word	0x200000b4

08001ce4 <menuProcess>:
int mainMenuHelpIndex = 0;
uint32_t mainMenuHelpLastTick = 0;
uint8_t mainMenuCurrentMenuIndex = 0;

//Main Menu
int menuProcess(uint16_t buttons) {
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b095      	sub	sp, #84	; 0x54
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]

	uint8_t buttonsChanged = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (menuLastButtonsPressed != buttons) //Check if buttons have changed, if so reset the held timer and set the changed flag
 8001cf4:	4ba5      	ldr	r3, [pc, #660]	; (8001f8c <menuProcess+0x2a8>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d00a      	beq.n	8001d14 <menuProcess+0x30>
			{
		menuLastButtonsPressedTime = HAL_GetTick();
 8001cfe:	f000 fed5 	bl	8002aac <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4ba2      	ldr	r3, [pc, #648]	; (8001f90 <menuProcess+0x2ac>)
 8001d06:	601a      	str	r2, [r3, #0]
		menuLastButtonsPressed = buttons;
 8001d08:	4aa0      	ldr	r2, [pc, #640]	; (8001f8c <menuProcess+0x2a8>)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	8013      	strh	r3, [r2, #0]
		buttonsChanged = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}

	uint32_t buttonsHoldTime = HAL_GetTick() - menuLastButtonsPressedTime; //How long the button has been held
 8001d14:	f000 feca 	bl	8002aac <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b9d      	ldr	r3, [pc, #628]	; (8001f90 <menuProcess+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48

	if (buttons == (BUTTON_START | BUTTON_SELECT) && buttonsHoldTime > 1000) //If the menu isn't active and START+SELECT are held alone for 1s open it
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	d105      	bne.n	8001d34 <menuProcess+0x50>
 8001d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2e:	d901      	bls.n	8001d34 <menuProcess+0x50>
			{
		menuActivate();
 8001d30:	f7ff ffc6 	bl	8001cc0 <menuActivate>
	}

	if (!menuActive) {
 8001d34:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <menuProcess+0x2b0>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <menuProcess+0x5c>
		return 0; //  0 for continue to press buttons on the PC
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e120      	b.n	8001f82 <menuProcess+0x29e>
	}

	screenResetClearTimer(); //Clear any timers to turn the screen off
 8001d40:	f000 fcca 	bl	80026d8 <screenResetClearTimer>

	if (menuActiveSubmenuCallback) //Call a submenu
 8001d44:	4b94      	ldr	r3, [pc, #592]	; (8001f98 <menuProcess+0x2b4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <menuProcess+0x86>
	{
		void (*callback)(uint16_t buttons, uint32_t buttonsHoldTime,
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <menuProcess+0x2b4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
				uint8_t buttonsChanged, uint8_t firstRun) = menuActiveSubmenuCallback;
		callback(buttons, buttonsHoldTime, buttonsChanged,
 8001d52:	4b92      	ldr	r3, [pc, #584]	; (8001f9c <menuProcess+0x2b8>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d5a:	88f8      	ldrh	r0, [r7, #6]
 8001d5c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001d5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d60:	47a0      	blx	r4
				mainMenuSubmenuFirstRun);
		mainMenuSubmenuFirstRun = 0;
 8001d62:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <menuProcess+0x2b8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e10a      	b.n	8001f80 <menuProcess+0x29c>
	} else //Render the menu, check the keys
	{

		//Render menu
		if (mainMenuCurrentMenuIndex == 0)
 8001d6a:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <menuProcess+0x2bc>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <menuProcess+0x94>
			mainMenuTopSelected = 1; //Top entry means top is selected
 8001d72:	4b8c      	ldr	r3, [pc, #560]	; (8001fa4 <menuProcess+0x2c0>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
		if (mainMenuCurrentMenuIndex == menuNumEntries - 1)
 8001d78:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <menuProcess+0x2bc>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <menuProcess+0x2c4>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d102      	bne.n	8001d8e <menuProcess+0xaa>
			mainMenuTopSelected = 0; //Bottom entry means bottom is selected
 8001d88:	4b86      	ldr	r3, [pc, #536]	; (8001fa4 <menuProcess+0x2c0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

		uint8_t otherOptionPosition = mainMenuCurrentMenuIndex
				+ (mainMenuTopSelected ? 1 : -1);
 8001d8e:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <menuProcess+0x2c0>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <menuProcess+0xb6>
 8001d96:	2201      	movs	r2, #1
 8001d98:	e000      	b.n	8001d9c <menuProcess+0xb8>
 8001d9a:	22ff      	movs	r2, #255	; 0xff
 8001d9c:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <menuProcess+0x2bc>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
		uint8_t otherOptionPosition = mainMenuCurrentMenuIndex
 8001da0:	4413      	add	r3, r2
 8001da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		struct menuEntry *currentOption = &menuItems[mainMenuCurrentMenuIndex];
 8001da6:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <menuProcess+0x2bc>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	2354      	movs	r3, #84	; 0x54
 8001dae:	fb03 f302 	mul.w	r3, r3, r2
 8001db2:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <menuProcess+0x2c8>)
 8001db4:	4413      	add	r3, r2
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40
		struct menuEntry *otherOption = &menuItems[otherOptionPosition];
 8001db8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dbc:	2254      	movs	r2, #84	; 0x54
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a7a      	ldr	r2, [pc, #488]	; (8001fac <menuProcess+0x2c8>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c

		char currentOptionBuffer[17]; //Current menu entry pointed to by menuPos
		char otherLineBuffer[17]; //Also holds help messages

		sprintf(currentOptionBuffer, ">%s", currentOption->name);
 8001dc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	4978      	ldr	r1, [pc, #480]	; (8001fb0 <menuProcess+0x2cc>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 fd09 	bl	80097e8 <siprintf>

		if (buttonsHoldTime > 2000 && buttons == 0) //Show Help
 8001dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ddc:	d962      	bls.n	8001ea4 <menuProcess+0x1c0>
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d15f      	bne.n	8001ea4 <menuProcess+0x1c0>
				{
			memset(otherLineBuffer, 0x20, sizeof(otherLineBuffer));
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2211      	movs	r2, #17
 8001dea:	2120      	movs	r1, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f007 fcf2 	bl	80097d6 <memset>

			if (!mainMenuHelpLastTick)
 8001df2:	4b70      	ldr	r3, [pc, #448]	; (8001fb4 <menuProcess+0x2d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <menuProcess+0x120>
				mainMenuHelpLastTick = HAL_GetTick();
 8001dfa:	f000 fe57 	bl	8002aac <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <menuProcess+0x2d0>)
 8001e02:	601a      	str	r2, [r3, #0]

			uint32_t helpLastScrolled = HAL_GetTick() - mainMenuHelpLastTick;
 8001e04:	f000 fe52 	bl	8002aac <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <menuProcess+0x2d0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
			if (helpLastScrolled > 350) //Tick help another char every 350ms, it's slow but any faster the LCD blurs
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001e18:	d917      	bls.n	8001e4a <menuProcess+0x166>
					{
				mainMenuHelpLastTick = HAL_GetTick();
 8001e1a:	f000 fe47 	bl	8002aac <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <menuProcess+0x2d0>)
 8001e22:	601a      	str	r2, [r3, #0]
				mainMenuHelpIndex += 1;
 8001e24:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <menuProcess+0x2d4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <menuProcess+0x2d4>)
 8001e2c:	6013      	str	r3, [r2, #0]
				if (mainMenuHelpIndex > strlen(currentOption->help))
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	3310      	adds	r3, #16
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe f9de 	bl	80001f4 <strlen>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <menuProcess+0x2d4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d203      	bcs.n	8001e4a <menuProcess+0x166>
					mainMenuHelpIndex = -16;
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <menuProcess+0x2d4>)
 8001e44:	f06f 020f 	mvn.w	r2, #15
 8001e48:	601a      	str	r2, [r3, #0]
			}

			if (mainMenuHelpIndex < 0) //If it's negative it means it's scrolling in
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <menuProcess+0x2d4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da1a      	bge.n	8001e88 <menuProcess+0x1a4>
					{
				memset(otherLineBuffer, 0x20, 0 - mainMenuHelpIndex);
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <menuProcess+0x2d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	425b      	negs	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2120      	movs	r1, #32
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 fcb8 	bl	80097d6 <memset>
				memcpy(otherLineBuffer + (0 - mainMenuHelpIndex),
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <menuProcess+0x2d4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	1898      	adds	r0, r3, r2
						currentOption->help, 16 + mainMenuHelpIndex);
 8001e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e76:	f103 0110 	add.w	r1, r3, #16
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <menuProcess+0x2d4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3310      	adds	r3, #16
				memcpy(otherLineBuffer + (0 - mainMenuHelpIndex),
 8001e80:	461a      	mov	r2, r3
 8001e82:	f007 fc9d 	bl	80097c0 <memcpy>
 8001e86:	e00a      	b.n	8001e9e <menuProcess+0x1ba>
			} else
				memcpy(otherLineBuffer, currentOption->help + mainMenuHelpIndex,
 8001e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8a:	3310      	adds	r3, #16
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <menuProcess+0x2d4>)
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	1899      	adds	r1, r3, r2
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2210      	movs	r2, #16
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f007 fc91 	bl	80097c0 <memcpy>
						16);
			otherLineBuffer[16] = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	773b      	strb	r3, [r7, #28]
				{
 8001ea2:	e009      	b.n	8001eb8 <menuProcess+0x1d4>
		} else //Show the other option
		{
			strcpy(otherLineBuffer, otherOption->name);
 8001ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 fcbb 	bl	8009828 <strcpy>
			mainMenuHelpIndex = 0;
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <menuProcess+0x2d4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
		}

		if (mainMenuTopSelected) {
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <menuProcess+0x2c0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <menuProcess+0x1f2>
			screenWriteTopLine(currentOptionBuffer);
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fc2f 	bl	8002728 <screenWriteTopLine>
			screenWriteBottomLine(otherLineBuffer);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fc5e 	bl	8002790 <screenWriteBottomLine>
 8001ed4:	e009      	b.n	8001eea <menuProcess+0x206>
		} else {
			screenWriteTopLine(otherLineBuffer);
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fc24 	bl	8002728 <screenWriteTopLine>
			screenWriteBottomLine(currentOptionBuffer);
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fc53 	bl	8002790 <screenWriteBottomLine>
		}

		//End Render Menu

		//Process Buttons
		if (buttonsChanged) {
 8001eea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d046      	beq.n	8001f80 <menuProcess+0x29c>
			if (buttons & BUTTON_UP) //Scroll up menu
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <menuProcess+0x234>
			{
				if (mainMenuCurrentMenuIndex > 0) {
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <menuProcess+0x2bc>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d03d      	beq.n	8001f80 <menuProcess+0x29c>
					mainMenuCurrentMenuIndex--;
 8001f04:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <menuProcess+0x2bc>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <menuProcess+0x2bc>)
 8001f0e:	701a      	strb	r2, [r3, #0]
					mainMenuTopSelected = 1;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <menuProcess+0x2c0>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e033      	b.n	8001f80 <menuProcess+0x29c>
				}
			} else if (buttons & BUTTON_DOWN) //Scroll down menu
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d011      	beq.n	8001f46 <menuProcess+0x262>
			{
				if (mainMenuCurrentMenuIndex < menuNumEntries - 1) {
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <menuProcess+0x2bc>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <menuProcess+0x2c4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	da26      	bge.n	8001f80 <menuProcess+0x29c>
					mainMenuCurrentMenuIndex++;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <menuProcess+0x2bc>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <menuProcess+0x2bc>)
 8001f3c:	701a      	strb	r2, [r3, #0]
					mainMenuTopSelected = 0;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <menuProcess+0x2c0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e01c      	b.n	8001f80 <menuProcess+0x29c>
				}
			} else if (buttons & BUTTON_A) //Select an option
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00f      	beq.n	8001f70 <menuProcess+0x28c>
			{
				menuActiveSubmenuCallback = menuItems[mainMenuCurrentMenuIndex].callback;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <menuProcess+0x2bc>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <menuProcess+0x2c8>)
 8001f58:	2354      	movs	r3, #84	; 0x54
 8001f5a:	fb03 f301 	mul.w	r3, r3, r1
 8001f5e:	4413      	add	r3, r2
 8001f60:	3350      	adds	r3, #80	; 0x50
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <menuProcess+0x2b4>)
 8001f66:	6013      	str	r3, [r2, #0]
				mainMenuSubmenuFirstRun = 1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <menuProcess+0x2b8>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e007      	b.n	8001f80 <menuProcess+0x29c>
			} else if (buttons & BUTTON_B) //Close menu
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <menuProcess+0x29c>
			{
				menuDeactivate(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff fe88 	bl	8001c90 <menuDeactivate>
			}
		}
	}

	return 1; //1 for don't continue
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3754      	adds	r7, #84	; 0x54
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200000bc 	.word	0x200000bc
 8001f90:	200000b8 	.word	0x200000b8
 8001f94:	200000b1 	.word	0x200000b1
 8001f98:	200000b4 	.word	0x200000b4
 8001f9c:	200000be 	.word	0x200000be
 8001fa0:	200000c8 	.word	0x200000c8
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	200000b0 	.word	0x200000b0
 8001fac:	20007b90 	.word	0x20007b90
 8001fb0:	0800a058 	.word	0x0800a058
 8001fb4:	200000c4 	.word	0x200000c4
 8001fb8:	200000c0 	.word	0x200000c0

08001fbc <menuRebindKeys>:
//These aren't defined in the header.
uint16_t menuRebindKeyFirstKey = 0;
uint16_t menuRebindKeyFirstKeyReleased = 0;

void menuRebindKeys(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b092      	sub	sp, #72	; 0x48
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6039      	str	r1, [r7, #0]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80fb      	strh	r3, [r7, #6]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	717b      	strb	r3, [r7, #5]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	713b      	strb	r3, [r7, #4]

	//Process Buttons
	if (firstRun) {
 8001fd4:	793b      	ldrb	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <menuRebindKeys+0x2a>
		menuRebindKeyFirstKey = 0;
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <menuRebindKeys+0x12c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	801a      	strh	r2, [r3, #0]
		menuRebindKeyFirstKeyReleased = 0;
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <menuRebindKeys+0x130>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	801a      	strh	r2, [r3, #0]
	}
	if (!menuRebindKeyFirstKeyReleased && buttonsChanged) //If the first bind was held for 1s then released reset the ignore flag
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <menuRebindKeys+0x130>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <menuRebindKeys+0x3e>
 8001fee:	797b      	ldrb	r3, [r7, #5]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <menuRebindKeys+0x3e>
			{
		menuRebindKeyFirstKeyReleased = 1;
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <menuRebindKeys+0x130>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	801a      	strh	r2, [r3, #0]
	}

	if (buttonHoldTime > 1000 && buttons) //Wait for a button combo to be held for 1s before registering it
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002000:	d932      	bls.n	8002068 <menuRebindKeys+0xac>
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02f      	beq.n	8002068 <menuRebindKeys+0xac>
			{
		if (!menuRebindKeyFirstKey) //If the first key hasn't been chosen yet mark it and set a flag to ignore keys until the input changes
 8002008:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <menuRebindKeys+0x12c>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <menuRebindKeys+0x62>
		{
			menuRebindKeyFirstKey = buttons;
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <menuRebindKeys+0x12c>)
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	8013      	strh	r3, [r2, #0]
			menuRebindKeyFirstKeyReleased = 0;
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <menuRebindKeys+0x130>)
 8002018:	2200      	movs	r2, #0
 800201a:	801a      	strh	r2, [r3, #0]
 800201c:	e024      	b.n	8002068 <menuRebindKeys+0xac>
		} else if (menuRebindKeyFirstKeyReleased) //The first key was pressed and released, take the second and save the binding
 800201e:	4b33      	ldr	r3, [pc, #204]	; (80020ec <menuRebindKeys+0x130>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <menuRebindKeys+0xac>
		{
			char bottomLineBuffer[17];
			buttonsToString(bottomLineBuffer, buttons, "\xA5");
 8002026:	88f9      	ldrh	r1, [r7, #6]
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <menuRebindKeys+0x134>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f9fe 	bl	8001430 <buttonsToString>
			screenWriteBottomLine(bottomLineBuffer);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fba9 	bl	8002790 <screenWriteBottomLine>
			bindKey(menuRebindKeyFirstKey, buttons, 0);
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <menuRebindKeys+0x12c>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	88f9      	ldrh	r1, [r7, #6]
 8002044:	2200      	movs	r2, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe ff62 	bl	8000f10 <bindKey>
			screenWriteTopLine("Binding Saved");
 800204c:	4829      	ldr	r0, [pc, #164]	; (80020f4 <menuRebindKeys+0x138>)
 800204e:	f000 fb6b 	bl	8002728 <screenWriteTopLine>
			screenWriteBottomLine("");
 8002052:	4829      	ldr	r0, [pc, #164]	; (80020f8 <menuRebindKeys+0x13c>)
 8002054:	f000 fb9c 	bl	8002790 <screenWriteBottomLine>
			menuDeactivate(0);
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fe19 	bl	8001c90 <menuDeactivate>
			screenClearIn(2);
 800205e:	2002      	movs	r0, #2
 8002060:	f000 fb24 	bl	80026ac <screenClearIn>
			return;
 8002064:	bf00      	nop
 8002066:	e03c      	b.n	80020e2 <menuRebindKeys+0x126>
	}

	//Render
	char topLineBuffer[17];
	char bottomLineBuffer[17];
	if (!menuRebindKeyFirstKey) //If the first key isn't known yet
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <menuRebindKeys+0x12c>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <menuRebindKeys+0xd4>
	{
		buttonsToString(topLineBuffer, buttons, "\x7F");
 8002070:	88f9      	ldrh	r1, [r7, #6]
 8002072:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <menuRebindKeys+0x140>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f9d9 	bl	8001430 <buttonsToString>
		strcpy(bottomLineBuffer, "Hold Input Btns");
 800207e:	f107 0320 	add.w	r3, r7, #32
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <menuRebindKeys+0x144>)
 8002084:	461c      	mov	r4, r3
 8002086:	4613      	mov	r3, r2
 8002088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800208e:	e01e      	b.n	80020ce <menuRebindKeys+0x112>
	} else {
		buttonsToString(topLineBuffer, menuRebindKeyFirstKey, "\xA5");
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <menuRebindKeys+0x12c>)
 8002092:	8819      	ldrh	r1, [r3, #0]
 8002094:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <menuRebindKeys+0x134>)
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f9c8 	bl	8001430 <buttonsToString>
		if (buttons && menuRebindKeyFirstKeyReleased) {
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <menuRebindKeys+0x102>
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <menuRebindKeys+0x130>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <menuRebindKeys+0x102>
			buttonsToString(bottomLineBuffer, buttons, "\x7E");
 80020ae:	88f9      	ldrh	r1, [r7, #6]
 80020b0:	f107 0320 	add.w	r3, r7, #32
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <menuRebindKeys+0x148>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f9ba 	bl	8001430 <buttonsToString>
 80020bc:	e007      	b.n	80020ce <menuRebindKeys+0x112>
		} else {
			strcpy(bottomLineBuffer, "Hold Output Btns");
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <menuRebindKeys+0x14c>)
 80020c0:	f107 0420 	add.w	r4, r7, #32
 80020c4:	461d      	mov	r5, r3
 80020c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	7023      	strb	r3, [r4, #0]
		}
	}
	screenWriteTopLine(topLineBuffer);
 80020ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fb28 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine(bottomLineBuffer);
 80020d8:	f107 0320 	add.w	r3, r7, #32
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fb57 	bl	8002790 <screenWriteBottomLine>
}
 80020e2:	3748      	adds	r7, #72	; 0x48
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bdb0      	pop	{r4, r5, r7, pc}
 80020e8:	200000ca 	.word	0x200000ca
 80020ec:	200000cc 	.word	0x200000cc
 80020f0:	0800a05c 	.word	0x0800a05c
 80020f4:	0800a060 	.word	0x0800a060
 80020f8:	0800a070 	.word	0x0800a070
 80020fc:	0800a074 	.word	0x0800a074
 8002100:	0800a078 	.word	0x0800a078
 8002104:	0800a088 	.word	0x0800a088
 8002108:	0800a08c 	.word	0x0800a08c

0800210c <menuViewEditBinds>:
//View binds/set rapid fire
uint8_t menuViewEditBindsIndex = 0;
uint8_t menuViewEditBindsCyclingRapidFire = 0;

void menuViewEditBinds(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b08f      	sub	sp, #60	; 0x3c
 8002110:	af00      	add	r7, sp, #0
 8002112:	6039      	str	r1, [r7, #0]
 8002114:	4611      	mov	r1, r2
 8002116:	461a      	mov	r2, r3
 8002118:	4603      	mov	r3, r0
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	460b      	mov	r3, r1
 800211e:	717b      	strb	r3, [r7, #5]
 8002120:	4613      	mov	r3, r2
 8002122:	713b      	strb	r3, [r7, #4]
	if (firstRun) {
 8002124:	793b      	ldrb	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d024      	beq.n	8002174 <menuViewEditBinds+0x68>
		menuViewEditBindsIndex = 0;
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <menuViewEditBinds+0x1ac>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
		struct rebindEntry *bind = &currentProfile[menuViewEditBindsIndex];
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <menuViewEditBinds+0x1b0>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <menuViewEditBinds+0x1ac>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	460b      	mov	r3, r1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	440b      	add	r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
		if (bind->buttonsPressed == 65535 || bind->buttonsPressed == 0) //There's no binds
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214e:	4293      	cmp	r3, r2
 8002150:	d003      	beq.n	800215a <menuViewEditBinds+0x4e>
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <menuViewEditBinds+0x68>
				{
			screenWriteTopLine("No binds to");
 800215a:	4859      	ldr	r0, [pc, #356]	; (80022c0 <menuViewEditBinds+0x1b4>)
 800215c:	f000 fae4 	bl	8002728 <screenWriteTopLine>
			screenWriteBottomLine("display");
 8002160:	4858      	ldr	r0, [pc, #352]	; (80022c4 <menuViewEditBinds+0x1b8>)
 8002162:	f000 fb15 	bl	8002790 <screenWriteBottomLine>
			menuDeactivate(0);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff fd92 	bl	8001c90 <menuDeactivate>
			screenClearIn(2);
 800216c:	2002      	movs	r0, #2
 800216e:	f000 fa9d 	bl	80026ac <screenClearIn>
			return;
 8002172:	e09d      	b.n	80022b0 <menuViewEditBinds+0x1a4>
		}
	}

	//Render
	struct rebindEntry *bind = &currentProfile[menuViewEditBindsIndex];
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <menuViewEditBinds+0x1b0>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <menuViewEditBinds+0x1ac>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
	char topLineBuffer[17];
	char bottomLineBuffer[17];
	if (!menuViewEditBindsCyclingRapidFire) //If not showing rapid fire
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <menuViewEditBinds+0x1bc>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d110      	bne.n	80021b4 <menuViewEditBinds+0xa8>
	{
		buttonsToString(topLineBuffer, bind->buttonsPressed, "\x7F");
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	8819      	ldrh	r1, [r3, #0]
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <menuViewEditBinds+0x1c0>)
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f947 	bl	8001430 <buttonsToString>
		buttonsToString(bottomLineBuffer, bind->buttonsToPress, "\x7E");
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	8859      	ldrh	r1, [r3, #2]
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4a49      	ldr	r2, [pc, #292]	; (80022d0 <menuViewEditBinds+0x1c4>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f93f 	bl	8001430 <buttonsToString>
 80021b2:	e01a      	b.n	80021ea <menuViewEditBinds+0xde>
	} else {
		strcpy(topLineBuffer, "Rapid Fire:");
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4a46      	ldr	r2, [pc, #280]	; (80022d4 <menuViewEditBinds+0x1c8>)
 80021ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80021bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (bind->rapidFire)
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00c      	beq.n	80021e2 <menuViewEditBinds+0xd6>
			sprintf(bottomLineBuffer, "%ims", bind->rapidFire * RAPID_FIRE_BASE_TIME);
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	791b      	ldrb	r3, [r3, #4]
 80021cc:	461a      	mov	r2, r3
 80021ce:	2396      	movs	r3, #150	; 0x96
 80021d0:	fb03 f202 	mul.w	r2, r3, r2
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	493f      	ldr	r1, [pc, #252]	; (80022d8 <menuViewEditBinds+0x1cc>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f007 fb04 	bl	80097e8 <siprintf>
 80021e0:	e003      	b.n	80021ea <menuViewEditBinds+0xde>
		else
			strcpy(bottomLineBuffer, "Off");
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <menuViewEditBinds+0x1d0>)
 80021e8:	601a      	str	r2, [r3, #0]
	}
	screenWriteTopLine(topLineBuffer);
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fa9a 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine(bottomLineBuffer);
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fac9 	bl	8002790 <screenWriteBottomLine>

	//Process Buttons
	if (menuViewEditBindsCyclingRapidFire && !(buttons & BUTTON_SELECT)
 80021fe:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <menuViewEditBinds+0x1bc>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <menuViewEditBinds+0x118>
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <menuViewEditBinds+0x118>
			&& (buttons || buttonHoldTime > 1000)) {
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <menuViewEditBinds+0x112>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221c:	d902      	bls.n	8002224 <menuViewEditBinds+0x118>
		menuViewEditBindsCyclingRapidFire = 0;
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <menuViewEditBinds+0x1bc>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
	}
	if (buttonsChanged) {
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d042      	beq.n	80022b0 <menuViewEditBinds+0x1a4>
		if (buttons & BUTTON_UP) //Scroll up
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <menuViewEditBinds+0x13e>
		{
			if (menuViewEditBindsIndex > 0)
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <menuViewEditBinds+0x1ac>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d039      	beq.n	80022b0 <menuViewEditBinds+0x1a4>
				menuViewEditBindsIndex--;
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <menuViewEditBinds+0x1ac>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <menuViewEditBinds+0x1ac>)
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e032      	b.n	80022b0 <menuViewEditBinds+0x1a4>
		} else if (buttons & BUTTON_DOWN) //Scroll down
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00f      	beq.n	8002274 <menuViewEditBinds+0x168>
		{
			if (menuViewEditBindsIndex < bindGetBindCount() - 1) {
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <menuViewEditBinds+0x1ac>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461c      	mov	r4, r3
 800225a:	f7fe fe29 	bl	8000eb0 <bindGetBindCount>
 800225e:	4603      	mov	r3, r0
 8002260:	3b01      	subs	r3, #1
 8002262:	429c      	cmp	r4, r3
 8002264:	da24      	bge.n	80022b0 <menuViewEditBinds+0x1a4>
				menuViewEditBindsIndex++;
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <menuViewEditBinds+0x1ac>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <menuViewEditBinds+0x1ac>)
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e01d      	b.n	80022b0 <menuViewEditBinds+0x1a4>
			}
		} else if (buttons & BUTTON_SELECT) //Cycle rapid fire
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <menuViewEditBinds+0x194>
		{
			menuViewEditBindsCyclingRapidFire = 1;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <menuViewEditBinds+0x1bc>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
			bindCycleRapidFire(&currentProfile[menuViewEditBindsIndex]);
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <menuViewEditBinds+0x1b0>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <menuViewEditBinds+0x1ac>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	460b      	mov	r3, r1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	440b      	add	r3, r1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe feb7 	bl	800100c <bindCycleRapidFire>
 800229e:	e007      	b.n	80022b0 <menuViewEditBinds+0x1a4>
		} else if (buttons & BUTTON_B) //Close
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <menuViewEditBinds+0x1a4>
		{
			menuDeactivate(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fcf0 	bl	8001c90 <menuDeactivate>
		}
	}
}
 80022b0:	373c      	adds	r7, #60	; 0x3c
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200000ce 	.word	0x200000ce
 80022bc:	20007b8c 	.word	0x20007b8c
 80022c0:	0800a0a0 	.word	0x0800a0a0
 80022c4:	0800a0ac 	.word	0x0800a0ac
 80022c8:	200000cf 	.word	0x200000cf
 80022cc:	0800a074 	.word	0x0800a074
 80022d0:	0800a088 	.word	0x0800a088
 80022d4:	0800a0b4 	.word	0x0800a0b4
 80022d8:	0800a0c0 	.word	0x0800a0c0
 80022dc:	0066664f 	.word	0x0066664f

080022e0 <menuClearKeybinds>:

//Clears keybinds in the current profile
void menuClearKeybinds(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6039      	str	r1, [r7, #0]
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	80fb      	strh	r3, [r7, #6]
 80022f0:	460b      	mov	r3, r1
 80022f2:	717b      	strb	r3, [r7, #5]
 80022f4:	4613      	mov	r3, r2
 80022f6:	713b      	strb	r3, [r7, #4]
	//Render
	screenWriteTopLine("Hold Start=Clear");
 80022f8:	4815      	ldr	r0, [pc, #84]	; (8002350 <menuClearKeybinds+0x70>)
 80022fa:	f000 fa15 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine("Press B=Cancel");
 80022fe:	4815      	ldr	r0, [pc, #84]	; (8002354 <menuClearKeybinds+0x74>)
 8002300:	f000 fa46 	bl	8002790 <screenWriteBottomLine>

	//Process Buttons
	if (buttons == BUTTON_START && buttonHoldTime > 3000) //Start held for 3s to clear
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d115      	bne.n	8002336 <menuClearKeybinds+0x56>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002310:	4293      	cmp	r3, r2
 8002312:	d910      	bls.n	8002336 <menuClearKeybinds+0x56>
			{
		screenWriteTopLine("Clearing Binds");
 8002314:	4810      	ldr	r0, [pc, #64]	; (8002358 <menuClearKeybinds+0x78>)
 8002316:	f000 fa07 	bl	8002728 <screenWriteTopLine>
		screenWriteBottomLine("");
 800231a:	4810      	ldr	r0, [pc, #64]	; (800235c <menuClearKeybinds+0x7c>)
 800231c:	f000 fa38 	bl	8002790 <screenWriteBottomLine>
		bindClearAll();
 8002320:	f7fe fe40 	bl	8000fa4 <bindClearAll>
		screenWriteTopLine("Binds Cleared");
 8002324:	480e      	ldr	r0, [pc, #56]	; (8002360 <menuClearKeybinds+0x80>)
 8002326:	f000 f9ff 	bl	8002728 <screenWriteTopLine>
		menuDeactivate(0);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff fcb0 	bl	8001c90 <menuDeactivate>
		screenClearIn(2);
 8002330:	2002      	movs	r0, #2
 8002332:	f000 f9bb 	bl	80026ac <screenClearIn>
	}
	if (buttons & BUTTON_B) //Cancel
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <menuClearKeybinds+0x66>
	{
		menuDeactivate(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff fca5 	bl	8001c90 <menuDeactivate>
	}
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	0800a0c8 	.word	0x0800a0c8
 8002354:	0800a0dc 	.word	0x0800a0dc
 8002358:	0800a0ec 	.word	0x0800a0ec
 800235c:	0800a070 	.word	0x0800a070
 8002360:	0800a0fc 	.word	0x0800a0fc

08002364 <menuSelectProfile>:

//Loads a profile from flash
uint16_t menuSelectProfileSelectedProfileIndex = 0;
void menuSelectProfile(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af00      	add	r7, sp, #0
 800236a:	6039      	str	r1, [r7, #0]
 800236c:	4611      	mov	r1, r2
 800236e:	461a      	mov	r2, r3
 8002370:	4603      	mov	r3, r0
 8002372:	80fb      	strh	r3, [r7, #6]
 8002374:	460b      	mov	r3, r1
 8002376:	717b      	strb	r3, [r7, #5]
 8002378:	4613      	mov	r3, r2
 800237a:	713b      	strb	r3, [r7, #4]
	//Render
	char topLineBuffer[17];
	char bottomLineBuffer[17];
	sprintf(topLineBuffer, "New Profile: %i", menuSelectProfileSelectedProfileIndex + 1);
 800237c:	4b2f      	ldr	r3, [pc, #188]	; (800243c <menuSelectProfile+0xd8>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	492e      	ldr	r1, [pc, #184]	; (8002440 <menuSelectProfile+0xdc>)
 8002388:	4618      	mov	r0, r3
 800238a:	f007 fa2d 	bl	80097e8 <siprintf>
	sprintf(bottomLineBuffer, "Cur Profile: %i", profileGetSelectedIndex() + 1);
 800238e:	f7fe fd83 	bl	8000e98 <profileGetSelectedIndex>
 8002392:	4603      	mov	r3, r0
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	492a      	ldr	r1, [pc, #168]	; (8002444 <menuSelectProfile+0xe0>)
 800239c:	4618      	mov	r0, r3
 800239e:	f007 fa23 	bl	80097e8 <siprintf>
	screenWriteTopLine(topLineBuffer);
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f9be 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine(bottomLineBuffer);
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f9ed 	bl	8002790 <screenWriteBottomLine>

	//Process Buttons
	if (buttonsChanged) {
 80023b6:	797b      	ldrb	r3, [r7, #5]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03a      	beq.n	8002432 <menuSelectProfile+0xce>
		if (buttons & BUTTON_UP && menuSelectProfileSelectedProfileIndex > 0) //Scroll Up through profiles
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <menuSelectProfile+0x78>
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <menuSelectProfile+0xd8>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <menuSelectProfile+0x78>
				{
			menuSelectProfileSelectedProfileIndex--;
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <menuSelectProfile+0xd8>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <menuSelectProfile+0xd8>)
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	e02a      	b.n	8002432 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_DOWN
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <menuSelectProfile+0x98>
				&& menuSelectProfileSelectedProfileIndex < PROFILE_COUNT - 1) //Scroll down
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <menuSelectProfile+0xd8>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b0e      	cmp	r3, #14
 80023ec:	d806      	bhi.n	80023fc <menuSelectProfile+0x98>
						{
			menuSelectProfileSelectedProfileIndex++;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <menuSelectProfile+0xd8>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <menuSelectProfile+0xd8>)
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	e01a      	b.n	8002432 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_A) //Select
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <menuSelectProfile+0xbc>
		{
			profileSelect(menuSelectProfileSelectedProfileIndex);
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <menuSelectProfile+0xd8>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fd19 	bl	8000e44 <profileSelect>
			menuDeactivate(0);
 8002412:	2000      	movs	r0, #0
 8002414:	f7ff fc3c 	bl	8001c90 <menuDeactivate>
			screenClearIn(2);
 8002418:	2002      	movs	r0, #2
 800241a:	f000 f947 	bl	80026ac <screenClearIn>
		{
			menuDeactivate(1);
		}
	}

}
 800241e:	e008      	b.n	8002432 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_B) //Cancel
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <menuSelectProfile+0xce>
			menuDeactivate(1);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fc30 	bl	8001c90 <menuDeactivate>
}
 8002430:	e7ff      	b.n	8002432 <menuSelectProfile+0xce>
 8002432:	bf00      	nop
 8002434:	3730      	adds	r7, #48	; 0x30
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000d0 	.word	0x200000d0
 8002440:	0800a10c 	.word	0x0800a10c
 8002444:	0800a11c 	.word	0x0800a11c

08002448 <menuSaveProfile>:

//Save a profile to a slot
uint16_t menuSaveProfileSelectedProfileIndex = 0;
void menuSaveProfile(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6039      	str	r1, [r7, #0]
 8002450:	4611      	mov	r1, r2
 8002452:	461a      	mov	r2, r3
 8002454:	4603      	mov	r3, r0
 8002456:	80fb      	strh	r3, [r7, #6]
 8002458:	460b      	mov	r3, r1
 800245a:	717b      	strb	r3, [r7, #5]
 800245c:	4613      	mov	r3, r2
 800245e:	713b      	strb	r3, [r7, #4]
	//Render
	char topLineBuffer[17];
	char bottomLineBuffer[17];
	sprintf(topLineBuffer, "Save Profile: %i", menuSaveProfileSelectedProfileIndex + 1);
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <menuSaveProfile+0xd8>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	492e      	ldr	r1, [pc, #184]	; (8002524 <menuSaveProfile+0xdc>)
 800246c:	4618      	mov	r0, r3
 800246e:	f007 f9bb 	bl	80097e8 <siprintf>
	sprintf(bottomLineBuffer, "Cur Profile: %i", profileGetSelectedIndex() + 1);
 8002472:	f7fe fd11 	bl	8000e98 <profileGetSelectedIndex>
 8002476:	4603      	mov	r3, r0
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	492a      	ldr	r1, [pc, #168]	; (8002528 <menuSaveProfile+0xe0>)
 8002480:	4618      	mov	r0, r3
 8002482:	f007 f9b1 	bl	80097e8 <siprintf>
	screenWriteTopLine(topLineBuffer);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f94c 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine(bottomLineBuffer);
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f97b 	bl	8002790 <screenWriteBottomLine>

	//Process Buttons
	if (buttonsChanged) {
 800249a:	797b      	ldrb	r3, [r7, #5]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03a      	beq.n	8002516 <menuSaveProfile+0xce>
		if (buttons & BUTTON_UP && menuSaveProfileSelectedProfileIndex > 0) //Scroll up
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <menuSaveProfile+0x78>
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <menuSaveProfile+0xd8>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <menuSaveProfile+0x78>
				{
			menuSaveProfileSelectedProfileIndex--;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <menuSaveProfile+0xd8>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <menuSaveProfile+0xd8>)
 80024bc:	801a      	strh	r2, [r3, #0]
 80024be:	e02a      	b.n	8002516 <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_DOWN
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <menuSaveProfile+0x98>
				&& menuSaveProfileSelectedProfileIndex < PROFILE_COUNT - 1) //Scroll down
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <menuSaveProfile+0xd8>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	2b0e      	cmp	r3, #14
 80024d0:	d806      	bhi.n	80024e0 <menuSaveProfile+0x98>
						{
			menuSaveProfileSelectedProfileIndex++;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <menuSaveProfile+0xd8>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <menuSaveProfile+0xd8>)
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e01a      	b.n	8002516 <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_A) //Select
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <menuSaveProfile+0xbc>
		{
			profileSave(menuSaveProfileSelectedProfileIndex);
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <menuSaveProfile+0xd8>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fc6d 	bl	8000dd0 <profileSave>
			menuDeactivate(0);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff fbca 	bl	8001c90 <menuDeactivate>
			screenClearIn(2);
 80024fc:	2002      	movs	r0, #2
 80024fe:	f000 f8d5 	bl	80026ac <screenClearIn>
		{
			menuDeactivate(1);
		}
	}

}
 8002502:	e008      	b.n	8002516 <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_B) //Cancel
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <menuSaveProfile+0xce>
			menuDeactivate(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f7ff fbbe 	bl	8001c90 <menuDeactivate>
}
 8002514:	e7ff      	b.n	8002516 <menuSaveProfile+0xce>
 8002516:	bf00      	nop
 8002518:	3730      	adds	r7, #48	; 0x30
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200000d2 	.word	0x200000d2
 8002524:	0800a12c 	.word	0x0800a12c
 8002528:	0800a11c 	.word	0x0800a11c

0800252c <menuToggleScreenShowInput>:

//Toggle screen displaying input during normal use
void menuToggleScreenShowInput(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6039      	str	r1, [r7, #0]
 8002534:	4611      	mov	r1, r2
 8002536:	461a      	mov	r2, r3
 8002538:	4603      	mov	r3, r0
 800253a:	80fb      	strh	r3, [r7, #6]
 800253c:	460b      	mov	r3, r1
 800253e:	717b      	strb	r3, [r7, #5]
 8002540:	4613      	mov	r3, r2
 8002542:	713b      	strb	r3, [r7, #4]
	screenSetShowNormalInput(!screenGetShowNormalInput());
 8002544:	f000 f8d4 	bl	80026f0 <screenGetShowNormalInput>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf0c      	ite	eq
 800254e:	2301      	moveq	r3, #1
 8002550:	2300      	movne	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f8d7 	bl	8002708 <screenSetShowNormalInput>
	menuDeactivate(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff fb98 	bl	8001c90 <menuDeactivate>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <menuAbout>:

//About
void menuAbout(uint16_t buttons, uint32_t buttonHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6039      	str	r1, [r7, #0]
 8002570:	4611      	mov	r1, r2
 8002572:	461a      	mov	r2, r3
 8002574:	4603      	mov	r3, r0
 8002576:	80fb      	strh	r3, [r7, #6]
 8002578:	460b      	mov	r3, r1
 800257a:	717b      	strb	r3, [r7, #5]
 800257c:	4613      	mov	r3, r2
 800257e:	713b      	strb	r3, [r7, #4]
	screenWriteTopLine("SNES->GamePad");
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <menuAbout+0x40>)
 8002582:	f000 f8d1 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine("By Netham45");
 8002586:	4809      	ldr	r0, [pc, #36]	; (80025ac <menuAbout+0x44>)
 8002588:	f000 f902 	bl	8002790 <screenWriteBottomLine>
	if (buttons && buttonsChanged) {
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <menuAbout+0x36>
 8002592:	797b      	ldrb	r3, [r7, #5]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <menuAbout+0x36>
		menuDeactivate(1);
 8002598:	2001      	movs	r0, #1
 800259a:	f7ff fb79 	bl	8001c90 <menuDeactivate>
	}
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	0800a140 	.word	0x0800a140
 80025ac:	0800a150 	.word	0x0800a150

080025b0 <menuInit>:
//End Submenu Callbacks

//Init functions

//Register menu entries/callbacks
void menuInit() {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	memset(menuItems, 0, sizeof(menuItems));
 80025b4:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 80025b8:	2100      	movs	r1, #0
 80025ba:	4814      	ldr	r0, [pc, #80]	; (800260c <menuInit+0x5c>)
 80025bc:	f007 f90b 	bl	80097d6 <memset>
	menuInitMenuEntry("Rebind Keys", "Rebind key(s) to other key(s)",
 80025c0:	4a13      	ldr	r2, [pc, #76]	; (8002610 <menuInit+0x60>)
 80025c2:	4914      	ldr	r1, [pc, #80]	; (8002614 <menuInit+0x64>)
 80025c4:	4814      	ldr	r0, [pc, #80]	; (8002618 <menuInit+0x68>)
 80025c6:	f7ff fb2b 	bl	8001c20 <menuInitMenuEntry>
			&menuRebindKeys);
	menuInitMenuEntry("View/Edit Binds", "Scroll through binds and edit rapid fire",
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <menuInit+0x6c>)
 80025cc:	4914      	ldr	r1, [pc, #80]	; (8002620 <menuInit+0x70>)
 80025ce:	4815      	ldr	r0, [pc, #84]	; (8002624 <menuInit+0x74>)
 80025d0:	f7ff fb26 	bl	8001c20 <menuInitMenuEntry>
			&menuViewEditBinds);
	menuInitMenuEntry("Clear Binds", "Clear all binds", &menuClearKeybinds);
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <menuInit+0x78>)
 80025d6:	4915      	ldr	r1, [pc, #84]	; (800262c <menuInit+0x7c>)
 80025d8:	4815      	ldr	r0, [pc, #84]	; (8002630 <menuInit+0x80>)
 80025da:	f7ff fb21 	bl	8001c20 <menuInitMenuEntry>
	menuInitMenuEntry("Select Profile", "Select which profile you want to use",
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <menuInit+0x84>)
 80025e0:	4915      	ldr	r1, [pc, #84]	; (8002638 <menuInit+0x88>)
 80025e2:	4816      	ldr	r0, [pc, #88]	; (800263c <menuInit+0x8c>)
 80025e4:	f7ff fb1c 	bl	8001c20 <menuInitMenuEntry>
			&menuSelectProfile);
	menuInitMenuEntry("Save Profile", "Save profile to Flash", &menuSaveProfile);
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <menuInit+0x90>)
 80025ea:	4916      	ldr	r1, [pc, #88]	; (8002644 <menuInit+0x94>)
 80025ec:	4816      	ldr	r0, [pc, #88]	; (8002648 <menuInit+0x98>)
 80025ee:	f7ff fb17 	bl	8001c20 <menuInitMenuEntry>
	menuInitMenuEntry("Show Input", "Toggle showing input after binds",
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <menuInit+0x9c>)
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <menuInit+0xa0>)
 80025f6:	4817      	ldr	r0, [pc, #92]	; (8002654 <menuInit+0xa4>)
 80025f8:	f7ff fb12 	bl	8001c20 <menuInitMenuEntry>
			&menuToggleScreenShowInput);
	menuInitMenuEntry("About", "About this device", &menuAbout);
 80025fc:	4a16      	ldr	r2, [pc, #88]	; (8002658 <menuInit+0xa8>)
 80025fe:	4917      	ldr	r1, [pc, #92]	; (800265c <menuInit+0xac>)
 8002600:	4817      	ldr	r0, [pc, #92]	; (8002660 <menuInit+0xb0>)
 8002602:	f7ff fb0d 	bl	8001c20 <menuInitMenuEntry>
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20007b90 	.word	0x20007b90
 8002610:	08001fbd 	.word	0x08001fbd
 8002614:	0800a15c 	.word	0x0800a15c
 8002618:	0800a17c 	.word	0x0800a17c
 800261c:	0800210d 	.word	0x0800210d
 8002620:	0800a188 	.word	0x0800a188
 8002624:	0800a1b4 	.word	0x0800a1b4
 8002628:	080022e1 	.word	0x080022e1
 800262c:	0800a1c4 	.word	0x0800a1c4
 8002630:	0800a1d4 	.word	0x0800a1d4
 8002634:	08002365 	.word	0x08002365
 8002638:	0800a1e0 	.word	0x0800a1e0
 800263c:	0800a208 	.word	0x0800a208
 8002640:	08002449 	.word	0x08002449
 8002644:	0800a218 	.word	0x0800a218
 8002648:	0800a230 	.word	0x0800a230
 800264c:	0800252d 	.word	0x0800252d
 8002650:	0800a240 	.word	0x0800a240
 8002654:	0800a264 	.word	0x0800a264
 8002658:	08002569 	.word	0x08002569
 800265c:	0800a270 	.word	0x0800a270
 8002660:	0800a284 	.word	0x0800a284

08002664 <screenClear>:
uint8_t screenShowNormalInput = 0;

char topLine[17];
char bottomLine[17];

void screenClear() {
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	lcdSetCursorPosition(0, 0);
 8002668:	2100      	movs	r1, #0
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff fa18 	bl	8001aa0 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "                ", 16);
 8002670:	2110      	movs	r1, #16
 8002672:	480b      	ldr	r0, [pc, #44]	; (80026a0 <screenClear+0x3c>)
 8002674:	f7ff fa40 	bl	8001af8 <lcdPrintStr>
	lcdSetCursorPosition(0, 1);
 8002678:	2101      	movs	r1, #1
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff fa10 	bl	8001aa0 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "                ", 16);
 8002680:	2110      	movs	r1, #16
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <screenClear+0x3c>)
 8002684:	f7ff fa38 	bl	8001af8 <lcdPrintStr>
	lcdBacklight(LCD_BIT_BACKIGHT_OFF);
 8002688:	2000      	movs	r0, #0
 800268a:	f7ff f9df 	bl	8001a4c <lcdBacklight>
	topLine[0] = 0;
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <screenClear+0x40>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
	bottomLine[0] = 0;
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <screenClear+0x44>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
	//Update screens
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	0800a28c 	.word	0x0800a28c
 80026a4:	20008624 	.word	0x20008624
 80026a8:	20008610 	.word	0x20008610

080026ac <screenClearIn>:

void screenClearIn(uint8_t seconds) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	clearMessageInTime = HAL_GetTick() + (seconds * 1000);
 80026b6:	f000 f9f9 	bl	8002aac <HAL_GetTick>
 80026ba:	4601      	mov	r1, r0
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	440b      	add	r3, r1
 80026c8:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <screenClearIn+0x28>)
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200000d4 	.word	0x200000d4

080026d8 <screenResetClearTimer>:

void screenResetClearTimer() {
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	clearMessageInTime = 0;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <screenResetClearTimer+0x14>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	200000d4 	.word	0x200000d4

080026f0 <screenGetShowNormalInput>:

uint32_t screenGetClearMessageTime() {
	return clearMessageInTime;
}

uint8_t screenGetShowNormalInput() {
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	return screenShowNormalInput;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <screenGetShowNormalInput+0x14>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200000d8 	.word	0x200000d8

08002708 <screenSetShowNormalInput>:

void screenSetShowNormalInput(uint8_t show) {
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	screenShowNormalInput = show;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <screenSetShowNormalInput+0x1c>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	7013      	strb	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	200000d8 	.word	0x200000d8

08002728 <screenWriteTopLine>:

void screenWriteTopLine(char *data)

{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	if (strcmp(topLine, data) != 0) {
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4815      	ldr	r0, [pc, #84]	; (8002788 <screenWriteTopLine+0x60>)
 8002734:	f7fd fd54 	bl	80001e0 <strcmp>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01f      	beq.n	800277e <screenWriteTopLine+0x56>
		strcpy(topLine, data);
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4811      	ldr	r0, [pc, #68]	; (8002788 <screenWriteTopLine+0x60>)
 8002742:	f007 f871 	bl	8009828 <strcpy>
		lcdBacklight(LCD_BIT_BACKIGHT_ON);
 8002746:	2008      	movs	r0, #8
 8002748:	f7ff f980 	bl	8001a4c <lcdBacklight>
		//Update screen
		lcdSetCursorPosition(0, 0);
 800274c:	2100      	movs	r1, #0
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff f9a6 	bl	8001aa0 <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) data, strlen(data));
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fd fd4d 	bl	80001f4 <strlen>
 800275a:	4603      	mov	r3, r0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff f9c9 	bl	8001af8 <lcdPrintStr>
		lcdPrintStr((uint8_t*) "                ", 16 - strlen(data));
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fd fd44 	bl	80001f4 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f1c3 0310 	rsb	r3, r3, #16
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <screenWriteTopLine+0x64>)
 800277a:	f7ff f9bd 	bl	8001af8 <lcdPrintStr>
	}

}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20008624 	.word	0x20008624
 800278c:	0800a28c 	.word	0x0800a28c

08002790 <screenWriteBottomLine>:

void screenWriteBottomLine(char *data) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	if (strcmp(bottomLine, data) != 0) {
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4815      	ldr	r0, [pc, #84]	; (80027f0 <screenWriteBottomLine+0x60>)
 800279c:	f7fd fd20 	bl	80001e0 <strcmp>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01f      	beq.n	80027e6 <screenWriteBottomLine+0x56>
		strcpy(bottomLine, data);
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <screenWriteBottomLine+0x60>)
 80027aa:	f007 f83d 	bl	8009828 <strcpy>
		lcdBacklight(LCD_BIT_BACKIGHT_ON);
 80027ae:	2008      	movs	r0, #8
 80027b0:	f7ff f94c 	bl	8001a4c <lcdBacklight>
		//Update screen
		lcdSetCursorPosition(0, 1);
 80027b4:	2101      	movs	r1, #1
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff f972 	bl	8001aa0 <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) data, strlen(data));
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd fd19 	bl	80001f4 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff f995 	bl	8001af8 <lcdPrintStr>
		lcdPrintStr((uint8_t*) "                ", 16 - strlen(data));
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fd fd10 	bl	80001f4 <strlen>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f1c3 0310 	rsb	r3, r3, #16
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	4804      	ldr	r0, [pc, #16]	; (80027f4 <screenWriteBottomLine+0x64>)
 80027e2:	f7ff f989 	bl	8001af8 <lcdPrintStr>
	}
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20008610 	.word	0x20008610
 80027f4:	0800a28c 	.word	0x0800a28c

080027f8 <screenProcess>:

void screenProcess(uint16_t buttons) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
	if (clearMessageInTime && (clearMessageInTime < HAL_GetTick())) {
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <screenProcess+0x6c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <screenProcess+0x2a>
 800280a:	f000 f94f 	bl	8002aac <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <screenProcess+0x6c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d904      	bls.n	8002822 <screenProcess+0x2a>
		screenClear();
 8002818:	f7ff ff24 	bl	8002664 <screenClear>
		clearMessageInTime = 0;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <screenProcess+0x6c>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
	}

	//If no other message is being shown show the currently pressed keys after rebinding
	if (screenShowNormalInput) {
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <screenProcess+0x70>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <screenProcess+0x64>
		if (!clearMessageInTime) {
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <screenProcess+0x6c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d114      	bne.n	800285c <screenProcess+0x64>
			if (buttons) {
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00f      	beq.n	8002858 <screenProcess+0x60>
				char buffer[17];
				buttonsToString(buffer, buttons, "\xA5");
 8002838:	88f9      	ldrh	r1, [r7, #6]
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <screenProcess+0x74>)
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fdf5 	bl	8001430 <buttonsToString>
				screenWriteTopLine(buffer);
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff6c 	bl	8002728 <screenWriteTopLine>
				screenWriteBottomLine("");
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <screenProcess+0x78>)
 8002852:	f7ff ff9d 	bl	8002790 <screenWriteBottomLine>
			} else {
				screenClear();
			}
		}
	}
}
 8002856:	e001      	b.n	800285c <screenProcess+0x64>
				screenClear();
 8002858:	f7ff ff04 	bl	8002664 <screenClear>
}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200000d4 	.word	0x200000d4
 8002868:	200000d8 	.word	0x200000d8
 800286c:	0800a2a0 	.word	0x0800a2a0
 8002870:	0800a2a4 	.word	0x0800a2a4

08002874 <snesSetDelayuSTimer>:
#include <snestogameport/snes.h>
//Microsecond Sleep
TIM_HandleTypeDef *htimdelayus = 0;
void snesSetDelayuSTimer(TIM_HandleTypeDef *_htimdelayus) {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	htimdelayus = _htimdelayus;
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <snesSetDelayuSTimer+0x1c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200000dc 	.word	0x200000dc

08002894 <delayuS>:

uint8_t tim1_init = 0;
void delayuS(uint16_t us) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
	if (!tim1_init) {
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <delayuS+0x44>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <delayuS+0x22>
		HAL_TIM_Base_Start(htimdelayus);
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <delayuS+0x48>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fdff 	bl	80064ae <HAL_TIM_Base_Start>
		tim1_init = 1;
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <delayuS+0x44>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COUNTER(htimdelayus, 0);  // set the counter value a 0
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <delayuS+0x48>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htimdelayus) < us)
 80028c0:	bf00      	nop
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <delayuS+0x48>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3f8      	bcc.n	80028c2 <delayuS+0x2e>
		;  // wait for the counter to reach the us input in the parameter
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	200000e0 	.word	0x200000e0
 80028dc:	200000dc 	.word	0x200000dc

080028e0 <snesPoll>:

//End Microsecond Sleep

//Query the SNES controller
int snesPoll() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
	uint16_t buttons = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_SET);
 80028ea:	2201      	movs	r2, #1
 80028ec:	2110      	movs	r1, #16
 80028ee:	481f      	ldr	r0, [pc, #124]	; (800296c <snesPoll+0x8c>)
 80028f0:	f001 f91a 	bl	8003b28 <HAL_GPIO_WritePin>
	delayuS(12); // 12µs delay
 80028f4:	200c      	movs	r0, #12
 80028f6:	f7ff ffcd 	bl	8002894 <delayuS>
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2110      	movs	r1, #16
 80028fe:	481b      	ldr	r0, [pc, #108]	; (800296c <snesPoll+0x8c>)
 8002900:	f001 f912 	bl	8003b28 <HAL_GPIO_WritePin>
	delayuS(6); // 6µs delay
 8002904:	2006      	movs	r0, #6
 8002906:	f7ff ffc5 	bl	8002894 <delayuS>
	for (int i = 0; i < 16; i++) {
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	e021      	b.n	8002954 <snesPoll+0x74>
		buttons |= (HAL_GPIO_ReadPin(SNES_Data_GPIO_Port, SNES_Data_Pin) << i);
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	4816      	ldr	r0, [pc, #88]	; (800296c <snesPoll+0x8c>)
 8002914:	f001 f8f0 	bl	8003af8 <HAL_GPIO_ReadPin>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	b21a      	sxth	r2, r3
 8002924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002928:	4313      	orrs	r3, r2
 800292a:	b21b      	sxth	r3, r3
 800292c:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_RESET);
 800292e:	2200      	movs	r2, #0
 8002930:	2120      	movs	r1, #32
 8002932:	480e      	ldr	r0, [pc, #56]	; (800296c <snesPoll+0x8c>)
 8002934:	f001 f8f8 	bl	8003b28 <HAL_GPIO_WritePin>
		delayuS(12);
 8002938:	200c      	movs	r0, #12
 800293a:	f7ff ffab 	bl	8002894 <delayuS>
		HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	2120      	movs	r1, #32
 8002942:	480a      	ldr	r0, [pc, #40]	; (800296c <snesPoll+0x8c>)
 8002944:	f001 f8f0 	bl	8003b28 <HAL_GPIO_WritePin>
		delayuS(12);
 8002948:	200c      	movs	r0, #12
 800294a:	f7ff ffa3 	bl	8002894 <delayuS>
	for (int i = 0; i < 16; i++) {
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	ddda      	ble.n	8002910 <snesPoll+0x30>
	}
	buttons = ~buttons;
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	43db      	mvns	r3, r3
 800295e:	80fb      	strh	r3, [r7, #6]

	return buttons;
 8002960:	88fb      	ldrh	r3, [r7, #6]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40020000 	.word	0x40020000

08002970 <snesMain>:
#include <snestogameport/buttons.h>
#include <snestogameport/menu.h>
#include <snestogameport/snes.h>
#include <snestogameport/lcd_hd44780_i2c.h>

void snesMain(I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimdelayus) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]

	snesSetDelayuSTimer(htimdelayus); //Init delayuS timer for snes controller polling
 800297a:	6838      	ldr	r0, [r7, #0]
 800297c:	f7ff ff7a 	bl	8002874 <snesSetDelayuSTimer>
	lcdInit(hi2c, (uint8_t) 0x27, (uint8_t) 20, (uint8_t) 4); //Init LCD
 8002980:	2304      	movs	r3, #4
 8002982:	2214      	movs	r2, #20
 8002984:	2127      	movs	r1, #39	; 0x27
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe feb4 	bl	80016f4 <lcdInit>
	bindGPIODefaultState(); //Init GPIO
 800298c:	f7fe fb5e 	bl	800104c <bindGPIODefaultState>
	profileSelect(0); //Load profile 0
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fa57 	bl	8000e44 <profileSelect>
	menuInit(); //Register menu entries
 8002996:	f7ff fe0b 	bl	80025b0 <menuInit>
	
	//Splash
	screenWriteTopLine("SNES -> GamePort");
 800299a:	4812      	ldr	r0, [pc, #72]	; (80029e4 <snesMain+0x74>)
 800299c:	f7ff fec4 	bl	8002728 <screenWriteTopLine>
	screenWriteBottomLine("By Netham45");
 80029a0:	4811      	ldr	r0, [pc, #68]	; (80029e8 <snesMain+0x78>)
 80029a2:	f7ff fef5 	bl	8002790 <screenWriteBottomLine>
	screenClearIn(2);
 80029a6:	2002      	movs	r0, #2
 80029a8:	f7ff fe80 	bl	80026ac <screenClearIn>

	while (1) {
		uint16_t buttons = snesPoll(); //Query SNES controller
 80029ac:	f7ff ff98 	bl	80028e0 <snesPoll>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	81fb      	strh	r3, [r7, #14]

		//If processMenu returns non-zero then the menu is open and don't process anything else this loop.
		if (menuProcess(buttons))
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f993 	bl	8001ce4 <menuProcess>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10d      	bne.n	80029e0 <snesMain+0x70>
			continue;

		bindProcess(&buttons);
 80029c4:	f107 030e 	add.w	r3, r7, #14
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fb95 	bl	80010f8 <bindProcess>
		screenProcess(buttons);
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff11 	bl	80027f8 <screenProcess>
		buttonsProcess(buttons);
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fc25 	bl	8001228 <buttonsProcess>
 80029de:	e7e5      	b.n	80029ac <snesMain+0x3c>
			continue;
 80029e0:	bf00      	nop
	while (1) {
 80029e2:	e7e3      	b.n	80029ac <snesMain+0x3c>
 80029e4:	0800a2a8 	.word	0x0800a2a8
 80029e8:	0800a2bc 	.word	0x0800a2bc

080029ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029f2:	e003      	b.n	80029fc <LoopCopyDataInit>

080029f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029fa:	3104      	adds	r1, #4

080029fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029fc:	480b      	ldr	r0, [pc, #44]	; (8002a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a04:	d3f6      	bcc.n	80029f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a08:	e002      	b.n	8002a10 <LoopFillZerobss>

08002a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a0c:	f842 3b04 	str.w	r3, [r2], #4

08002a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a14:	d3f9      	bcc.n	8002a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a16:	f7fe f99d 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f006 fead 	bl	8009778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1e:	f7fd fdc7 	bl	80005b0 <main>
  bx  lr    
 8002a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a24:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002a28:	0800a36c 	.word	0x0800a36c
  ldr  r0, =_sdata
 8002a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a30:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002a34:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002a38:	200086a0 	.word	0x200086a0

08002a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f8d8 	bl	8002c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe f898 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7fd ff8a 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2000000c 	.word	0x2000000c
 8002aa8:	20008638 	.word	0x20008638

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20008638 	.word	0x20008638

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <__NVIC_EnableIRQ+0x38>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff4c 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c46:	f7ff ff61 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6978      	ldr	r0, [r7, #20]
 8002c52:	f7ff ffb1 	bl	8002bb8 <NVIC_EncodePriority>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff80 	bl	8002b64 <__NVIC_SetPriority>
}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff54 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ff0a 	bl	8002aac <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e099      	b.n	8002dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc4:	e00f      	b.n	8002ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc6:	f7ff fef1 	bl	8002aac <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d908      	bls.n	8002ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e078      	b.n	8002dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e8      	bne.n	8002cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_DMA_Init+0x158>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d117      	bne.n	8002daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 faab 	bl	80032e8 <DMA_CheckFifoParam>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002da6:	2301      	movs	r3, #1
 8002da8:	e016      	b.n	8002dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa62 	bl	800327c <DMA_CalcBaseAndBitshift>
 8002db8:	4603      	mov	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	223f      	movs	r2, #63	; 0x3f
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	f010803f 	.word	0xf010803f

08002de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_DMA_Start_IT+0x26>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e040      	b.n	8002e8c <HAL_DMA_Start_IT+0xa8>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d12f      	bne.n	8002e7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2202      	movs	r2, #2
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f9f4 	bl	8003220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	223f      	movs	r2, #63	; 0x3f
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0216 	orr.w	r2, r2, #22
 8002e52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0208 	orr.w	r2, r2, #8
 8002e6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e005      	b.n	8002e8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
 8002e88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00c      	b.n	8002ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ee4:	4b92      	ldr	r3, [pc, #584]	; (8003130 <HAL_DMA_IRQHandler+0x258>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a92      	ldr	r2, [pc, #584]	; (8003134 <HAL_DMA_IRQHandler+0x25c>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0a9b      	lsrs	r3, r3, #10
 8002ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	2208      	movs	r2, #8
 8002f04:	409a      	lsls	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01a      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0204 	bic.w	r2, r2, #4
 8002f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	2208      	movs	r2, #8
 8002f32:	409a      	lsls	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	2201      	movs	r2, #1
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d012      	beq.n	8002f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	2201      	movs	r2, #1
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f043 0202 	orr.w	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	2204      	movs	r2, #4
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d043      	beq.n	8003048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03c      	beq.n	8003048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d018      	beq.n	800301a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d024      	beq.n	8003048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
 8003006:	e01f      	b.n	8003048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e016      	b.n	8003048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0208 	bic.w	r2, r2, #8
 8003036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2220      	movs	r2, #32
 800304e:	409a      	lsls	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 808e 	beq.w	8003176 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8086 	beq.w	8003176 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2220      	movs	r2, #32
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b05      	cmp	r3, #5
 8003080:	d136      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0216 	bic.w	r2, r2, #22
 8003090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x1da>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0208 	bic.w	r2, r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	223f      	movs	r2, #63	; 0x3f
 80030c8:	409a      	lsls	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d07d      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
        }
        return;
 80030ee:	e078      	b.n	80031e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01c      	beq.n	8003138 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d108      	bne.n	800311e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	2b00      	cmp	r3, #0
 8003112:	d030      	beq.n	8003176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
 800311c:	e02b      	b.n	8003176 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d027      	beq.n	8003176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
 800312e:	e022      	b.n	8003176 <HAL_DMA_IRQHandler+0x29e>
 8003130:	20000000 	.word	0x20000000
 8003134:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0210 	bic.w	r2, r2, #16
 8003154:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	2b00      	cmp	r3, #0
 800317c:	d032      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d022      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2205      	movs	r2, #5
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d307      	bcc.n	80031be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f2      	bne.n	80031a2 <HAL_DMA_IRQHandler+0x2ca>
 80031bc:	e000      	b.n	80031c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
 80031e0:	e000      	b.n	80031e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031e2:	bf00      	nop
    }
  }
}
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop

080031ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fa:	b2db      	uxtb	r3, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800323c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d108      	bne.n	8003260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800325e:	e007      	b.n	8003270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3b10      	subs	r3, #16
 800328c:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <DMA_CalcBaseAndBitshift+0x64>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d909      	bls.n	80032be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58
 80032bc:	e007      	b.n	80032ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	aaaaaaab 	.word	0xaaaaaaab
 80032e4:	0800a320 	.word	0x0800a320

080032e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d855      	bhi.n	80033b4 <DMA_CheckFifoParam+0xcc>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <DMA_CheckFifoParam+0x28>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	08003333 	.word	0x08003333
 8003318:	08003321 	.word	0x08003321
 800331c:	080033b5 	.word	0x080033b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d045      	beq.n	80033b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e042      	b.n	80033b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333a:	d13f      	bne.n	80033bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e03c      	b.n	80033bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d121      	bne.n	8003390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d836      	bhi.n	80033c0 <DMA_CheckFifoParam+0xd8>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <DMA_CheckFifoParam+0x70>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	0800336f 	.word	0x0800336f
 8003360:	08003369 	.word	0x08003369
 8003364:	08003381 	.word	0x08003381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e02f      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d024      	beq.n	80033c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337e:	e021      	b.n	80033c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003388:	d11e      	bne.n	80033c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800338e:	e01b      	b.n	80033c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d902      	bls.n	800339c <DMA_CheckFifoParam+0xb4>
 8003396:	2b03      	cmp	r3, #3
 8003398:	d003      	beq.n	80033a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800339a:	e018      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e015      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      break;
 80033b2:	e00b      	b.n	80033cc <DMA_CheckFifoParam+0xe4>
      break;
 80033b4:	bf00      	nop
 80033b6:	e00a      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033b8:	bf00      	nop
 80033ba:	e008      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033bc:	bf00      	nop
 80033be:	e006      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033c0:	bf00      	nop
 80033c2:	e004      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033c4:	bf00      	nop
 80033c6:	e002      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;   
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033cc:	bf00      	nop
    }
  } 
  
  return status; 
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_FLASH_Program+0xa0>)
 80033f0:	7e1b      	ldrb	r3, [r3, #24]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_FLASH_Program+0x1e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e03b      	b.n	8003472 <HAL_FLASH_Program+0x96>
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_FLASH_Program+0xa0>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003404:	f000 f870 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d12b      	bne.n	800346a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003418:	783b      	ldrb	r3, [r7, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	68b8      	ldr	r0, [r7, #8]
 800341e:	f000 f919 	bl	8003654 <FLASH_Program_Byte>
 8003422:	e016      	b.n	8003452 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800342a:	883b      	ldrh	r3, [r7, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f000 f8ec 	bl	800360c <FLASH_Program_HalfWord>
 8003434:	e00d      	b.n	8003452 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d105      	bne.n	8003448 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	68b8      	ldr	r0, [r7, #8]
 8003442:	f000 f8c1 	bl	80035c8 <FLASH_Program_Word>
 8003446:	e004      	b.n	8003452 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344c:	68b8      	ldr	r0, [r7, #8]
 800344e:	f000 f88b 	bl	8003568 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003452:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003456:	f000 f847 	bl	80034e8 <FLASH_WaitForLastOperation>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_FLASH_Program+0xa4>)
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_FLASH_Program+0xa4>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_FLASH_Program+0xa0>)
 800346c:	2200      	movs	r2, #0
 800346e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2000863c 	.word	0x2000863c
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_FLASH_Unlock+0x38>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	da0b      	bge.n	80034ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_FLASH_Unlock+0x38>)
 8003498:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <HAL_FLASH_Unlock+0x3c>)
 800349a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_FLASH_Unlock+0x38>)
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_FLASH_Unlock+0x40>)
 80034a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_FLASH_Unlock+0x38>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da01      	bge.n	80034ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034ae:	79fb      	ldrb	r3, [r7, #7]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40023c00 	.word	0x40023c00
 80034c0:	45670123 	.word	0x45670123
 80034c4:	cdef89ab 	.word	0xcdef89ab

080034c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_FLASH_Lock+0x1c>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_FLASH_Lock+0x1c>)
 80034d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40023c00 	.word	0x40023c00

080034e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <FLASH_WaitForLastOperation+0x78>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80034fa:	f7ff fad7 	bl	8002aac <HAL_GetTick>
 80034fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003500:	e010      	b.n	8003524 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d00c      	beq.n	8003524 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <FLASH_WaitForLastOperation+0x38>
 8003510:	f7ff facc 	bl	8002aac <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d201      	bcs.n	8003524 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e019      	b.n	8003558 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e8      	bne.n	8003502 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 800353e:	2201      	movs	r2, #1
 8003540:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800354e:	f000 f8a3 	bl	8003698 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
  
}  
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000863c 	.word	0x2000863c
 8003564:	40023c00 	.word	0x40023c00

08003568 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003568:	b490      	push	{r4, r7}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <FLASH_Program_DoubleWord+0x5c>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <FLASH_Program_DoubleWord+0x5c>)
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <FLASH_Program_DoubleWord+0x5c>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <FLASH_Program_DoubleWord+0x5c>)
 8003586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800358a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <FLASH_Program_DoubleWord+0x5c>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <FLASH_Program_DoubleWord+0x5c>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800359e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80035a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	0013      	movs	r3, r2
 80035b0:	2400      	movs	r4, #0
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	3204      	adds	r2, #4
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc90      	pop	{r4, r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40023c00 	.word	0x40023c00

080035c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <FLASH_Program_Word+0x40>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <FLASH_Program_Word+0x40>)
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <FLASH_Program_Word+0x40>)
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <FLASH_Program_Word+0x40>)
 80035e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <FLASH_Program_Word+0x40>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	4a06      	ldr	r2, [pc, #24]	; (8003608 <FLASH_Program_Word+0x40>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40023c00 	.word	0x40023c00

0800360c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <FLASH_Program_HalfWord+0x44>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <FLASH_Program_HalfWord+0x44>)
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <FLASH_Program_HalfWord+0x44>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <FLASH_Program_HalfWord+0x44>)
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <FLASH_Program_HalfWord+0x44>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4a06      	ldr	r2, [pc, #24]	; (8003650 <FLASH_Program_HalfWord+0x44>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	801a      	strh	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023c00 	.word	0x40023c00

08003654 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <FLASH_Program_Byte+0x40>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <FLASH_Program_Byte+0x40>)
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <FLASH_Program_Byte+0x40>)
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <FLASH_Program_Byte+0x40>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <FLASH_Program_Byte+0x40>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <FLASH_Program_Byte+0x40>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	701a      	strb	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023c00 	.word	0x40023c00

08003698 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800369c:	4b2f      	ldr	r3, [pc, #188]	; (800375c <FLASH_SetErrorCode+0xc4>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f043 0310 	orr.w	r3, r3, #16
 80036b0:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 80036b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <FLASH_SetErrorCode+0xc4>)
 80036b6:	2210      	movs	r2, #16
 80036b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <FLASH_SetErrorCode+0xc4>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f043 0308 	orr.w	r3, r3, #8
 80036ce:	4a24      	ldr	r2, [pc, #144]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 80036d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <FLASH_SetErrorCode+0xc4>)
 80036d4:	2220      	movs	r2, #32
 80036d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <FLASH_SetErrorCode+0xc4>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 80036ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <FLASH_SetErrorCode+0xc4>)
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <FLASH_SetErrorCode+0xc4>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 800370c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <FLASH_SetErrorCode+0xc4>)
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <FLASH_SetErrorCode+0xc4>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 800372a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <FLASH_SetErrorCode+0xc4>)
 800372e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003732:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <FLASH_SetErrorCode+0xc4>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <FLASH_SetErrorCode+0xc8>)
 800374a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <FLASH_SetErrorCode+0xc4>)
 800374e:	2202      	movs	r2, #2
 8003750:	60da      	str	r2, [r3, #12]
  }
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40023c00 	.word	0x40023c00
 8003760:	2000863c 	.word	0x2000863c

08003764 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e010      	b.n	80037a2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d103      	bne.n	800378e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e009      	b.n	80037a2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d103      	bne.n	800379c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e002      	b.n	80037a2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800379c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	490f      	ldr	r1, [pc, #60]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <FLASH_Erase_Sector+0x8c>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	6113      	str	r3, [r2, #16]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40023c00 	.word	0x40023c00

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e159      	b.n	8003ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003810:	2201      	movs	r2, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	f040 8148 	bne.w	8003abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00b      	beq.n	800384e <HAL_GPIO_Init+0x5a>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d007      	beq.n	800384e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003842:	2b11      	cmp	r3, #17
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b12      	cmp	r3, #18
 800384c:	d130      	bne.n	80038b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0xfc>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b12      	cmp	r3, #18
 80038ee:	d123      	bne.n	8003938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3208      	adds	r2, #8
 8003932:	69b9      	ldr	r1, [r7, #24]
 8003934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0203 	and.w	r2, r3, #3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a2 	beq.w	8003abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	4b56      	ldr	r3, [pc, #344]	; (8003ad8 <HAL_GPIO_Init+0x2e4>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <HAL_GPIO_Init+0x2e4>)
 8003984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003988:	6453      	str	r3, [r2, #68]	; 0x44
 800398a:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_GPIO_Init+0x2e4>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003996:	4a51      	ldr	r2, [pc, #324]	; (8003adc <HAL_GPIO_Init+0x2e8>)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <HAL_GPIO_Init+0x2ec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d019      	beq.n	80039f6 <HAL_GPIO_Init+0x202>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a47      	ldr	r2, [pc, #284]	; (8003ae4 <HAL_GPIO_Init+0x2f0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_GPIO_Init+0x1fe>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a46      	ldr	r2, [pc, #280]	; (8003ae8 <HAL_GPIO_Init+0x2f4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00d      	beq.n	80039ee <HAL_GPIO_Init+0x1fa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a45      	ldr	r2, [pc, #276]	; (8003aec <HAL_GPIO_Init+0x2f8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <HAL_GPIO_Init+0x1f6>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a44      	ldr	r2, [pc, #272]	; (8003af0 <HAL_GPIO_Init+0x2fc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_GPIO_Init+0x1f2>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e008      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039e6:	2307      	movs	r3, #7
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039f6:	2300      	movs	r3, #0
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	f002 0203 	and.w	r2, r2, #3
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4093      	lsls	r3, r2
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a08:	4934      	ldr	r1, [pc, #208]	; (8003adc <HAL_GPIO_Init+0x2e8>)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a3a:	4a2e      	ldr	r2, [pc, #184]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a40:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a64:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a94:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab8:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	f67f aea2 	bls.w	8003810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	3724      	adds	r7, #36	; 0x24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e001      	b.n	8003b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e11f      	b.n	8003dae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc ff2e 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f002 fc04 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a7b      	ldr	r2, [pc, #492]	; (8003db8 <HAL_I2C_Init+0x25c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d807      	bhi.n	8003be0 <HAL_I2C_Init+0x84>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a7a      	ldr	r2, [pc, #488]	; (8003dbc <HAL_I2C_Init+0x260>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e006      	b.n	8003bee <HAL_I2C_Init+0x92>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a77      	ldr	r2, [pc, #476]	; (8003dc0 <HAL_I2C_Init+0x264>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0db      	b.n	8003dae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a72      	ldr	r2, [pc, #456]	; (8003dc4 <HAL_I2C_Init+0x268>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0c9b      	lsrs	r3, r3, #18
 8003c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a64      	ldr	r2, [pc, #400]	; (8003db8 <HAL_I2C_Init+0x25c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d802      	bhi.n	8003c30 <HAL_I2C_Init+0xd4>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	e009      	b.n	8003c44 <HAL_I2C_Init+0xe8>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	4a63      	ldr	r2, [pc, #396]	; (8003dc8 <HAL_I2C_Init+0x26c>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	3301      	adds	r3, #1
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4956      	ldr	r1, [pc, #344]	; (8003db8 <HAL_I2C_Init+0x25c>)
 8003c60:	428b      	cmp	r3, r1
 8003c62:	d80d      	bhi.n	8003c80 <HAL_I2C_Init+0x124>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e59      	subs	r1, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	bf38      	it	cc
 8003c7c:	2304      	movcc	r3, #4
 8003c7e:	e04f      	b.n	8003d20 <HAL_I2C_Init+0x1c4>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d111      	bne.n	8003cac <HAL_I2C_Init+0x150>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	440b      	add	r3, r1
 8003c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e012      	b.n	8003cd2 <HAL_I2C_Init+0x176>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	0099      	lsls	r1, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Init+0x17e>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e022      	b.n	8003d20 <HAL_I2C_Init+0x1c4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10e      	bne.n	8003d00 <HAL_I2C_Init+0x1a4>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1e58      	subs	r0, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	440b      	add	r3, r1
 8003cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Init+0x1c4>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	0099      	lsls	r1, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	6809      	ldr	r1, [r1, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6911      	ldr	r1, [r2, #16]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	4311      	orrs	r1, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	000186a0 	.word	0x000186a0
 8003dbc:	001e847f 	.word	0x001e847f
 8003dc0:	003d08ff 	.word	0x003d08ff
 8003dc4:	431bde83 	.word	0x431bde83
 8003dc8:	10624dd3 	.word	0x10624dd3

08003dcc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	460b      	mov	r3, r1
 8003dda:	817b      	strh	r3, [r7, #10]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	f040 80f4 	bne.w	8003fda <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003df2:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	08db      	lsrs	r3, r3, #3
 8003df8:	4a7b      	ldr	r2, [pc, #492]	; (8003fe8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0a1a      	lsrs	r2, r3, #8
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009a      	lsls	r2, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0ca      	b.n	8003fdc <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d0db      	beq.n	8003e0c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0bc      	b.n	8003fdc <HAL_I2C_Master_Transmit_DMA+0x210>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d007      	beq.n	8003e88 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2221      	movs	r2, #33	; 0x21
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	893a      	ldrh	r2, [r7, #8]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a49      	ldr	r2, [pc, #292]	; (8003fec <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003eca:	897a      	ldrh	r2, [r7, #10]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d062      	beq.n	8003f9e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	4a44      	ldr	r2, [pc, #272]	; (8003ff0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	4a43      	ldr	r2, [pc, #268]	; (8003ff4 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8003ee6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	2200      	movs	r2, #0
 8003efe:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	2200      	movs	r2, #0
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4619      	mov	r1, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3310      	adds	r3, #16
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	f7fe ff61 	bl	8002de4 <HAL_DMA_Start_IT>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d124      	bne.n	8003f76 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f62:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	e02f      	b.n	8003fd6 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01e      	b.n	8003fdc <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003fd4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	14f8b589 	.word	0x14f8b589
 8003fec:	ffff0000 	.word	0xffff0000
 8003ff0:	08005795 	.word	0x08005795
 8003ff4:	0800593f 	.word	0x0800593f

08003ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004018:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b10      	cmp	r3, #16
 8004026:	d003      	beq.n	8004030 <HAL_I2C_EV_IRQHandler+0x38>
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	f040 80bd 	bne.w	80041aa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <HAL_I2C_EV_IRQHandler+0x6e>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004050:	d003      	beq.n	800405a <HAL_I2C_EV_IRQHandler+0x62>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004058:	d101      	bne.n	800405e <HAL_I2C_EV_IRQHandler+0x66>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_I2C_EV_IRQHandler+0x68>
 800405e:	2300      	movs	r3, #0
 8004060:	2b01      	cmp	r3, #1
 8004062:	f000 812e 	beq.w	80042c2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_I2C_EV_IRQHandler+0x92>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	0a5b      	lsrs	r3, r3, #9
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fd75 	bl	8005b6c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd70 	bl	8004b68 <I2C_Master_SB>
 8004088:	e08e      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	08db      	lsrs	r3, r3, #3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0xb2>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	0a5b      	lsrs	r3, r3, #9
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fde6 	bl	8004c74 <I2C_Master_ADD10>
 80040a8:	e07e      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_I2C_EV_IRQHandler+0xd2>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	0a5b      	lsrs	r3, r3, #9
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fe00 	bl	8004cc8 <I2C_Master_ADDR>
 80040c8:	e06e      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d037      	beq.n	8004146 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e4:	f000 80ef 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	09db      	lsrs	r3, r3, #7
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <HAL_I2C_EV_IRQHandler+0x11c>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_I2C_EV_IRQHandler+0x11c>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d103      	bne.n	8004114 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f9fd 	bl	800450c <I2C_MasterTransmit_TXE>
 8004112:	e049      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80d2 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	0a5b      	lsrs	r3, r3, #9
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80cb 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b10      	cmp	r3, #16
 8004134:	d103      	bne.n	800413e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa84 	bl	8004644 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800413c:	e0c3      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fae8 	bl	8004714 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004144:	e0bf      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	f000 80b7 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x18c>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x18c>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb58 	bl	8004832 <I2C_MasterReceive_RXNE>
 8004182:	e011      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 809a 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	0a5b      	lsrs	r3, r3, #9
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8093 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fbf7 	bl	8004994 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a6:	e08e      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80041a8:	e08d      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e007      	b.n	80041cc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_I2C_EV_IRQHandler+0x206>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	0a5b      	lsrs	r3, r3, #9
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 ffb5 	bl	8005166 <I2C_Slave_ADDR>
 80041fc:	e066      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x226>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	0a5b      	lsrs	r3, r3, #9
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 ffea 	bl	80051f0 <I2C_Slave_STOPF>
 800421c:	e056      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d002      	beq.n	800422a <HAL_I2C_EV_IRQHandler+0x232>
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	2b29      	cmp	r3, #41	; 0x29
 8004228:	d125      	bne.n	8004276 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00f      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x25e>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	0a9b      	lsrs	r3, r3, #10
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x25e>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fecb 	bl	8004fea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004254:	e039      	b.n	80042ca <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d033      	beq.n	80042ca <HAL_I2C_EV_IRQHandler+0x2d2>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02d      	beq.n	80042ca <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fef8 	bl	8005064 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004274:	e029      	b.n	80042ca <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	0a9b      	lsrs	r3, r3, #10
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 ff03 	bl	80050a6 <I2C_SlaveReceive_RXNE>
 80042a0:	e014      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 ff31 	bl	8005122 <I2C_SlaveReceive_BTF>
 80042c0:	e004      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08a      	sub	sp, #40	; 0x28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00e      	beq.n	8004320 <HAL_I2C_ER_IRQHandler+0x4e>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800431e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	0a5b      	lsrs	r3, r3, #9
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x78>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004348:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	0a9b      	lsrs	r3, r3, #10
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03f      	beq.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d039      	beq.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004362:	7efb      	ldrb	r3, [r7, #27]
 8004364:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800437c:	7ebb      	ldrb	r3, [r7, #26]
 800437e:	2b20      	cmp	r3, #32
 8004380:	d112      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b21      	cmp	r3, #33	; 0x21
 800438c:	d008      	beq.n	80043a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b29      	cmp	r3, #41	; 0x29
 8004392:	d005      	beq.n	80043a0 <HAL_I2C_ER_IRQHandler+0xce>
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b28      	cmp	r3, #40	; 0x28
 8004398:	d106      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b21      	cmp	r3, #33	; 0x21
 800439e:	d103      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 f855 	bl	8005450 <I2C_Slave_AF>
 80043a6:	e016      	b.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ba:	7efb      	ldrb	r3, [r7, #27]
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d002      	beq.n	80043c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80043c0:	7efb      	ldrb	r3, [r7, #27]
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d107      	bne.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	0adb      	lsrs	r3, r3, #11
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <HAL_I2C_ER_IRQHandler+0x12e>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f001 f88c 	bl	8005530 <I2C_ITError>
  }
}
 8004418:	bf00      	nop
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
 800447c:	4613      	mov	r3, r2
 800447e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d150      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0xc8>
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b21      	cmp	r3, #33	; 0x21
 8004536:	d14d      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b08      	cmp	r3, #8
 800453c:	d01d      	beq.n	800457a <I2C_MasterTransmit_TXE+0x6e>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b20      	cmp	r3, #32
 8004542:	d01a      	beq.n	800457a <I2C_MasterTransmit_TXE+0x6e>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800454a:	d016      	beq.n	800457a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2211      	movs	r2, #17
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff54 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004578:	e060      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004588:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004598:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d107      	bne.n	80045c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff6f 	bl	80044a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045c2:	e03b      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff27 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045d2:	e033      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b21      	cmp	r3, #33	; 0x21
 80045d8:	d005      	beq.n	80045e6 <I2C_MasterTransmit_TXE+0xda>
 80045da:	7bbb      	ldrb	r3, [r7, #14]
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d12d      	bne.n	800463c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d12a      	bne.n	800463c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004600:	e01c      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d103      	bne.n	8004616 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f880 	bl	8004714 <I2C_MemoryTransmit_TXE_BTF>
}
 8004614:	e012      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800463a:	e7ff      	b.n	800463c <I2C_MasterTransmit_TXE+0x130>
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b21      	cmp	r3, #33	; 0x21
 800465c:	d156      	bne.n	800470c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d012      	beq.n	800468e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800468c:	e03e      	b.n	800470c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d01d      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x8c>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d01a      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x8c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a0:	d016      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2211      	movs	r2, #17
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fea9 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
}
 80046ce:	e01d      	b.n	800470c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fe8a 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11d      	bne.n	8004768 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10b      	bne.n	800474c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800474a:	e06e      	b.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004750:	b29b      	uxth	r3, r3
 8004752:	121b      	asrs	r3, r3, #8
 8004754:	b2da      	uxtb	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004766:	e060      	b.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10b      	bne.n	8004788 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	b2da      	uxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004786:	e050      	b.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	2b02      	cmp	r3, #2
 800478e:	d14c      	bne.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b22      	cmp	r3, #34	; 0x22
 8004794:	d108      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a4:	601a      	str	r2, [r3, #0]
}
 80047a6:	e040      	b.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d015      	beq.n	80047de <I2C_MemoryTransmit_TXE_BTF+0xca>
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b21      	cmp	r3, #33	; 0x21
 80047b6:	d112      	bne.n	80047de <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047dc:	e025      	b.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d120      	bne.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b21      	cmp	r3, #33	; 0x21
 80047ec:	d11d      	bne.n	800482a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fe3b 	bl	80044a0 <HAL_I2C_MemTxCpltCallback>
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b22      	cmp	r3, #34	; 0x22
 8004844:	f040 80a2 	bne.w	800498c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d921      	bls.n	800489a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b03      	cmp	r3, #3
 8004884:	f040 8082 	bne.w	800498c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004896:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004898:	e078      	b.n	800498c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d074      	beq.n	800498c <I2C_MasterReceive_RXNE+0x15a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d002      	beq.n	80048ae <I2C_MasterReceive_RXNE+0x7c>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d16e      	bne.n	800498c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 f92a 	bl	8005b08 <I2C_WaitOnSTOPRequestThroughIT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d142      	bne.n	8004940 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d10a      	bne.n	800492a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fdc6 	bl	80044b4 <HAL_I2C_MemRxCpltCallback>
}
 8004928:	e030      	b.n	800498c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2212      	movs	r2, #18
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fd7b 	bl	8004434 <HAL_I2C_MasterRxCpltCallback>
}
 800493e:	e025      	b.n	800498c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fd9e 	bl	80044c8 <HAL_I2C_ErrorCallback>
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11b      	bne.n	80049e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049e2:	e0bd      	b.n	8004b60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d129      	bne.n	8004a42 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00a      	beq.n	8004a1a <I2C_MasterReceive_BTF+0x86>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d007      	beq.n	8004a1a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a40:	e08e      	b.n	8004b60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d176      	bne.n	8004b3a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d002      	beq.n	8004a58 <I2C_MasterReceive_BTF+0xc4>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d108      	bne.n	8004a6a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e019      	b.n	8004a9e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d002      	beq.n	8004a76 <I2C_MasterReceive_BTF+0xe2>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d108      	bne.n	8004a88 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e00a      	b.n	8004a9e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d007      	beq.n	8004a9e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004af8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d10a      	bne.n	8004b24 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fcc9 	bl	80044b4 <HAL_I2C_MemRxCpltCallback>
}
 8004b22:	e01d      	b.n	8004b60 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2212      	movs	r2, #18
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fc7e 	bl	8004434 <HAL_I2C_MasterRxCpltCallback>
}
 8004b38:	e012      	b.n	8004b60 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d117      	bne.n	8004bac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b94:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b96:	e067      	b.n	8004c68 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	611a      	str	r2, [r3, #16]
}
 8004baa:	e05d      	b.n	8004c68 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d133      	bne.n	8004c1e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b21      	cmp	r3, #33	; 0x21
 8004bc0:	d109      	bne.n	8004bd6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bd2:	611a      	str	r2, [r3, #16]
 8004bd4:	e008      	b.n	8004be8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <I2C_Master_SB+0x92>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d108      	bne.n	8004c0c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d032      	beq.n	8004c68 <I2C_Master_SB+0x100>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02d      	beq.n	8004c68 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c1a:	605a      	str	r2, [r3, #4]
}
 8004c1c:	e024      	b.n	8004c68 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10e      	bne.n	8004c44 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	11db      	asrs	r3, r3, #7
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0306 	and.w	r3, r3, #6
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f063 030f 	orn	r3, r3, #15
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	611a      	str	r2, [r3, #16]
}
 8004c42:	e011      	b.n	8004c68 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10d      	bne.n	8004c68 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	11db      	asrs	r3, r3, #7
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0306 	and.w	r3, r3, #6
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f063 030e 	orn	r3, r3, #14
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	611a      	str	r2, [r3, #16]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <I2C_Master_ADD10+0x24>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d011      	beq.n	8004cbc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <I2C_Master_ADD10+0x38>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cba:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b091      	sub	sp, #68	; 0x44
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b22      	cmp	r3, #34	; 0x22
 8004cf0:	f040 8169 	bne.w	8004fc6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <I2C_Master_ADDR+0x54>
 8004cfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d10b      	bne.n	8004d1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d04:	2300      	movs	r3, #0
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	e160      	b.n	8004fde <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11d      	bne.n	8004d60 <I2C_Master_ADDR+0x98>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d2c:	d118      	bne.n	8004d60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d5e:	e13e      	b.n	8004fde <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d113      	bne.n	8004d92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e115      	b.n	8004fbe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 808a 	bne.w	8004eb2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004da4:	d137      	bne.n	8004e16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d113      	bne.n	8004dee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	e0e7      	b.n	8004fbe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dee:	2300      	movs	r3, #0
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e0d3      	b.n	8004fbe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d02e      	beq.n	8004e7a <I2C_Master_ADDR+0x1b2>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d02b      	beq.n	8004e7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	2b12      	cmp	r3, #18
 8004e26:	d102      	bne.n	8004e2e <I2C_Master_ADDR+0x166>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d125      	bne.n	8004e7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d00e      	beq.n	8004e52 <I2C_Master_ADDR+0x18a>
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d00b      	beq.n	8004e52 <I2C_Master_ADDR+0x18a>
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d008      	beq.n	8004e52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e007      	b.n	8004e62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	e0a1      	b.n	8004fbe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e085      	b.n	8004fbe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d14d      	bne.n	8004f58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d016      	beq.n	8004ef0 <I2C_Master_ADDR+0x228>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d013      	beq.n	8004ef0 <I2C_Master_ADDR+0x228>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d010      	beq.n	8004ef0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004edc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0e:	d117      	bne.n	8004f40 <I2C_Master_ADDR+0x278>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f16:	d00b      	beq.n	8004f30 <I2C_Master_ADDR+0x268>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d008      	beq.n	8004f30 <I2C_Master_ADDR+0x268>
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d005      	beq.n	8004f30 <I2C_Master_ADDR+0x268>
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d002      	beq.n	8004f30 <I2C_Master_ADDR+0x268>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d107      	bne.n	8004f40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	e032      	b.n	8004fbe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f76:	d117      	bne.n	8004fa8 <I2C_Master_ADDR+0x2e0>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f7e:	d00b      	beq.n	8004f98 <I2C_Master_ADDR+0x2d0>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d008      	beq.n	8004f98 <I2C_Master_ADDR+0x2d0>
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d005      	beq.n	8004f98 <I2C_Master_ADDR+0x2d0>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d002      	beq.n	8004f98 <I2C_Master_ADDR+0x2d0>
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d107      	bne.n	8004fa8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fa6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fc4:	e00b      	b.n	8004fde <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	e7ff      	b.n	8004fde <I2C_Master_ADDR+0x316>
 8004fde:	bf00      	nop
 8004fe0:	3744      	adds	r7, #68	; 0x44
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02b      	beq.n	800505c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	781a      	ldrb	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d114      	bne.n	800505c <I2C_SlaveTransmit_TXE+0x72>
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b29      	cmp	r3, #41	; 0x29
 8005036:	d111      	bne.n	800505c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005046:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2221      	movs	r2, #33	; 0x21
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2228      	movs	r2, #40	; 0x28
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff f9f6 	bl	8004448 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d011      	beq.n	800509a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02c      	beq.n	800511a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d114      	bne.n	800511a <I2C_SlaveReceive_RXNE+0x74>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b2a      	cmp	r3, #42	; 0x2a
 80050f4:	d111      	bne.n	800511a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2222      	movs	r2, #34	; 0x22
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2228      	movs	r2, #40	; 0x28
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff f9a1 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005180:	2b28      	cmp	r3, #40	; 0x28
 8005182:	d127      	bne.n	80051d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005192:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	089b      	lsrs	r3, r3, #2
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	09db      	lsrs	r3, r3, #7
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	81bb      	strh	r3, [r7, #12]
 80051b6:	e002      	b.n	80051be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051c6:	89ba      	ldrh	r2, [r7, #12]
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff f94f 	bl	8004470 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051d2:	e008      	b.n	80051e6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0202 	mvn.w	r2, #2
 80051dc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800520e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524c:	d172      	bne.n	8005334 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b22      	cmp	r3, #34	; 0x22
 8005252:	d002      	beq.n	800525a <I2C_Slave_STOPF+0x6a>
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b2a      	cmp	r3, #42	; 0x2a
 8005258:	d135      	bne.n	80052c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b29a      	uxth	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0204 	orr.w	r2, r3, #4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd ffaa 	bl	80031ec <HAL_DMA_GetState>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d049      	beq.n	8005332 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	4a69      	ldr	r2, [pc, #420]	; (8005448 <I2C_Slave_STOPF+0x258>)
 80052a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd fdf2 	bl	8002e94 <HAL_DMA_Abort_IT>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d03d      	beq.n	8005332 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052c0:	4610      	mov	r0, r2
 80052c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052c4:	e035      	b.n	8005332 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fd ff74 	bl	80031ec <HAL_DMA_GetState>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d014      	beq.n	8005334 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	4a4e      	ldr	r2, [pc, #312]	; (8005448 <I2C_Slave_STOPF+0x258>)
 8005310:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fdbc 	bl	8002e94 <HAL_DMA_Abort_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
 8005330:	e000      	b.n	8005334 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005332:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03e      	beq.n	80053bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d112      	bne.n	8005372 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d112      	bne.n	80053a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f043 0204 	orr.w	r2, r3, #4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8b3 	bl	8005530 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053ca:	e039      	b.n	8005440 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b2a      	cmp	r3, #42	; 0x2a
 80053d0:	d109      	bne.n	80053e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2228      	movs	r2, #40	; 0x28
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff f83b 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b28      	cmp	r3, #40	; 0x28
 80053f0:	d111      	bne.n	8005416 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <I2C_Slave_STOPF+0x25c>)
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff f83c 	bl	800448c <HAL_I2C_ListenCpltCallback>
}
 8005414:	e014      	b.n	8005440 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	2b22      	cmp	r3, #34	; 0x22
 800541c:	d002      	beq.n	8005424 <I2C_Slave_STOPF+0x234>
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b22      	cmp	r3, #34	; 0x22
 8005422:	d10d      	bne.n	8005440 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff f80e 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	080059b9 	.word	0x080059b9
 800544c:	ffff0000 	.word	0xffff0000

08005450 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d002      	beq.n	8005472 <I2C_Slave_AF+0x22>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b20      	cmp	r3, #32
 8005470:	d129      	bne.n	80054c6 <I2C_Slave_AF+0x76>
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b28      	cmp	r3, #40	; 0x28
 8005476:	d126      	bne.n	80054c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2c      	ldr	r2, [pc, #176]	; (800552c <I2C_Slave_AF+0xdc>)
 800547c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800548c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005496:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fe ffe4 	bl	800448c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054c4:	e02e      	b.n	8005524 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	2b21      	cmp	r3, #33	; 0x21
 80054ca:	d126      	bne.n	800551a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <I2C_Slave_AF+0xdc>)
 80054d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2221      	movs	r2, #33	; 0x21
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005500:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005510:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fe ff98 	bl	8004448 <HAL_I2C_SlaveTxCpltCallback>
}
 8005518:	e004      	b.n	8005524 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005522:	615a      	str	r2, [r3, #20]
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	ffff0000 	.word	0xffff0000

08005530 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005546:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005548:	7bbb      	ldrb	r3, [r7, #14]
 800554a:	2b10      	cmp	r3, #16
 800554c:	d002      	beq.n	8005554 <I2C_ITError+0x24>
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d10a      	bne.n	800556a <I2C_ITError+0x3a>
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b22      	cmp	r3, #34	; 0x22
 8005558:	d107      	bne.n	800556a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005568:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005570:	2b28      	cmp	r3, #40	; 0x28
 8005572:	d107      	bne.n	8005584 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2228      	movs	r2, #40	; 0x28
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005582:	e015      	b.n	80055b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005592:	d00a      	beq.n	80055aa <I2C_ITError+0x7a>
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b60      	cmp	r3, #96	; 0x60
 8005598:	d007      	beq.n	80055aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055be:	d162      	bne.n	8005686 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d020      	beq.n	8005620 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	4a6a      	ldr	r2, [pc, #424]	; (800578c <I2C_ITError+0x25c>)
 80055e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd fc52 	bl	8002e94 <HAL_DMA_Abort_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8089 	beq.w	800570a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800561a:	4610      	mov	r0, r2
 800561c:	4798      	blx	r3
 800561e:	e074      	b.n	800570a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	4a59      	ldr	r2, [pc, #356]	; (800578c <I2C_ITError+0x25c>)
 8005626:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	4618      	mov	r0, r3
 800562e:	f7fd fc31 	bl	8002e94 <HAL_DMA_Abort_IT>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d068      	beq.n	800570a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d10b      	bne.n	800565e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
 8005684:	e041      	b.n	800570a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b60      	cmp	r3, #96	; 0x60
 8005690:	d125      	bne.n	80056de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d10b      	bne.n	80056c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fe ff00 	bl	80044dc <HAL_I2C_AbortCpltCallback>
 80056dc:	e015      	b.n	800570a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d10b      	bne.n	8005704 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7fe fedf 	bl	80044c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10e      	bne.n	8005738 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d113      	bne.n	8005784 <I2C_ITError+0x254>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b28      	cmp	r3, #40	; 0x28
 8005760:	d110      	bne.n	8005784 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <I2C_ITError+0x260>)
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fe fe84 	bl	800448c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	080059b9 	.word	0x080059b9
 8005790:	ffff0000 	.word	0xffff0000

08005794 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057c6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d4:	2200      	movs	r2, #0
 80057d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	2200      	movs	r2, #0
 80057e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
 80057ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80057ee:	2b21      	cmp	r3, #33	; 0x21
 80057f0:	d007      	beq.n	8005802 <I2C_DMAXferCplt+0x6e>
 80057f2:	7cfb      	ldrb	r3, [r7, #19]
 80057f4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80057f8:	2b22      	cmp	r3, #34	; 0x22
 80057fa:	d131      	bne.n	8005860 <I2C_DMAXferCplt+0xcc>
 80057fc:	7cbb      	ldrb	r3, [r7, #18]
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d12e      	bne.n	8005860 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005810:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	2b29      	cmp	r3, #41	; 0x29
 800581c:	d10a      	bne.n	8005834 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2221      	movs	r2, #33	; 0x21
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2228      	movs	r2, #40	; 0x28
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800582c:	6978      	ldr	r0, [r7, #20]
 800582e:	f7fe fe0b 	bl	8004448 <HAL_I2C_SlaveTxCpltCallback>
 8005832:	e00c      	b.n	800584e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b2a      	cmp	r3, #42	; 0x2a
 8005838:	d109      	bne.n	800584e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2222      	movs	r2, #34	; 0x22
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2228      	movs	r2, #40	; 0x28
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005848:	6978      	ldr	r0, [r7, #20]
 800584a:	f7fe fe07 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800585c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800585e:	e06a      	b.n	8005936 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d064      	beq.n	8005936 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	d107      	bne.n	8005886 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005884:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005894:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800589c:	d009      	beq.n	80058b2 <I2C_DMAXferCplt+0x11e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d006      	beq.n	80058b2 <I2C_DMAXferCplt+0x11e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058aa:	d002      	beq.n	80058b2 <I2C_DMAXferCplt+0x11e>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d107      	bne.n	80058c2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058d0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80058f0:	6978      	ldr	r0, [r7, #20]
 80058f2:	f7fe fde9 	bl	80044c8 <HAL_I2C_ErrorCallback>
}
 80058f6:	e01e      	b.n	8005936 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d10a      	bne.n	8005922 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7fe fdca 	bl	80044b4 <HAL_I2C_MemRxCpltCallback>
}
 8005920:	e009      	b.n	8005936 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2212      	movs	r2, #18
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005930:	6978      	ldr	r0, [r7, #20]
 8005932:	f7fe fd7f 	bl	8004434 <HAL_I2C_MasterRxCpltCallback>
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	2200      	movs	r2, #0
 800595a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	2200      	movs	r2, #0
 800596a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fd fc4b 	bl	8003208 <HAL_DMA_GetError>
 8005972:	4603      	mov	r3, r0
 8005974:	2b02      	cmp	r3, #2
 8005976:	d01b      	beq.n	80059b0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005986:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f043 0210 	orr.w	r2, r3, #16
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7fe fd8c 	bl	80044c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80059d2:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <I2C_DMAAbort+0x148>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	4a4a      	ldr	r2, [pc, #296]	; (8005b04 <I2C_DMAAbort+0x14c>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	0a1a      	lsrs	r2, r3, #8
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	00da      	lsls	r2, r3, #3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059fe:	e00a      	b.n	8005a16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a14:	d0ea      	beq.n	80059ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	2200      	movs	r2, #0
 8005a24:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	2200      	movs	r2, #0
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a58:	2200      	movs	r2, #0
 8005a5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	2200      	movs	r2, #0
 8005a6a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d10e      	bne.n	8005aa6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7fe fd1c 	bl	80044dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005aa4:	e027      	b.n	8005af6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005aac:	2b28      	cmp	r3, #40	; 0x28
 8005aae:	d117      	bne.n	8005ae0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ace:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2228      	movs	r2, #40	; 0x28
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ade:	e007      	b.n	8005af0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005af0:	6978      	ldr	r0, [r7, #20]
 8005af2:	f7fe fce9 	bl	80044c8 <HAL_I2C_ErrorCallback>
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000000 	.word	0x20000000
 8005b04:	14f8b589 	.word	0x14f8b589

08005b08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b14:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	08db      	lsrs	r3, r3, #3
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	0a1a      	lsrs	r2, r3, #8
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e008      	b.n	8005b58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	d0e9      	beq.n	8005b2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20000000 	.word	0x20000000
 8005b68:	14f8b589 	.word	0x14f8b589

08005b6c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b7c:	d103      	bne.n	8005b86 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b84:	e007      	b.n	8005b96 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b8e:	d102      	bne.n	8005b96 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2208      	movs	r2, #8
 8005b94:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e25b      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d075      	beq.n	8005cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bc2:	4ba3      	ldr	r3, [pc, #652]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d00c      	beq.n	8005be8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bce:	4ba0      	ldr	r3, [pc, #640]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d112      	bne.n	8005c00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bda:	4b9d      	ldr	r3, [pc, #628]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be6:	d10b      	bne.n	8005c00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be8:	4b99      	ldr	r3, [pc, #612]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d05b      	beq.n	8005cac <HAL_RCC_OscConfig+0x108>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d157      	bne.n	8005cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e236      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c08:	d106      	bne.n	8005c18 <HAL_RCC_OscConfig+0x74>
 8005c0a:	4b91      	ldr	r3, [pc, #580]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a90      	ldr	r2, [pc, #576]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e01d      	b.n	8005c54 <HAL_RCC_OscConfig+0xb0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x98>
 8005c22:	4b8b      	ldr	r3, [pc, #556]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a8a      	ldr	r2, [pc, #552]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a87      	ldr	r2, [pc, #540]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_OscConfig+0xb0>
 8005c3c:	4b84      	ldr	r3, [pc, #528]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a83      	ldr	r2, [pc, #524]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b81      	ldr	r3, [pc, #516]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a80      	ldr	r2, [pc, #512]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d013      	beq.n	8005c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5c:	f7fc ff26 	bl	8002aac <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c64:	f7fc ff22 	bl	8002aac <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	; 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e1fb      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c76:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0xc0>
 8005c82:	e014      	b.n	8005cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fc ff12 	bl	8002aac <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c8c:	f7fc ff0e 	bl	8002aac <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b64      	cmp	r3, #100	; 0x64
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e1e7      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9e:	4b6c      	ldr	r3, [pc, #432]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0xe8>
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d063      	beq.n	8005d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cba:	4b65      	ldr	r3, [pc, #404]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cc6:	4b62      	ldr	r3, [pc, #392]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d11c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cd2:	4b5f      	ldr	r3, [pc, #380]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d116      	bne.n	8005d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cde:	4b5c      	ldr	r3, [pc, #368]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x152>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e1bb      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf6:	4b56      	ldr	r3, [pc, #344]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4952      	ldr	r1, [pc, #328]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d0a:	e03a      	b.n	8005d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d020      	beq.n	8005d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d14:	4b4f      	ldr	r3, [pc, #316]	; (8005e54 <HAL_RCC_OscConfig+0x2b0>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1a:	f7fc fec7 	bl	8002aac <HAL_GetTick>
 8005d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d22:	f7fc fec3 	bl	8002aac <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e19c      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d34:	4b46      	ldr	r3, [pc, #280]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f0      	beq.n	8005d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d40:	4b43      	ldr	r3, [pc, #268]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4940      	ldr	r1, [pc, #256]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]
 8005d54:	e015      	b.n	8005d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d56:	4b3f      	ldr	r3, [pc, #252]	; (8005e54 <HAL_RCC_OscConfig+0x2b0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fc fea6 	bl	8002aac <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d64:	f7fc fea2 	bl	8002aac <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e17b      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d030      	beq.n	8005df0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d016      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d96:	4b30      	ldr	r3, [pc, #192]	; (8005e58 <HAL_RCC_OscConfig+0x2b4>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9c:	f7fc fe86 	bl	8002aac <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da4:	f7fc fe82 	bl	8002aac <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e15b      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db6:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x200>
 8005dc2:	e015      	b.n	8005df0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dc4:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <HAL_RCC_OscConfig+0x2b4>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dca:	f7fc fe6f 	bl	8002aac <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dd2:	f7fc fe6b 	bl	8002aac <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e144      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de4:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a0 	beq.w	8005f3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e02:	4b13      	ldr	r3, [pc, #76]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCC_OscConfig+0x2b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d121      	bne.n	8005e7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_RCC_OscConfig+0x2b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <HAL_RCC_OscConfig+0x2b8>)
 8005e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e46:	f7fc fe31 	bl	8002aac <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4c:	e011      	b.n	8005e72 <HAL_RCC_OscConfig+0x2ce>
 8005e4e:	bf00      	nop
 8005e50:	40023800 	.word	0x40023800
 8005e54:	42470000 	.word	0x42470000
 8005e58:	42470e80 	.word	0x42470e80
 8005e5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e60:	f7fc fe24 	bl	8002aac <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0fd      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	4b81      	ldr	r3, [pc, #516]	; (8006078 <HAL_RCC_OscConfig+0x4d4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d106      	bne.n	8005e94 <HAL_RCC_OscConfig+0x2f0>
 8005e86:	4b7d      	ldr	r3, [pc, #500]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	4a7c      	ldr	r2, [pc, #496]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6713      	str	r3, [r2, #112]	; 0x70
 8005e92:	e01c      	b.n	8005ece <HAL_RCC_OscConfig+0x32a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d10c      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x312>
 8005e9c:	4b77      	ldr	r3, [pc, #476]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea0:	4a76      	ldr	r2, [pc, #472]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005ea2:	f043 0304 	orr.w	r3, r3, #4
 8005ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea8:	4b74      	ldr	r3, [pc, #464]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eac:	4a73      	ldr	r2, [pc, #460]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb4:	e00b      	b.n	8005ece <HAL_RCC_OscConfig+0x32a>
 8005eb6:	4b71      	ldr	r3, [pc, #452]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	4a70      	ldr	r2, [pc, #448]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec2:	4b6e      	ldr	r3, [pc, #440]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	4a6d      	ldr	r2, [pc, #436]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005ec8:	f023 0304 	bic.w	r3, r3, #4
 8005ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d015      	beq.n	8005f02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed6:	f7fc fde9 	bl	8002aac <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fc fde5 	bl	8002aac <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0bc      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef4:	4b61      	ldr	r3, [pc, #388]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ee      	beq.n	8005ede <HAL_RCC_OscConfig+0x33a>
 8005f00:	e014      	b.n	8005f2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f02:	f7fc fdd3 	bl	8002aac <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f08:	e00a      	b.n	8005f20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f0a:	f7fc fdcf 	bl	8002aac <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e0a6      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f20:	4b56      	ldr	r3, [pc, #344]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1ee      	bne.n	8005f0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d105      	bne.n	8005f3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f32:	4b52      	ldr	r3, [pc, #328]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	4a51      	ldr	r2, [pc, #324]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8092 	beq.w	800606c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f48:	4b4c      	ldr	r3, [pc, #304]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d05c      	beq.n	800600e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d141      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5c:	4b48      	ldr	r3, [pc, #288]	; (8006080 <HAL_RCC_OscConfig+0x4dc>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f62:	f7fc fda3 	bl	8002aac <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6a:	f7fc fd9f 	bl	8002aac <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e078      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7c:	4b3f      	ldr	r3, [pc, #252]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	019b      	lsls	r3, r3, #6
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	061b      	lsls	r3, r3, #24
 8005fac:	4933      	ldr	r1, [pc, #204]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fb2:	4b33      	ldr	r3, [pc, #204]	; (8006080 <HAL_RCC_OscConfig+0x4dc>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb8:	f7fc fd78 	bl	8002aac <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc0:	f7fc fd74 	bl	8002aac <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e04d      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x41c>
 8005fde:	e045      	b.n	800606c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <HAL_RCC_OscConfig+0x4dc>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe6:	f7fc fd61 	bl	8002aac <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fee:	f7fc fd5d 	bl	8002aac <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e036      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f0      	bne.n	8005fee <HAL_RCC_OscConfig+0x44a>
 800600c:	e02e      	b.n	800606c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e029      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <HAL_RCC_OscConfig+0x4d8>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	429a      	cmp	r2, r3
 800602c:	d11c      	bne.n	8006068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006038:	429a      	cmp	r2, r3
 800603a:	d115      	bne.n	8006068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006042:	4013      	ands	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006048:	4293      	cmp	r3, r2
 800604a:	d10d      	bne.n	8006068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006056:	429a      	cmp	r2, r3
 8006058:	d106      	bne.n	8006068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d001      	beq.n	800606c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40007000 	.word	0x40007000
 800607c:	40023800 	.word	0x40023800
 8006080:	42470060 	.word	0x42470060

08006084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0cc      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006098:	4b68      	ldr	r3, [pc, #416]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d90c      	bls.n	80060c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a6:	4b65      	ldr	r3, [pc, #404]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	4b63      	ldr	r3, [pc, #396]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0b8      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060d8:	4b59      	ldr	r3, [pc, #356]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4a58      	ldr	r2, [pc, #352]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f0:	4b53      	ldr	r3, [pc, #332]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fc:	4b50      	ldr	r3, [pc, #320]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	494d      	ldr	r1, [pc, #308]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d044      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	4b47      	ldr	r3, [pc, #284]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d119      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e07f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d003      	beq.n	8006142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800613e:	2b03      	cmp	r3, #3
 8006140:	d107      	bne.n	8006152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006142:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e06f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006152:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e067      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 0203 	bic.w	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	4934      	ldr	r1, [pc, #208]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	4313      	orrs	r3, r2
 8006172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006174:	f7fc fc9a 	bl	8002aac <HAL_GetTick>
 8006178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617a:	e00a      	b.n	8006192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800617c:	f7fc fc96 	bl	8002aac <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e04f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006192:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 020c 	and.w	r2, r3, #12
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1eb      	bne.n	800617c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061a4:	4b25      	ldr	r3, [pc, #148]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d20c      	bcs.n	80061cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b2:	4b22      	ldr	r3, [pc, #136]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e032      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4916      	ldr	r1, [pc, #88]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f6:	4b12      	ldr	r3, [pc, #72]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	490e      	ldr	r1, [pc, #56]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800620a:	f000 f821 	bl	8006250 <HAL_RCC_GetSysClockFreq>
 800620e:	4601      	mov	r1, r0
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	091b      	lsrs	r3, r3, #4
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <HAL_RCC_ClockConfig+0x1c0>)
 800621c:	5cd3      	ldrb	r3, [r2, r3]
 800621e:	fa21 f303 	lsr.w	r3, r1, r3
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fa fcba 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40023c00 	.word	0x40023c00
 8006240:	40023800 	.word	0x40023800
 8006244:	0800a304 	.word	0x0800a304
 8006248:	20000000 	.word	0x20000000
 800624c:	20000008 	.word	0x20000008

08006250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	2300      	movs	r3, #0
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006266:	4b50      	ldr	r3, [pc, #320]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
 800626e:	2b04      	cmp	r3, #4
 8006270:	d007      	beq.n	8006282 <HAL_RCC_GetSysClockFreq+0x32>
 8006272:	2b08      	cmp	r3, #8
 8006274:	d008      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x38>
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 808d 	bne.w	8006396 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800627c:	4b4b      	ldr	r3, [pc, #300]	; (80063ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800627e:	60bb      	str	r3, [r7, #8]
       break;
 8006280:	e08c      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006282:	4b4b      	ldr	r3, [pc, #300]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006284:	60bb      	str	r3, [r7, #8]
      break;
 8006286:	e089      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006288:	4b47      	ldr	r3, [pc, #284]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006290:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006292:	4b45      	ldr	r3, [pc, #276]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d023      	beq.n	80062e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800629e:	4b42      	ldr	r3, [pc, #264]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	099b      	lsrs	r3, r3, #6
 80062a4:	f04f 0400 	mov.w	r4, #0
 80062a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	ea03 0501 	and.w	r5, r3, r1
 80062b4:	ea04 0602 	and.w	r6, r4, r2
 80062b8:	4a3d      	ldr	r2, [pc, #244]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80062ba:	fb02 f106 	mul.w	r1, r2, r6
 80062be:	2200      	movs	r2, #0
 80062c0:	fb02 f205 	mul.w	r2, r2, r5
 80062c4:	440a      	add	r2, r1
 80062c6:	493a      	ldr	r1, [pc, #232]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80062c8:	fba5 0101 	umull	r0, r1, r5, r1
 80062cc:	1853      	adds	r3, r2, r1
 80062ce:	4619      	mov	r1, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f04f 0400 	mov.w	r4, #0
 80062d6:	461a      	mov	r2, r3
 80062d8:	4623      	mov	r3, r4
 80062da:	f7f9 ffe9 	bl	80002b0 <__aeabi_uldivmod>
 80062de:	4603      	mov	r3, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e049      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e6:	4b30      	ldr	r3, [pc, #192]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	099b      	lsrs	r3, r3, #6
 80062ec:	f04f 0400 	mov.w	r4, #0
 80062f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	ea03 0501 	and.w	r5, r3, r1
 80062fc:	ea04 0602 	and.w	r6, r4, r2
 8006300:	4629      	mov	r1, r5
 8006302:	4632      	mov	r2, r6
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	f04f 0400 	mov.w	r4, #0
 800630c:	0154      	lsls	r4, r2, #5
 800630e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006312:	014b      	lsls	r3, r1, #5
 8006314:	4619      	mov	r1, r3
 8006316:	4622      	mov	r2, r4
 8006318:	1b49      	subs	r1, r1, r5
 800631a:	eb62 0206 	sbc.w	r2, r2, r6
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 0400 	mov.w	r4, #0
 8006326:	0194      	lsls	r4, r2, #6
 8006328:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800632c:	018b      	lsls	r3, r1, #6
 800632e:	1a5b      	subs	r3, r3, r1
 8006330:	eb64 0402 	sbc.w	r4, r4, r2
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	00e2      	lsls	r2, r4, #3
 800633e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006342:	00d9      	lsls	r1, r3, #3
 8006344:	460b      	mov	r3, r1
 8006346:	4614      	mov	r4, r2
 8006348:	195b      	adds	r3, r3, r5
 800634a:	eb44 0406 	adc.w	r4, r4, r6
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	02a2      	lsls	r2, r4, #10
 8006358:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800635c:	0299      	lsls	r1, r3, #10
 800635e:	460b      	mov	r3, r1
 8006360:	4614      	mov	r4, r2
 8006362:	4618      	mov	r0, r3
 8006364:	4621      	mov	r1, r4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f04f 0400 	mov.w	r4, #0
 800636c:	461a      	mov	r2, r3
 800636e:	4623      	mov	r3, r4
 8006370:	f7f9 ff9e 	bl	80002b0 <__aeabi_uldivmod>
 8006374:	4603      	mov	r3, r0
 8006376:	460c      	mov	r4, r1
 8006378:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	3301      	adds	r3, #1
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	60bb      	str	r3, [r7, #8]
      break;
 8006394:	e002      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8006398:	60bb      	str	r3, [r7, #8]
      break;
 800639a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800639c:	68bb      	ldr	r3, [r7, #8]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40023800 	.word	0x40023800
 80063ac:	00f42400 	.word	0x00f42400
 80063b0:	017d7840 	.word	0x017d7840

080063b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000000 	.word	0x20000000

080063cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063d0:	f7ff fff0 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063d4:	4601      	mov	r1, r0
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	0a9b      	lsrs	r3, r3, #10
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	4a03      	ldr	r2, [pc, #12]	; (80063f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063e2:	5cd3      	ldrb	r3, [r2, r3]
 80063e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40023800 	.word	0x40023800
 80063f0:	0800a314 	.word	0x0800a314

080063f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	220f      	movs	r2, #15
 8006402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0203 	and.w	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	08db      	lsrs	r3, r3, #3
 800642e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <HAL_RCC_GetClockConfig+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 020f 	and.w	r2, r3, #15
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40023800 	.word	0x40023800
 8006454:	40023c00 	.word	0x40023c00

08006458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e01d      	b.n	80064a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fa fb6e 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f000 fa38 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b06      	cmp	r3, #6
 80064ce:	d007      	beq.n	80064e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b06      	cmp	r3, #6
 800651e:	d007      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d122      	bne.n	800659a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d11b      	bne.n	800659a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f06f 0202 	mvn.w	r2, #2
 800656a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f9a5 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 8006586:	e005      	b.n	8006594 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f997 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9a8 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d122      	bne.n	80065ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d11b      	bne.n	80065ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f06f 0204 	mvn.w	r2, #4
 80065be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f97b 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 80065da:	e005      	b.n	80065e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f96d 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f97e 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d122      	bne.n	8006642 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b08      	cmp	r3, #8
 8006608:	d11b      	bne.n	8006642 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f06f 0208 	mvn.w	r2, #8
 8006612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2204      	movs	r2, #4
 8006618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f951 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 800662e:	e005      	b.n	800663c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f943 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f954 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b10      	cmp	r3, #16
 800664e:	d122      	bne.n	8006696 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b10      	cmp	r3, #16
 800665c:	d11b      	bne.n	8006696 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f06f 0210 	mvn.w	r2, #16
 8006666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2208      	movs	r2, #8
 800666c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f927 	bl	80068d0 <HAL_TIM_IC_CaptureCallback>
 8006682:	e005      	b.n	8006690 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f919 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f92a 	bl	80068e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10e      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d107      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f06f 0201 	mvn.w	r2, #1
 80066ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fa f951 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b80      	cmp	r3, #128	; 0x80
 80066ce:	d10e      	bne.n	80066ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d107      	bne.n	80066ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 faa1 	bl	8006c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d10e      	bne.n	800671a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d107      	bne.n	800671a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8ef 	bl	80068f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b20      	cmp	r3, #32
 8006726:	d10e      	bne.n	8006746 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b20      	cmp	r3, #32
 8006734:	d107      	bne.n	8006746 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f06f 0220 	mvn.w	r2, #32
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa6b 	bl	8006c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_TIM_ConfigClockSource+0x18>
 8006762:	2302      	movs	r3, #2
 8006764:	e0a6      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x166>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006784:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d067      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x120>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d80b      	bhi.n	80067ba <HAL_TIM_ConfigClockSource+0x6c>
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d073      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x140>
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	d802      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x62>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d06f      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80067ae:	e078      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d06c      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x140>
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d06a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067b8:	e073      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ba:	2b70      	cmp	r3, #112	; 0x70
 80067bc:	d00d      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x8c>
 80067be:	2b70      	cmp	r3, #112	; 0x70
 80067c0:	d804      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x7e>
 80067c2:	2b50      	cmp	r3, #80	; 0x50
 80067c4:	d033      	beq.n	800682e <HAL_TIM_ConfigClockSource+0xe0>
 80067c6:	2b60      	cmp	r3, #96	; 0x60
 80067c8:	d041      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067ca:	e06a      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d0:	d066      	beq.n	80068a0 <HAL_TIM_ConfigClockSource+0x152>
 80067d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d6:	d017      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80067d8:	e063      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6899      	ldr	r1, [r3, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f000 f989 	bl	8006b00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
      break;
 8006806:	e04c      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6899      	ldr	r1, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 f972 	bl	8006b00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682a:	609a      	str	r2, [r3, #8]
      break;
 800682c:	e039      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 f8e6 	bl	8006a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2150      	movs	r1, #80	; 0x50
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f93f 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 800684c:	e029      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 f905 	bl	8006a6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2160      	movs	r1, #96	; 0x60
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f92f 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 800686c:	e019      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 f8c6 	bl	8006a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f91f 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 800688c:	e009      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f000 f916 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 800689e:	e000      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80068a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a34      	ldr	r2, [pc, #208]	; (80069f0 <TIM_Base_SetConfig+0xe4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00f      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d00b      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a31      	ldr	r2, [pc, #196]	; (80069f4 <TIM_Base_SetConfig+0xe8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d007      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a30      	ldr	r2, [pc, #192]	; (80069f8 <TIM_Base_SetConfig+0xec>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2f      	ldr	r2, [pc, #188]	; (80069fc <TIM_Base_SetConfig+0xf0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d108      	bne.n	8006956 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <TIM_Base_SetConfig+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01b      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006964:	d017      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <TIM_Base_SetConfig+0xe8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a21      	ldr	r2, [pc, #132]	; (80069f8 <TIM_Base_SetConfig+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00f      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a20      	ldr	r2, [pc, #128]	; (80069fc <TIM_Base_SetConfig+0xf0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00b      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <TIM_Base_SetConfig+0xf4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <TIM_Base_SetConfig+0xf8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <TIM_Base_SetConfig+0xfc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d108      	bne.n	80069a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <TIM_Base_SetConfig+0xe4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d103      	bne.n	80069dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	615a      	str	r2, [r3, #20]
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f023 0201 	bic.w	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 030a 	bic.w	r3, r3, #10
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0210 	bic.w	r2, r3, #16
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	031b      	lsls	r3, r3, #12
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f043 0307 	orr.w	r3, r3, #7
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	609a      	str	r2, [r3, #8]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	021a      	lsls	r2, r3, #8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	609a      	str	r2, [r3, #8]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e050      	b.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba4:	d013      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d10c      	bne.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40000400 	.word	0x40000400
 8006c10:	40000800 	.word	0x40000800
 8006c14:	40000c00 	.word	0x40000c00
 8006c18:	40014000 	.word	0x40014000

08006c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5a:	f3ef 8305 	mrs	r3, IPSR
 8006c5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10f      	bne.n	8006c86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c66:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6a:	607b      	str	r3, [r7, #4]
  return(result);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d105      	bne.n	8006c7e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c72:	f3ef 8311 	mrs	r3, BASEPRI
 8006c76:	603b      	str	r3, [r7, #0]
  return(result);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <osKernelInitialize+0x3a>
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <osKernelInitialize+0x64>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d103      	bne.n	8006c8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006c86:	f06f 0305 	mvn.w	r3, #5
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e00c      	b.n	8006ca8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <osKernelInitialize+0x64>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d105      	bne.n	8006ca2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c96:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <osKernelInitialize+0x64>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e002      	b.n	8006ca8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	200000e4 	.word	0x200000e4

08006cbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc2:	f3ef 8305 	mrs	r3, IPSR
 8006cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cce:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d105      	bne.n	8006ce6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cda:	f3ef 8311 	mrs	r3, BASEPRI
 8006cde:	603b      	str	r3, [r7, #0]
  return(result);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <osKernelStart+0x3a>
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <osKernelStart+0x68>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d103      	bne.n	8006cf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006cee:	f06f 0305 	mvn.w	r3, #5
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e010      	b.n	8006d18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <osKernelStart+0x68>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d109      	bne.n	8006d12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006cfe:	f7ff ffa1 	bl	8006c44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <osKernelStart+0x68>)
 8006d04:	2202      	movs	r2, #2
 8006d06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d08:	f001 f8bc 	bl	8007e84 <vTaskStartScheduler>
      stat = osOK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e002      	b.n	8006d18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006d12:	f04f 33ff 	mov.w	r3, #4294967295
 8006d16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200000e4 	.word	0x200000e4

08006d28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b090      	sub	sp, #64	; 0x40
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d38:	f3ef 8305 	mrs	r3, IPSR
 8006d3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 808f 	bne.w	8006e64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d46:	f3ef 8310 	mrs	r3, PRIMASK
 8006d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d52:	f3ef 8311 	mrs	r3, BASEPRI
 8006d56:	617b      	str	r3, [r7, #20]
  return(result);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <osThreadNew+0x3e>
 8006d5e:	4b44      	ldr	r3, [pc, #272]	; (8006e70 <osThreadNew+0x148>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d07e      	beq.n	8006e64 <osThreadNew+0x13c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d07b      	beq.n	8006e64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006d70:	2318      	movs	r3, #24
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d045      	beq.n	8006e10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <osThreadNew+0x6a>
        name = attr->name;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <osThreadNew+0x90>
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	2b38      	cmp	r3, #56	; 0x38
 8006daa:	d805      	bhi.n	8006db8 <osThreadNew+0x90>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <osThreadNew+0x94>
        return (NULL);
 8006db8:	2300      	movs	r3, #0
 8006dba:	e054      	b.n	8006e66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	089b      	lsrs	r3, r3, #2
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <osThreadNew+0xca>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b5b      	cmp	r3, #91	; 0x5b
 8006dda:	d90a      	bls.n	8006df2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <osThreadNew+0xca>
        mem = 1;
 8006dec:	2301      	movs	r3, #1
 8006dee:	623b      	str	r3, [r7, #32]
 8006df0:	e010      	b.n	8006e14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10c      	bne.n	8006e14 <osThreadNew+0xec>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d108      	bne.n	8006e14 <osThreadNew+0xec>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <osThreadNew+0xec>
          mem = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e001      	b.n	8006e14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d110      	bne.n	8006e3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e22:	9202      	str	r2, [sp, #8]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fddb 	bl	80079ec <xTaskCreateStatic>
 8006e36:	4603      	mov	r3, r0
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	e013      	b.n	8006e64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d110      	bne.n	8006e64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f107 0310 	add.w	r3, r7, #16
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fe23 	bl	8007aa0 <xTaskCreate>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d001      	beq.n	8006e64 <osThreadNew+0x13c>
          hTask = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e64:	693b      	ldr	r3, [r7, #16]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3730      	adds	r7, #48	; 0x30
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200000e4 	.word	0x200000e4

08006e74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a07      	ldr	r2, [pc, #28]	; (8006ea0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4a06      	ldr	r2, [pc, #24]	; (8006ea4 <vApplicationGetIdleTaskMemory+0x30>)
 8006e8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2280      	movs	r2, #128	; 0x80
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	200000e8 	.word	0x200000e8
 8006ea4:	20000144 	.word	0x20000144

08006ea8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4a07      	ldr	r2, [pc, #28]	; (8006ed4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006eb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4a06      	ldr	r2, [pc, #24]	; (8006ed8 <vApplicationGetTimerTaskMemory+0x30>)
 8006ebe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ec6:	601a      	str	r2, [r3, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20000344 	.word	0x20000344
 8006ed8:	200003a0 	.word	0x200003a0

08006edc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f103 0208 	add.w	r2, r3, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f103 0208 	add.w	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f103 0208 	add.w	r2, r3, #8
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	601a      	str	r2, [r3, #0]
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d103      	bne.n	8006f9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e00c      	b.n	8006fb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	e002      	b.n	8006fac <vListInsert+0x2e>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d2f6      	bcs.n	8006fa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	601a      	str	r2, [r3, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6892      	ldr	r2, [r2, #8]
 8007006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6852      	ldr	r2, [r2, #4]
 8007010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d103      	bne.n	8007024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1e5a      	subs	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d109      	bne.n	800706c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60bb      	str	r3, [r7, #8]
 800706a:	e7fe      	b.n	800706a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800706c:	f002 f88e 	bl	800918c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	441a      	add	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	3b01      	subs	r3, #1
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	441a      	add	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	22ff      	movs	r2, #255	; 0xff
 80070b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	22ff      	movs	r2, #255	; 0xff
 80070b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d114      	bne.n	80070ec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01a      	beq.n	8007100 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3310      	adds	r3, #16
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 f958 	bl	8008384 <xTaskRemoveFromEventList>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d012      	beq.n	8007100 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070da:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <xQueueGenericReset+0xcc>)
 80070dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	e009      	b.n	8007100 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3310      	adds	r3, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff fef3 	bl	8006edc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3324      	adds	r3, #36	; 0x24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff feee 	bl	8006edc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007100:	f002 f872 	bl	80091e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007104:	2301      	movs	r3, #1
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08e      	sub	sp, #56	; 0x38
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <xQueueGenericCreateStatic+0x28>
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
 800713a:	e7fe      	b.n	800713a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <xQueueGenericCreateStatic+0x42>
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
 8007154:	e7fe      	b.n	8007154 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <xQueueGenericCreateStatic+0x4e>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <xQueueGenericCreateStatic+0x52>
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <xQueueGenericCreateStatic+0x54>
 8007166:	2300      	movs	r3, #0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <xQueueGenericCreateStatic+0x6c>
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	623b      	str	r3, [r7, #32]
 800717e:	e7fe      	b.n	800717e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <xQueueGenericCreateStatic+0x78>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <xQueueGenericCreateStatic+0x7c>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <xQueueGenericCreateStatic+0x7e>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <xQueueGenericCreateStatic+0x96>
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e7fe      	b.n	80071a8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071aa:	2350      	movs	r3, #80	; 0x50
 80071ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b50      	cmp	r3, #80	; 0x50
 80071b2:	d009      	beq.n	80071c8 <xQueueGenericCreateStatic+0xb4>
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e7fe      	b.n	80071c6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00d      	beq.n	80071f0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4613      	mov	r3, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f805 	bl	80071fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3730      	adds	r7, #48	; 0x30
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e002      	b.n	800721c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007228:	2101      	movs	r1, #1
 800722a:	69b8      	ldr	r0, [r7, #24]
 800722c:	f7ff ff0a 	bl	8007044 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	78fa      	ldrb	r2, [r7, #3]
 8007234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08e      	sub	sp, #56	; 0x38
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800724e:	2300      	movs	r3, #0
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <xQueueGenericSend+0x30>
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
 800726e:	e7fe      	b.n	800726e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <xQueueGenericSend+0x3e>
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <xQueueGenericSend+0x42>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <xQueueGenericSend+0x44>
 8007282:	2300      	movs	r3, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d109      	bne.n	800729c <xQueueGenericSend+0x5c>
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
 800729a:	e7fe      	b.n	800729a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d103      	bne.n	80072aa <xQueueGenericSend+0x6a>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <xQueueGenericSend+0x6e>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <xQueueGenericSend+0x70>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <xQueueGenericSend+0x88>
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	e7fe      	b.n	80072c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c8:	f001 fa12 	bl	80086f0 <xTaskGetSchedulerState>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <xQueueGenericSend+0x98>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <xQueueGenericSend+0x9c>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <xQueueGenericSend+0x9e>
 80072dc:	2300      	movs	r3, #0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <xQueueGenericSend+0xb6>
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e7fe      	b.n	80072f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072f6:	f001 ff49 	bl	800918c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <xQueueGenericSend+0xcc>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d129      	bne.n	8007360 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007312:	f000 f9ff 	bl	8007714 <prvCopyDataToQueue>
 8007316:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	d010      	beq.n	8007342 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	3324      	adds	r3, #36	; 0x24
 8007324:	4618      	mov	r0, r3
 8007326:	f001 f82d 	bl	8008384 <xTaskRemoveFromEventList>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d013      	beq.n	8007358 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007330:	4b3f      	ldr	r3, [pc, #252]	; (8007430 <xQueueGenericSend+0x1f0>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	e00a      	b.n	8007358 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007348:	4b39      	ldr	r3, [pc, #228]	; (8007430 <xQueueGenericSend+0x1f0>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007358:	f001 ff46 	bl	80091e8 <vPortExitCritical>
				return pdPASS;
 800735c:	2301      	movs	r3, #1
 800735e:	e063      	b.n	8007428 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007366:	f001 ff3f 	bl	80091e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800736a:	2300      	movs	r3, #0
 800736c:	e05c      	b.n	8007428 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	4618      	mov	r0, r3
 800737a:	f001 f865 	bl	8008448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800737e:	2301      	movs	r3, #1
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007382:	f001 ff31 	bl	80091e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007386:	f000 fde1 	bl	8007f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800738a:	f001 feff 	bl	800918c <vPortEnterCritical>
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007394:	b25b      	sxtb	r3, r3
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739a:	d103      	bne.n	80073a4 <xQueueGenericSend+0x164>
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b0:	d103      	bne.n	80073ba <xQueueGenericSend+0x17a>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ba:	f001 ff15 	bl	80091e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073be:	1d3a      	adds	r2, r7, #4
 80073c0:	f107 0314 	add.w	r3, r7, #20
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 f854 	bl	8008474 <xTaskCheckForTimeOut>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d124      	bne.n	800741c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d4:	f000 fa96 	bl	8007904 <prvIsQueueFull>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	3310      	adds	r3, #16
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 ff7e 	bl	80082e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ee:	f000 fa21 	bl	8007834 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073f2:	f000 fdb9 	bl	8007f68 <xTaskResumeAll>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f af7c 	bne.w	80072f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <xQueueGenericSend+0x1f0>)
 8007400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	e772      	b.n	80072f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007412:	f000 fa0f 	bl	8007834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007416:	f000 fda7 	bl	8007f68 <xTaskResumeAll>
 800741a:	e76c      	b.n	80072f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800741c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741e:	f000 fa09 	bl	8007834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007422:	f000 fda1 	bl	8007f68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007428:	4618      	mov	r0, r3
 800742a:	3738      	adds	r7, #56	; 0x38
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08e      	sub	sp, #56	; 0x38
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <xQueueGenericSendFromISR+0x2c>
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
 800745e:	e7fe      	b.n	800745e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <xQueueGenericSendFromISR+0x3a>
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <xQueueGenericSendFromISR+0x3e>
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <xQueueGenericSendFromISR+0x40>
 8007472:	2300      	movs	r3, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <xQueueGenericSendFromISR+0x58>
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	e7fe      	b.n	800748a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d103      	bne.n	800749a <xQueueGenericSendFromISR+0x66>
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <xQueueGenericSendFromISR+0x6a>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <xQueueGenericSendFromISR+0x6c>
 800749e:	2300      	movs	r3, #0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <xQueueGenericSendFromISR+0x84>
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	e7fe      	b.n	80074b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074b8:	f001 ff44 	bl	8009344 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074bc:	f3ef 8211 	mrs	r2, BASEPRI
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	61ba      	str	r2, [r7, #24]
 80074d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d302      	bcc.n	80074ea <xQueueGenericSendFromISR+0xb6>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d12c      	bne.n	8007544 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074fa:	f000 f90b 	bl	8007714 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d112      	bne.n	800752e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b00      	cmp	r3, #0
 800750e:	d016      	beq.n	800753e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	4618      	mov	r0, r3
 8007516:	f000 ff35 	bl	8008384 <xTaskRemoveFromEventList>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00e      	beq.n	800753e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	e007      	b.n	800753e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800752e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007532:	3301      	adds	r3, #1
 8007534:	b2db      	uxtb	r3, r3
 8007536:	b25a      	sxtb	r2, r3
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800753e:	2301      	movs	r3, #1
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007542:	e001      	b.n	8007548 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007544:	2300      	movs	r3, #0
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007554:	4618      	mov	r0, r3
 8007556:	3738      	adds	r7, #56	; 0x38
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08c      	sub	sp, #48	; 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007568:	2300      	movs	r3, #0
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <xQueueReceive+0x2e>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	e7fe      	b.n	8007588 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <xQueueReceive+0x3c>
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <xQueueReceive+0x40>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <xQueueReceive+0x42>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <xQueueReceive+0x5a>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	e7fe      	b.n	80075b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b6:	f001 f89b 	bl	80086f0 <xTaskGetSchedulerState>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d102      	bne.n	80075c6 <xQueueReceive+0x6a>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <xQueueReceive+0x6e>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <xQueueReceive+0x70>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <xQueueReceive+0x88>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	e7fe      	b.n	80075e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e4:	f001 fdd2 	bl	800918c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01f      	beq.n	8007634 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f8:	f000 f8f6 	bl	80077e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	1e5a      	subs	r2, r3, #1
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00f      	beq.n	800762c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	3310      	adds	r3, #16
 8007610:	4618      	mov	r0, r3
 8007612:	f000 feb7 	bl	8008384 <xTaskRemoveFromEventList>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800761c:	4b3c      	ldr	r3, [pc, #240]	; (8007710 <xQueueReceive+0x1b4>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800762c:	f001 fddc 	bl	80091e8 <vPortExitCritical>
				return pdPASS;
 8007630:	2301      	movs	r3, #1
 8007632:	e069      	b.n	8007708 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d103      	bne.n	8007642 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800763a:	f001 fdd5 	bl	80091e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800763e:	2300      	movs	r3, #0
 8007640:	e062      	b.n	8007708 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007648:	f107 0310 	add.w	r3, r7, #16
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fefb 	bl	8008448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007652:	2301      	movs	r3, #1
 8007654:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007656:	f001 fdc7 	bl	80091e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800765a:	f000 fc77 	bl	8007f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800765e:	f001 fd95 	bl	800918c <vPortEnterCritical>
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007668:	b25b      	sxtb	r3, r3
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d103      	bne.n	8007678 <xQueueReceive+0x11c>
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800767e:	b25b      	sxtb	r3, r3
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d103      	bne.n	800768e <xQueueReceive+0x132>
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800768e:	f001 fdab 	bl	80091e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007692:	1d3a      	adds	r2, r7, #4
 8007694:	f107 0310 	add.w	r3, r7, #16
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f000 feea 	bl	8008474 <xTaskCheckForTimeOut>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d123      	bne.n	80076ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a8:	f000 f916 	bl	80078d8 <prvIsQueueEmpty>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d017      	beq.n	80076e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	3324      	adds	r3, #36	; 0x24
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4611      	mov	r1, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fe14 	bl	80082e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c2:	f000 f8b7 	bl	8007834 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076c6:	f000 fc4f 	bl	8007f68 <xTaskResumeAll>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d189      	bne.n	80075e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <xQueueReceive+0x1b4>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	e780      	b.n	80075e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e4:	f000 f8a6 	bl	8007834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076e8:	f000 fc3e 	bl	8007f68 <xTaskResumeAll>
 80076ec:	e77a      	b.n	80075e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f0:	f000 f8a0 	bl	8007834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076f4:	f000 fc38 	bl	8007f68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076fa:	f000 f8ed 	bl	80078d8 <prvIsQueueEmpty>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	f43f af6f 	beq.w	80075e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007706:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007708:	4618      	mov	r0, r3
 800770a:	3730      	adds	r7, #48	; 0x30
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d14d      	bne.n	80077d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fff4 	bl	800872c <xTaskPriorityDisinherit>
 8007744:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	609a      	str	r2, [r3, #8]
 800774c:	e043      	b.n	80077d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d119      	bne.n	8007788 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6858      	ldr	r0, [r3, #4]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	461a      	mov	r2, r3
 800775e:	68b9      	ldr	r1, [r7, #8]
 8007760:	f002 f82e 	bl	80097c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	441a      	add	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	429a      	cmp	r2, r3
 800777c:	d32b      	bcc.n	80077d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	e026      	b.n	80077d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68d8      	ldr	r0, [r3, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	461a      	mov	r2, r3
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	f002 f814 	bl	80097c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	425b      	negs	r3, r3
 80077a2:	441a      	add	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d207      	bcs.n	80077c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	425b      	negs	r3, r3
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d105      	bne.n	80077d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077de:	697b      	ldr	r3, [r7, #20]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	d303      	bcc.n	800781c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68d9      	ldr	r1, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	461a      	mov	r2, r3
 8007826:	6838      	ldr	r0, [r7, #0]
 8007828:	f001 ffca 	bl	80097c0 <memcpy>
	}
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800783c:	f001 fca6 	bl	800918c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007846:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007848:	e011      	b.n	800786e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d012      	beq.n	8007878 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3324      	adds	r3, #36	; 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fd94 	bl	8008384 <xTaskRemoveFromEventList>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007862:	f000 fe67 	bl	8008534 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	3b01      	subs	r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800786e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	dce9      	bgt.n	800784a <prvUnlockQueue+0x16>
 8007876:	e000      	b.n	800787a <prvUnlockQueue+0x46>
					break;
 8007878:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	22ff      	movs	r2, #255	; 0xff
 800787e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007882:	f001 fcb1 	bl	80091e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007886:	f001 fc81 	bl	800918c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007890:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007892:	e011      	b.n	80078b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d012      	beq.n	80078c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3310      	adds	r3, #16
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fd6f 	bl	8008384 <xTaskRemoveFromEventList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078ac:	f000 fe42 	bl	8008534 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dce9      	bgt.n	8007894 <prvUnlockQueue+0x60>
 80078c0:	e000      	b.n	80078c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	22ff      	movs	r2, #255	; 0xff
 80078c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078cc:	f001 fc8c 	bl	80091e8 <vPortExitCritical>
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078e0:	f001 fc54 	bl	800918c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	e001      	b.n	80078f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078f6:	f001 fc77 	bl	80091e8 <vPortExitCritical>

	return xReturn;
 80078fa:	68fb      	ldr	r3, [r7, #12]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800790c:	f001 fc3e 	bl	800918c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	429a      	cmp	r2, r3
 800791a:	d102      	bne.n	8007922 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e001      	b.n	8007926 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007926:	f001 fc5f 	bl	80091e8 <vPortExitCritical>

	return xReturn;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e014      	b.n	800796e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007944:	4a0e      	ldr	r2, [pc, #56]	; (8007980 <vQueueAddToRegistry+0x4c>)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007950:	490b      	ldr	r1, [pc, #44]	; (8007980 <vQueueAddToRegistry+0x4c>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800795a:	4a09      	ldr	r2, [pc, #36]	; (8007980 <vQueueAddToRegistry+0x4c>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4413      	add	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007966:	e005      	b.n	8007974 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b07      	cmp	r3, #7
 8007972:	d9e7      	bls.n	8007944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	2000865c 	.word	0x2000865c

08007984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007994:	f001 fbfa 	bl	800918c <vPortEnterCritical>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d103      	bne.n	80079ae <vQueueWaitForMessageRestricted+0x2a>
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d103      	bne.n	80079c4 <vQueueWaitForMessageRestricted+0x40>
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c4:	f001 fc10 	bl	80091e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	3324      	adds	r3, #36	; 0x24
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fca9 	bl	8008330 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f7ff ff28 	bl	8007834 <prvUnlockQueue>
	}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	; 0x38
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d109      	bne.n	8007a14 <xTaskCreateStatic+0x28>
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	623b      	str	r3, [r7, #32]
 8007a12:	e7fe      	b.n	8007a12 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <xTaskCreateStatic+0x42>
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e7fe      	b.n	8007a2c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a2e:	235c      	movs	r3, #92	; 0x5c
 8007a30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b5c      	cmp	r3, #92	; 0x5c
 8007a36:	d009      	beq.n	8007a4c <xTaskCreateStatic+0x60>
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	e7fe      	b.n	8007a4a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01e      	beq.n	8007a92 <xTaskCreateStatic+0xa6>
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01b      	beq.n	8007a92 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f850 	bl	8007b2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a8c:	f000 f8dc 	bl	8007c48 <prvAddNewTaskToReadyList>
 8007a90:	e001      	b.n	8007a96 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a96:	697b      	ldr	r3, [r7, #20]
	}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af04      	add	r7, sp, #16
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fc83 	bl	80093c0 <pvPortMalloc>
 8007aba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00e      	beq.n	8007ae0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ac2:	205c      	movs	r0, #92	; 0x5c
 8007ac4:	f001 fc7c 	bl	80093c0 <pvPortMalloc>
 8007ac8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad6:	e005      	b.n	8007ae4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ad8:	6978      	ldr	r0, [r7, #20]
 8007ada:	f001 fd33 	bl	8009544 <vPortFree>
 8007ade:	e001      	b.n	8007ae4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	2300      	movs	r3, #0
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f80e 	bl	8007b2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b0e:	69f8      	ldr	r0, [r7, #28]
 8007b10:	f000 f89a 	bl	8007c48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b14:	2301      	movs	r3, #1
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	e002      	b.n	8007b20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b20:	69bb      	ldr	r3, [r7, #24]
	}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3720      	adds	r7, #32
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b088      	sub	sp, #32
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	461a      	mov	r2, r3
 8007b42:	21a5      	movs	r1, #165	; 0xa5
 8007b44:	f001 fe47 	bl	80097d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b52:	3b01      	subs	r3, #1
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <prvInitialiseNewTask+0x56>
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	e7fe      	b.n	8007b7e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01f      	beq.n	8007bc6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	e012      	b.n	8007bb2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	7819      	ldrb	r1, [r3, #0]
 8007b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3334      	adds	r3, #52	; 0x34
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d9e9      	bls.n	8007b8c <prvInitialiseNewTask+0x62>
 8007bb8:	e000      	b.n	8007bbc <prvInitialiseNewTask+0x92>
			{
				break;
 8007bba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bc4:	e003      	b.n	8007bce <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	2b37      	cmp	r3, #55	; 0x37
 8007bd2:	d901      	bls.n	8007bd8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bd4:	2337      	movs	r3, #55	; 0x37
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	2200      	movs	r2, #0
 8007be8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff f994 	bl	8006f1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	3318      	adds	r3, #24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff f98f 	bl	8006f1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	2200      	movs	r2, #0
 8007c18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	69b8      	ldr	r0, [r7, #24]
 8007c28:	f001 f986 	bl	8008f38 <pxPortInitialiseStack>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c50:	f001 fa9c 	bl	800918c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c54:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <prvAddNewTaskToReadyList+0xc4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	4a2c      	ldr	r2, [pc, #176]	; (8007d0c <prvAddNewTaskToReadyList+0xc4>)
 8007c5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c5e:	4b2c      	ldr	r3, [pc, #176]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c66:	4a2a      	ldr	r2, [pc, #168]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c6c:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <prvAddNewTaskToReadyList+0xc4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d110      	bne.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c74:	f000 fc82 	bl	800857c <prvInitialiseTaskLists>
 8007c78:	e00d      	b.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c7a:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <prvAddNewTaskToReadyList+0xcc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c82:	4b23      	ldr	r3, [pc, #140]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d802      	bhi.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c90:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c96:	4b20      	ldr	r3, [pc, #128]	; (8007d18 <prvAddNewTaskToReadyList+0xd0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <prvAddNewTaskToReadyList+0xd0>)
 8007c9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <prvAddNewTaskToReadyList+0xd0>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <prvAddNewTaskToReadyList+0xd4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d903      	bls.n	8007cbc <prvAddNewTaskToReadyList+0x74>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <prvAddNewTaskToReadyList+0xd4>)
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4a15      	ldr	r2, [pc, #84]	; (8007d20 <prvAddNewTaskToReadyList+0xd8>)
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f7ff f92f 	bl	8006f36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cd8:	f001 fa86 	bl	80091e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <prvAddNewTaskToReadyList+0xcc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00e      	beq.n	8007d02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d207      	bcs.n	8007d02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <prvAddNewTaskToReadyList+0xdc>)
 8007cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000c74 	.word	0x20000c74
 8007d10:	200007a0 	.word	0x200007a0
 8007d14:	20000c80 	.word	0x20000c80
 8007d18:	20000c90 	.word	0x20000c90
 8007d1c:	20000c7c 	.word	0x20000c7c
 8007d20:	200007a4 	.word	0x200007a4
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08a      	sub	sp, #40	; 0x28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <vTaskDelayUntil+0x28>
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e7fe      	b.n	8007d4e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <vTaskDelayUntil+0x42>
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	e7fe      	b.n	8007d68 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8007d6a:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <vTaskDelayUntil+0xe8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d009      	beq.n	8007d86 <vTaskDelayUntil+0x5e>
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e7fe      	b.n	8007d84 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8007d86:	f000 f8e1 	bl	8007f4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007d8a:	4b22      	ldr	r3, [pc, #136]	; (8007e14 <vTaskDelayUntil+0xec>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	4413      	add	r3, r2
 8007d98:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d20b      	bcs.n	8007dbc <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d211      	bcs.n	8007dd2 <vTaskDelayUntil+0xaa>
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d90d      	bls.n	8007dd2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007db6:	2301      	movs	r3, #1
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e00a      	b.n	8007dd2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69fa      	ldr	r2, [r7, #28]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d303      	bcc.n	8007dce <vTaskDelayUntil+0xa6>
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d901      	bls.n	8007dd2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69fa      	ldr	r2, [r7, #28]
 8007dd6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d006      	beq.n	8007dec <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fd0c 	bl	8008804 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007dec:	f000 f8bc 	bl	8007f68 <xTaskResumeAll>
 8007df0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d107      	bne.n	8007e08 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <vTaskDelayUntil+0xf0>)
 8007dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e08:	bf00      	nop
 8007e0a:	3728      	adds	r7, #40	; 0x28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000c9c 	.word	0x20000c9c
 8007e14:	20000c78 	.word	0x20000c78
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d016      	beq.n	8007e5c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <vTaskDelay+0x60>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <vTaskDelay+0x2e>
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60bb      	str	r3, [r7, #8]
 8007e48:	e7fe      	b.n	8007e48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007e4a:	f000 f87f 	bl	8007f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e4e:	2100      	movs	r1, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fcd7 	bl	8008804 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e56:	f000 f887 	bl	8007f68 <xTaskResumeAll>
 8007e5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007e62:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <vTaskDelay+0x64>)
 8007e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000c9c 	.word	0x20000c9c
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08a      	sub	sp, #40	; 0x28
 8007e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e92:	463a      	mov	r2, r7
 8007e94:	1d39      	adds	r1, r7, #4
 8007e96:	f107 0308 	add.w	r3, r7, #8
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe ffea 	bl	8006e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	9202      	str	r2, [sp, #8]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	4920      	ldr	r1, [pc, #128]	; (8007f34 <vTaskStartScheduler+0xb0>)
 8007eb4:	4820      	ldr	r0, [pc, #128]	; (8007f38 <vTaskStartScheduler+0xb4>)
 8007eb6:	f7ff fd99 	bl	80079ec <xTaskCreateStatic>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	4b1f      	ldr	r3, [pc, #124]	; (8007f3c <vTaskStartScheduler+0xb8>)
 8007ebe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <vTaskStartScheduler+0xb8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e001      	b.n	8007ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d102      	bne.n	8007ede <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ed8:	f000 fce8 	bl	80088ac <xTimerCreateTimerTask>
 8007edc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d115      	bne.n	8007f10 <vTaskStartScheduler+0x8c>
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <vTaskStartScheduler+0xbc>)
 8007ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8007efc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <vTaskStartScheduler+0xc0>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f04:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <vTaskStartScheduler+0xc4>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f0a:	f001 f8a1 	bl	8009050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f0e:	e00d      	b.n	8007f2c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f16:	d109      	bne.n	8007f2c <vTaskStartScheduler+0xa8>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	e7fe      	b.n	8007f2a <vTaskStartScheduler+0xa6>
}
 8007f2c:	bf00      	nop
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0800a2c8 	.word	0x0800a2c8
 8007f38:	0800854d 	.word	0x0800854d
 8007f3c:	20000c98 	.word	0x20000c98
 8007f40:	20000c94 	.word	0x20000c94
 8007f44:	20000c80 	.word	0x20000c80
 8007f48:	20000c78 	.word	0x20000c78

08007f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <vTaskSuspendAll+0x18>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	4a03      	ldr	r2, [pc, #12]	; (8007f64 <vTaskSuspendAll+0x18>)
 8007f58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007f5a:	bf00      	nop
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	20000c9c 	.word	0x20000c9c

08007f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f76:	4b41      	ldr	r3, [pc, #260]	; (800807c <xTaskResumeAll+0x114>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <xTaskResumeAll+0x2a>
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	e7fe      	b.n	8007f90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f92:	f001 f8fb 	bl	800918c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f96:	4b39      	ldr	r3, [pc, #228]	; (800807c <xTaskResumeAll+0x114>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	4a37      	ldr	r2, [pc, #220]	; (800807c <xTaskResumeAll+0x114>)
 8007f9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa0:	4b36      	ldr	r3, [pc, #216]	; (800807c <xTaskResumeAll+0x114>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d162      	bne.n	800806e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fa8:	4b35      	ldr	r3, [pc, #212]	; (8008080 <xTaskResumeAll+0x118>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d05e      	beq.n	800806e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fb0:	e02f      	b.n	8008012 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb2:	4b34      	ldr	r3, [pc, #208]	; (8008084 <xTaskResumeAll+0x11c>)
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff f816 	bl	8006ff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff f811 	bl	8006ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	4b2d      	ldr	r3, [pc, #180]	; (8008088 <xTaskResumeAll+0x120>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d903      	bls.n	8007fe2 <xTaskResumeAll+0x7a>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	4a2a      	ldr	r2, [pc, #168]	; (8008088 <xTaskResumeAll+0x120>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4a27      	ldr	r2, [pc, #156]	; (800808c <xTaskResumeAll+0x124>)
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fe ff9c 	bl	8006f36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008002:	4b23      	ldr	r3, [pc, #140]	; (8008090 <xTaskResumeAll+0x128>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800800c:	4b21      	ldr	r3, [pc, #132]	; (8008094 <xTaskResumeAll+0x12c>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <xTaskResumeAll+0x11c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1cb      	bne.n	8007fb2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008020:	f000 fb46 	bl	80086b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008024:	4b1c      	ldr	r3, [pc, #112]	; (8008098 <xTaskResumeAll+0x130>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d010      	beq.n	8008052 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008030:	f000 f846 	bl	80080c0 <xTaskIncrementTick>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <xTaskResumeAll+0x12c>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3b01      	subs	r3, #1
 8008044:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f1      	bne.n	8008030 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800804c:	4b12      	ldr	r3, [pc, #72]	; (8008098 <xTaskResumeAll+0x130>)
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008052:	4b10      	ldr	r3, [pc, #64]	; (8008094 <xTaskResumeAll+0x12c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d009      	beq.n	800806e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800805a:	2301      	movs	r3, #1
 800805c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <xTaskResumeAll+0x134>)
 8008060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800806e:	f001 f8bb 	bl	80091e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008072:	68bb      	ldr	r3, [r7, #8]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000c9c 	.word	0x20000c9c
 8008080:	20000c74 	.word	0x20000c74
 8008084:	20000c34 	.word	0x20000c34
 8008088:	20000c7c 	.word	0x20000c7c
 800808c:	200007a4 	.word	0x200007a4
 8008090:	200007a0 	.word	0x200007a0
 8008094:	20000c88 	.word	0x20000c88
 8008098:	20000c84 	.word	0x20000c84
 800809c:	e000ed04 	.word	0xe000ed04

080080a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <xTaskGetTickCount+0x1c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080ac:	687b      	ldr	r3, [r7, #4]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000c78 	.word	0x20000c78

080080c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ca:	4b4e      	ldr	r3, [pc, #312]	; (8008204 <xTaskIncrementTick+0x144>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 8088 	bne.w	80081e4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080d4:	4b4c      	ldr	r3, [pc, #304]	; (8008208 <xTaskIncrementTick+0x148>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3301      	adds	r3, #1
 80080da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080dc:	4a4a      	ldr	r2, [pc, #296]	; (8008208 <xTaskIncrementTick+0x148>)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11f      	bne.n	8008128 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80080e8:	4b48      	ldr	r3, [pc, #288]	; (800820c <xTaskIncrementTick+0x14c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <xTaskIncrementTick+0x46>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	e7fe      	b.n	8008104 <xTaskIncrementTick+0x44>
 8008106:	4b41      	ldr	r3, [pc, #260]	; (800820c <xTaskIncrementTick+0x14c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	4b40      	ldr	r3, [pc, #256]	; (8008210 <xTaskIncrementTick+0x150>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a3e      	ldr	r2, [pc, #248]	; (800820c <xTaskIncrementTick+0x14c>)
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	4a3e      	ldr	r2, [pc, #248]	; (8008210 <xTaskIncrementTick+0x150>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	4b3e      	ldr	r3, [pc, #248]	; (8008214 <xTaskIncrementTick+0x154>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3301      	adds	r3, #1
 8008120:	4a3c      	ldr	r2, [pc, #240]	; (8008214 <xTaskIncrementTick+0x154>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	f000 fac4 	bl	80086b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008128:	4b3b      	ldr	r3, [pc, #236]	; (8008218 <xTaskIncrementTick+0x158>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d349      	bcc.n	80081c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008132:	4b36      	ldr	r3, [pc, #216]	; (800820c <xTaskIncrementTick+0x14c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813c:	4b36      	ldr	r3, [pc, #216]	; (8008218 <xTaskIncrementTick+0x158>)
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	601a      	str	r2, [r3, #0]
					break;
 8008144:	e03f      	b.n	80081c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008146:	4b31      	ldr	r3, [pc, #196]	; (800820c <xTaskIncrementTick+0x14c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	429a      	cmp	r2, r3
 800815c:	d203      	bcs.n	8008166 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800815e:	4a2e      	ldr	r2, [pc, #184]	; (8008218 <xTaskIncrementTick+0x158>)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008164:	e02f      	b.n	80081c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	3304      	adds	r3, #4
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe ff40 	bl	8006ff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3318      	adds	r3, #24
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe ff37 	bl	8006ff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008186:	4b25      	ldr	r3, [pc, #148]	; (800821c <xTaskIncrementTick+0x15c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d903      	bls.n	8008196 <xTaskIncrementTick+0xd6>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	4a22      	ldr	r2, [pc, #136]	; (800821c <xTaskIncrementTick+0x15c>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a1f      	ldr	r2, [pc, #124]	; (8008220 <xTaskIncrementTick+0x160>)
 80081a4:	441a      	add	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fe fec2 	bl	8006f36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <xTaskIncrementTick+0x164>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	429a      	cmp	r2, r3
 80081be:	d3b8      	bcc.n	8008132 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c4:	e7b5      	b.n	8008132 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081c6:	4b17      	ldr	r3, [pc, #92]	; (8008224 <xTaskIncrementTick+0x164>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4914      	ldr	r1, [pc, #80]	; (8008220 <xTaskIncrementTick+0x160>)
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d907      	bls.n	80081ee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80081de:	2301      	movs	r3, #1
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	e004      	b.n	80081ee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <xTaskIncrementTick+0x168>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	4a0f      	ldr	r2, [pc, #60]	; (8008228 <xTaskIncrementTick+0x168>)
 80081ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <xTaskIncrementTick+0x16c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80081f6:	2301      	movs	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80081fa:	697b      	ldr	r3, [r7, #20]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000c9c 	.word	0x20000c9c
 8008208:	20000c78 	.word	0x20000c78
 800820c:	20000c2c 	.word	0x20000c2c
 8008210:	20000c30 	.word	0x20000c30
 8008214:	20000c8c 	.word	0x20000c8c
 8008218:	20000c94 	.word	0x20000c94
 800821c:	20000c7c 	.word	0x20000c7c
 8008220:	200007a4 	.word	0x200007a4
 8008224:	200007a0 	.word	0x200007a0
 8008228:	20000c84 	.word	0x20000c84
 800822c:	20000c88 	.word	0x20000c88

08008230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008236:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <vTaskSwitchContext+0xa4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800823e:	4b26      	ldr	r3, [pc, #152]	; (80082d8 <vTaskSwitchContext+0xa8>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008244:	e040      	b.n	80082c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008246:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <vTaskSwitchContext+0xa8>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824c:	4b23      	ldr	r3, [pc, #140]	; (80082dc <vTaskSwitchContext+0xac>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e00f      	b.n	8008274 <vTaskSwitchContext+0x44>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <vTaskSwitchContext+0x3e>
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	607b      	str	r3, [r7, #4]
 800826c:	e7fe      	b.n	800826c <vTaskSwitchContext+0x3c>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3b01      	subs	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	491a      	ldr	r1, [pc, #104]	; (80082e0 <vTaskSwitchContext+0xb0>)
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0e5      	beq.n	8008254 <vTaskSwitchContext+0x24>
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4a13      	ldr	r2, [pc, #76]	; (80082e0 <vTaskSwitchContext+0xb0>)
 8008294:	4413      	add	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	605a      	str	r2, [r3, #4]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	3308      	adds	r3, #8
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d104      	bne.n	80082b8 <vTaskSwitchContext+0x88>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	605a      	str	r2, [r3, #4]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <vTaskSwitchContext+0xb4>)
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	4a06      	ldr	r2, [pc, #24]	; (80082dc <vTaskSwitchContext+0xac>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6013      	str	r3, [r2, #0]
}
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	20000c9c 	.word	0x20000c9c
 80082d8:	20000c88 	.word	0x20000c88
 80082dc:	20000c7c 	.word	0x20000c7c
 80082e0:	200007a4 	.word	0x200007a4
 80082e4:	200007a0 	.word	0x200007a0

080082e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <vTaskPlaceOnEventList+0x24>
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e7fe      	b.n	800830a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800830c:	4b07      	ldr	r3, [pc, #28]	; (800832c <vTaskPlaceOnEventList+0x44>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3318      	adds	r3, #24
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7fe fe32 	bl	8006f7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800831a:	2101      	movs	r1, #1
 800831c:	6838      	ldr	r0, [r7, #0]
 800831e:	f000 fa71 	bl	8008804 <prvAddCurrentTaskToDelayedList>
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200007a0 	.word	0x200007a0

08008330 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <vTaskPlaceOnEventListRestricted+0x26>
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e7fe      	b.n	8008354 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008356:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <vTaskPlaceOnEventListRestricted+0x50>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3318      	adds	r3, #24
 800835c:	4619      	mov	r1, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7fe fde9 	bl	8006f36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800836a:	f04f 33ff 	mov.w	r3, #4294967295
 800836e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	68b8      	ldr	r0, [r7, #8]
 8008374:	f000 fa46 	bl	8008804 <prvAddCurrentTaskToDelayedList>
	}
 8008378:	bf00      	nop
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	200007a0 	.word	0x200007a0

08008384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <xTaskRemoveFromEventList+0x2a>
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	e7fe      	b.n	80083ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3318      	adds	r3, #24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fe1c 	bl	8006ff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b8:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <xTaskRemoveFromEventList+0xac>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11d      	bne.n	80083fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fe13 	bl	8006ff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <xTaskRemoveFromEventList+0xb0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d903      	bls.n	80083de <xTaskRemoveFromEventList+0x5a>
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	4a16      	ldr	r2, [pc, #88]	; (8008434 <xTaskRemoveFromEventList+0xb0>)
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4a13      	ldr	r2, [pc, #76]	; (8008438 <xTaskRemoveFromEventList+0xb4>)
 80083ec:	441a      	add	r2, r3
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7fe fd9e 	bl	8006f36 <vListInsertEnd>
 80083fa:	e005      	b.n	8008408 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	3318      	adds	r3, #24
 8008400:	4619      	mov	r1, r3
 8008402:	480e      	ldr	r0, [pc, #56]	; (800843c <xTaskRemoveFromEventList+0xb8>)
 8008404:	f7fe fd97 	bl	8006f36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <xTaskRemoveFromEventList+0xbc>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	429a      	cmp	r2, r3
 8008414:	d905      	bls.n	8008422 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008416:	2301      	movs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <xTaskRemoveFromEventList+0xc0>)
 800841c:	2201      	movs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	e001      	b.n	8008426 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008426:	697b      	ldr	r3, [r7, #20]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000c9c 	.word	0x20000c9c
 8008434:	20000c7c 	.word	0x20000c7c
 8008438:	200007a4 	.word	0x200007a4
 800843c:	20000c34 	.word	0x20000c34
 8008440:	200007a0 	.word	0x200007a0
 8008444:	20000c88 	.word	0x20000c88

08008448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <vTaskInternalSetTimeOutState+0x24>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <vTaskInternalSetTimeOutState+0x28>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	605a      	str	r2, [r3, #4]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000c8c 	.word	0x20000c8c
 8008470:	20000c78 	.word	0x20000c78

08008474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <xTaskCheckForTimeOut+0x24>
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	e7fe      	b.n	8008496 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <xTaskCheckForTimeOut+0x3e>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e7fe      	b.n	80084b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80084b2:	f000 fe6b 	bl	800918c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084b6:	4b1d      	ldr	r3, [pc, #116]	; (800852c <xTaskCheckForTimeOut+0xb8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ce:	d102      	bne.n	80084d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]
 80084d4:	e023      	b.n	800851e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b15      	ldr	r3, [pc, #84]	; (8008530 <xTaskCheckForTimeOut+0xbc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d007      	beq.n	80084f2 <xTaskCheckForTimeOut+0x7e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	e015      	b.n	800851e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d20b      	bcs.n	8008514 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff ff9d 	bl	8008448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	e004      	b.n	800851e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800851a:	2301      	movs	r3, #1
 800851c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800851e:	f000 fe63 	bl	80091e8 <vPortExitCritical>

	return xReturn;
 8008522:	69fb      	ldr	r3, [r7, #28]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3720      	adds	r7, #32
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000c78 	.word	0x20000c78
 8008530:	20000c8c 	.word	0x20000c8c

08008534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008538:	4b03      	ldr	r3, [pc, #12]	; (8008548 <vTaskMissedYield+0x14>)
 800853a:	2201      	movs	r2, #1
 800853c:	601a      	str	r2, [r3, #0]
}
 800853e:	bf00      	nop
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	20000c88 	.word	0x20000c88

0800854c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008554:	f000 f852 	bl	80085fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008558:	4b06      	ldr	r3, [pc, #24]	; (8008574 <prvIdleTask+0x28>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d9f9      	bls.n	8008554 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008560:	4b05      	ldr	r3, [pc, #20]	; (8008578 <prvIdleTask+0x2c>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008570:	e7f0      	b.n	8008554 <prvIdleTask+0x8>
 8008572:	bf00      	nop
 8008574:	200007a4 	.word	0x200007a4
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008582:	2300      	movs	r3, #0
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	e00c      	b.n	80085a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4a12      	ldr	r2, [pc, #72]	; (80085dc <prvInitialiseTaskLists+0x60>)
 8008594:	4413      	add	r3, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fca0 	bl	8006edc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3301      	adds	r3, #1
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b37      	cmp	r3, #55	; 0x37
 80085a6:	d9ef      	bls.n	8008588 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085a8:	480d      	ldr	r0, [pc, #52]	; (80085e0 <prvInitialiseTaskLists+0x64>)
 80085aa:	f7fe fc97 	bl	8006edc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085ae:	480d      	ldr	r0, [pc, #52]	; (80085e4 <prvInitialiseTaskLists+0x68>)
 80085b0:	f7fe fc94 	bl	8006edc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085b4:	480c      	ldr	r0, [pc, #48]	; (80085e8 <prvInitialiseTaskLists+0x6c>)
 80085b6:	f7fe fc91 	bl	8006edc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085ba:	480c      	ldr	r0, [pc, #48]	; (80085ec <prvInitialiseTaskLists+0x70>)
 80085bc:	f7fe fc8e 	bl	8006edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085c0:	480b      	ldr	r0, [pc, #44]	; (80085f0 <prvInitialiseTaskLists+0x74>)
 80085c2:	f7fe fc8b 	bl	8006edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <prvInitialiseTaskLists+0x78>)
 80085c8:	4a05      	ldr	r2, [pc, #20]	; (80085e0 <prvInitialiseTaskLists+0x64>)
 80085ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085cc:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <prvInitialiseTaskLists+0x7c>)
 80085ce:	4a05      	ldr	r2, [pc, #20]	; (80085e4 <prvInitialiseTaskLists+0x68>)
 80085d0:	601a      	str	r2, [r3, #0]
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	200007a4 	.word	0x200007a4
 80085e0:	20000c04 	.word	0x20000c04
 80085e4:	20000c18 	.word	0x20000c18
 80085e8:	20000c34 	.word	0x20000c34
 80085ec:	20000c48 	.word	0x20000c48
 80085f0:	20000c60 	.word	0x20000c60
 80085f4:	20000c2c 	.word	0x20000c2c
 80085f8:	20000c30 	.word	0x20000c30

080085fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008602:	e019      	b.n	8008638 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008604:	f000 fdc2 	bl	800918c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008608:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <prvCheckTasksWaitingTermination+0x4c>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fceb 	bl	8006ff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800861a:	4b0c      	ldr	r3, [pc, #48]	; (800864c <prvCheckTasksWaitingTermination+0x50>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3b01      	subs	r3, #1
 8008620:	4a0a      	ldr	r2, [pc, #40]	; (800864c <prvCheckTasksWaitingTermination+0x50>)
 8008622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008624:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <prvCheckTasksWaitingTermination+0x54>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3b01      	subs	r3, #1
 800862a:	4a09      	ldr	r2, [pc, #36]	; (8008650 <prvCheckTasksWaitingTermination+0x54>)
 800862c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800862e:	f000 fddb 	bl	80091e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f80e 	bl	8008654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <prvCheckTasksWaitingTermination+0x54>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e1      	bne.n	8008604 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20000c48 	.word	0x20000c48
 800864c:	20000c74 	.word	0x20000c74
 8008650:	20000c5c 	.word	0x20000c5c

08008654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008662:	2b00      	cmp	r3, #0
 8008664:	d108      	bne.n	8008678 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	4618      	mov	r0, r3
 800866c:	f000 ff6a 	bl	8009544 <vPortFree>
				vPortFree( pxTCB );
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 ff67 	bl	8009544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008676:	e017      	b.n	80086a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800867e:	2b01      	cmp	r3, #1
 8008680:	d103      	bne.n	800868a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 ff5e 	bl	8009544 <vPortFree>
	}
 8008688:	e00e      	b.n	80086a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008690:	2b02      	cmp	r3, #2
 8008692:	d009      	beq.n	80086a8 <prvDeleteTCB+0x54>
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	e7fe      	b.n	80086a6 <prvDeleteTCB+0x52>
	}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvResetNextTaskUnblockTime+0x38>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d104      	bne.n	80086ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <prvResetNextTaskUnblockTime+0x3c>)
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086c8:	e008      	b.n	80086dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b07      	ldr	r3, [pc, #28]	; (80086e8 <prvResetNextTaskUnblockTime+0x38>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	4a04      	ldr	r2, [pc, #16]	; (80086ec <prvResetNextTaskUnblockTime+0x3c>)
 80086da:	6013      	str	r3, [r2, #0]
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20000c2c 	.word	0x20000c2c
 80086ec:	20000c94 	.word	0x20000c94

080086f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <xTaskGetSchedulerState+0x34>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086fe:	2301      	movs	r3, #1
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	e008      	b.n	8008716 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008704:	4b08      	ldr	r3, [pc, #32]	; (8008728 <xTaskGetSchedulerState+0x38>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800870c:	2302      	movs	r3, #2
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	e001      	b.n	8008716 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008712:	2300      	movs	r3, #0
 8008714:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008716:	687b      	ldr	r3, [r7, #4]
	}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20000c80 	.word	0x20000c80
 8008728:	20000c9c 	.word	0x20000c9c

0800872c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d054      	beq.n	80087ec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008742:	4b2d      	ldr	r3, [pc, #180]	; (80087f8 <xTaskPriorityDisinherit+0xcc>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	429a      	cmp	r2, r3
 800874a:	d009      	beq.n	8008760 <xTaskPriorityDisinherit+0x34>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e7fe      	b.n	800875e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <xTaskPriorityDisinherit+0x50>
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60bb      	str	r3, [r7, #8]
 800877a:	e7fe      	b.n	800877a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	1e5a      	subs	r2, r3, #1
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878e:	429a      	cmp	r2, r3
 8008790:	d02c      	beq.n	80087ec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008796:	2b00      	cmp	r3, #0
 8008798:	d128      	bne.n	80087ec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	3304      	adds	r3, #4
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fc26 	bl	8006ff0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <xTaskPriorityDisinherit+0xd0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d903      	bls.n	80087cc <xTaskPriorityDisinherit+0xa0>
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <xTaskPriorityDisinherit+0xd0>)
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4a09      	ldr	r2, [pc, #36]	; (8008800 <xTaskPriorityDisinherit+0xd4>)
 80087da:	441a      	add	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f7fe fba7 	bl	8006f36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087e8:	2301      	movs	r3, #1
 80087ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087ec:	697b      	ldr	r3, [r7, #20]
	}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200007a0 	.word	0x200007a0
 80087fc:	20000c7c 	.word	0x20000c7c
 8008800:	200007a4 	.word	0x200007a4

08008804 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800880e:	4b21      	ldr	r3, [pc, #132]	; (8008894 <prvAddCurrentTaskToDelayedList+0x90>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008814:	4b20      	ldr	r3, [pc, #128]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3304      	adds	r3, #4
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fbe8 	bl	8006ff0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d10a      	bne.n	800883e <prvAddCurrentTaskToDelayedList+0x3a>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800882e:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4819      	ldr	r0, [pc, #100]	; (800889c <prvAddCurrentTaskToDelayedList+0x98>)
 8008838:	f7fe fb7d 	bl	8006f36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800883c:	e026      	b.n	800888c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	429a      	cmp	r2, r3
 8008854:	d209      	bcs.n	800886a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008856:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7fe fb8b 	bl	8006f7e <vListInsert>
}
 8008868:	e010      	b.n	800888c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886a:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <prvAddCurrentTaskToDelayedList+0x94>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe fb81 	bl	8006f7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d202      	bcs.n	800888c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008886:	4a08      	ldr	r2, [pc, #32]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6013      	str	r3, [r2, #0]
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000c78 	.word	0x20000c78
 8008898:	200007a0 	.word	0x200007a0
 800889c:	20000c60 	.word	0x20000c60
 80088a0:	20000c30 	.word	0x20000c30
 80088a4:	20000c2c 	.word	0x20000c2c
 80088a8:	20000c94 	.word	0x20000c94

080088ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088b6:	f000 faff 	bl	8008eb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088ba:	4b1c      	ldr	r3, [pc, #112]	; (800892c <xTimerCreateTimerTask+0x80>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d021      	beq.n	8008906 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088ca:	1d3a      	adds	r2, r7, #4
 80088cc:	f107 0108 	add.w	r1, r7, #8
 80088d0:	f107 030c 	add.w	r3, r7, #12
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fae7 	bl	8006ea8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	9202      	str	r2, [sp, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	2302      	movs	r3, #2
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	460a      	mov	r2, r1
 80088ec:	4910      	ldr	r1, [pc, #64]	; (8008930 <xTimerCreateTimerTask+0x84>)
 80088ee:	4811      	ldr	r0, [pc, #68]	; (8008934 <xTimerCreateTimerTask+0x88>)
 80088f0:	f7ff f87c 	bl	80079ec <xTaskCreateStatic>
 80088f4:	4602      	mov	r2, r0
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <xTimerCreateTimerTask+0x8c>)
 80088f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088fa:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <xTimerCreateTimerTask+0x8c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008902:	2301      	movs	r3, #1
 8008904:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d109      	bne.n	8008920 <xTimerCreateTimerTask+0x74>
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	e7fe      	b.n	800891e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008920:	697b      	ldr	r3, [r7, #20]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000cd0 	.word	0x20000cd0
 8008930:	0800a2d0 	.word	0x0800a2d0
 8008934:	08008a6d 	.word	0x08008a6d
 8008938:	20000cd4 	.word	0x20000cd4

0800893c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08a      	sub	sp, #40	; 0x28
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800894a:	2300      	movs	r3, #0
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <xTimerGenericCommand+0x2c>
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	623b      	str	r3, [r7, #32]
 8008966:	e7fe      	b.n	8008966 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <xTimerGenericCommand+0x94>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d02a      	beq.n	80089c6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b05      	cmp	r3, #5
 8008980:	dc18      	bgt.n	80089b4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008982:	f7ff feb5 	bl	80086f0 <xTaskGetSchedulerState>
 8008986:	4603      	mov	r3, r0
 8008988:	2b02      	cmp	r3, #2
 800898a:	d109      	bne.n	80089a0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800898c:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <xTimerGenericCommand+0x94>)
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	f107 0110 	add.w	r1, r7, #16
 8008994:	2300      	movs	r3, #0
 8008996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008998:	f7fe fc52 	bl	8007240 <xQueueGenericSend>
 800899c:	6278      	str	r0, [r7, #36]	; 0x24
 800899e:	e012      	b.n	80089c6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <xTimerGenericCommand+0x94>)
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	f107 0110 	add.w	r1, r7, #16
 80089a8:	2300      	movs	r3, #0
 80089aa:	2200      	movs	r2, #0
 80089ac:	f7fe fc48 	bl	8007240 <xQueueGenericSend>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24
 80089b2:	e008      	b.n	80089c6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <xTimerGenericCommand+0x94>)
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	f107 0110 	add.w	r1, r7, #16
 80089bc:	2300      	movs	r3, #0
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	f7fe fd38 	bl	8007434 <xQueueGenericSendFromISR>
 80089c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3728      	adds	r7, #40	; 0x28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000cd0 	.word	0x20000cd0

080089d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af02      	add	r7, sp, #8
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <prvProcessExpiredTimer+0x94>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe faff 	bl	8006ff0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d021      	beq.n	8008a44 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	699a      	ldr	r2, [r3, #24]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	18d1      	adds	r1, r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	6978      	ldr	r0, [r7, #20]
 8008a0e:	f000 f8d1 	bl	8008bb4 <prvInsertTimerInActiveList>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01e      	beq.n	8008a56 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	2100      	movs	r1, #0
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f7ff ff8a 	bl	800893c <xTimerGenericCommand>
 8008a28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d112      	bne.n	8008a56 <prvProcessExpiredTimer+0x82>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e7fe      	b.n	8008a42 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	6978      	ldr	r0, [r7, #20]
 8008a5c:	4798      	blx	r3
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000cc8 	.word	0x20000cc8

08008a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a74:	f107 0308 	add.w	r3, r7, #8
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f857 	bl	8008b2c <prvGetNextExpireTime>
 8008a7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4619      	mov	r1, r3
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 f803 	bl	8008a90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a8a:	f000 f8d5 	bl	8008c38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a8e:	e7f1      	b.n	8008a74 <prvTimerTask+0x8>

08008a90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a9a:	f7ff fa57 	bl	8007f4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f866 	bl	8008b74 <prvSampleTimeNow>
 8008aa8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d130      	bne.n	8008b12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <prvProcessTimerOrBlockTask+0x3c>
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d806      	bhi.n	8008acc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008abe:	f7ff fa53 	bl	8007f68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff ff85 	bl	80089d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008aca:	e024      	b.n	8008b16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d008      	beq.n	8008ae4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <prvProcessTimerOrBlockTask+0x90>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <prvProcessTimerOrBlockTask+0x50>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <prvProcessTimerOrBlockTask+0x52>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ae4:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <prvProcessTimerOrBlockTask+0x94>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4619      	mov	r1, r3
 8008af2:	f7fe ff47 	bl	8007984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008af6:	f7ff fa37 	bl	8007f68 <xTaskResumeAll>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b00:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <prvProcessTimerOrBlockTask+0x98>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
}
 8008b10:	e001      	b.n	8008b16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b12:	f7ff fa29 	bl	8007f68 <xTaskResumeAll>
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000ccc 	.word	0x20000ccc
 8008b24:	20000cd0 	.word	0x20000cd0
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b34:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <prvGetNextExpireTime+0x44>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <prvGetNextExpireTime+0x16>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	e000      	b.n	8008b44 <prvGetNextExpireTime+0x18>
 8008b42:	2200      	movs	r2, #0
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <prvGetNextExpireTime+0x44>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e001      	b.n	8008b60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b60:	68fb      	ldr	r3, [r7, #12]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000cc8 	.word	0x20000cc8

08008b74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b7c:	f7ff fa90 	bl	80080a0 <xTaskGetTickCount>
 8008b80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b82:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <prvSampleTimeNow+0x3c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d205      	bcs.n	8008b98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b8c:	f000 f930 	bl	8008df0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	e002      	b.n	8008b9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b9e:	4a04      	ldr	r2, [pc, #16]	; (8008bb0 <prvSampleTimeNow+0x3c>)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000cd8 	.word	0x20000cd8

08008bb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d812      	bhi.n	8008c00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d302      	bcc.n	8008bee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e01b      	b.n	8008c26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bee:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <prvInsertTimerInActiveList+0x7c>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fe f9c0 	bl	8006f7e <vListInsert>
 8008bfe:	e012      	b.n	8008c26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d206      	bcs.n	8008c16 <prvInsertTimerInActiveList+0x62>
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d302      	bcc.n	8008c16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e007      	b.n	8008c26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <prvInsertTimerInActiveList+0x80>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7fe f9ac 	bl	8006f7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c26:	697b      	ldr	r3, [r7, #20]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000ccc 	.word	0x20000ccc
 8008c34:	20000cc8 	.word	0x20000cc8

08008c38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	; 0x38
 8008c3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c3e:	e0c6      	b.n	8008dce <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	da17      	bge.n	8008c76 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c46:	1d3b      	adds	r3, r7, #4
 8008c48:	3304      	adds	r3, #4
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d109      	bne.n	8008c66 <prvProcessReceivedCommands+0x2e>
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e7fe      	b.n	8008c64 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c6c:	6850      	ldr	r0, [r2, #4]
 8008c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c70:	6892      	ldr	r2, [r2, #8]
 8008c72:	4611      	mov	r1, r2
 8008c74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f2c0 80a7 	blt.w	8008dcc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe f9ae 	bl	8006ff0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c94:	463b      	mov	r3, r7
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff ff6c 	bl	8008b74 <prvSampleTimeNow>
 8008c9c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b09      	cmp	r3, #9
 8008ca2:	f200 8094 	bhi.w	8008dce <prvProcessReceivedCommands+0x196>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <prvProcessReceivedCommands+0x74>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cd5 	.word	0x08008cd5
 8008cb0:	08008cd5 	.word	0x08008cd5
 8008cb4:	08008cd5 	.word	0x08008cd5
 8008cb8:	08008d47 	.word	0x08008d47
 8008cbc:	08008d5b 	.word	0x08008d5b
 8008cc0:	08008da3 	.word	0x08008da3
 8008cc4:	08008cd5 	.word	0x08008cd5
 8008cc8:	08008cd5 	.word	0x08008cd5
 8008ccc:	08008d47 	.word	0x08008d47
 8008cd0:	08008d5b 	.word	0x08008d5b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	18d1      	adds	r1, r2, r3
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf4:	f7ff ff5e 	bl	8008bb4 <prvInsertTimerInActiveList>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d067      	beq.n	8008dce <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d05c      	beq.n	8008dce <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	441a      	add	r2, r3
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	2300      	movs	r3, #0
 8008d22:	2100      	movs	r1, #0
 8008d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d26:	f7ff fe09 	bl	800893c <xTimerGenericCommand>
 8008d2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d14d      	bne.n	8008dce <prvProcessReceivedCommands+0x196>
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e7fe      	b.n	8008d44 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d58:	e039      	b.n	8008dce <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d109      	bne.n	8008d8e <prvProcessReceivedCommands+0x156>
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e7fe      	b.n	8008d8c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	18d1      	adds	r1, r2, r3
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9c:	f7ff ff0a 	bl	8008bb4 <prvInsertTimerInActiveList>
					break;
 8008da0:	e015      	b.n	8008dce <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db2:	f000 fbc7 	bl	8009544 <vPortFree>
 8008db6:	e00a      	b.n	8008dce <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dbe:	f023 0301 	bic.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008dca:	e000      	b.n	8008dce <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008dcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <prvProcessReceivedCommands+0x1b4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	1d39      	adds	r1, r7, #4
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fbc0 	bl	800755c <xQueueReceive>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f47f af2e 	bne.w	8008c40 <prvProcessReceivedCommands+0x8>
	}
}
 8008de4:	bf00      	nop
 8008de6:	3730      	adds	r7, #48	; 0x30
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20000cd0 	.word	0x20000cd0

08008df0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008df6:	e047      	b.n	8008e88 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008df8:	4b2d      	ldr	r3, [pc, #180]	; (8008eb0 <prvSwitchTimerLists+0xc0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e02:	4b2b      	ldr	r3, [pc, #172]	; (8008eb0 <prvSwitchTimerLists+0xc0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe f8ed 	bl	8006ff0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d02d      	beq.n	8008e88 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4413      	add	r3, r2
 8008e34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d90e      	bls.n	8008e5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e4a:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <prvSwitchTimerLists+0xc0>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f7fe f892 	bl	8006f7e <vListInsert>
 8008e5a:	e015      	b.n	8008e88 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2300      	movs	r3, #0
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	2100      	movs	r1, #0
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff fd68 	bl	800893c <xTimerGenericCommand>
 8008e6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d109      	bne.n	8008e88 <prvSwitchTimerLists+0x98>
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	603b      	str	r3, [r7, #0]
 8008e86:	e7fe      	b.n	8008e86 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <prvSwitchTimerLists+0xc0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1b2      	bne.n	8008df8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e92:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <prvSwitchTimerLists+0xc0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <prvSwitchTimerLists+0xc4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a04      	ldr	r2, [pc, #16]	; (8008eb0 <prvSwitchTimerLists+0xc0>)
 8008e9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ea0:	4a04      	ldr	r2, [pc, #16]	; (8008eb4 <prvSwitchTimerLists+0xc4>)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	6013      	str	r3, [r2, #0]
}
 8008ea6:	bf00      	nop
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000cc8 	.word	0x20000cc8
 8008eb4:	20000ccc 	.word	0x20000ccc

08008eb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ebe:	f000 f965 	bl	800918c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <prvCheckForValidListAndQueue+0x60>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d120      	bne.n	8008f0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008eca:	4814      	ldr	r0, [pc, #80]	; (8008f1c <prvCheckForValidListAndQueue+0x64>)
 8008ecc:	f7fe f806 	bl	8006edc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ed0:	4813      	ldr	r0, [pc, #76]	; (8008f20 <prvCheckForValidListAndQueue+0x68>)
 8008ed2:	f7fe f803 	bl	8006edc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ed6:	4b13      	ldr	r3, [pc, #76]	; (8008f24 <prvCheckForValidListAndQueue+0x6c>)
 8008ed8:	4a10      	ldr	r2, [pc, #64]	; (8008f1c <prvCheckForValidListAndQueue+0x64>)
 8008eda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008edc:	4b12      	ldr	r3, [pc, #72]	; (8008f28 <prvCheckForValidListAndQueue+0x70>)
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <prvCheckForValidListAndQueue+0x68>)
 8008ee0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <prvCheckForValidListAndQueue+0x74>)
 8008ee8:	4a11      	ldr	r2, [pc, #68]	; (8008f30 <prvCheckForValidListAndQueue+0x78>)
 8008eea:	2110      	movs	r1, #16
 8008eec:	200a      	movs	r0, #10
 8008eee:	f7fe f911 	bl	8007114 <xQueueGenericCreateStatic>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <prvCheckForValidListAndQueue+0x60>)
 8008ef6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ef8:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <prvCheckForValidListAndQueue+0x60>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f00:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <prvCheckForValidListAndQueue+0x60>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	490b      	ldr	r1, [pc, #44]	; (8008f34 <prvCheckForValidListAndQueue+0x7c>)
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fd14 	bl	8007934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f0c:	f000 f96c 	bl	80091e8 <vPortExitCritical>
}
 8008f10:	bf00      	nop
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000cd0 	.word	0x20000cd0
 8008f1c:	20000ca0 	.word	0x20000ca0
 8008f20:	20000cb4 	.word	0x20000cb4
 8008f24:	20000cc8 	.word	0x20000cc8
 8008f28:	20000ccc 	.word	0x20000ccc
 8008f2c:	20000d7c 	.word	0x20000d7c
 8008f30:	20000cdc 	.word	0x20000cdc
 8008f34:	0800a2d8 	.word	0x0800a2d8

08008f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3b04      	subs	r3, #4
 8008f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3b04      	subs	r3, #4
 8008f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f023 0201 	bic.w	r2, r3, #1
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3b04      	subs	r3, #4
 8008f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f68:	4a0c      	ldr	r2, [pc, #48]	; (8008f9c <pxPortInitialiseStack+0x64>)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3b14      	subs	r3, #20
 8008f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3b04      	subs	r3, #4
 8008f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f06f 0202 	mvn.w	r2, #2
 8008f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3b20      	subs	r3, #32
 8008f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	08008fa1 	.word	0x08008fa1

08008fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008faa:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <prvTaskExitError+0x50>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb2:	d009      	beq.n	8008fc8 <prvTaskExitError+0x28>
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	e7fe      	b.n	8008fc6 <prvTaskExitError+0x26>
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fda:	bf00      	nop
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0fc      	beq.n	8008fdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20000010 	.word	0x20000010
	...

08009000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <pxCurrentTCBConst2>)
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	6808      	ldr	r0, [r1, #0]
 8009006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900a:	f380 8809 	msr	PSP, r0
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f04f 0000 	mov.w	r0, #0
 8009016:	f380 8811 	msr	BASEPRI, r0
 800901a:	4770      	bx	lr
 800901c:	f3af 8000 	nop.w

08009020 <pxCurrentTCBConst2>:
 8009020:	200007a0 	.word	0x200007a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop

08009028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009028:	4808      	ldr	r0, [pc, #32]	; (800904c <prvPortStartFirstTask+0x24>)
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	6800      	ldr	r0, [r0, #0]
 800902e:	f380 8808 	msr	MSP, r0
 8009032:	f04f 0000 	mov.w	r0, #0
 8009036:	f380 8814 	msr	CONTROL, r0
 800903a:	b662      	cpsie	i
 800903c:	b661      	cpsie	f
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	df00      	svc	0
 8009048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800904a:	bf00      	nop
 800904c:	e000ed08 	.word	0xe000ed08

08009050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009056:	4b44      	ldr	r3, [pc, #272]	; (8009168 <xPortStartScheduler+0x118>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a44      	ldr	r2, [pc, #272]	; (800916c <xPortStartScheduler+0x11c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d109      	bne.n	8009074 <xPortStartScheduler+0x24>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	e7fe      	b.n	8009072 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009074:	4b3c      	ldr	r3, [pc, #240]	; (8009168 <xPortStartScheduler+0x118>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a3d      	ldr	r2, [pc, #244]	; (8009170 <xPortStartScheduler+0x120>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d109      	bne.n	8009092 <xPortStartScheduler+0x42>
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e7fe      	b.n	8009090 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009092:	4b38      	ldr	r3, [pc, #224]	; (8009174 <xPortStartScheduler+0x124>)
 8009094:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	4b30      	ldr	r3, [pc, #192]	; (8009178 <xPortStartScheduler+0x128>)
 80090b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090ba:	4b30      	ldr	r3, [pc, #192]	; (800917c <xPortStartScheduler+0x12c>)
 80090bc:	2207      	movs	r2, #7
 80090be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090c0:	e009      	b.n	80090d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80090c2:	4b2e      	ldr	r3, [pc, #184]	; (800917c <xPortStartScheduler+0x12c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	4a2c      	ldr	r2, [pc, #176]	; (800917c <xPortStartScheduler+0x12c>)
 80090ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090de:	2b80      	cmp	r3, #128	; 0x80
 80090e0:	d0ef      	beq.n	80090c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090e2:	4b26      	ldr	r3, [pc, #152]	; (800917c <xPortStartScheduler+0x12c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f1c3 0307 	rsb	r3, r3, #7
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d009      	beq.n	8009102 <xPortStartScheduler+0xb2>
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	60bb      	str	r3, [r7, #8]
 8009100:	e7fe      	b.n	8009100 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009102:	4b1e      	ldr	r3, [pc, #120]	; (800917c <xPortStartScheduler+0x12c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	021b      	lsls	r3, r3, #8
 8009108:	4a1c      	ldr	r2, [pc, #112]	; (800917c <xPortStartScheduler+0x12c>)
 800910a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <xPortStartScheduler+0x12c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009114:	4a19      	ldr	r2, [pc, #100]	; (800917c <xPortStartScheduler+0x12c>)
 8009116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	b2da      	uxtb	r2, r3
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009120:	4b17      	ldr	r3, [pc, #92]	; (8009180 <xPortStartScheduler+0x130>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a16      	ldr	r2, [pc, #88]	; (8009180 <xPortStartScheduler+0x130>)
 8009126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800912a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800912c:	4b14      	ldr	r3, [pc, #80]	; (8009180 <xPortStartScheduler+0x130>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a13      	ldr	r2, [pc, #76]	; (8009180 <xPortStartScheduler+0x130>)
 8009132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009138:	f000 f8d6 	bl	80092e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800913c:	4b11      	ldr	r3, [pc, #68]	; (8009184 <xPortStartScheduler+0x134>)
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009142:	f000 f8f5 	bl	8009330 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <xPortStartScheduler+0x138>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a0f      	ldr	r2, [pc, #60]	; (8009188 <xPortStartScheduler+0x138>)
 800914c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009152:	f7ff ff69 	bl	8009028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009156:	f7ff f86b 	bl	8008230 <vTaskSwitchContext>
	prvTaskExitError();
 800915a:	f7ff ff21 	bl	8008fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	e000ed00 	.word	0xe000ed00
 800916c:	410fc271 	.word	0x410fc271
 8009170:	410fc270 	.word	0x410fc270
 8009174:	e000e400 	.word	0xe000e400
 8009178:	20000dcc 	.word	0x20000dcc
 800917c:	20000dd0 	.word	0x20000dd0
 8009180:	e000ed20 	.word	0xe000ed20
 8009184:	20000010 	.word	0x20000010
 8009188:	e000ef34 	.word	0xe000ef34

0800918c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <vPortEnterCritical+0x54>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	4a0d      	ldr	r2, [pc, #52]	; (80091e0 <vPortEnterCritical+0x54>)
 80091ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <vPortEnterCritical+0x54>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10e      	bne.n	80091d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortEnterCritical+0x58>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d009      	beq.n	80091d4 <vPortEnterCritical+0x48>
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	603b      	str	r3, [r7, #0]
 80091d2:	e7fe      	b.n	80091d2 <vPortEnterCritical+0x46>
	}
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20000010 	.word	0x20000010
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091ee:	4b11      	ldr	r3, [pc, #68]	; (8009234 <vPortExitCritical+0x4c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <vPortExitCritical+0x22>
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	607b      	str	r3, [r7, #4]
 8009208:	e7fe      	b.n	8009208 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800920a:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <vPortExitCritical+0x4c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3b01      	subs	r3, #1
 8009210:	4a08      	ldr	r2, [pc, #32]	; (8009234 <vPortExitCritical+0x4c>)
 8009212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <vPortExitCritical+0x4c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d104      	bne.n	8009226 <vPortExitCritical+0x3e>
 800921c:	2300      	movs	r3, #0
 800921e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20000010 	.word	0x20000010
	...

08009240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009240:	f3ef 8009 	mrs	r0, PSP
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <pxCurrentTCBConst>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	f01e 0f10 	tst.w	lr, #16
 8009250:	bf08      	it	eq
 8009252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	6010      	str	r0, [r2, #0]
 800925c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009264:	f380 8811 	msr	BASEPRI, r0
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f7fe ffde 	bl	8008230 <vTaskSwitchContext>
 8009274:	f04f 0000 	mov.w	r0, #0
 8009278:	f380 8811 	msr	BASEPRI, r0
 800927c:	bc09      	pop	{r0, r3}
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	6808      	ldr	r0, [r1, #0]
 8009282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009286:	f01e 0f10 	tst.w	lr, #16
 800928a:	bf08      	it	eq
 800928c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009290:	f380 8809 	msr	PSP, r0
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w

080092a0 <pxCurrentTCBConst>:
 80092a0:	200007a0 	.word	0x200007a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop

080092a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092c0:	f7fe fefe 	bl	80080c0 <xTaskIncrementTick>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <SysTick_Handler+0x3c>)
 80092cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	2300      	movs	r3, #0
 80092d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092e8:	b480      	push	{r7}
 80092ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092ec:	4b0b      	ldr	r3, [pc, #44]	; (800931c <vPortSetupTimerInterrupt+0x34>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092f2:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <vPortSetupTimerInterrupt+0x38>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <vPortSetupTimerInterrupt+0x3c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <vPortSetupTimerInterrupt+0x40>)
 80092fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009302:	099b      	lsrs	r3, r3, #6
 8009304:	4a09      	ldr	r2, [pc, #36]	; (800932c <vPortSetupTimerInterrupt+0x44>)
 8009306:	3b01      	subs	r3, #1
 8009308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800930a:	4b04      	ldr	r3, [pc, #16]	; (800931c <vPortSetupTimerInterrupt+0x34>)
 800930c:	2207      	movs	r2, #7
 800930e:	601a      	str	r2, [r3, #0]
}
 8009310:	bf00      	nop
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	e000e010 	.word	0xe000e010
 8009320:	e000e018 	.word	0xe000e018
 8009324:	20000000 	.word	0x20000000
 8009328:	10624dd3 	.word	0x10624dd3
 800932c:	e000e014 	.word	0xe000e014

08009330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009340 <vPortEnableVFP+0x10>
 8009334:	6801      	ldr	r1, [r0, #0]
 8009336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800933a:	6001      	str	r1, [r0, #0]
 800933c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800933e:	bf00      	nop
 8009340:	e000ed88 	.word	0xe000ed88

08009344 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800934a:	f3ef 8305 	mrs	r3, IPSR
 800934e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b0f      	cmp	r3, #15
 8009354:	d913      	bls.n	800937e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009356:	4a16      	ldr	r2, [pc, #88]	; (80093b0 <vPortValidateInterruptPriority+0x6c>)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009360:	4b14      	ldr	r3, [pc, #80]	; (80093b4 <vPortValidateInterruptPriority+0x70>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	7afa      	ldrb	r2, [r7, #11]
 8009366:	429a      	cmp	r2, r3
 8009368:	d209      	bcs.n	800937e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	607b      	str	r3, [r7, #4]
 800937c:	e7fe      	b.n	800937c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800937e:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <vPortValidateInterruptPriority+0x74>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009386:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <vPortValidateInterruptPriority+0x78>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d909      	bls.n	80093a2 <vPortValidateInterruptPriority+0x5e>
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	e7fe      	b.n	80093a0 <vPortValidateInterruptPriority+0x5c>
	}
 80093a2:	bf00      	nop
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	e000e3f0 	.word	0xe000e3f0
 80093b4:	20000dcc 	.word	0x20000dcc
 80093b8:	e000ed0c 	.word	0xe000ed0c
 80093bc:	20000dd0 	.word	0x20000dd0

080093c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08a      	sub	sp, #40	; 0x28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093cc:	f7fe fdbe 	bl	8007f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093d0:	4b57      	ldr	r3, [pc, #348]	; (8009530 <pvPortMalloc+0x170>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093d8:	f000 f90c 	bl	80095f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093dc:	4b55      	ldr	r3, [pc, #340]	; (8009534 <pvPortMalloc+0x174>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4013      	ands	r3, r2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f040 808c 	bne.w	8009502 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01c      	beq.n	800942a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80093f0:	2208      	movs	r2, #8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4413      	add	r3, r2
 80093f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d013      	beq.n	800942a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f023 0307 	bic.w	r3, r3, #7
 8009408:	3308      	adds	r3, #8
 800940a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <pvPortMalloc+0x6a>
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e7fe      	b.n	8009428 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d068      	beq.n	8009502 <pvPortMalloc+0x142>
 8009430:	4b41      	ldr	r3, [pc, #260]	; (8009538 <pvPortMalloc+0x178>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	429a      	cmp	r2, r3
 8009438:	d863      	bhi.n	8009502 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800943a:	4b40      	ldr	r3, [pc, #256]	; (800953c <pvPortMalloc+0x17c>)
 800943c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800943e:	4b3f      	ldr	r3, [pc, #252]	; (800953c <pvPortMalloc+0x17c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009444:	e004      	b.n	8009450 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d903      	bls.n	8009462 <pvPortMalloc+0xa2>
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f1      	bne.n	8009446 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009462:	4b33      	ldr	r3, [pc, #204]	; (8009530 <pvPortMalloc+0x170>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009468:	429a      	cmp	r2, r3
 800946a:	d04a      	beq.n	8009502 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2208      	movs	r2, #8
 8009472:	4413      	add	r3, r2
 8009474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	1ad2      	subs	r2, r2, r3
 8009486:	2308      	movs	r3, #8
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	429a      	cmp	r2, r3
 800948c:	d91e      	bls.n	80094cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800948e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	2b00      	cmp	r3, #0
 800949e:	d009      	beq.n	80094b4 <pvPortMalloc+0xf4>
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	e7fe      	b.n	80094b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	1ad2      	subs	r2, r2, r3
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094c6:	69b8      	ldr	r0, [r7, #24]
 80094c8:	f000 f8f6 	bl	80096b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094cc:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <pvPortMalloc+0x178>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	4a18      	ldr	r2, [pc, #96]	; (8009538 <pvPortMalloc+0x178>)
 80094d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094da:	4b17      	ldr	r3, [pc, #92]	; (8009538 <pvPortMalloc+0x178>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b18      	ldr	r3, [pc, #96]	; (8009540 <pvPortMalloc+0x180>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d203      	bcs.n	80094ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <pvPortMalloc+0x178>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a15      	ldr	r2, [pc, #84]	; (8009540 <pvPortMalloc+0x180>)
 80094ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	4b10      	ldr	r3, [pc, #64]	; (8009534 <pvPortMalloc+0x174>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009502:	f7fe fd31 	bl	8007f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <pvPortMalloc+0x164>
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e7fe      	b.n	8009522 <pvPortMalloc+0x162>
	return pvReturn;
 8009524:	69fb      	ldr	r3, [r7, #28]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3728      	adds	r7, #40	; 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200049dc 	.word	0x200049dc
 8009534:	200049e8 	.word	0x200049e8
 8009538:	200049e0 	.word	0x200049e0
 800953c:	200049d4 	.word	0x200049d4
 8009540:	200049e4 	.word	0x200049e4

08009544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d046      	beq.n	80095e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009556:	2308      	movs	r3, #8
 8009558:	425b      	negs	r3, r3
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4413      	add	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	4b20      	ldr	r3, [pc, #128]	; (80095ec <vPortFree+0xa8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <vPortFree+0x42>
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	e7fe      	b.n	8009584 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <vPortFree+0x5e>
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	e7fe      	b.n	80095a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	4b11      	ldr	r3, [pc, #68]	; (80095ec <vPortFree+0xa8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d019      	beq.n	80095e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d115      	bne.n	80095e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <vPortFree+0xa8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	43db      	mvns	r3, r3
 80095c2:	401a      	ands	r2, r3
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095c8:	f7fe fcc0 	bl	8007f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <vPortFree+0xac>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4413      	add	r3, r2
 80095d6:	4a06      	ldr	r2, [pc, #24]	; (80095f0 <vPortFree+0xac>)
 80095d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095da:	6938      	ldr	r0, [r7, #16]
 80095dc:	f000 f86c 	bl	80096b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80095e0:	f7fe fcc2 	bl	8007f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095e4:	bf00      	nop
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	200049e8 	.word	0x200049e8
 80095f0:	200049e0 	.word	0x200049e0

080095f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009600:	4b27      	ldr	r3, [pc, #156]	; (80096a0 <prvHeapInit+0xac>)
 8009602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00c      	beq.n	8009628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3307      	adds	r3, #7
 8009612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0307 	bic.w	r3, r3, #7
 800961a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	4a1f      	ldr	r2, [pc, #124]	; (80096a0 <prvHeapInit+0xac>)
 8009624:	4413      	add	r3, r2
 8009626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800962c:	4a1d      	ldr	r2, [pc, #116]	; (80096a4 <prvHeapInit+0xb0>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009632:	4b1c      	ldr	r3, [pc, #112]	; (80096a4 <prvHeapInit+0xb0>)
 8009634:	2200      	movs	r2, #0
 8009636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009640:	2208      	movs	r2, #8
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 0307 	bic.w	r3, r3, #7
 800964e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4a15      	ldr	r2, [pc, #84]	; (80096a8 <prvHeapInit+0xb4>)
 8009654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009656:	4b14      	ldr	r3, [pc, #80]	; (80096a8 <prvHeapInit+0xb4>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800965e:	4b12      	ldr	r3, [pc, #72]	; (80096a8 <prvHeapInit+0xb4>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009674:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <prvHeapInit+0xb4>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <prvHeapInit+0xb8>)
 8009682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <prvHeapInit+0xbc>)
 800968a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <prvHeapInit+0xc0>)
 800968e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009692:	601a      	str	r2, [r3, #0]
}
 8009694:	bf00      	nop
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20000dd4 	.word	0x20000dd4
 80096a4:	200049d4 	.word	0x200049d4
 80096a8:	200049dc 	.word	0x200049dc
 80096ac:	200049e4 	.word	0x200049e4
 80096b0:	200049e0 	.word	0x200049e0
 80096b4:	200049e8 	.word	0x200049e8

080096b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096c0:	4b28      	ldr	r3, [pc, #160]	; (8009764 <prvInsertBlockIntoFreeList+0xac>)
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	e002      	b.n	80096cc <prvInsertBlockIntoFreeList+0x14>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d8f7      	bhi.n	80096c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	4413      	add	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d108      	bne.n	80096fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	441a      	add	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	441a      	add	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d118      	bne.n	8009740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	4b15      	ldr	r3, [pc, #84]	; (8009768 <prvInsertBlockIntoFreeList+0xb0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d00d      	beq.n	8009736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	441a      	add	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	e008      	b.n	8009748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <prvInsertBlockIntoFreeList+0xb0>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	e003      	b.n	8009748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d002      	beq.n	8009756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	200049d4 	.word	0x200049d4
 8009768:	200049dc 	.word	0x200049dc

0800976c <__errno>:
 800976c:	4b01      	ldr	r3, [pc, #4]	; (8009774 <__errno+0x8>)
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20000014 	.word	0x20000014

08009778 <__libc_init_array>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	4e0d      	ldr	r6, [pc, #52]	; (80097b0 <__libc_init_array+0x38>)
 800977c:	4c0d      	ldr	r4, [pc, #52]	; (80097b4 <__libc_init_array+0x3c>)
 800977e:	1ba4      	subs	r4, r4, r6
 8009780:	10a4      	asrs	r4, r4, #2
 8009782:	2500      	movs	r5, #0
 8009784:	42a5      	cmp	r5, r4
 8009786:	d109      	bne.n	800979c <__libc_init_array+0x24>
 8009788:	4e0b      	ldr	r6, [pc, #44]	; (80097b8 <__libc_init_array+0x40>)
 800978a:	4c0c      	ldr	r4, [pc, #48]	; (80097bc <__libc_init_array+0x44>)
 800978c:	f000 fc30 	bl	8009ff0 <_init>
 8009790:	1ba4      	subs	r4, r4, r6
 8009792:	10a4      	asrs	r4, r4, #2
 8009794:	2500      	movs	r5, #0
 8009796:	42a5      	cmp	r5, r4
 8009798:	d105      	bne.n	80097a6 <__libc_init_array+0x2e>
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097a0:	4798      	blx	r3
 80097a2:	3501      	adds	r5, #1
 80097a4:	e7ee      	b.n	8009784 <__libc_init_array+0xc>
 80097a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097aa:	4798      	blx	r3
 80097ac:	3501      	adds	r5, #1
 80097ae:	e7f2      	b.n	8009796 <__libc_init_array+0x1e>
 80097b0:	0800a364 	.word	0x0800a364
 80097b4:	0800a364 	.word	0x0800a364
 80097b8:	0800a364 	.word	0x0800a364
 80097bc:	0800a368 	.word	0x0800a368

080097c0 <memcpy>:
 80097c0:	b510      	push	{r4, lr}
 80097c2:	1e43      	subs	r3, r0, #1
 80097c4:	440a      	add	r2, r1
 80097c6:	4291      	cmp	r1, r2
 80097c8:	d100      	bne.n	80097cc <memcpy+0xc>
 80097ca:	bd10      	pop	{r4, pc}
 80097cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d4:	e7f7      	b.n	80097c6 <memcpy+0x6>

080097d6 <memset>:
 80097d6:	4402      	add	r2, r0
 80097d8:	4603      	mov	r3, r0
 80097da:	4293      	cmp	r3, r2
 80097dc:	d100      	bne.n	80097e0 <memset+0xa>
 80097de:	4770      	bx	lr
 80097e0:	f803 1b01 	strb.w	r1, [r3], #1
 80097e4:	e7f9      	b.n	80097da <memset+0x4>
	...

080097e8 <siprintf>:
 80097e8:	b40e      	push	{r1, r2, r3}
 80097ea:	b500      	push	{lr}
 80097ec:	b09c      	sub	sp, #112	; 0x70
 80097ee:	ab1d      	add	r3, sp, #116	; 0x74
 80097f0:	9002      	str	r0, [sp, #8]
 80097f2:	9006      	str	r0, [sp, #24]
 80097f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097f8:	4809      	ldr	r0, [pc, #36]	; (8009820 <siprintf+0x38>)
 80097fa:	9107      	str	r1, [sp, #28]
 80097fc:	9104      	str	r1, [sp, #16]
 80097fe:	4909      	ldr	r1, [pc, #36]	; (8009824 <siprintf+0x3c>)
 8009800:	f853 2b04 	ldr.w	r2, [r3], #4
 8009804:	9105      	str	r1, [sp, #20]
 8009806:	6800      	ldr	r0, [r0, #0]
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	a902      	add	r1, sp, #8
 800980c:	f000 f86e 	bl	80098ec <_svfiprintf_r>
 8009810:	9b02      	ldr	r3, [sp, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	b01c      	add	sp, #112	; 0x70
 8009818:	f85d eb04 	ldr.w	lr, [sp], #4
 800981c:	b003      	add	sp, #12
 800981e:	4770      	bx	lr
 8009820:	20000014 	.word	0x20000014
 8009824:	ffff0208 	.word	0xffff0208

08009828 <strcpy>:
 8009828:	4603      	mov	r3, r0
 800982a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800982e:	f803 2b01 	strb.w	r2, [r3], #1
 8009832:	2a00      	cmp	r2, #0
 8009834:	d1f9      	bne.n	800982a <strcpy+0x2>
 8009836:	4770      	bx	lr

08009838 <__ssputs_r>:
 8009838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	688e      	ldr	r6, [r1, #8]
 800983e:	429e      	cmp	r6, r3
 8009840:	4682      	mov	sl, r0
 8009842:	460c      	mov	r4, r1
 8009844:	4690      	mov	r8, r2
 8009846:	4699      	mov	r9, r3
 8009848:	d837      	bhi.n	80098ba <__ssputs_r+0x82>
 800984a:	898a      	ldrh	r2, [r1, #12]
 800984c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009850:	d031      	beq.n	80098b6 <__ssputs_r+0x7e>
 8009852:	6825      	ldr	r5, [r4, #0]
 8009854:	6909      	ldr	r1, [r1, #16]
 8009856:	1a6f      	subs	r7, r5, r1
 8009858:	6965      	ldr	r5, [r4, #20]
 800985a:	2302      	movs	r3, #2
 800985c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009860:	fb95 f5f3 	sdiv	r5, r5, r3
 8009864:	f109 0301 	add.w	r3, r9, #1
 8009868:	443b      	add	r3, r7
 800986a:	429d      	cmp	r5, r3
 800986c:	bf38      	it	cc
 800986e:	461d      	movcc	r5, r3
 8009870:	0553      	lsls	r3, r2, #21
 8009872:	d530      	bpl.n	80098d6 <__ssputs_r+0x9e>
 8009874:	4629      	mov	r1, r5
 8009876:	f000 fb21 	bl	8009ebc <_malloc_r>
 800987a:	4606      	mov	r6, r0
 800987c:	b950      	cbnz	r0, 8009894 <__ssputs_r+0x5c>
 800987e:	230c      	movs	r3, #12
 8009880:	f8ca 3000 	str.w	r3, [sl]
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	463a      	mov	r2, r7
 8009896:	6921      	ldr	r1, [r4, #16]
 8009898:	f7ff ff92 	bl	80097c0 <memcpy>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	6126      	str	r6, [r4, #16]
 80098aa:	6165      	str	r5, [r4, #20]
 80098ac:	443e      	add	r6, r7
 80098ae:	1bed      	subs	r5, r5, r7
 80098b0:	6026      	str	r6, [r4, #0]
 80098b2:	60a5      	str	r5, [r4, #8]
 80098b4:	464e      	mov	r6, r9
 80098b6:	454e      	cmp	r6, r9
 80098b8:	d900      	bls.n	80098bc <__ssputs_r+0x84>
 80098ba:	464e      	mov	r6, r9
 80098bc:	4632      	mov	r2, r6
 80098be:	4641      	mov	r1, r8
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	f000 fa93 	bl	8009dec <memmove>
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	1b9b      	subs	r3, r3, r6
 80098ca:	60a3      	str	r3, [r4, #8]
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	441e      	add	r6, r3
 80098d0:	6026      	str	r6, [r4, #0]
 80098d2:	2000      	movs	r0, #0
 80098d4:	e7dc      	b.n	8009890 <__ssputs_r+0x58>
 80098d6:	462a      	mov	r2, r5
 80098d8:	f000 fb4a 	bl	8009f70 <_realloc_r>
 80098dc:	4606      	mov	r6, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	d1e2      	bne.n	80098a8 <__ssputs_r+0x70>
 80098e2:	6921      	ldr	r1, [r4, #16]
 80098e4:	4650      	mov	r0, sl
 80098e6:	f000 fa9b 	bl	8009e20 <_free_r>
 80098ea:	e7c8      	b.n	800987e <__ssputs_r+0x46>

080098ec <_svfiprintf_r>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	461d      	mov	r5, r3
 80098f2:	898b      	ldrh	r3, [r1, #12]
 80098f4:	061f      	lsls	r7, r3, #24
 80098f6:	b09d      	sub	sp, #116	; 0x74
 80098f8:	4680      	mov	r8, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	4616      	mov	r6, r2
 80098fe:	d50f      	bpl.n	8009920 <_svfiprintf_r+0x34>
 8009900:	690b      	ldr	r3, [r1, #16]
 8009902:	b96b      	cbnz	r3, 8009920 <_svfiprintf_r+0x34>
 8009904:	2140      	movs	r1, #64	; 0x40
 8009906:	f000 fad9 	bl	8009ebc <_malloc_r>
 800990a:	6020      	str	r0, [r4, #0]
 800990c:	6120      	str	r0, [r4, #16]
 800990e:	b928      	cbnz	r0, 800991c <_svfiprintf_r+0x30>
 8009910:	230c      	movs	r3, #12
 8009912:	f8c8 3000 	str.w	r3, [r8]
 8009916:	f04f 30ff 	mov.w	r0, #4294967295
 800991a:	e0c8      	b.n	8009aae <_svfiprintf_r+0x1c2>
 800991c:	2340      	movs	r3, #64	; 0x40
 800991e:	6163      	str	r3, [r4, #20]
 8009920:	2300      	movs	r3, #0
 8009922:	9309      	str	r3, [sp, #36]	; 0x24
 8009924:	2320      	movs	r3, #32
 8009926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992a:	2330      	movs	r3, #48	; 0x30
 800992c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009930:	9503      	str	r5, [sp, #12]
 8009932:	f04f 0b01 	mov.w	fp, #1
 8009936:	4637      	mov	r7, r6
 8009938:	463d      	mov	r5, r7
 800993a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800993e:	b10b      	cbz	r3, 8009944 <_svfiprintf_r+0x58>
 8009940:	2b25      	cmp	r3, #37	; 0x25
 8009942:	d13e      	bne.n	80099c2 <_svfiprintf_r+0xd6>
 8009944:	ebb7 0a06 	subs.w	sl, r7, r6
 8009948:	d00b      	beq.n	8009962 <_svfiprintf_r+0x76>
 800994a:	4653      	mov	r3, sl
 800994c:	4632      	mov	r2, r6
 800994e:	4621      	mov	r1, r4
 8009950:	4640      	mov	r0, r8
 8009952:	f7ff ff71 	bl	8009838 <__ssputs_r>
 8009956:	3001      	adds	r0, #1
 8009958:	f000 80a4 	beq.w	8009aa4 <_svfiprintf_r+0x1b8>
 800995c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995e:	4453      	add	r3, sl
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	783b      	ldrb	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 809d 	beq.w	8009aa4 <_svfiprintf_r+0x1b8>
 800996a:	2300      	movs	r3, #0
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	9307      	str	r3, [sp, #28]
 8009978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800997c:	931a      	str	r3, [sp, #104]	; 0x68
 800997e:	462f      	mov	r7, r5
 8009980:	2205      	movs	r2, #5
 8009982:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009986:	4850      	ldr	r0, [pc, #320]	; (8009ac8 <_svfiprintf_r+0x1dc>)
 8009988:	f7f6 fc42 	bl	8000210 <memchr>
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	b9d0      	cbnz	r0, 80099c6 <_svfiprintf_r+0xda>
 8009990:	06d9      	lsls	r1, r3, #27
 8009992:	bf44      	itt	mi
 8009994:	2220      	movmi	r2, #32
 8009996:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800999a:	071a      	lsls	r2, r3, #28
 800999c:	bf44      	itt	mi
 800999e:	222b      	movmi	r2, #43	; 0x2b
 80099a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099a4:	782a      	ldrb	r2, [r5, #0]
 80099a6:	2a2a      	cmp	r2, #42	; 0x2a
 80099a8:	d015      	beq.n	80099d6 <_svfiprintf_r+0xea>
 80099aa:	9a07      	ldr	r2, [sp, #28]
 80099ac:	462f      	mov	r7, r5
 80099ae:	2000      	movs	r0, #0
 80099b0:	250a      	movs	r5, #10
 80099b2:	4639      	mov	r1, r7
 80099b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b8:	3b30      	subs	r3, #48	; 0x30
 80099ba:	2b09      	cmp	r3, #9
 80099bc:	d94d      	bls.n	8009a5a <_svfiprintf_r+0x16e>
 80099be:	b1b8      	cbz	r0, 80099f0 <_svfiprintf_r+0x104>
 80099c0:	e00f      	b.n	80099e2 <_svfiprintf_r+0xf6>
 80099c2:	462f      	mov	r7, r5
 80099c4:	e7b8      	b.n	8009938 <_svfiprintf_r+0x4c>
 80099c6:	4a40      	ldr	r2, [pc, #256]	; (8009ac8 <_svfiprintf_r+0x1dc>)
 80099c8:	1a80      	subs	r0, r0, r2
 80099ca:	fa0b f000 	lsl.w	r0, fp, r0
 80099ce:	4318      	orrs	r0, r3
 80099d0:	9004      	str	r0, [sp, #16]
 80099d2:	463d      	mov	r5, r7
 80099d4:	e7d3      	b.n	800997e <_svfiprintf_r+0x92>
 80099d6:	9a03      	ldr	r2, [sp, #12]
 80099d8:	1d11      	adds	r1, r2, #4
 80099da:	6812      	ldr	r2, [r2, #0]
 80099dc:	9103      	str	r1, [sp, #12]
 80099de:	2a00      	cmp	r2, #0
 80099e0:	db01      	blt.n	80099e6 <_svfiprintf_r+0xfa>
 80099e2:	9207      	str	r2, [sp, #28]
 80099e4:	e004      	b.n	80099f0 <_svfiprintf_r+0x104>
 80099e6:	4252      	negs	r2, r2
 80099e8:	f043 0302 	orr.w	r3, r3, #2
 80099ec:	9207      	str	r2, [sp, #28]
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	783b      	ldrb	r3, [r7, #0]
 80099f2:	2b2e      	cmp	r3, #46	; 0x2e
 80099f4:	d10c      	bne.n	8009a10 <_svfiprintf_r+0x124>
 80099f6:	787b      	ldrb	r3, [r7, #1]
 80099f8:	2b2a      	cmp	r3, #42	; 0x2a
 80099fa:	d133      	bne.n	8009a64 <_svfiprintf_r+0x178>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	1d1a      	adds	r2, r3, #4
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	9203      	str	r2, [sp, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfb8      	it	lt
 8009a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a0c:	3702      	adds	r7, #2
 8009a0e:	9305      	str	r3, [sp, #20]
 8009a10:	4d2e      	ldr	r5, [pc, #184]	; (8009acc <_svfiprintf_r+0x1e0>)
 8009a12:	7839      	ldrb	r1, [r7, #0]
 8009a14:	2203      	movs	r2, #3
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7f6 fbfa 	bl	8000210 <memchr>
 8009a1c:	b138      	cbz	r0, 8009a2e <_svfiprintf_r+0x142>
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	1b40      	subs	r0, r0, r5
 8009a22:	fa03 f000 	lsl.w	r0, r3, r0
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	4303      	orrs	r3, r0
 8009a2a:	3701      	adds	r7, #1
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	7839      	ldrb	r1, [r7, #0]
 8009a30:	4827      	ldr	r0, [pc, #156]	; (8009ad0 <_svfiprintf_r+0x1e4>)
 8009a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a36:	2206      	movs	r2, #6
 8009a38:	1c7e      	adds	r6, r7, #1
 8009a3a:	f7f6 fbe9 	bl	8000210 <memchr>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d038      	beq.n	8009ab4 <_svfiprintf_r+0x1c8>
 8009a42:	4b24      	ldr	r3, [pc, #144]	; (8009ad4 <_svfiprintf_r+0x1e8>)
 8009a44:	bb13      	cbnz	r3, 8009a8c <_svfiprintf_r+0x1a0>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	3307      	adds	r3, #7
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	3308      	adds	r3, #8
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a54:	444b      	add	r3, r9
 8009a56:	9309      	str	r3, [sp, #36]	; 0x24
 8009a58:	e76d      	b.n	8009936 <_svfiprintf_r+0x4a>
 8009a5a:	fb05 3202 	mla	r2, r5, r2, r3
 8009a5e:	2001      	movs	r0, #1
 8009a60:	460f      	mov	r7, r1
 8009a62:	e7a6      	b.n	80099b2 <_svfiprintf_r+0xc6>
 8009a64:	2300      	movs	r3, #0
 8009a66:	3701      	adds	r7, #1
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	250a      	movs	r5, #10
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a74:	3a30      	subs	r2, #48	; 0x30
 8009a76:	2a09      	cmp	r2, #9
 8009a78:	d903      	bls.n	8009a82 <_svfiprintf_r+0x196>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c8      	beq.n	8009a10 <_svfiprintf_r+0x124>
 8009a7e:	9105      	str	r1, [sp, #20]
 8009a80:	e7c6      	b.n	8009a10 <_svfiprintf_r+0x124>
 8009a82:	fb05 2101 	mla	r1, r5, r1, r2
 8009a86:	2301      	movs	r3, #1
 8009a88:	4607      	mov	r7, r0
 8009a8a:	e7f0      	b.n	8009a6e <_svfiprintf_r+0x182>
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	4622      	mov	r2, r4
 8009a92:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <_svfiprintf_r+0x1ec>)
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	4640      	mov	r0, r8
 8009a98:	f3af 8000 	nop.w
 8009a9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009aa0:	4681      	mov	r9, r0
 8009aa2:	d1d6      	bne.n	8009a52 <_svfiprintf_r+0x166>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	065b      	lsls	r3, r3, #25
 8009aa8:	f53f af35 	bmi.w	8009916 <_svfiprintf_r+0x2a>
 8009aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aae:	b01d      	add	sp, #116	; 0x74
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	ab03      	add	r3, sp, #12
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	4622      	mov	r2, r4
 8009aba:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <_svfiprintf_r+0x1ec>)
 8009abc:	a904      	add	r1, sp, #16
 8009abe:	4640      	mov	r0, r8
 8009ac0:	f000 f882 	bl	8009bc8 <_printf_i>
 8009ac4:	e7ea      	b.n	8009a9c <_svfiprintf_r+0x1b0>
 8009ac6:	bf00      	nop
 8009ac8:	0800a328 	.word	0x0800a328
 8009acc:	0800a32e 	.word	0x0800a32e
 8009ad0:	0800a332 	.word	0x0800a332
 8009ad4:	00000000 	.word	0x00000000
 8009ad8:	08009839 	.word	0x08009839

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4691      	mov	r9, r2
 8009ae2:	461f      	mov	r7, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	f8c9 3000 	str.w	r3, [r9]
 8009af6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009afa:	4606      	mov	r6, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	b112      	cbz	r2, 8009b06 <_printf_common+0x2a>
 8009b00:	3301      	adds	r3, #1
 8009b02:	f8c9 3000 	str.w	r3, [r9]
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	0699      	lsls	r1, r3, #26
 8009b0a:	bf42      	ittt	mi
 8009b0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b10:	3302      	addmi	r3, #2
 8009b12:	f8c9 3000 	strmi.w	r3, [r9]
 8009b16:	6825      	ldr	r5, [r4, #0]
 8009b18:	f015 0506 	ands.w	r5, r5, #6
 8009b1c:	d107      	bne.n	8009b2e <_printf_common+0x52>
 8009b1e:	f104 0a19 	add.w	sl, r4, #25
 8009b22:	68e3      	ldr	r3, [r4, #12]
 8009b24:	f8d9 2000 	ldr.w	r2, [r9]
 8009b28:	1a9b      	subs	r3, r3, r2
 8009b2a:	42ab      	cmp	r3, r5
 8009b2c:	dc28      	bgt.n	8009b80 <_printf_common+0xa4>
 8009b2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	3300      	adds	r3, #0
 8009b36:	bf18      	it	ne
 8009b38:	2301      	movne	r3, #1
 8009b3a:	0692      	lsls	r2, r2, #26
 8009b3c:	d42d      	bmi.n	8009b9a <_printf_common+0xbe>
 8009b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b42:	4639      	mov	r1, r7
 8009b44:	4630      	mov	r0, r6
 8009b46:	47c0      	blx	r8
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d020      	beq.n	8009b8e <_printf_common+0xb2>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	68e5      	ldr	r5, [r4, #12]
 8009b50:	f8d9 2000 	ldr.w	r2, [r9]
 8009b54:	f003 0306 	and.w	r3, r3, #6
 8009b58:	2b04      	cmp	r3, #4
 8009b5a:	bf08      	it	eq
 8009b5c:	1aad      	subeq	r5, r5, r2
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	6922      	ldr	r2, [r4, #16]
 8009b62:	bf0c      	ite	eq
 8009b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b68:	2500      	movne	r5, #0
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	bfc4      	itt	gt
 8009b6e:	1a9b      	subgt	r3, r3, r2
 8009b70:	18ed      	addgt	r5, r5, r3
 8009b72:	f04f 0900 	mov.w	r9, #0
 8009b76:	341a      	adds	r4, #26
 8009b78:	454d      	cmp	r5, r9
 8009b7a:	d11a      	bne.n	8009bb2 <_printf_common+0xd6>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e008      	b.n	8009b92 <_printf_common+0xb6>
 8009b80:	2301      	movs	r3, #1
 8009b82:	4652      	mov	r2, sl
 8009b84:	4639      	mov	r1, r7
 8009b86:	4630      	mov	r0, r6
 8009b88:	47c0      	blx	r8
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d103      	bne.n	8009b96 <_printf_common+0xba>
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b96:	3501      	adds	r5, #1
 8009b98:	e7c3      	b.n	8009b22 <_printf_common+0x46>
 8009b9a:	18e1      	adds	r1, r4, r3
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	2030      	movs	r0, #48	; 0x30
 8009ba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ba4:	4422      	add	r2, r4
 8009ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009baa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bae:	3302      	adds	r3, #2
 8009bb0:	e7c5      	b.n	8009b3e <_printf_common+0x62>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	4630      	mov	r0, r6
 8009bba:	47c0      	blx	r8
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d0e6      	beq.n	8009b8e <_printf_common+0xb2>
 8009bc0:	f109 0901 	add.w	r9, r9, #1
 8009bc4:	e7d8      	b.n	8009b78 <_printf_common+0x9c>
	...

08009bc8 <_printf_i>:
 8009bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	7e09      	ldrb	r1, [r1, #24]
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	296e      	cmp	r1, #110	; 0x6e
 8009bd8:	4617      	mov	r7, r2
 8009bda:	4606      	mov	r6, r0
 8009bdc:	4698      	mov	r8, r3
 8009bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009be0:	f000 80b3 	beq.w	8009d4a <_printf_i+0x182>
 8009be4:	d822      	bhi.n	8009c2c <_printf_i+0x64>
 8009be6:	2963      	cmp	r1, #99	; 0x63
 8009be8:	d036      	beq.n	8009c58 <_printf_i+0x90>
 8009bea:	d80a      	bhi.n	8009c02 <_printf_i+0x3a>
 8009bec:	2900      	cmp	r1, #0
 8009bee:	f000 80b9 	beq.w	8009d64 <_printf_i+0x19c>
 8009bf2:	2958      	cmp	r1, #88	; 0x58
 8009bf4:	f000 8083 	beq.w	8009cfe <_printf_i+0x136>
 8009bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c00:	e032      	b.n	8009c68 <_printf_i+0xa0>
 8009c02:	2964      	cmp	r1, #100	; 0x64
 8009c04:	d001      	beq.n	8009c0a <_printf_i+0x42>
 8009c06:	2969      	cmp	r1, #105	; 0x69
 8009c08:	d1f6      	bne.n	8009bf8 <_printf_i+0x30>
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	6813      	ldr	r3, [r2, #0]
 8009c0e:	0605      	lsls	r5, r0, #24
 8009c10:	f103 0104 	add.w	r1, r3, #4
 8009c14:	d52a      	bpl.n	8009c6c <_printf_i+0xa4>
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6011      	str	r1, [r2, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da03      	bge.n	8009c26 <_printf_i+0x5e>
 8009c1e:	222d      	movs	r2, #45	; 0x2d
 8009c20:	425b      	negs	r3, r3
 8009c22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c26:	486f      	ldr	r0, [pc, #444]	; (8009de4 <_printf_i+0x21c>)
 8009c28:	220a      	movs	r2, #10
 8009c2a:	e039      	b.n	8009ca0 <_printf_i+0xd8>
 8009c2c:	2973      	cmp	r1, #115	; 0x73
 8009c2e:	f000 809d 	beq.w	8009d6c <_printf_i+0x1a4>
 8009c32:	d808      	bhi.n	8009c46 <_printf_i+0x7e>
 8009c34:	296f      	cmp	r1, #111	; 0x6f
 8009c36:	d020      	beq.n	8009c7a <_printf_i+0xb2>
 8009c38:	2970      	cmp	r1, #112	; 0x70
 8009c3a:	d1dd      	bne.n	8009bf8 <_printf_i+0x30>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	f043 0320 	orr.w	r3, r3, #32
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	e003      	b.n	8009c4e <_printf_i+0x86>
 8009c46:	2975      	cmp	r1, #117	; 0x75
 8009c48:	d017      	beq.n	8009c7a <_printf_i+0xb2>
 8009c4a:	2978      	cmp	r1, #120	; 0x78
 8009c4c:	d1d4      	bne.n	8009bf8 <_printf_i+0x30>
 8009c4e:	2378      	movs	r3, #120	; 0x78
 8009c50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c54:	4864      	ldr	r0, [pc, #400]	; (8009de8 <_printf_i+0x220>)
 8009c56:	e055      	b.n	8009d04 <_printf_i+0x13c>
 8009c58:	6813      	ldr	r3, [r2, #0]
 8009c5a:	1d19      	adds	r1, r3, #4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6011      	str	r1, [r2, #0]
 8009c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e08c      	b.n	8009d86 <_printf_i+0x1be>
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6011      	str	r1, [r2, #0]
 8009c70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c74:	bf18      	it	ne
 8009c76:	b21b      	sxthne	r3, r3
 8009c78:	e7cf      	b.n	8009c1a <_printf_i+0x52>
 8009c7a:	6813      	ldr	r3, [r2, #0]
 8009c7c:	6825      	ldr	r5, [r4, #0]
 8009c7e:	1d18      	adds	r0, r3, #4
 8009c80:	6010      	str	r0, [r2, #0]
 8009c82:	0628      	lsls	r0, r5, #24
 8009c84:	d501      	bpl.n	8009c8a <_printf_i+0xc2>
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	e002      	b.n	8009c90 <_printf_i+0xc8>
 8009c8a:	0668      	lsls	r0, r5, #25
 8009c8c:	d5fb      	bpl.n	8009c86 <_printf_i+0xbe>
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	4854      	ldr	r0, [pc, #336]	; (8009de4 <_printf_i+0x21c>)
 8009c92:	296f      	cmp	r1, #111	; 0x6f
 8009c94:	bf14      	ite	ne
 8009c96:	220a      	movne	r2, #10
 8009c98:	2208      	moveq	r2, #8
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca0:	6865      	ldr	r5, [r4, #4]
 8009ca2:	60a5      	str	r5, [r4, #8]
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	f2c0 8095 	blt.w	8009dd4 <_printf_i+0x20c>
 8009caa:	6821      	ldr	r1, [r4, #0]
 8009cac:	f021 0104 	bic.w	r1, r1, #4
 8009cb0:	6021      	str	r1, [r4, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d13d      	bne.n	8009d32 <_printf_i+0x16a>
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	f040 808e 	bne.w	8009dd8 <_printf_i+0x210>
 8009cbc:	4665      	mov	r5, ip
 8009cbe:	2a08      	cmp	r2, #8
 8009cc0:	d10b      	bne.n	8009cda <_printf_i+0x112>
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	07db      	lsls	r3, r3, #31
 8009cc6:	d508      	bpl.n	8009cda <_printf_i+0x112>
 8009cc8:	6923      	ldr	r3, [r4, #16]
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	bfde      	ittt	le
 8009cd0:	2330      	movle	r3, #48	; 0x30
 8009cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cda:	ebac 0305 	sub.w	r3, ip, r5
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	f8cd 8000 	str.w	r8, [sp]
 8009ce4:	463b      	mov	r3, r7
 8009ce6:	aa03      	add	r2, sp, #12
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7ff fef6 	bl	8009adc <_printf_common>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d14d      	bne.n	8009d90 <_printf_i+0x1c8>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	b005      	add	sp, #20
 8009cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	4839      	ldr	r0, [pc, #228]	; (8009de4 <_printf_i+0x21c>)
 8009d00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d04:	6813      	ldr	r3, [r2, #0]
 8009d06:	6821      	ldr	r1, [r4, #0]
 8009d08:	1d1d      	adds	r5, r3, #4
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6015      	str	r5, [r2, #0]
 8009d0e:	060a      	lsls	r2, r1, #24
 8009d10:	d50b      	bpl.n	8009d2a <_printf_i+0x162>
 8009d12:	07ca      	lsls	r2, r1, #31
 8009d14:	bf44      	itt	mi
 8009d16:	f041 0120 	orrmi.w	r1, r1, #32
 8009d1a:	6021      	strmi	r1, [r4, #0]
 8009d1c:	b91b      	cbnz	r3, 8009d26 <_printf_i+0x15e>
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	f022 0220 	bic.w	r2, r2, #32
 8009d24:	6022      	str	r2, [r4, #0]
 8009d26:	2210      	movs	r2, #16
 8009d28:	e7b7      	b.n	8009c9a <_printf_i+0xd2>
 8009d2a:	064d      	lsls	r5, r1, #25
 8009d2c:	bf48      	it	mi
 8009d2e:	b29b      	uxthmi	r3, r3
 8009d30:	e7ef      	b.n	8009d12 <_printf_i+0x14a>
 8009d32:	4665      	mov	r5, ip
 8009d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d38:	fb02 3311 	mls	r3, r2, r1, r3
 8009d3c:	5cc3      	ldrb	r3, [r0, r3]
 8009d3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d42:	460b      	mov	r3, r1
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d1f5      	bne.n	8009d34 <_printf_i+0x16c>
 8009d48:	e7b9      	b.n	8009cbe <_printf_i+0xf6>
 8009d4a:	6813      	ldr	r3, [r2, #0]
 8009d4c:	6825      	ldr	r5, [r4, #0]
 8009d4e:	6961      	ldr	r1, [r4, #20]
 8009d50:	1d18      	adds	r0, r3, #4
 8009d52:	6010      	str	r0, [r2, #0]
 8009d54:	0628      	lsls	r0, r5, #24
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	d501      	bpl.n	8009d5e <_printf_i+0x196>
 8009d5a:	6019      	str	r1, [r3, #0]
 8009d5c:	e002      	b.n	8009d64 <_printf_i+0x19c>
 8009d5e:	066a      	lsls	r2, r5, #25
 8009d60:	d5fb      	bpl.n	8009d5a <_printf_i+0x192>
 8009d62:	8019      	strh	r1, [r3, #0]
 8009d64:	2300      	movs	r3, #0
 8009d66:	6123      	str	r3, [r4, #16]
 8009d68:	4665      	mov	r5, ip
 8009d6a:	e7b9      	b.n	8009ce0 <_printf_i+0x118>
 8009d6c:	6813      	ldr	r3, [r2, #0]
 8009d6e:	1d19      	adds	r1, r3, #4
 8009d70:	6011      	str	r1, [r2, #0]
 8009d72:	681d      	ldr	r5, [r3, #0]
 8009d74:	6862      	ldr	r2, [r4, #4]
 8009d76:	2100      	movs	r1, #0
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f7f6 fa49 	bl	8000210 <memchr>
 8009d7e:	b108      	cbz	r0, 8009d84 <_printf_i+0x1bc>
 8009d80:	1b40      	subs	r0, r0, r5
 8009d82:	6060      	str	r0, [r4, #4]
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	6123      	str	r3, [r4, #16]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d8e:	e7a7      	b.n	8009ce0 <_printf_i+0x118>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	462a      	mov	r2, r5
 8009d94:	4639      	mov	r1, r7
 8009d96:	4630      	mov	r0, r6
 8009d98:	47c0      	blx	r8
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	d0aa      	beq.n	8009cf4 <_printf_i+0x12c>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	079b      	lsls	r3, r3, #30
 8009da2:	d413      	bmi.n	8009dcc <_printf_i+0x204>
 8009da4:	68e0      	ldr	r0, [r4, #12]
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	4298      	cmp	r0, r3
 8009daa:	bfb8      	it	lt
 8009dac:	4618      	movlt	r0, r3
 8009dae:	e7a3      	b.n	8009cf8 <_printf_i+0x130>
 8009db0:	2301      	movs	r3, #1
 8009db2:	464a      	mov	r2, r9
 8009db4:	4639      	mov	r1, r7
 8009db6:	4630      	mov	r0, r6
 8009db8:	47c0      	blx	r8
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d09a      	beq.n	8009cf4 <_printf_i+0x12c>
 8009dbe:	3501      	adds	r5, #1
 8009dc0:	68e3      	ldr	r3, [r4, #12]
 8009dc2:	9a03      	ldr	r2, [sp, #12]
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	42ab      	cmp	r3, r5
 8009dc8:	dcf2      	bgt.n	8009db0 <_printf_i+0x1e8>
 8009dca:	e7eb      	b.n	8009da4 <_printf_i+0x1dc>
 8009dcc:	2500      	movs	r5, #0
 8009dce:	f104 0919 	add.w	r9, r4, #25
 8009dd2:	e7f5      	b.n	8009dc0 <_printf_i+0x1f8>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1ac      	bne.n	8009d32 <_printf_i+0x16a>
 8009dd8:	7803      	ldrb	r3, [r0, #0]
 8009dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de2:	e76c      	b.n	8009cbe <_printf_i+0xf6>
 8009de4:	0800a339 	.word	0x0800a339
 8009de8:	0800a34a 	.word	0x0800a34a

08009dec <memmove>:
 8009dec:	4288      	cmp	r0, r1
 8009dee:	b510      	push	{r4, lr}
 8009df0:	eb01 0302 	add.w	r3, r1, r2
 8009df4:	d807      	bhi.n	8009e06 <memmove+0x1a>
 8009df6:	1e42      	subs	r2, r0, #1
 8009df8:	4299      	cmp	r1, r3
 8009dfa:	d00a      	beq.n	8009e12 <memmove+0x26>
 8009dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e04:	e7f8      	b.n	8009df8 <memmove+0xc>
 8009e06:	4283      	cmp	r3, r0
 8009e08:	d9f5      	bls.n	8009df6 <memmove+0xa>
 8009e0a:	1881      	adds	r1, r0, r2
 8009e0c:	1ad2      	subs	r2, r2, r3
 8009e0e:	42d3      	cmn	r3, r2
 8009e10:	d100      	bne.n	8009e14 <memmove+0x28>
 8009e12:	bd10      	pop	{r4, pc}
 8009e14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e1c:	e7f7      	b.n	8009e0e <memmove+0x22>
	...

08009e20 <_free_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4605      	mov	r5, r0
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d045      	beq.n	8009eb4 <_free_r+0x94>
 8009e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2c:	1f0c      	subs	r4, r1, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfb8      	it	lt
 8009e32:	18e4      	addlt	r4, r4, r3
 8009e34:	f000 f8d2 	bl	8009fdc <__malloc_lock>
 8009e38:	4a1f      	ldr	r2, [pc, #124]	; (8009eb8 <_free_r+0x98>)
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	b933      	cbnz	r3, 8009e4e <_free_r+0x2e>
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	6014      	str	r4, [r2, #0]
 8009e44:	4628      	mov	r0, r5
 8009e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4a:	f000 b8c8 	b.w	8009fde <__malloc_unlock>
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	d90c      	bls.n	8009e6c <_free_r+0x4c>
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	1862      	adds	r2, r4, r1
 8009e56:	4293      	cmp	r3, r2
 8009e58:	bf04      	itt	eq
 8009e5a:	681a      	ldreq	r2, [r3, #0]
 8009e5c:	685b      	ldreq	r3, [r3, #4]
 8009e5e:	6063      	str	r3, [r4, #4]
 8009e60:	bf04      	itt	eq
 8009e62:	1852      	addeq	r2, r2, r1
 8009e64:	6022      	streq	r2, [r4, #0]
 8009e66:	6004      	str	r4, [r0, #0]
 8009e68:	e7ec      	b.n	8009e44 <_free_r+0x24>
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	b10a      	cbz	r2, 8009e74 <_free_r+0x54>
 8009e70:	42a2      	cmp	r2, r4
 8009e72:	d9fa      	bls.n	8009e6a <_free_r+0x4a>
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	1858      	adds	r0, r3, r1
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d10b      	bne.n	8009e94 <_free_r+0x74>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	4401      	add	r1, r0
 8009e80:	1858      	adds	r0, r3, r1
 8009e82:	4282      	cmp	r2, r0
 8009e84:	6019      	str	r1, [r3, #0]
 8009e86:	d1dd      	bne.n	8009e44 <_free_r+0x24>
 8009e88:	6810      	ldr	r0, [r2, #0]
 8009e8a:	6852      	ldr	r2, [r2, #4]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	4401      	add	r1, r0
 8009e90:	6019      	str	r1, [r3, #0]
 8009e92:	e7d7      	b.n	8009e44 <_free_r+0x24>
 8009e94:	d902      	bls.n	8009e9c <_free_r+0x7c>
 8009e96:	230c      	movs	r3, #12
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	e7d3      	b.n	8009e44 <_free_r+0x24>
 8009e9c:	6820      	ldr	r0, [r4, #0]
 8009e9e:	1821      	adds	r1, r4, r0
 8009ea0:	428a      	cmp	r2, r1
 8009ea2:	bf04      	itt	eq
 8009ea4:	6811      	ldreq	r1, [r2, #0]
 8009ea6:	6852      	ldreq	r2, [r2, #4]
 8009ea8:	6062      	str	r2, [r4, #4]
 8009eaa:	bf04      	itt	eq
 8009eac:	1809      	addeq	r1, r1, r0
 8009eae:	6021      	streq	r1, [r4, #0]
 8009eb0:	605c      	str	r4, [r3, #4]
 8009eb2:	e7c7      	b.n	8009e44 <_free_r+0x24>
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200049ec 	.word	0x200049ec

08009ebc <_malloc_r>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	1ccd      	adds	r5, r1, #3
 8009ec0:	f025 0503 	bic.w	r5, r5, #3
 8009ec4:	3508      	adds	r5, #8
 8009ec6:	2d0c      	cmp	r5, #12
 8009ec8:	bf38      	it	cc
 8009eca:	250c      	movcc	r5, #12
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	4606      	mov	r6, r0
 8009ed0:	db01      	blt.n	8009ed6 <_malloc_r+0x1a>
 8009ed2:	42a9      	cmp	r1, r5
 8009ed4:	d903      	bls.n	8009ede <_malloc_r+0x22>
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	2000      	movs	r0, #0
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	f000 f87d 	bl	8009fdc <__malloc_lock>
 8009ee2:	4a21      	ldr	r2, [pc, #132]	; (8009f68 <_malloc_r+0xac>)
 8009ee4:	6814      	ldr	r4, [r2, #0]
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	b991      	cbnz	r1, 8009f10 <_malloc_r+0x54>
 8009eea:	4c20      	ldr	r4, [pc, #128]	; (8009f6c <_malloc_r+0xb0>)
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	b91b      	cbnz	r3, 8009ef8 <_malloc_r+0x3c>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f000 f863 	bl	8009fbc <_sbrk_r>
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 f85e 	bl	8009fbc <_sbrk_r>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d124      	bne.n	8009f4e <_malloc_r+0x92>
 8009f04:	230c      	movs	r3, #12
 8009f06:	6033      	str	r3, [r6, #0]
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f000 f868 	bl	8009fde <__malloc_unlock>
 8009f0e:	e7e4      	b.n	8009eda <_malloc_r+0x1e>
 8009f10:	680b      	ldr	r3, [r1, #0]
 8009f12:	1b5b      	subs	r3, r3, r5
 8009f14:	d418      	bmi.n	8009f48 <_malloc_r+0x8c>
 8009f16:	2b0b      	cmp	r3, #11
 8009f18:	d90f      	bls.n	8009f3a <_malloc_r+0x7e>
 8009f1a:	600b      	str	r3, [r1, #0]
 8009f1c:	50cd      	str	r5, [r1, r3]
 8009f1e:	18cc      	adds	r4, r1, r3
 8009f20:	4630      	mov	r0, r6
 8009f22:	f000 f85c 	bl	8009fde <__malloc_unlock>
 8009f26:	f104 000b 	add.w	r0, r4, #11
 8009f2a:	1d23      	adds	r3, r4, #4
 8009f2c:	f020 0007 	bic.w	r0, r0, #7
 8009f30:	1ac3      	subs	r3, r0, r3
 8009f32:	d0d3      	beq.n	8009edc <_malloc_r+0x20>
 8009f34:	425a      	negs	r2, r3
 8009f36:	50e2      	str	r2, [r4, r3]
 8009f38:	e7d0      	b.n	8009edc <_malloc_r+0x20>
 8009f3a:	428c      	cmp	r4, r1
 8009f3c:	684b      	ldr	r3, [r1, #4]
 8009f3e:	bf16      	itet	ne
 8009f40:	6063      	strne	r3, [r4, #4]
 8009f42:	6013      	streq	r3, [r2, #0]
 8009f44:	460c      	movne	r4, r1
 8009f46:	e7eb      	b.n	8009f20 <_malloc_r+0x64>
 8009f48:	460c      	mov	r4, r1
 8009f4a:	6849      	ldr	r1, [r1, #4]
 8009f4c:	e7cc      	b.n	8009ee8 <_malloc_r+0x2c>
 8009f4e:	1cc4      	adds	r4, r0, #3
 8009f50:	f024 0403 	bic.w	r4, r4, #3
 8009f54:	42a0      	cmp	r0, r4
 8009f56:	d005      	beq.n	8009f64 <_malloc_r+0xa8>
 8009f58:	1a21      	subs	r1, r4, r0
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 f82e 	bl	8009fbc <_sbrk_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d0cf      	beq.n	8009f04 <_malloc_r+0x48>
 8009f64:	6025      	str	r5, [r4, #0]
 8009f66:	e7db      	b.n	8009f20 <_malloc_r+0x64>
 8009f68:	200049ec 	.word	0x200049ec
 8009f6c:	200049f0 	.word	0x200049f0

08009f70 <_realloc_r>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	4607      	mov	r7, r0
 8009f74:	4614      	mov	r4, r2
 8009f76:	460e      	mov	r6, r1
 8009f78:	b921      	cbnz	r1, 8009f84 <_realloc_r+0x14>
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f80:	f7ff bf9c 	b.w	8009ebc <_malloc_r>
 8009f84:	b922      	cbnz	r2, 8009f90 <_realloc_r+0x20>
 8009f86:	f7ff ff4b 	bl	8009e20 <_free_r>
 8009f8a:	4625      	mov	r5, r4
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f90:	f000 f826 	bl	8009fe0 <_malloc_usable_size_r>
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d20f      	bcs.n	8009fb8 <_realloc_r+0x48>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f7ff ff8e 	bl	8009ebc <_malloc_r>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d0f2      	beq.n	8009f8c <_realloc_r+0x1c>
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4622      	mov	r2, r4
 8009faa:	f7ff fc09 	bl	80097c0 <memcpy>
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f7ff ff35 	bl	8009e20 <_free_r>
 8009fb6:	e7e9      	b.n	8009f8c <_realloc_r+0x1c>
 8009fb8:	4635      	mov	r5, r6
 8009fba:	e7e7      	b.n	8009f8c <_realloc_r+0x1c>

08009fbc <_sbrk_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4c06      	ldr	r4, [pc, #24]	; (8009fd8 <_sbrk_r+0x1c>)
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	f7f6 fe8e 	bl	8000ce8 <_sbrk>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_sbrk_r+0x1a>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_sbrk_r+0x1a>
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	2000869c 	.word	0x2000869c

08009fdc <__malloc_lock>:
 8009fdc:	4770      	bx	lr

08009fde <__malloc_unlock>:
 8009fde:	4770      	bx	lr

08009fe0 <_malloc_usable_size_r>:
 8009fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe4:	1f18      	subs	r0, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	bfbc      	itt	lt
 8009fea:	580b      	ldrlt	r3, [r1, r0]
 8009fec:	18c0      	addlt	r0, r0, r3
 8009fee:	4770      	bx	lr

08009ff0 <_init>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	bf00      	nop
 8009ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff6:	bc08      	pop	{r3}
 8009ff8:	469e      	mov	lr, r3
 8009ffa:	4770      	bx	lr

08009ffc <_fini>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr
