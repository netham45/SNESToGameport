
snes_gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a398  0800a398  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3a0  0800a3a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a0  0800a3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000862c  20000078  0800a420  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200086a4  0800a420  000286a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022290  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044c5  00000000  00000000  00042338  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  00046800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  00047fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000584f  00000000  00000000  000495d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a7f  00000000  00000000  0004ee1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098400  00000000  00000000  0006489e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fcc9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  000fcd1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a020 	.word	0x0800a020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800a020 	.word	0x0800a020

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f002 fa5e 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f81c 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f92a 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f900 	bl	80007c4 <MX_DMA_Init>
  MX_TIM1_Init();
 80005c4:	f000 f8ae 	bl	8000724 <MX_TIM1_Init>
  MX_I2C1_Init();
 80005c8:	f000 f87e 	bl	80006c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f006 fb5c 	bl	8006c88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <main+0x38>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x3c>)
 80005d6:	f006 fbc1 	bl	8006d5c <osThreadNew>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <main+0x40>)
 80005de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f006 fb86 	bl	8006cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x34>
 80005e6:	bf00      	nop
 80005e8:	0800a31c 	.word	0x0800a31c
 80005ec:	08000945 	.word	0x08000945
 80005f0:	200049f8 	.word	0x200049f8

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 f8ff 	bl	8009806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xd0>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000668:	2319      	movs	r3, #25
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000674:	2305      	movs	r3, #5
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f005 faab 	bl	8005bd8 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000688:	f000 f97b 	bl	8000982 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fd05 	bl	80060b8 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b4:	f000 f965 	bl	8000982 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f003 fa43 	bl	8003b90 <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f937 	bl	8000982 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20004a5c 	.word	0x20004a5c
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_TIM1_Init+0x98>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MX_TIM1_Init+0x9c>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM1_Init+0x98>)
 8000748:	2247      	movs	r2, #71	; 0x47
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_TIM1_Init+0x98>)
 8000754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM1_Init+0x98>)
 800076e:	f005 fe8d 	bl	800648c <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f903 	bl	8000982 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM1_Init+0x98>)
 800078a:	f005 fffa 	bl	8006782 <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000794:	f000 f8f5 	bl	8000982 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM1_Init+0x98>)
 80007a6:	f006 f9e5 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f8e7 	bl	8000982 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20004ab0 	.word	0x20004ab0
 80007c0:	40010000 	.word	0x40010000

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_DMA_Init+0x4c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <MX_DMA_Init+0x4c>)
 80007d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_DMA_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	200b      	movs	r0, #11
 80007ec:	f002 fa3c 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007f0:	200b      	movs	r0, #11
 80007f2:	f002 fa55 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2011      	movs	r0, #17
 80007fc:	f002 fa34 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000800:	2011      	movs	r0, #17
 8000802:	f002 fa4d 	bl	8002ca0 <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_GPIO_Init+0x120>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a40      	ldr	r2, [pc, #256]	; (8000934 <MX_GPIO_Init+0x120>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_GPIO_Init+0x120>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <MX_GPIO_Init+0x120>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a39      	ldr	r2, [pc, #228]	; (8000934 <MX_GPIO_Init+0x120>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_GPIO_Init+0x120>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_GPIO_Init+0x120>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a32      	ldr	r2, [pc, #200]	; (8000934 <MX_GPIO_Init+0x120>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_GPIO_Init+0x120>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_GPIO_Init+0x120>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <MX_GPIO_Init+0x120>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0x120>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDpin_Pin|X2_Max_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80008a0:	4825      	ldr	r0, [pc, #148]	; (8000938 <MX_GPIO_Init+0x124>)
 80008a2:	f003 f95b 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SNES_Latch_Pin|SNES_Clock_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2130      	movs	r1, #48	; 0x30
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <MX_GPIO_Init+0x128>)
 80008ac:	f003 f956 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X1_Center_Pin|X1_Max_Pin|Y1_Center_Pin|Button1_Pin
 80008b0:	2200      	movs	r2, #0
 80008b2:	f24f 41cf 	movw	r1, #62671	; 0xf4cf
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <MX_GPIO_Init+0x12c>)
 80008b8:	f003 f950 	bl	8003b5c <HAL_GPIO_WritePin>
                          |Button2_Pin|Button3_Pin|Button4_Pin|X2_Center_Pin
                          |Y1_Max_Pin|Y2_Center_Pin|Y2_Max_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LEDpin_Pin X2_Max_Pin */
  GPIO_InitStruct.Pin = LEDpin_Pin|X2_Max_Pin;
 80008bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008c2:	2311      	movs	r3, #17
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_GPIO_Init+0x124>)
 80008d6:	f002 ffa7 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : SNES_Latch_Pin SNES_Clock_Pin */
  GPIO_InitStruct.Pin = SNES_Latch_Pin|SNES_Clock_Pin;
 80008da:	2330      	movs	r3, #48	; 0x30
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_GPIO_Init+0x128>)
 80008f2:	f002 ff99 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNES_Data_Pin */
  GPIO_InitStruct.Pin = SNES_Data_Pin;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SNES_Data_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_GPIO_Init+0x128>)
 800090a:	f002 ff8d 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : X1_Center_Pin X1_Max_Pin Y1_Center_Pin Button1_Pin
                           Button2_Pin Button3_Pin Button4_Pin X2_Center_Pin
                           Y1_Max_Pin Y2_Center_Pin Y2_Max_Pin */
  GPIO_InitStruct.Pin = X1_Center_Pin|X1_Max_Pin|Y1_Center_Pin|Button1_Pin
 800090e:	f24f 43cf 	movw	r3, #62671	; 0xf4cf
 8000912:	617b      	str	r3, [r7, #20]
                          |Button2_Pin|Button3_Pin|Button4_Pin|X2_Center_Pin
                          |Y1_Max_Pin|Y2_Center_Pin|Y2_Max_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000914:	2311      	movs	r3, #17
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_GPIO_Init+0x12c>)
 8000928:	f002 ff7e 	bl	8003828 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400

08000944 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  snesMain(&hi2c1,&htim1);
 800094c:	4903      	ldr	r1, [pc, #12]	; (800095c <StartDefaultTask+0x18>)
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <StartDefaultTask+0x1c>)
 8000950:	f002 f828 	bl	80029a4 <snesMain>
  /* USER CODE END 5 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20004ab0 	.word	0x20004ab0
 8000960:	20004a5c 	.word	0x20004a5c

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f002 f89f 	bl	8002ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000986:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x6>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f002 f949 	bl	8002c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <HAL_I2C_MspInit+0x160>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f040 8099 	bne.w	8000b3a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	2304      	movs	r3, #4
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4842      	ldr	r0, [pc, #264]	; (8000b4c <HAL_I2C_MspInit+0x168>)
 8000a42:	f002 fef1 	bl	8003828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b3f      	ldr	r3, [pc, #252]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <HAL_I2C_MspInit+0x164>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a64:	4a3b      	ldr	r2, [pc, #236]	; (8000b54 <HAL_I2C_MspInit+0x170>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a6e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a90:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000aa4:	f002 f90a 	bl	8002cbc <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000aae:	f7ff ff68 	bl	8000982 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_I2C_MspInit+0x16c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_I2C_MspInit+0x178>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ace:	2240      	movs	r2, #64	; 0x40
 8000ad0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000afe:	4816      	ldr	r0, [pc, #88]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000b00:	f002 f8dc 	bl	8002cbc <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000b0a:	f7ff ff3a 	bl	8000982 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_I2C_MspInit+0x174>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	201f      	movs	r0, #31
 8000b20:	f002 f8a2 	bl	8002c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b24:	201f      	movs	r0, #31
 8000b26:	f002 f8bb 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	2020      	movs	r0, #32
 8000b30:	f002 f89a 	bl	8002c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b34:	2020      	movs	r0, #32
 8000b36:	f002 f8b3 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	20004af0 	.word	0x20004af0
 8000b54:	40026010 	.word	0x40026010
 8000b58:	200049fc 	.word	0x200049fc
 8000b5c:	400260a0 	.word	0x400260a0

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10d      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_TIM_Base_MspInit+0x40>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <HAL_TIM_Base_MspInit+0x40>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_TIM_Base_MspInit+0x40>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f002 f855 	bl	8002c68 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f002 f86e 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_InitTick+0xa8>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_InitTick+0xa8>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_InitTick+0xa8>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be0:	f107 0210 	add.w	r2, r7, #16
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 fc1c 	bl	8006428 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bf0:	f005 fc06 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_InitTick+0xac>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	0c9b      	lsrs	r3, r3, #18
 8000c04:	3b01      	subs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c2c:	f005 fc2e 	bl	800648c <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <HAL_InitTick+0xb0>)
 8000c38:	f005 fc77 	bl	800652a <HAL_TIM_Base_Start_IT>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	e000      	b.n	8000c42 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3730      	adds	r7, #48	; 0x30
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	431bde83 	.word	0x431bde83
 8000c54:	20004b50 	.word	0x20004b50

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA1_Stream0_IRQHandler+0x10>)
 8000c8a:	f002 f93f 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20004af0 	.word	0x20004af0

08000c98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <DMA1_Stream6_IRQHandler+0x10>)
 8000c9e:	f002 f935 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200049fc 	.word	0x200049fc

08000cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM2_IRQHandler+0x10>)
 8000cb2:	f005 fc5e 	bl	8006572 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20004b50 	.word	0x20004b50

08000cc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <I2C1_EV_IRQHandler+0x10>)
 8000cc6:	f003 f9b1 	bl	800402c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20004a5c 	.word	0x20004a5c

08000cd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <I2C1_ER_IRQHandler+0x10>)
 8000cda:	f003 fb14 	bl	8004306 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20004a5c 	.word	0x20004a5c

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f008 fd40 	bl	800979c <__errno>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	230c      	movs	r3, #12
 8000d20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20010000 	.word	0x20010000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	20000094 	.word	0x20000094
 8000d50:	200086a8 	.word	0x200086a8

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SystemInit+0x28>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <SystemInit+0x28>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SystemInit+0x28>)
 8000d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <getDataProfileOffset>:

uint32_t data[DATA_INIT_SIZE];
uint8_t currentProfileIndex = 0;

struct rebindEntry* getDataProfileOffset(uint8_t profileIndex) //RW
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	return (struct rebindEntry*)data + (PROFILE_SIZE * profileIndex);
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	025b      	lsls	r3, r3, #9
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <getDataProfileOffset+0x28>)
 8000d98:	4413      	add	r3, r2
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20004b90 	.word	0x20004b90

08000dac <getFlashProfileOffset>:

struct rebindEntry* getFlashProfileOffset(uint8_t profileIndex) //RO
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	 return (struct rebindEntry*)flashReadData() + (PROFILE_SIZE * profileIndex);
 8000db6:	f000 fc5b 	bl	8001670 <flashReadData>
 8000dba:	4601      	mov	r1, r0
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	440b      	add	r3, r1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <profileSave>:


void profileSave(uint8_t newProfileIndex) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if (newProfileIndex != currentProfileIndex) //If we're saving to a new profile
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <profileSave+0x68>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	79fa      	ldrb	r2, [r7, #7]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d020      	beq.n	8000e26 <profileSave+0x56>
			{
		struct rebindEntry *newProfile = getDataProfileOffset(newProfileIndex); //Pointer to new profile
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ffca 	bl	8000d80 <getDataProfileOffset>
 8000dec:	60f8      	str	r0, [r7, #12]
		memcpy(newProfile, currentProfile, PROFILE_SIZE); //Save current profile to new slot
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <profileSave+0x6c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000df6:	4619      	mov	r1, r3
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f008 fcf9 	bl	80097f0 <memcpy>
		memcpy(currentProfile,getFlashProfileOffset(currentProfileIndex),
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <profileSave+0x6c>)
 8000e00:	681c      	ldr	r4, [r3, #0]
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <profileSave+0x68>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffd0 	bl	8000dac <getFlashProfileOffset>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e12:	4619      	mov	r1, r3
 8000e14:	4620      	mov	r0, r4
 8000e16:	f008 fceb 	bl	80097f0 <memcpy>
				PROFILE_SIZE); //Reload current profile from flash so it isn't overwritten on save
		currentProfile = newProfile; //Point rebind to the new profile
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <profileSave+0x6c>)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6013      	str	r3, [r2, #0]
		currentProfileIndex = newProfileIndex; //Update selected profile number
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <profileSave+0x68>)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	7013      	strb	r3, [r2, #0]
	}

	flashWriteData(data, sizeof(data)); //Save profile
 8000e26:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <profileSave+0x70>)
 8000e2c:	f000 fc2e 	bl	800168c <flashWriteData>
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	20000098 	.word	0x20000098
 8000e3c:	20007b90 	.word	0x20007b90
 8000e40:	20004b90 	.word	0x20004b90

08000e44 <profileSelect>:

void profileSelect(uint8_t newProfileIndex) {
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	//Load profile from flash
	memcpy(getDataProfileOffset(newProfileIndex), getFlashProfileOffset(newProfileIndex), PROFILE_SIZE); //Copy data for this profile in from flash, this discards any changes
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff95 	bl	8000d80 <getDataProfileOffset>
 8000e56:	4604      	mov	r4, r0
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffa6 	bl	8000dac <getFlashProfileOffset>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e66:	4619      	mov	r1, r3
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f008 fcc1 	bl	80097f0 <memcpy>
	currentProfileIndex = newProfileIndex;
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <profileSelect+0x48>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	7013      	strb	r3, [r2, #0]
	currentProfile = getDataProfileOffset(currentProfileIndex);
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <profileSelect+0x48>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff81 	bl	8000d80 <getDataProfileOffset>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <profileSelect+0x4c>)
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	20000098 	.word	0x20000098
 8000e90:	20007b90 	.word	0x20007b90

08000e94 <profileGetSelectedIndex>:

uint8_t profileGetSelectedIndex() {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	return currentProfileIndex;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <profileGetSelectedIndex+0x14>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000098 	.word	0x20000098

08000eac <bindGetBindCount>:

uint8_t bindGetBindCount() {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
	int i = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < REBIND_COUNT; i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e01a      	b.n	8000ef2 <bindGetBindCount+0x46>
		if (currentProfile[i].buttonsPressed == 0 || currentProfile[i].buttonsPressed == 65535)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <bindGetBindCount+0x5c>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d012      	beq.n	8000ef8 <bindGetBindCount+0x4c>
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <bindGetBindCount+0x5c>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	440b      	add	r3, r1
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d005      	beq.n	8000ef8 <bindGetBindCount+0x4c>
	for (i = 0; i < REBIND_COUNT; i++)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef6:	dde1      	ble.n	8000ebc <bindGetBindCount+0x10>
			break;
	return i;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20007b90 	.word	0x20007b90

08000f0c <bindKey>:

void bindKey(uint16_t buttonsPressed, uint16_t buttonsToPress,
		uint8_t rapidFire) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
 8000f16:	460b      	mov	r3, r1
 8000f18:	80bb      	strh	r3, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	70fb      	strb	r3, [r7, #3]
	uint8_t rebindPos = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	for (rebindPos = 0; rebindPos < bindGetBindCount(); rebindPos++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e00e      	b.n	8000f46 <bindKey+0x3a>
		if (currentProfile[rebindPos].buttonsPressed == buttonsPressed)
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <bindKey+0x90>)
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	440b      	add	r3, r1
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d00a      	beq.n	8000f56 <bindKey+0x4a>
	for (rebindPos = 0; rebindPos < bindGetBindCount(); rebindPos++)
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	f7ff ffb1 	bl	8000eac <bindGetBindCount>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d3e9      	bcc.n	8000f28 <bindKey+0x1c>
 8000f54:	e000      	b.n	8000f58 <bindKey+0x4c>
			break;
 8000f56:	bf00      	nop
	currentProfile[rebindPos].buttonsPressed = buttonsPressed;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <bindKey+0x90>)
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	440b      	add	r3, r1
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	801a      	strh	r2, [r3, #0]
	currentProfile[rebindPos].buttonsToPress = buttonsToPress;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <bindKey+0x90>)
 8000f6e:	6819      	ldr	r1, [r3, #0]
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	440b      	add	r3, r1
 8000f7c:	88ba      	ldrh	r2, [r7, #4]
 8000f7e:	805a      	strh	r2, [r3, #2]
	currentProfile[rebindPos].rapidFire = rapidFire;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <bindKey+0x90>)
 8000f82:	6819      	ldr	r1, [r3, #0]
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	440b      	add	r3, r1
 8000f90:	78fa      	ldrb	r2, [r7, #3]
 8000f92:	711a      	strb	r2, [r3, #4]
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20007b90 	.word	0x20007b90

08000fa0 <bindClearAll>:

void bindClearAll() {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
	for (int i = 0; i < REBIND_COUNT; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	e022      	b.n	8000ff2 <bindClearAll+0x52>
		currentProfile[i].buttonsPressed = 65535;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <bindClearAll+0x64>)
 8000fae:	6819      	ldr	r1, [r3, #0]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	440b      	add	r3, r1
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	801a      	strh	r2, [r3, #0]
		currentProfile[i].buttonsToPress = 65535;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <bindClearAll+0x64>)
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	805a      	strh	r2, [r3, #2]
		currentProfile[i].rapidFire = 255;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <bindClearAll+0x64>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	711a      	strb	r2, [r3, #4]
	for (int i = 0; i < REBIND_COUNT; i++) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff6:	ddd9      	ble.n	8000fac <bindClearAll+0xc>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20007b90 	.word	0x20007b90

08001008 <bindCycleRapidFire>:

void bindCycleRapidFire(struct rebindEntry *entry) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	entry->rapidFire++;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	711a      	strb	r2, [r3, #4]
	entry->rapidFire %= 5;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	791a      	ldrb	r2, [r3, #4]
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <bindCycleRapidFire+0x3c>)
 8001022:	fba3 1302 	umull	r1, r3, r3, r2
 8001026:	0899      	lsrs	r1, r3, #2
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	711a      	strb	r2, [r3, #4]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	cccccccd 	.word	0xcccccccd

08001048 <buttonsGPIODefaultState>:

//End Rebinds

//Set pins to default state (axis centered, no buttons pressed)
void buttonsGPIODefaultState() {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2101      	movs	r1, #1
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 8001052:	f002 fd83 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2104      	movs	r1, #4
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 800105c:	f002 fd7e 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	4820      	ldr	r0, [pc, #128]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 8001068:	f002 fd78 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	481d      	ldr	r0, [pc, #116]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 8001072:	f002 fd73 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2102      	movs	r1, #2
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 800107c:	f002 fd6e 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2108      	movs	r1, #8
 8001084:	4818      	ldr	r0, [pc, #96]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 8001086:	f002 fd69 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <buttonsGPIODefaultState+0xa4>)
 8001092:	f002 fd63 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	4813      	ldr	r0, [pc, #76]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 800109c:	f002 fd5e 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	4810      	ldr	r0, [pc, #64]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 80010a8:	f002 fd58 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 80010b4:	f002 fd52 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	480a      	ldr	r0, [pc, #40]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 80010c0:	f002 fd4c 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <buttonsGPIODefaultState+0xa0>)
 80010cc:	f002 fd46 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2110      	movs	r1, #16
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <buttonsGPIODefaultState+0xa8>)
 80010d6:	f002 fd41 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2120      	movs	r1, #32
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <buttonsGPIODefaultState+0xa8>)
 80010e0:	f002 fd3c 	bl	8003b5c <HAL_GPIO_WritePin>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020000 	.word	0x40020000

080010f4 <bindProcess>:

//Main Loop Processing Functions
void bindProcess(uint16_t *buttons) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	//Process button rebinds
	uint16_t realButtons = *buttons;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	81fb      	strh	r3, [r7, #14]
	uint16_t bindButtonsToPress = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < REBIND_COUNT; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	e07b      	b.n	8001204 <bindProcess+0x110>
		if (currentProfile[i].buttonsPressed == 0 || currentProfile[i].buttonsPressed == 65535) //Bail at the first empty entry
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <bindProcess+0x12c>)
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	440b      	add	r3, r1
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d073      	beq.n	800120a <bindProcess+0x116>
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <bindProcess+0x12c>)
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	440b      	add	r3, r1
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001138:	4293      	cmp	r3, r2
 800113a:	d066      	beq.n	800120a <bindProcess+0x116>
				{
			break;
		}

		if ((realButtons & currentProfile[i].buttonsPressed)
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <bindProcess+0x12c>)
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	440b      	add	r3, r1
 800114c:	881a      	ldrh	r2, [r3, #0]
				== currentProfile[i].buttonsPressed) {
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4013      	ands	r3, r2
 8001152:	b299      	uxth	r1, r3
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <bindProcess+0x12c>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4403      	add	r3, r0
 8001164:	881b      	ldrh	r3, [r3, #0]
		if ((realButtons & currentProfile[i].buttonsPressed)
 8001166:	4299      	cmp	r1, r3
 8001168:	d149      	bne.n	80011fe <bindProcess+0x10a>
			*buttons = *buttons ^ currentProfile[i].buttonsPressed; //Remove the pressed buttons from buttons
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8819      	ldrh	r1, [r3, #0]
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <bindProcess+0x12c>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4403      	add	r3, r0
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	404b      	eors	r3, r1
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	801a      	strh	r2, [r3, #0]
			if (currentProfile[i].rapidFire != 0) {
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <bindProcess+0x12c>)
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	440b      	add	r3, r1
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d023      	beq.n	80011e6 <bindProcess+0xf2>
				uint32_t ticks = HAL_GetTick()
 800119e:	f001 fc9f 	bl	8002ae0 <HAL_GetTick>
						/ (RAPID_FIRE_BASE_TIME * currentProfile[i].rapidFire);
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <bindProcess+0x12c>)
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	440b      	add	r3, r1
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	461a      	mov	r2, r3
 80011b6:	2396      	movs	r3, #150	; 0x96
 80011b8:	fb03 f302 	mul.w	r3, r3, r2
				uint32_t ticks = HAL_GetTick()
 80011bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c0:	60bb      	str	r3, [r7, #8]
				if ((ticks % 2) == 1) {
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d018      	beq.n	80011fe <bindProcess+0x10a>
					bindButtonsToPress |= currentProfile[i].buttonsToPress; //Store the buttons to press in another variable so they don't get cleared by other binds
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <bindProcess+0x12c>)
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	440b      	add	r3, r1
 80011dc:	885a      	ldrh	r2, [r3, #2]
 80011de:	8afb      	ldrh	r3, [r7, #22]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	82fb      	strh	r3, [r7, #22]
 80011e4:	e00b      	b.n	80011fe <bindProcess+0x10a>
				}
			} else {
				bindButtonsToPress |= currentProfile[i].buttonsToPress; //Store the buttons to press in another variable so they don't get cleared by other binds
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <bindProcess+0x12c>)
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	885a      	ldrh	r2, [r3, #2]
 80011f8:	8afb      	ldrh	r3, [r7, #22]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < REBIND_COUNT; i++) {
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	3301      	adds	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b7f      	cmp	r3, #127	; 0x7f
 8001208:	dd80      	ble.n	800110c <bindProcess+0x18>
			}
		}
	}

	*buttons |= bindButtonsToPress; //Add buttonsToPress to buttons
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	8afb      	ldrh	r3, [r7, #22]
 8001210:	4313      	orrs	r3, r2
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20007b90 	.word	0x20007b90

08001224 <buttonsProcess>:

void buttonsProcess(uint16_t buttons) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
	//4 Buttons
	if (buttons & (1)) // B button
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <buttonsProcess+0x22>
		HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123e:	4879      	ldr	r0, [pc, #484]	; (8001424 <buttonsProcess+0x200>)
 8001240:	f002 fc8c 	bl	8003b5c <HAL_GPIO_WritePin>
 8001244:	e005      	b.n	8001252 <buttonsProcess+0x2e>
	else
		HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124c:	4875      	ldr	r0, [pc, #468]	; (8001424 <buttonsProcess+0x200>)
 800124e:	f002 fc85 	bl	8003b5c <HAL_GPIO_WritePin>
	if (buttons & (1 << 1)) // Y button
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <buttonsProcess+0x46>
		HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001262:	4870      	ldr	r0, [pc, #448]	; (8001424 <buttonsProcess+0x200>)
 8001264:	f002 fc7a 	bl	8003b5c <HAL_GPIO_WritePin>
 8001268:	e005      	b.n	8001276 <buttonsProcess+0x52>
	else
		HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001270:	486c      	ldr	r0, [pc, #432]	; (8001424 <buttonsProcess+0x200>)
 8001272:	f002 fc73 	bl	8003b5c <HAL_GPIO_WritePin>
	if (buttons & (1 << 8)) // A button
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <buttonsProcess+0x6a>
		HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	4867      	ldr	r0, [pc, #412]	; (8001424 <buttonsProcess+0x200>)
 8001288:	f002 fc68 	bl	8003b5c <HAL_GPIO_WritePin>
 800128c:	e005      	b.n	800129a <buttonsProcess+0x76>
	else
		HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	4863      	ldr	r0, [pc, #396]	; (8001424 <buttonsProcess+0x200>)
 8001296:	f002 fc61 	bl	8003b5c <HAL_GPIO_WritePin>
	if (buttons & (1 << 9)) // X button
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <buttonsProcess+0x8e>
		HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	485e      	ldr	r0, [pc, #376]	; (8001424 <buttonsProcess+0x200>)
 80012ac:	f002 fc56 	bl	8003b5c <HAL_GPIO_WritePin>
 80012b0:	e005      	b.n	80012be <buttonsProcess+0x9a>
	else
		HAL_GPIO_WritePin(Button4_GPIO_Port, Button4_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b8:	485a      	ldr	r0, [pc, #360]	; (8001424 <buttonsProcess+0x200>)
 80012ba:	f002 fc4f 	bl	8003b5c <HAL_GPIO_WritePin>

	//4 Axis
	////X2
	if (buttons & (1 << 2)) // Select button
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <buttonsProcess+0xbe>
			{

		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ce:	4855      	ldr	r0, [pc, #340]	; (8001424 <buttonsProcess+0x200>)
 80012d0:	f002 fc44 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012da:	4853      	ldr	r0, [pc, #332]	; (8001428 <buttonsProcess+0x204>)
 80012dc:	f002 fc3e 	bl	8003b5c <HAL_GPIO_WritePin>
 80012e0:	e01d      	b.n	800131e <buttonsProcess+0xfa>
	} else if (buttons & (1 << 3)) // Start Button
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <buttonsProcess+0xe2>
			{

		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f2:	484c      	ldr	r0, [pc, #304]	; (8001424 <buttonsProcess+0x200>)
 80012f4:	f002 fc32 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	484a      	ldr	r0, [pc, #296]	; (8001428 <buttonsProcess+0x204>)
 8001300:	f002 fc2c 	bl	8003b5c <HAL_GPIO_WritePin>
 8001304:	e00b      	b.n	800131e <buttonsProcess+0xfa>

	} else // X2 Centered
	{
		HAL_GPIO_WritePin(X2_Center_GPIO_Port, X2_Center_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130c:	4845      	ldr	r0, [pc, #276]	; (8001424 <buttonsProcess+0x200>)
 800130e:	f002 fc25 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X2_Max_GPIO_Port, X2_Max_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	4843      	ldr	r0, [pc, #268]	; (8001428 <buttonsProcess+0x204>)
 800131a:	f002 fc1f 	bl	8003b5c <HAL_GPIO_WritePin>
	}

	////Y1
	if (buttons & (1 << 4)) // Up button
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00a      	beq.n	800133e <buttonsProcess+0x11a>
			{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2104      	movs	r1, #4
 800132c:	483d      	ldr	r0, [pc, #244]	; (8001424 <buttonsProcess+0x200>)
 800132e:	f002 fc15 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2108      	movs	r1, #8
 8001336:	483b      	ldr	r0, [pc, #236]	; (8001424 <buttonsProcess+0x200>)
 8001338:	f002 fc10 	bl	8003b5c <HAL_GPIO_WritePin>
 800133c:	e019      	b.n	8001372 <buttonsProcess+0x14e>
	} else if (buttons & (1 << 5)) // Down Button
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <buttonsProcess+0x13a>
			{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2104      	movs	r1, #4
 800134c:	4835      	ldr	r0, [pc, #212]	; (8001424 <buttonsProcess+0x200>)
 800134e:	f002 fc05 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2108      	movs	r1, #8
 8001356:	4833      	ldr	r0, [pc, #204]	; (8001424 <buttonsProcess+0x200>)
 8001358:	f002 fc00 	bl	8003b5c <HAL_GPIO_WritePin>
 800135c:	e009      	b.n	8001372 <buttonsProcess+0x14e>
	} else // Y1 Centered
	{
		HAL_GPIO_WritePin(Y1_Center_GPIO_Port, Y1_Center_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	4830      	ldr	r0, [pc, #192]	; (8001424 <buttonsProcess+0x200>)
 8001364:	f002 fbfa 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_Max_GPIO_Port, Y1_Max_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2108      	movs	r1, #8
 800136c:	482d      	ldr	r0, [pc, #180]	; (8001424 <buttonsProcess+0x200>)
 800136e:	f002 fbf5 	bl	8003b5c <HAL_GPIO_WritePin>
	}

	////X1
	if (buttons & (1 << 6)) // Left button
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00a      	beq.n	8001392 <buttonsProcess+0x16e>
			{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2101      	movs	r1, #1
 8001380:	4828      	ldr	r0, [pc, #160]	; (8001424 <buttonsProcess+0x200>)
 8001382:	f002 fbeb 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2102      	movs	r1, #2
 800138a:	4826      	ldr	r0, [pc, #152]	; (8001424 <buttonsProcess+0x200>)
 800138c:	f002 fbe6 	bl	8003b5c <HAL_GPIO_WritePin>
 8001390:	e019      	b.n	80013c6 <buttonsProcess+0x1a2>
	} else if (buttons & (1 << 7)) // Right Button
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00a      	beq.n	80013b2 <buttonsProcess+0x18e>
			{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	4820      	ldr	r0, [pc, #128]	; (8001424 <buttonsProcess+0x200>)
 80013a2:	f002 fbdb 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2102      	movs	r1, #2
 80013aa:	481e      	ldr	r0, [pc, #120]	; (8001424 <buttonsProcess+0x200>)
 80013ac:	f002 fbd6 	bl	8003b5c <HAL_GPIO_WritePin>
 80013b0:	e009      	b.n	80013c6 <buttonsProcess+0x1a2>
	} else // X1 Centered
	{
		HAL_GPIO_WritePin(X1_Center_GPIO_Port, X1_Center_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	481b      	ldr	r0, [pc, #108]	; (8001424 <buttonsProcess+0x200>)
 80013b8:	f002 fbd0 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(X1_Max_GPIO_Port, X1_Max_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	4818      	ldr	r0, [pc, #96]	; (8001424 <buttonsProcess+0x200>)
 80013c2:	f002 fbcb 	bl	8003b5c <HAL_GPIO_WritePin>
	}

	////Y2
	if (buttons & (1 << 10)) // Left Shoulder button
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <buttonsProcess+0x1c2>
			{
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2140      	movs	r1, #64	; 0x40
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <buttonsProcess+0x200>)
 80013d6:	f002 fbc1 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	4811      	ldr	r0, [pc, #68]	; (8001424 <buttonsProcess+0x200>)
 80013e0:	f002 fbbc 	bl	8003b5c <HAL_GPIO_WritePin>
	} else // Y2 Centered
	{
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
	}
}
 80013e4:	e019      	b.n	800141a <buttonsProcess+0x1f6>
	} else if (buttons & (1 << 11)) // Right Shoulder Button
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <buttonsProcess+0x1e2>
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <buttonsProcess+0x200>)
 80013f6:	f002 fbb1 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <buttonsProcess+0x200>)
 8001400:	f002 fbac 	bl	8003b5c <HAL_GPIO_WritePin>
}
 8001404:	e009      	b.n	800141a <buttonsProcess+0x1f6>
		HAL_GPIO_WritePin(Y2_Center_GPIO_Port, Y2_Center_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <buttonsProcess+0x200>)
 800140c:	f002 fba6 	bl	8003b5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_Max_GPIO_Port, Y2_Max_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <buttonsProcess+0x200>)
 8001416:	f002 fba1 	bl	8003b5c <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800

0800142c <buttonsToString>:

void buttonsToString(char *stringBuffer, uint16_t buttons, char *prefix) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	460b      	mov	r3, r1
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	817b      	strh	r3, [r7, #10]
	char buffer[32] = { 0 };
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2220      	movs	r2, #32
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f008 f9df 	bl	8009806 <memset>
	strcpy(buffer, prefix);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f008 fa02 	bl	8009858 <strcpy>
	uint8_t offset = strlen(buffer);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe fecb 	bl	80001f4 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t written = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (int i = 0; i < 12; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
 800146e:	e0c4      	b.n	80015fa <buttonsToString+0x1ce>
		if (buttons & (1 << i)) {
 8001470:	897a      	ldrh	r2, [r7, #10]
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	fa42 f303 	asr.w	r3, r2, r3
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80b9 	beq.w	80015f4 <buttonsToString+0x1c8>
			written = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			switch (i) {
 8001488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148a:	2b0b      	cmp	r3, #11
 800148c:	f200 80a3 	bhi.w	80015d6 <buttonsToString+0x1aa>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <buttonsToString+0x6c>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014df 	.word	0x080014df
 800149c:	0800150b 	.word	0x0800150b
 80014a0:	080015bf 	.word	0x080015bf
 80014a4:	080015a5 	.word	0x080015a5
 80014a8:	08001521 	.word	0x08001521
 80014ac:	08001533 	.word	0x08001533
 80014b0:	08001549 	.word	0x08001549
 80014b4:	0800155f 	.word	0x0800155f
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014f5 	.word	0x080014f5
 80014c0:	08001579 	.word	0x08001579
 80014c4:	0800158f 	.word	0x0800158f
			case 8:
				sprintf(buffer + offset, "A+");
 80014c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014cc:	f107 0210 	add.w	r2, r7, #16
 80014d0:	4413      	add	r3, r2
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <buttonsToString+0x214>)
 80014d4:	8811      	ldrh	r1, [r2, #0]
 80014d6:	7892      	ldrb	r2, [r2, #2]
 80014d8:	8019      	strh	r1, [r3, #0]
 80014da:	709a      	strb	r2, [r3, #2]
				break;
 80014dc:	e07b      	b.n	80015d6 <buttonsToString+0x1aa>
			case 0:
				sprintf(buffer + offset, "B+");
 80014de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014e2:	f107 0210 	add.w	r2, r7, #16
 80014e6:	4413      	add	r3, r2
 80014e8:	4a56      	ldr	r2, [pc, #344]	; (8001644 <buttonsToString+0x218>)
 80014ea:	8811      	ldrh	r1, [r2, #0]
 80014ec:	7892      	ldrb	r2, [r2, #2]
 80014ee:	8019      	strh	r1, [r3, #0]
 80014f0:	709a      	strb	r2, [r3, #2]
				break;
 80014f2:	e070      	b.n	80015d6 <buttonsToString+0x1aa>
			case 9:
				sprintf(buffer + offset, "X+");
 80014f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014f8:	f107 0210 	add.w	r2, r7, #16
 80014fc:	4413      	add	r3, r2
 80014fe:	4a52      	ldr	r2, [pc, #328]	; (8001648 <buttonsToString+0x21c>)
 8001500:	8811      	ldrh	r1, [r2, #0]
 8001502:	7892      	ldrb	r2, [r2, #2]
 8001504:	8019      	strh	r1, [r3, #0]
 8001506:	709a      	strb	r2, [r3, #2]
				break;
 8001508:	e065      	b.n	80015d6 <buttonsToString+0x1aa>
			case 1:
				sprintf(buffer + offset, "Y+");
 800150a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800150e:	f107 0210 	add.w	r2, r7, #16
 8001512:	4413      	add	r3, r2
 8001514:	4a4d      	ldr	r2, [pc, #308]	; (800164c <buttonsToString+0x220>)
 8001516:	8811      	ldrh	r1, [r2, #0]
 8001518:	7892      	ldrb	r2, [r2, #2]
 800151a:	8019      	strh	r1, [r3, #0]
 800151c:	709a      	strb	r2, [r3, #2]
				break;
 800151e:	e05a      	b.n	80015d6 <buttonsToString+0x1aa>
			case 4:
				sprintf(buffer + offset, "Up+");
 8001520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	4413      	add	r3, r2
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <buttonsToString+0x224>)
 800152c:	6810      	ldr	r0, [r2, #0]
 800152e:	6018      	str	r0, [r3, #0]
				break;
 8001530:	e051      	b.n	80015d6 <buttonsToString+0x1aa>
			case 5:
				sprintf(buffer + offset, "Down+");
 8001532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001536:	f107 0210 	add.w	r2, r7, #16
 800153a:	4413      	add	r3, r2
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <buttonsToString+0x228>)
 800153e:	6810      	ldr	r0, [r2, #0]
 8001540:	6018      	str	r0, [r3, #0]
 8001542:	8892      	ldrh	r2, [r2, #4]
 8001544:	809a      	strh	r2, [r3, #4]
				break;
 8001546:	e046      	b.n	80015d6 <buttonsToString+0x1aa>
			case 6:
				sprintf(buffer + offset, "Left+");
 8001548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800154c:	f107 0210 	add.w	r2, r7, #16
 8001550:	4413      	add	r3, r2
 8001552:	4a41      	ldr	r2, [pc, #260]	; (8001658 <buttonsToString+0x22c>)
 8001554:	6810      	ldr	r0, [r2, #0]
 8001556:	6018      	str	r0, [r3, #0]
 8001558:	8892      	ldrh	r2, [r2, #4]
 800155a:	809a      	strh	r2, [r3, #4]
				break;
 800155c:	e03b      	b.n	80015d6 <buttonsToString+0x1aa>
			case 7:
				sprintf(buffer + offset, "Right+");
 800155e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001562:	f107 0210 	add.w	r2, r7, #16
 8001566:	4413      	add	r3, r2
 8001568:	4a3c      	ldr	r2, [pc, #240]	; (800165c <buttonsToString+0x230>)
 800156a:	6810      	ldr	r0, [r2, #0]
 800156c:	6018      	str	r0, [r3, #0]
 800156e:	8891      	ldrh	r1, [r2, #4]
 8001570:	7992      	ldrb	r2, [r2, #6]
 8001572:	8099      	strh	r1, [r3, #4]
 8001574:	719a      	strb	r2, [r3, #6]
				break;
 8001576:	e02e      	b.n	80015d6 <buttonsToString+0x1aa>
			case 10:
				sprintf(buffer + offset, "L+");
 8001578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800157c:	f107 0210 	add.w	r2, r7, #16
 8001580:	4413      	add	r3, r2
 8001582:	4a37      	ldr	r2, [pc, #220]	; (8001660 <buttonsToString+0x234>)
 8001584:	8811      	ldrh	r1, [r2, #0]
 8001586:	7892      	ldrb	r2, [r2, #2]
 8001588:	8019      	strh	r1, [r3, #0]
 800158a:	709a      	strb	r2, [r3, #2]
				break;
 800158c:	e023      	b.n	80015d6 <buttonsToString+0x1aa>
			case 11:
				sprintf(buffer + offset, "R+");
 800158e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001592:	f107 0210 	add.w	r2, r7, #16
 8001596:	4413      	add	r3, r2
 8001598:	4a32      	ldr	r2, [pc, #200]	; (8001664 <buttonsToString+0x238>)
 800159a:	8811      	ldrh	r1, [r2, #0]
 800159c:	7892      	ldrb	r2, [r2, #2]
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	709a      	strb	r2, [r3, #2]
				break;
 80015a2:	e018      	b.n	80015d6 <buttonsToString+0x1aa>
			case 3:
				sprintf(buffer + offset, "Start+");
 80015a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	4413      	add	r3, r2
 80015ae:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <buttonsToString+0x23c>)
 80015b0:	6810      	ldr	r0, [r2, #0]
 80015b2:	6018      	str	r0, [r3, #0]
 80015b4:	8891      	ldrh	r1, [r2, #4]
 80015b6:	7992      	ldrb	r2, [r2, #6]
 80015b8:	8099      	strh	r1, [r3, #4]
 80015ba:	719a      	strb	r2, [r3, #6]
				break;
 80015bc:	e00b      	b.n	80015d6 <buttonsToString+0x1aa>
			case 2:
				sprintf(buffer + offset, "Select+");
 80015be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015c2:	f107 0210 	add.w	r2, r7, #16
 80015c6:	4413      	add	r3, r2
 80015c8:	4928      	ldr	r1, [pc, #160]	; (800166c <buttonsToString+0x240>)
 80015ca:	461a      	mov	r2, r3
 80015cc:	460b      	mov	r3, r1
 80015ce:	cb03      	ldmia	r3!, {r0, r1}
 80015d0:	6010      	str	r0, [r2, #0]
 80015d2:	6051      	str	r1, [r2, #4]
				break;
 80015d4:	bf00      	nop
			}
			offset += strlen(buffer + offset);
 80015d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015da:	f107 0210 	add.w	r2, r7, #16
 80015de:	4413      	add	r3, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fe07 	bl	80001f4 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015ee:	4413      	add	r3, r2
 80015f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (int i = 0; i < 12; i++) {
 80015f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f6:	3301      	adds	r3, #1
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	2b0b      	cmp	r3, #11
 80015fe:	f77f af37 	ble.w	8001470 <buttonsToString+0x44>
		}
	}
	if (written)
 8001602:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <buttonsToString+0x1f8>
		buffer[strlen(buffer) - 1] = 0; //Remove the final plus
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fdf0 	bl	80001f4 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	3b01      	subs	r3, #1
 8001618:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800161c:	4413      	add	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	f803 2c28 	strb.w	r2, [r3, #-40]
	buffer[16] = 0; //Cap length at 16 chars
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3020 	strb.w	r3, [r7, #32]
	memcpy(stringBuffer, buffer, 17); //Copy 16 chars + terminator
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2211      	movs	r2, #17
 8001630:	4619      	mov	r1, r3
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f008 f8dc 	bl	80097f0 <memcpy>
}
 8001638:	bf00      	nop
 800163a:	3738      	adds	r7, #56	; 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	0800a044 	.word	0x0800a044
 8001644:	0800a048 	.word	0x0800a048
 8001648:	0800a04c 	.word	0x0800a04c
 800164c:	0800a050 	.word	0x0800a050
 8001650:	0800a054 	.word	0x0800a054
 8001654:	0800a058 	.word	0x0800a058
 8001658:	0800a060 	.word	0x0800a060
 800165c:	0800a068 	.word	0x0800a068
 8001660:	0800a070 	.word	0x0800a070
 8001664:	0800a074 	.word	0x0800a074
 8001668:	0800a078 	.word	0x0800a078
 800166c:	0800a080 	.word	0x0800a080

08001670 <flashReadData>:
#include <snestogameport/flash.h>

//Flash Read/Write

uint32_t* flashReadData() {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
	uint32_t address = 0x08020000;
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <flashReadData+0x18>)
 8001678:	607b      	str	r3, [r7, #4]
	return (uint32_t*) address;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	08020000 	.word	0x08020000

0800168c <flashWriteData>:

void flashWriteData(uint32_t *data, uint32_t size) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	//TODO: Find working wear leveling library
	uint32_t address = 0x08020000; // Sector 5 start address
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <flashWriteData+0x60>)
 8001698:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 800169a:	f001 ff0d 	bl	80034b8 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_1);
 800169e:	2100      	movs	r1, #0
 80016a0:	2005      	movs	r0, #5
 80016a2:	f002 f879 	bl	8003798 <FLASH_Erase_Sector>
	for (int i = 0; i < (size / 4); i++) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e013      	b.n	80016d4 <flashWriteData+0x48>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + (i * 4),
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	18d1      	adds	r1, r2, r3
				*(data + i));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	681b      	ldr	r3, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + (i * 4),
 80016c0:	f04f 0400 	mov.w	r4, #0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	2002      	movs	r0, #2
 80016ca:	f001 fea1 	bl	8003410 <HAL_FLASH_Program>
	for (int i = 0; i < (size / 4); i++) {
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	089a      	lsrs	r2, r3, #2
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8e6      	bhi.n	80016ac <flashWriteData+0x20>
	}
	HAL_FLASH_Lock();
 80016de:	f001 ff0d 	bl	80034fc <HAL_FLASH_Lock>
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	08020000 	.word	0x08020000

080016f0 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	70bb      	strb	r3, [r7, #2]
 8001706:	4613      	mov	r3, r2
 8001708:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 800170e:	4a4f      	ldr	r2, [pc, #316]	; (800184c <lcdInit+0x15c>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <lcdInit+0x15c>)
 800171c:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 800171e:	4a4b      	ldr	r2, [pc, #300]	; (800184c <lcdInit+0x15c>)
 8001720:	78bb      	ldrb	r3, [r7, #2]
 8001722:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001724:	4a49      	ldr	r2, [pc, #292]	; (800184c <lcdInit+0x15c>)
 8001726:	787b      	ldrb	r3, [r7, #1]
 8001728:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <lcdInit+0x15c>)
 800172c:	2208      	movs	r2, #8
 800172e:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <lcdInit+0x160>)
 8001732:	2234      	movs	r2, #52	; 0x34
 8001734:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <lcdInit+0x160>)
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b45      	ldr	r3, [pc, #276]	; (8001850 <lcdInit+0x160>)
 800173c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <lcdInit+0x160>)
 8001740:	2230      	movs	r2, #48	; 0x30
 8001742:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001744:	2300      	movs	r3, #0
 8001746:	75fb      	strb	r3, [r7, #23]
 8001748:	e030      	b.n	80017ac <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800174a:	4b40      	ldr	r3, [pc, #256]	; (800184c <lcdInit+0x15c>)
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <lcdInit+0x15c>)
 8001750:	799b      	ldrb	r3, [r3, #6]
 8001752:	b299      	uxth	r1, r3
 8001754:	2303      	movs	r3, #3
 8001756:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <lcdInit+0x160>)
 8001758:	f002 fb52 	bl	8003e00 <HAL_I2C_Master_Transmit_DMA>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <lcdInit+0x76>
            return false;
 8001762:	2300      	movs	r3, #0
 8001764:	e06d      	b.n	8001842 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8001766:	f006 fcb5 	bl	80080d4 <xTaskGetTickCount>
 800176a:	4603      	mov	r3, r0
 800176c:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800176e:	e002      	b.n	8001776 <lcdInit+0x86>
            vTaskDelay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f006 fb6d 	bl	8007e50 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001776:	4b35      	ldr	r3, [pc, #212]	; (800184c <lcdInit+0x15c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fed2 	bl	8004524 <HAL_I2C_GetState>
 8001780:	4603      	mov	r3, r0
 8001782:	2b20      	cmp	r3, #32
 8001784:	d1f4      	bne.n	8001770 <lcdInit+0x80>
        }

        if (i == 2) {
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d106      	bne.n	800179a <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	2101      	movs	r1, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f006 fae2 	bl	8007d5c <vTaskDelayUntil>
 8001798:	e005      	b.n	80017a6 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2105      	movs	r1, #5
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 fadb 	bl	8007d5c <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	3301      	adds	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d9cb      	bls.n	800174a <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <lcdInit+0x160>)
 80017b4:	222c      	movs	r2, #44	; 0x2c
 80017b6:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <lcdInit+0x160>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <lcdInit+0x160>)
 80017be:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <lcdInit+0x160>)
 80017c2:	2228      	movs	r2, #40	; 0x28
 80017c4:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <lcdInit+0x15c>)
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <lcdInit+0x15c>)
 80017cc:	799b      	ldrb	r3, [r3, #6]
 80017ce:	b299      	uxth	r1, r3
 80017d0:	2303      	movs	r3, #3
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <lcdInit+0x160>)
 80017d4:	f002 fb14 	bl	8003e00 <HAL_I2C_Master_Transmit_DMA>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <lcdInit+0xf8>
        return false;
 80017de:	2300      	movs	r3, #0
 80017e0:	e02f      	b.n	8001842 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f006 fb34 	bl	8007e50 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <lcdInit+0x15c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fe99 	bl	8004524 <HAL_I2C_GetState>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d1f4      	bne.n	80017e2 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <lcdInit+0x15c>)
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d904      	bls.n	8001814 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	b2db      	uxtb	r3, r3
 8001812:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001814:	f107 030f 	add.w	r3, r7, #15
 8001818:	4619      	mov	r1, r3
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f98c 	bl	8001b38 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001820:	2101      	movs	r1, #1
 8001822:	2001      	movs	r0, #1
 8001824:	f000 f816 	bl	8001854 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001828:	2101      	movs	r1, #1
 800182a:	2007      	movs	r0, #7
 800182c:	f000 f812 	bl	8001854 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001830:	2101      	movs	r1, #1
 8001832:	2002      	movs	r0, #2
 8001834:	f000 f80e 	bl	8001854 <lcdCommand>
    lcdCursorHome();
 8001838:	2101      	movs	r1, #1
 800183a:	2005      	movs	r0, #5
 800183c:	f000 f80a 	bl	8001854 <lcdCommand>

    return true;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000a4 	.word	0x200000a4
 8001850:	2000009c 	.word	0x2000009c

08001854 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	460a      	mov	r2, r1
 800185e:	71fb      	strb	r3, [r7, #7]
 8001860:	4613      	mov	r3, r2
 8001862:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d06e      	beq.n	800194c <lcdCommand+0xf8>
 800186e:	2b01      	cmp	r3, #1
 8001870:	f040 80b4 	bne.w	80019dc <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	3b01      	subs	r3, #1
 8001878:	2b07      	cmp	r3, #7
 800187a:	d864      	bhi.n	8001946 <lcdCommand+0xf2>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <lcdCommand+0x30>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	080018a5 	.word	0x080018a5
 8001888:	080018d5 	.word	0x080018d5
 800188c:	080018b5 	.word	0x080018b5
 8001890:	080018c5 	.word	0x080018c5
 8001894:	080018f9 	.word	0x080018f9
 8001898:	0800192d 	.word	0x0800192d
 800189c:	0800191d 	.word	0x0800191d
 80018a0:	08001937 	.word	0x08001937
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80018a4:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <lcdCommand+0x1f0>)
 80018a6:	7a1b      	ldrb	r3, [r3, #8]
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <lcdCommand+0x1f0>)
 80018b0:	721a      	strb	r2, [r3, #8]
                    break;
 80018b2:	e04a      	b.n	800194a <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80018b4:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <lcdCommand+0x1f0>)
 80018b6:	7a1b      	ldrb	r3, [r3, #8]
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <lcdCommand+0x1f0>)
 80018c0:	721a      	strb	r2, [r3, #8]
                    break;
 80018c2:	e042      	b.n	800194a <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80018c4:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <lcdCommand+0x1f0>)
 80018c6:	7a1b      	ldrb	r3, [r3, #8]
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <lcdCommand+0x1f0>)
 80018d0:	721a      	strb	r2, [r3, #8]
                    break;
 80018d2:	e03a      	b.n	800194a <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80018d8:	f107 030f 	add.w	r3, r7, #15
 80018dc:	4619      	mov	r1, r3
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f92a 	bl	8001b38 <lcdWriteByte>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <lcdCommand+0x9a>
                        return false;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e0a6      	b.n	8001a3c <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 80018ee:	2002      	movs	r0, #2
 80018f0:	f006 faae 	bl	8007e50 <vTaskDelay>
                        return true;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0a1      	b.n	8001a3c <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 80018f8:	2302      	movs	r3, #2
 80018fa:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80018fc:	f107 030f 	add.w	r3, r7, #15
 8001900:	4619      	mov	r1, r3
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f918 	bl	8001b38 <lcdWriteByte>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <lcdCommand+0xbe>
                        return false;
 800190e:	2300      	movs	r3, #0
 8001910:	e094      	b.n	8001a3c <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001912:	2002      	movs	r0, #2
 8001914:	f006 fa9c 	bl	8007e50 <vTaskDelay>
                        return true;
 8001918:	2301      	movs	r3, #1
 800191a:	e08f      	b.n	8001a3c <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 800191c:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <lcdCommand+0x1f0>)
 800191e:	7a5b      	ldrb	r3, [r3, #9]
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <lcdCommand+0x1f0>)
 8001928:	725a      	strb	r2, [r3, #9]
                    break;
 800192a:	e00e      	b.n	800194a <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 800192c:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <lcdCommand+0x1f0>)
 800192e:	7a5a      	ldrb	r2, [r3, #9]
 8001930:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <lcdCommand+0x1f0>)
 8001932:	725a      	strb	r2, [r3, #9]
                    break;
 8001934:	e009      	b.n	800194a <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001936:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <lcdCommand+0x1f0>)
 8001938:	7a5b      	ldrb	r3, [r3, #9]
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <lcdCommand+0x1f0>)
 8001942:	725a      	strb	r2, [r3, #9]
                    break;
 8001944:	e001      	b.n	800194a <lcdCommand+0xf6>

                default:
                    return false;
 8001946:	2300      	movs	r3, #0
 8001948:	e078      	b.n	8001a3c <lcdCommand+0x1e8>
            }

            break;
 800194a:	e049      	b.n	80019e0 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	3b01      	subs	r3, #1
 8001950:	2b07      	cmp	r3, #7
 8001952:	d840      	bhi.n	80019d6 <lcdCommand+0x182>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <lcdCommand+0x108>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800197d 	.word	0x0800197d
 8001960:	080019d7 	.word	0x080019d7
 8001964:	0800198d 	.word	0x0800198d
 8001968:	0800199d 	.word	0x0800199d
 800196c:	080019d7 	.word	0x080019d7
 8001970:	080019bd 	.word	0x080019bd
 8001974:	080019ad 	.word	0x080019ad
 8001978:	080019c7 	.word	0x080019c7
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <lcdCommand+0x1f0>)
 800197e:	7a1b      	ldrb	r3, [r3, #8]
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <lcdCommand+0x1f0>)
 8001988:	721a      	strb	r2, [r3, #8]
                    break;
 800198a:	e026      	b.n	80019da <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <lcdCommand+0x1f0>)
 800198e:	7a1b      	ldrb	r3, [r3, #8]
 8001990:	f023 0302 	bic.w	r3, r3, #2
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <lcdCommand+0x1f0>)
 8001998:	721a      	strb	r2, [r3, #8]
                    break;
 800199a:	e01e      	b.n	80019da <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <lcdCommand+0x1f0>)
 800199e:	7a1b      	ldrb	r3, [r3, #8]
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <lcdCommand+0x1f0>)
 80019a8:	721a      	strb	r2, [r3, #8]
                    break;
 80019aa:	e016      	b.n	80019da <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <lcdCommand+0x1f0>)
 80019ae:	7a5b      	ldrb	r3, [r3, #9]
 80019b0:	f023 0302 	bic.w	r3, r3, #2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <lcdCommand+0x1f0>)
 80019b8:	725a      	strb	r2, [r3, #9]
                    break;
 80019ba:	e00e      	b.n	80019da <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <lcdCommand+0x1f0>)
 80019be:	7a5a      	ldrb	r2, [r3, #9]
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <lcdCommand+0x1f0>)
 80019c2:	725a      	strb	r2, [r3, #9]
                    break;
 80019c4:	e009      	b.n	80019da <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <lcdCommand+0x1f0>)
 80019c8:	7a5b      	ldrb	r3, [r3, #9]
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <lcdCommand+0x1f0>)
 80019d2:	725a      	strb	r2, [r3, #9]
                    break;
 80019d4:	e001      	b.n	80019da <lcdCommand+0x186>

                default:
                    return false;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e030      	b.n	8001a3c <lcdCommand+0x1e8>
            }

            break;
 80019da:	e001      	b.n	80019e0 <lcdCommand+0x18c>

        default:
            return false;
 80019dc:	2300      	movs	r3, #0
 80019de:	e02d      	b.n	8001a3c <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	2b07      	cmp	r3, #7
 80019e6:	d821      	bhi.n	8001a2c <lcdCommand+0x1d8>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <lcdCommand+0x19c>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a11 	.word	0x08001a11
 80019f4:	08001a2d 	.word	0x08001a2d
 80019f8:	08001a11 	.word	0x08001a11
 80019fc:	08001a11 	.word	0x08001a11
 8001a00:	08001a2d 	.word	0x08001a2d
 8001a04:	08001a1f 	.word	0x08001a1f
 8001a08:	08001a1f 	.word	0x08001a1f
 8001a0c:	08001a1f 	.word	0x08001a1f
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <lcdCommand+0x1f0>)
 8001a12:	7a1b      	ldrb	r3, [r3, #8]
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	73fb      	strb	r3, [r7, #15]
            break;
 8001a1c:	e007      	b.n	8001a2e <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <lcdCommand+0x1f0>)
 8001a20:	7a5b      	ldrb	r3, [r3, #9]
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	73fb      	strb	r3, [r7, #15]
            break;
 8001a2a:	e000      	b.n	8001a2e <lcdCommand+0x1da>

        default:
            break;
 8001a2c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001a2e:	f107 030f 	add.w	r3, r7, #15
 8001a32:	4619      	mov	r1, r3
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f87f 	bl	8001b38 <lcdWriteByte>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200000a4 	.word	0x200000a4

08001a48 <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <lcdBacklight+0x4c>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <lcdBacklight+0x4c>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <lcdBacklight+0x4c>)
 8001a5e:	799b      	ldrb	r3, [r3, #6]
 8001a60:	b299      	uxth	r1, r3
 8001a62:	2301      	movs	r3, #1
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <lcdBacklight+0x50>)
 8001a66:	f002 f9cb 	bl	8003e00 <HAL_I2C_Master_Transmit_DMA>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <lcdBacklight+0x32>
        return false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e00b      	b.n	8001a8c <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f006 f9eb 	bl	8007e50 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <lcdBacklight+0x4c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fd50 	bl	8004524 <HAL_I2C_GetState>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d1f4      	bne.n	8001a74 <lcdBacklight+0x2c>
    }

    return true;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200000a4 	.word	0x200000a4
 8001a98:	200000ab 	.word	0x200000ab

08001a9c <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <lcdSetCursorPosition+0x50>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	79ba      	ldrb	r2, [r7, #6]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d303      	bcc.n	8001abe <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <lcdSetCursorPosition+0x50>)
 8001ab8:	791b      	ldrb	r3, [r3, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <lcdSetCursorPosition+0x54>)
 8001ac2:	5cd2      	ldrb	r2, [r2, r3]
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001ad6:	f107 030f 	add.w	r3, r7, #15
 8001ada:	4619      	mov	r1, r3
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f82b 	bl	8001b38 <lcdWriteByte>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200000a4 	.word	0x200000a4
 8001af0:	0800a358 	.word	0x0800a358

08001af4 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e00e      	b.n	8001b24 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 f812 	bl	8001b38 <lcdWriteByte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <lcdPrintStr+0x2a>
            return false;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e007      	b.n	8001b2e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	3301      	adds	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3ec      	bcc.n	8001b06 <lcdPrintStr+0x12>
        }
    }

    return true;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001b44:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <lcdWriteByte+0xdc>)
 8001b46:	79da      	ldrb	r2, [r3, #7]
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f023 030f 	bic.w	r3, r3, #15
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <lcdWriteByte+0xe0>)
 8001b64:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <lcdWriteByte+0xe0>)
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <lcdWriteByte+0xe0>)
 8001b6c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <lcdWriteByte+0xdc>)
 8001b70:	79da      	ldrb	r2, [r3, #7]
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	b25a      	sxtb	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	f023 030f 	bic.w	r3, r3, #15
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <lcdWriteByte+0xe0>)
 8001b8e:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <lcdWriteByte+0xdc>)
 8001b92:	79da      	ldrb	r2, [r3, #7]
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <lcdWriteByte+0xe0>)
 8001bae:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <lcdWriteByte+0xe0>)
 8001bb2:	78da      	ldrb	r2, [r3, #3]
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <lcdWriteByte+0xe0>)
 8001bb6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <lcdWriteByte+0xdc>)
 8001bba:	79da      	ldrb	r2, [r3, #7]
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	b25a      	sxtb	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <lcdWriteByte+0xe0>)
 8001bd4:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <lcdWriteByte+0xdc>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <lcdWriteByte+0xdc>)
 8001bdc:	799b      	ldrb	r3, [r3, #6]
 8001bde:	b299      	uxth	r1, r3
 8001be0:	2306      	movs	r3, #6
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <lcdWriteByte+0xe0>)
 8001be4:	f002 f90c 	bl	8003e00 <HAL_I2C_Master_Transmit_DMA>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <lcdWriteByte+0xc0>
        return false;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e00b      	b.n	8001c0a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f006 f92c 	bl	8007e50 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <lcdWriteByte+0xdc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fc91 	bl	8004524 <HAL_I2C_GetState>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d1f4      	bne.n	8001bf2 <lcdWriteByte+0xba>
    }

    return true;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000a4 	.word	0x200000a4
 8001c18:	2000009c 	.word	0x2000009c

08001c1c <menuMainMenu>:
uint32_t mainMenuHelpLastTick = 0;
uint8_t mainMenuCurrentMenuIndex = 0;

void menuMainMenu(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b090      	sub	sp, #64	; 0x40
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6039      	str	r1, [r7, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	461a      	mov	r2, r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	80fb      	strh	r3, [r7, #6]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	717b      	strb	r3, [r7, #5]
 8001c30:	4613      	mov	r3, r2
 8001c32:	713b      	strb	r3, [r7, #4]
	//Render menu
	if (mainMenuCurrentMenuIndex == 0)
 8001c34:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <menuMainMenu+0x248>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <menuMainMenu+0x26>
		mainMenuTopSelected = 1; //Top entry means top is selected
 8001c3c:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <menuMainMenu+0x24c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
	if (mainMenuCurrentMenuIndex == menuNumEntries - 1)
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <menuMainMenu+0x248>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <menuMainMenu+0x250>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d102      	bne.n	8001c58 <menuMainMenu+0x3c>
		mainMenuTopSelected = 0; //Bottom entry means bottom is selected
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <menuMainMenu+0x24c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]

	uint8_t otherOptionPosition = mainMenuCurrentMenuIndex
			+ (mainMenuTopSelected ? 1 : -1);
 8001c58:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <menuMainMenu+0x24c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <menuMainMenu+0x48>
 8001c60:	2201      	movs	r2, #1
 8001c62:	e000      	b.n	8001c66 <menuMainMenu+0x4a>
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <menuMainMenu+0x248>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
	uint8_t otherOptionPosition = mainMenuCurrentMenuIndex
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	struct menuEntry *currentOption = &menuItems[mainMenuCurrentMenuIndex];
 8001c70:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <menuMainMenu+0x248>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	2354      	movs	r3, #84	; 0x54
 8001c78:	fb03 f302 	mul.w	r3, r3, r2
 8001c7c:	4a7c      	ldr	r2, [pc, #496]	; (8001e70 <menuMainMenu+0x254>)
 8001c7e:	4413      	add	r3, r2
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
	struct menuEntry *otherOption = &menuItems[otherOptionPosition];
 8001c82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c86:	2254      	movs	r2, #84	; 0x54
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <menuMainMenu+0x254>)
 8001c8e:	4413      	add	r3, r2
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34

	char currentOptionLine[SCREEN_CSTR_WIDTH]; //Current menu entry pointed to by menuPos
	char otherLine[SCREEN_CSTR_WIDTH]; //Also holds help messages

	sprintf(currentOptionLine, ">%s", currentOption->name);
 8001c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4976      	ldr	r1, [pc, #472]	; (8001e74 <menuMainMenu+0x258>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f007 fdbc 	bl	8009818 <siprintf>

	if (buttonsHoldTime > 2000 && buttons == 0) //Show Help
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ca6:	d968      	bls.n	8001d7a <menuMainMenu+0x15e>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d165      	bne.n	8001d7a <menuMainMenu+0x15e>
			{
		memset(otherLine, 0x20, sizeof(otherLine));
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2211      	movs	r2, #17
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 fda5 	bl	8009806 <memset>

		if (!mainMenuHelpLastTick) //Init
 8001cbc:	4b6e      	ldr	r3, [pc, #440]	; (8001e78 <menuMainMenu+0x25c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <menuMainMenu+0xbe>
		{
			mainMenuHelpPause = 2;
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <menuMainMenu+0x260>)
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
			mainMenuHelpIndex = 0;
 8001cca:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <menuMainMenu+0x264>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
			mainMenuHelpLastTick = HAL_GetTick();
 8001cd0:	f000 ff06 	bl	8002ae0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <menuMainMenu+0x25c>)
 8001cd8:	601a      	str	r2, [r3, #0]
		}

		uint32_t helpLastScrolled = HAL_GetTick() - mainMenuHelpLastTick;
 8001cda:	f000 ff01 	bl	8002ae0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <menuMainMenu+0x25c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
		if (helpLastScrolled > 350) //Tick help another char every 350ms, it's slow but any faster the LCD blurs
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001cee:	d936      	bls.n	8001d5e <menuMainMenu+0x142>
				{
			mainMenuHelpLastTick = HAL_GetTick();
 8001cf0:	f000 fef6 	bl	8002ae0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b60      	ldr	r3, [pc, #384]	; (8001e78 <menuMainMenu+0x25c>)
 8001cf8:	601a      	str	r2, [r3, #0]
			if (!mainMenuHelpPause)
 8001cfa:	4b60      	ldr	r3, [pc, #384]	; (8001e7c <menuMainMenu+0x260>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d113      	bne.n	8001d2a <menuMainMenu+0x10e>
			{
				mainMenuHelpIndex += 1;
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <menuMainMenu+0x264>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <menuMainMenu+0x264>)
 8001d0a:	6013      	str	r3, [r2, #0]
				if (mainMenuHelpIndex > strlen(currentOption->help) - 17)
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0e:	3310      	adds	r3, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa6f 	bl	80001f4 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	3b11      	subs	r3, #17
 8001d1a:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <menuMainMenu+0x264>)
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d21d      	bcs.n	8001d5e <menuMainMenu+0x142>
				{
					mainMenuHelpPause = 2; //Pause on end
 8001d22:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <menuMainMenu+0x260>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e019      	b.n	8001d5e <menuMainMenu+0x142>
				}
			}
			else
			{
				mainMenuHelpPause--;
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <menuMainMenu+0x260>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <menuMainMenu+0x260>)
 8001d32:	6013      	str	r3, [r2, #0]
				if (!mainMenuHelpPause)
 8001d34:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <menuMainMenu+0x260>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d110      	bne.n	8001d5e <menuMainMenu+0x142>
				{
					if (mainMenuHelpIndex > strlen(currentOption->help) - 17)
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	3310      	adds	r3, #16
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fa57 	bl	80001f4 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	3b11      	subs	r3, #17
 8001d4a:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <menuMainMenu+0x264>)
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d205      	bcs.n	8001d5e <menuMainMenu+0x142>
					{
						mainMenuHelpIndex = 0; //Go to start on unpause
 8001d52:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <menuMainMenu+0x264>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
						mainMenuHelpPause = 2; //Pause on start
 8001d58:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <menuMainMenu+0x260>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
				}
			}

		}

		memcpy(otherLine, currentOption->help + mainMenuHelpIndex,
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	3310      	adds	r3, #16
 8001d62:	4a47      	ldr	r2, [pc, #284]	; (8001e80 <menuMainMenu+0x264>)
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	1899      	adds	r1, r3, r2
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f007 fd3e 	bl	80097f0 <memcpy>
				16);
		otherLine[16] = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	763b      	strb	r3, [r7, #24]
			{
 8001d78:	e00c      	b.n	8001d94 <menuMainMenu+0x178>
	} else //Show the other option
	{
		sprintf(otherLine," %s",otherOption->name);
 8001d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	4940      	ldr	r1, [pc, #256]	; (8001e84 <menuMainMenu+0x268>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f007 fd48 	bl	8009818 <siprintf>
		mainMenuHelpIndex = 0;
 8001d88:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <menuMainMenu+0x264>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
		mainMenuHelpLastTick = 0;
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <menuMainMenu+0x25c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
	}

	if (mainMenuTopSelected) {
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <menuMainMenu+0x24c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <menuMainMenu+0x196>
		screenWriteTopLine(currentOptionLine);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fce3 	bl	800276c <screenWriteTopLine>
		screenWriteBottomLine(otherLine);
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fd12 	bl	80027d4 <screenWriteBottomLine>
 8001db0:	e009      	b.n	8001dc6 <menuMainMenu+0x1aa>
	} else {
		screenWriteTopLine(otherLine);
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fcd8 	bl	800276c <screenWriteTopLine>
		screenWriteBottomLine(currentOptionLine);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fd07 	bl	80027d4 <screenWriteBottomLine>
	}

	//End Render Menu

	//Process Buttons
	if (buttonsChanged) {
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d046      	beq.n	8001e5a <menuMainMenu+0x23e>
		if (buttons & BUTTON_UP) //Scroll up menu
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <menuMainMenu+0x1d6>
		{
			if (mainMenuCurrentMenuIndex > 0) {
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <menuMainMenu+0x248>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03d      	beq.n	8001e5a <menuMainMenu+0x23e>
				mainMenuCurrentMenuIndex--;
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <menuMainMenu+0x248>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <menuMainMenu+0x248>)
 8001de8:	701a      	strb	r2, [r3, #0]
				mainMenuTopSelected = 1;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <menuMainMenu+0x24c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		} else if (buttons & BUTTON_B) //Close menu
		{
			menuDeactivate(1);
		}
	}
}
 8001df0:	e033      	b.n	8001e5a <menuMainMenu+0x23e>
		} else if (buttons & BUTTON_DOWN) //Scroll down menu
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d011      	beq.n	8001e20 <menuMainMenu+0x204>
			if (mainMenuCurrentMenuIndex < menuNumEntries - 1) {
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <menuMainMenu+0x248>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <menuMainMenu+0x250>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	da26      	bge.n	8001e5a <menuMainMenu+0x23e>
				mainMenuCurrentMenuIndex++;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <menuMainMenu+0x248>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <menuMainMenu+0x248>)
 8001e16:	701a      	strb	r2, [r3, #0]
				mainMenuTopSelected = 0;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <menuMainMenu+0x24c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
}
 8001e1e:	e01c      	b.n	8001e5a <menuMainMenu+0x23e>
		} else if (buttons & BUTTON_A) //Select an option
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00f      	beq.n	8001e4a <menuMainMenu+0x22e>
			menuActiveSubmenuCallback = menuItems[mainMenuCurrentMenuIndex].callback;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <menuMainMenu+0x248>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <menuMainMenu+0x254>)
 8001e32:	2354      	movs	r3, #84	; 0x54
 8001e34:	fb03 f301 	mul.w	r3, r3, r1
 8001e38:	4413      	add	r3, r2
 8001e3a:	3350      	adds	r3, #80	; 0x50
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <menuMainMenu+0x26c>)
 8001e40:	6013      	str	r3, [r2, #0]
			mainMenuSubmenuFirstRun = 1;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <menuMainMenu+0x270>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
}
 8001e48:	e007      	b.n	8001e5a <menuMainMenu+0x23e>
		} else if (buttons & BUTTON_B) //Close menu
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <menuMainMenu+0x23e>
			menuDeactivate(1);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f000 fb15 	bl	8002484 <menuDeactivate>
}
 8001e5a:	bf00      	nop
 8001e5c:	3740      	adds	r7, #64	; 0x40
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200000d0 	.word	0x200000d0
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	200000b0 	.word	0x200000b0
 8001e70:	20007b94 	.word	0x20007b94
 8001e74:	0800a088 	.word	0x0800a088
 8001e78:	200000cc 	.word	0x200000cc
 8001e7c:	200000c8 	.word	0x200000c8
 8001e80:	200000c4 	.word	0x200000c4
 8001e84:	0800a08c 	.word	0x0800a08c
 8001e88:	200000bc 	.word	0x200000bc
 8001e8c:	200000c0 	.word	0x200000c0

08001e90 <menuRebindKeys>:

uint16_t menuRebindKeyFirstKey = 0;
uint16_t menuRebindKeyFirstKeyReleased = 0;

void menuRebindKeys(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b092      	sub	sp, #72	; 0x48
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6039      	str	r1, [r7, #0]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	80fb      	strh	r3, [r7, #6]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	717b      	strb	r3, [r7, #5]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	713b      	strb	r3, [r7, #4]

	//Process Buttons
	if (firstRun) {
 8001ea8:	793b      	ldrb	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <menuRebindKeys+0x2a>
		menuRebindKeyFirstKey = 0;
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <menuRebindKeys+0x12c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
		menuRebindKeyFirstKeyReleased = 0;
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <menuRebindKeys+0x130>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	801a      	strh	r2, [r3, #0]
	}
	if (!menuRebindKeyFirstKeyReleased && buttonsChanged) //If the first bind was held for 1s then released reset the ignore flag
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <menuRebindKeys+0x130>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <menuRebindKeys+0x3e>
 8001ec2:	797b      	ldrb	r3, [r7, #5]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <menuRebindKeys+0x3e>
			{
		menuRebindKeyFirstKeyReleased = 1;
 8001ec8:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <menuRebindKeys+0x130>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	801a      	strh	r2, [r3, #0]
	}

	if (buttonsHoldTime > 1000 && buttons) //Wait for a button combo to be held for 1s before registering it
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed4:	d932      	bls.n	8001f3c <menuRebindKeys+0xac>
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02f      	beq.n	8001f3c <menuRebindKeys+0xac>
			{
		if (!menuRebindKeyFirstKey) //If the first key hasn't been chosen yet mark it and set a flag to ignore keys until the input changes
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <menuRebindKeys+0x12c>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <menuRebindKeys+0x62>
		{
			menuRebindKeyFirstKey = buttons;
 8001ee4:	4a35      	ldr	r2, [pc, #212]	; (8001fbc <menuRebindKeys+0x12c>)
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	8013      	strh	r3, [r2, #0]
			menuRebindKeyFirstKeyReleased = 0;
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <menuRebindKeys+0x130>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	801a      	strh	r2, [r3, #0]
 8001ef0:	e024      	b.n	8001f3c <menuRebindKeys+0xac>
		} else if (menuRebindKeyFirstKeyReleased) //The first key was pressed and released, take the second and save the binding
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <menuRebindKeys+0x130>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <menuRebindKeys+0xac>
		{
			char bottomLine[SCREEN_CSTR_WIDTH];
			buttonsToString(bottomLine, buttons, "\xA5");
 8001efa:	88f9      	ldrh	r1, [r7, #6]
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4a30      	ldr	r2, [pc, #192]	; (8001fc4 <menuRebindKeys+0x134>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fa92 	bl	800142c <buttonsToString>
			screenWriteBottomLine(bottomLine);
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fc61 	bl	80027d4 <screenWriteBottomLine>
			bindKey(menuRebindKeyFirstKey, buttons, 0);
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <menuRebindKeys+0x12c>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	88f9      	ldrh	r1, [r7, #6]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fff6 	bl	8000f0c <bindKey>
			screenWriteTopLine("Binding Saved");
 8001f20:	4829      	ldr	r0, [pc, #164]	; (8001fc8 <menuRebindKeys+0x138>)
 8001f22:	f000 fc23 	bl	800276c <screenWriteTopLine>
			screenWriteBottomLine("");
 8001f26:	4829      	ldr	r0, [pc, #164]	; (8001fcc <menuRebindKeys+0x13c>)
 8001f28:	f000 fc54 	bl	80027d4 <screenWriteBottomLine>
			menuDeactivate(0);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 faa9 	bl	8002484 <menuDeactivate>
			screenClearIn(2);
 8001f32:	2002      	movs	r0, #2
 8001f34:	f000 fbdc 	bl	80026f0 <screenClearIn>
			return;
 8001f38:	bf00      	nop
 8001f3a:	e03c      	b.n	8001fb6 <menuRebindKeys+0x126>
	}

	//Render
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	if (!menuRebindKeyFirstKey) //If the first key isn't known yet
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <menuRebindKeys+0x12c>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <menuRebindKeys+0xd4>
	{
		buttonsToString(topLine, buttons, "\x7F");
 8001f44:	88f9      	ldrh	r1, [r7, #6]
 8001f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f4a:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <menuRebindKeys+0x140>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fa6d 	bl	800142c <buttonsToString>
		strcpy(bottomLine, "Hold Input Btns");
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <menuRebindKeys+0x144>)
 8001f58:	461c      	mov	r4, r3
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f62:	e01e      	b.n	8001fa2 <menuRebindKeys+0x112>
	} else {
		buttonsToString(topLine, menuRebindKeyFirstKey, "\xA5");
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <menuRebindKeys+0x12c>)
 8001f66:	8819      	ldrh	r1, [r3, #0]
 8001f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f6c:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <menuRebindKeys+0x134>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fa5c 	bl	800142c <buttonsToString>
		if (buttons && menuRebindKeyFirstKeyReleased) {
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <menuRebindKeys+0x102>
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <menuRebindKeys+0x130>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <menuRebindKeys+0x102>
			buttonsToString(bottomLine, buttons, "\x7E");
 8001f82:	88f9      	ldrh	r1, [r7, #6]
 8001f84:	f107 0320 	add.w	r3, r7, #32
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <menuRebindKeys+0x148>)
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fa4e 	bl	800142c <buttonsToString>
 8001f90:	e007      	b.n	8001fa2 <menuRebindKeys+0x112>
		} else {
			strcpy(bottomLine, "Hold Output Btns");
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <menuRebindKeys+0x14c>)
 8001f94:	f107 0420 	add.w	r4, r7, #32
 8001f98:	461d      	mov	r5, r3
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	7023      	strb	r3, [r4, #0]
		}
	}
	screenWriteTopLine(topLine);
 8001fa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fbe0 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fc0f 	bl	80027d4 <screenWriteBottomLine>
}
 8001fb6:	3748      	adds	r7, #72	; 0x48
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	200000d2 	.word	0x200000d2
 8001fc0:	200000d4 	.word	0x200000d4
 8001fc4:	0800a090 	.word	0x0800a090
 8001fc8:	0800a094 	.word	0x0800a094
 8001fcc:	0800a0a4 	.word	0x0800a0a4
 8001fd0:	0800a0a8 	.word	0x0800a0a8
 8001fd4:	0800a0ac 	.word	0x0800a0ac
 8001fd8:	0800a0bc 	.word	0x0800a0bc
 8001fdc:	0800a0c0 	.word	0x0800a0c0

08001fe0 <menuViewEditBinds>:
//View binds/set rapid fire
uint8_t menuViewEditBindsIndex = 0;
uint8_t menuViewEditBindsCyclingRapidFire = 0;

void menuViewEditBinds(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b08f      	sub	sp, #60	; 0x3c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6039      	str	r1, [r7, #0]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	80fb      	strh	r3, [r7, #6]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	717b      	strb	r3, [r7, #5]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	713b      	strb	r3, [r7, #4]
	if (firstRun) {
 8001ff8:	793b      	ldrb	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <menuViewEditBinds+0x68>
		menuViewEditBindsIndex = 0;
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <menuViewEditBinds+0x1ac>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
		struct rebindEntry *bind = &currentProfile[menuViewEditBindsIndex];
 8002004:	4b62      	ldr	r3, [pc, #392]	; (8002190 <menuViewEditBinds+0x1b0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b60      	ldr	r3, [pc, #384]	; (800218c <menuViewEditBinds+0x1ac>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
		if (bind->buttonsPressed == 65535 || bind->buttonsPressed == 0) //There's no binds
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <menuViewEditBinds+0x4e>
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <menuViewEditBinds+0x68>
				{
			screenWriteTopLine("No binds to");
 800202e:	4859      	ldr	r0, [pc, #356]	; (8002194 <menuViewEditBinds+0x1b4>)
 8002030:	f000 fb9c 	bl	800276c <screenWriteTopLine>
			screenWriteBottomLine("display");
 8002034:	4858      	ldr	r0, [pc, #352]	; (8002198 <menuViewEditBinds+0x1b8>)
 8002036:	f000 fbcd 	bl	80027d4 <screenWriteBottomLine>
			menuDeactivate(0);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 fa22 	bl	8002484 <menuDeactivate>
			screenClearIn(2);
 8002040:	2002      	movs	r0, #2
 8002042:	f000 fb55 	bl	80026f0 <screenClearIn>
			return;
 8002046:	e09d      	b.n	8002184 <menuViewEditBinds+0x1a4>
		}
	}

	//Render
	struct rebindEntry *bind = &currentProfile[menuViewEditBindsIndex];
 8002048:	4b51      	ldr	r3, [pc, #324]	; (8002190 <menuViewEditBinds+0x1b0>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <menuViewEditBinds+0x1ac>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	460b      	mov	r3, r1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	440b      	add	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	if (!menuViewEditBindsCyclingRapidFire) //If not showing rapid fire
 800205e:	4b4f      	ldr	r3, [pc, #316]	; (800219c <menuViewEditBinds+0x1bc>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d110      	bne.n	8002088 <menuViewEditBinds+0xa8>
	{
		buttonsToString(topLine, bind->buttonsPressed, "\x7F");
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	8819      	ldrh	r1, [r3, #0]
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <menuViewEditBinds+0x1c0>)
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f9db 	bl	800142c <buttonsToString>
		buttonsToString(bottomLine, bind->buttonsToPress, "\x7E");
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	8859      	ldrh	r1, [r3, #2]
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4a49      	ldr	r2, [pc, #292]	; (80021a4 <menuViewEditBinds+0x1c4>)
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f9d3 	bl	800142c <buttonsToString>
 8002086:	e01a      	b.n	80020be <menuViewEditBinds+0xde>
	} else {
		strcpy(topLine, "Rapid Fire:");
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4a46      	ldr	r2, [pc, #280]	; (80021a8 <menuViewEditBinds+0x1c8>)
 800208e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (bind->rapidFire)
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	791b      	ldrb	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <menuViewEditBinds+0xd6>
			sprintf(bottomLine, "%ims", bind->rapidFire * RAPID_FIRE_BASE_TIME);
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	791b      	ldrb	r3, [r3, #4]
 80020a0:	461a      	mov	r2, r3
 80020a2:	2396      	movs	r3, #150	; 0x96
 80020a4:	fb03 f202 	mul.w	r2, r3, r2
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	493f      	ldr	r1, [pc, #252]	; (80021ac <menuViewEditBinds+0x1cc>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f007 fbb2 	bl	8009818 <siprintf>
 80020b4:	e003      	b.n	80020be <menuViewEditBinds+0xde>
		else
			strcpy(bottomLine, "Off");
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <menuViewEditBinds+0x1d0>)
 80020bc:	601a      	str	r2, [r3, #0]
	}
	screenWriteTopLine(topLine);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fb52 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fb81 	bl	80027d4 <screenWriteBottomLine>

	//Process Buttons
	if (menuViewEditBindsCyclingRapidFire && !(buttons & BUTTON_SELECT)
 80020d2:	4b32      	ldr	r3, [pc, #200]	; (800219c <menuViewEditBinds+0x1bc>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00e      	beq.n	80020f8 <menuViewEditBinds+0x118>
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <menuViewEditBinds+0x118>
			&& (buttons || buttonsHoldTime > 1000)) {
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <menuViewEditBinds+0x112>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f0:	d902      	bls.n	80020f8 <menuViewEditBinds+0x118>
		menuViewEditBindsCyclingRapidFire = 0;
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <menuViewEditBinds+0x1bc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
	}
	if (buttonsChanged) {
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d042      	beq.n	8002184 <menuViewEditBinds+0x1a4>
		if (buttons & BUTTON_UP) //Scroll up
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <menuViewEditBinds+0x13e>
		{
			if (menuViewEditBindsIndex > 0)
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <menuViewEditBinds+0x1ac>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d039      	beq.n	8002184 <menuViewEditBinds+0x1a4>
				menuViewEditBindsIndex--;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <menuViewEditBinds+0x1ac>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <menuViewEditBinds+0x1ac>)
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e032      	b.n	8002184 <menuViewEditBinds+0x1a4>
		} else if (buttons & BUTTON_DOWN) //Scroll down
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <menuViewEditBinds+0x168>
		{
			if (menuViewEditBindsIndex < bindGetBindCount() - 1) {
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <menuViewEditBinds+0x1ac>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461c      	mov	r4, r3
 800212e:	f7fe febd 	bl	8000eac <bindGetBindCount>
 8002132:	4603      	mov	r3, r0
 8002134:	3b01      	subs	r3, #1
 8002136:	429c      	cmp	r4, r3
 8002138:	da24      	bge.n	8002184 <menuViewEditBinds+0x1a4>
				menuViewEditBindsIndex++;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <menuViewEditBinds+0x1ac>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <menuViewEditBinds+0x1ac>)
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e01d      	b.n	8002184 <menuViewEditBinds+0x1a4>
			}
		} else if (buttons & BUTTON_SELECT) //Cycle rapid fire
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <menuViewEditBinds+0x194>
		{
			menuViewEditBindsCyclingRapidFire = 1;
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <menuViewEditBinds+0x1bc>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
			bindCycleRapidFire(&currentProfile[menuViewEditBindsIndex]);
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <menuViewEditBinds+0x1b0>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <menuViewEditBinds+0x1ac>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	460b      	mov	r3, r1
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	440b      	add	r3, r1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe ff4b 	bl	8001008 <bindCycleRapidFire>
 8002172:	e007      	b.n	8002184 <menuViewEditBinds+0x1a4>
		} else if (buttons & BUTTON_B) //Close
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <menuViewEditBinds+0x1a4>
		{
			menuDeactivate(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 f980 	bl	8002484 <menuDeactivate>
		}
	}
}
 8002184:	373c      	adds	r7, #60	; 0x3c
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	bf00      	nop
 800218c:	200000d6 	.word	0x200000d6
 8002190:	20007b90 	.word	0x20007b90
 8002194:	0800a0d4 	.word	0x0800a0d4
 8002198:	0800a0e0 	.word	0x0800a0e0
 800219c:	200000d7 	.word	0x200000d7
 80021a0:	0800a0a8 	.word	0x0800a0a8
 80021a4:	0800a0bc 	.word	0x0800a0bc
 80021a8:	0800a0e8 	.word	0x0800a0e8
 80021ac:	0800a0f4 	.word	0x0800a0f4
 80021b0:	0066664f 	.word	0x0066664f

080021b4 <menuClearBinds>:

//Clears binds in the current profile
void menuClearBinds(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6039      	str	r1, [r7, #0]
 80021bc:	4611      	mov	r1, r2
 80021be:	461a      	mov	r2, r3
 80021c0:	4603      	mov	r3, r0
 80021c2:	80fb      	strh	r3, [r7, #6]
 80021c4:	460b      	mov	r3, r1
 80021c6:	717b      	strb	r3, [r7, #5]
 80021c8:	4613      	mov	r3, r2
 80021ca:	713b      	strb	r3, [r7, #4]
	//Render
	screenWriteTopLine("Hold Start=Clear");
 80021cc:	4815      	ldr	r0, [pc, #84]	; (8002224 <menuClearBinds+0x70>)
 80021ce:	f000 facd 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine("Press B=Cancel");
 80021d2:	4815      	ldr	r0, [pc, #84]	; (8002228 <menuClearBinds+0x74>)
 80021d4:	f000 fafe 	bl	80027d4 <screenWriteBottomLine>

	//Process Buttons
	if (buttons == BUTTON_START && buttonsHoldTime > 3000) //Start held for 3s to clear
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d115      	bne.n	800220a <menuClearBinds+0x56>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d910      	bls.n	800220a <menuClearBinds+0x56>
			{
		screenWriteTopLine("Clearing Binds");
 80021e8:	4810      	ldr	r0, [pc, #64]	; (800222c <menuClearBinds+0x78>)
 80021ea:	f000 fabf 	bl	800276c <screenWriteTopLine>
		screenWriteBottomLine("");
 80021ee:	4810      	ldr	r0, [pc, #64]	; (8002230 <menuClearBinds+0x7c>)
 80021f0:	f000 faf0 	bl	80027d4 <screenWriteBottomLine>
		bindClearAll();
 80021f4:	f7fe fed4 	bl	8000fa0 <bindClearAll>
		screenWriteTopLine("Binds Cleared");
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <menuClearBinds+0x80>)
 80021fa:	f000 fab7 	bl	800276c <screenWriteTopLine>
		menuDeactivate(0);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f940 	bl	8002484 <menuDeactivate>
		screenClearIn(2);
 8002204:	2002      	movs	r0, #2
 8002206:	f000 fa73 	bl	80026f0 <screenClearIn>
	}
	if (buttons & BUTTON_B) //Cancel
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <menuClearBinds+0x66>
	{
		menuDeactivate(1);
 8002214:	2001      	movs	r0, #1
 8002216:	f000 f935 	bl	8002484 <menuDeactivate>
	}
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	0800a0fc 	.word	0x0800a0fc
 8002228:	0800a110 	.word	0x0800a110
 800222c:	0800a120 	.word	0x0800a120
 8002230:	0800a0a4 	.word	0x0800a0a4
 8002234:	0800a130 	.word	0x0800a130

08002238 <menuSelectProfile>:

//Loads a profile from flash
uint16_t menuSelectProfileSelectedProfileIndex = 0;
void menuSelectProfile(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6039      	str	r1, [r7, #0]
 8002240:	4611      	mov	r1, r2
 8002242:	461a      	mov	r2, r3
 8002244:	4603      	mov	r3, r0
 8002246:	80fb      	strh	r3, [r7, #6]
 8002248:	460b      	mov	r3, r1
 800224a:	717b      	strb	r3, [r7, #5]
 800224c:	4613      	mov	r3, r2
 800224e:	713b      	strb	r3, [r7, #4]
	//Render
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	sprintf(topLine, "New Profile: %i", menuSelectProfileSelectedProfileIndex + 1);
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <menuSelectProfile+0xd8>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	492e      	ldr	r1, [pc, #184]	; (8002314 <menuSelectProfile+0xdc>)
 800225c:	4618      	mov	r0, r3
 800225e:	f007 fadb 	bl	8009818 <siprintf>
	sprintf(bottomLine, "Cur Profile: %i", profileGetSelectedIndex() + 1);
 8002262:	f7fe fe17 	bl	8000e94 <profileGetSelectedIndex>
 8002266:	4603      	mov	r3, r0
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	492a      	ldr	r1, [pc, #168]	; (8002318 <menuSelectProfile+0xe0>)
 8002270:	4618      	mov	r0, r3
 8002272:	f007 fad1 	bl	8009818 <siprintf>
	screenWriteTopLine(topLine);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fa76 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4618      	mov	r0, r3
 8002286:	f000 faa5 	bl	80027d4 <screenWriteBottomLine>

	//Process Buttons
	if (buttonsChanged) {
 800228a:	797b      	ldrb	r3, [r7, #5]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d03a      	beq.n	8002306 <menuSelectProfile+0xce>
		if (buttons & BUTTON_UP && menuSelectProfileSelectedProfileIndex > 0) //Scroll Up through profiles
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <menuSelectProfile+0x78>
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <menuSelectProfile+0xd8>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <menuSelectProfile+0x78>
				{
			menuSelectProfileSelectedProfileIndex--;
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <menuSelectProfile+0xd8>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <menuSelectProfile+0xd8>)
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	e02a      	b.n	8002306 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_DOWN
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <menuSelectProfile+0x98>
				&& menuSelectProfileSelectedProfileIndex < PROFILE_COUNT - 1) //Scroll down
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <menuSelectProfile+0xd8>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b0e      	cmp	r3, #14
 80022c0:	d806      	bhi.n	80022d0 <menuSelectProfile+0x98>
						{
			menuSelectProfileSelectedProfileIndex++;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <menuSelectProfile+0xd8>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <menuSelectProfile+0xd8>)
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	e01a      	b.n	8002306 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_A) //Select
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <menuSelectProfile+0xbc>
		{
			profileSelect(menuSelectProfileSelectedProfileIndex);
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <menuSelectProfile+0xd8>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fdaf 	bl	8000e44 <profileSelect>
			menuDeactivate(0);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 f8cc 	bl	8002484 <menuDeactivate>
			screenClearIn(2);
 80022ec:	2002      	movs	r0, #2
 80022ee:	f000 f9ff 	bl	80026f0 <screenClearIn>
		} else if (buttons & BUTTON_B) //Cancel
		{
			menuDeactivate(1);
		}
	}
}
 80022f2:	e008      	b.n	8002306 <menuSelectProfile+0xce>
		} else if (buttons & BUTTON_B) //Cancel
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <menuSelectProfile+0xce>
			menuDeactivate(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f000 f8c0 	bl	8002484 <menuDeactivate>
}
 8002304:	e7ff      	b.n	8002306 <menuSelectProfile+0xce>
 8002306:	bf00      	nop
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200000d8 	.word	0x200000d8
 8002314:	0800a140 	.word	0x0800a140
 8002318:	0800a150 	.word	0x0800a150

0800231c <menuSaveProfile>:

//Save a profile to a slot
uint16_t menuSaveProfileSelectedProfileIndex = 0;
void menuSaveProfile(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6039      	str	r1, [r7, #0]
 8002324:	4611      	mov	r1, r2
 8002326:	461a      	mov	r2, r3
 8002328:	4603      	mov	r3, r0
 800232a:	80fb      	strh	r3, [r7, #6]
 800232c:	460b      	mov	r3, r1
 800232e:	717b      	strb	r3, [r7, #5]
 8002330:	4613      	mov	r3, r2
 8002332:	713b      	strb	r3, [r7, #4]
	//Render
	char topLine[SCREEN_CSTR_WIDTH];
	char bottomLine[SCREEN_CSTR_WIDTH];
	sprintf(topLine, "Save Profile: %i", menuSaveProfileSelectedProfileIndex + 1);
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <menuSaveProfile+0xd8>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	492e      	ldr	r1, [pc, #184]	; (80023f8 <menuSaveProfile+0xdc>)
 8002340:	4618      	mov	r0, r3
 8002342:	f007 fa69 	bl	8009818 <siprintf>
	sprintf(bottomLine, "Cur Profile: %i", profileGetSelectedIndex() + 1);
 8002346:	f7fe fda5 	bl	8000e94 <profileGetSelectedIndex>
 800234a:	4603      	mov	r3, r0
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	492a      	ldr	r1, [pc, #168]	; (80023fc <menuSaveProfile+0xe0>)
 8002354:	4618      	mov	r0, r3
 8002356:	f007 fa5f 	bl	8009818 <siprintf>
	screenWriteTopLine(topLine);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fa04 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine(bottomLine);
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fa33 	bl	80027d4 <screenWriteBottomLine>

	//Process Buttons
	if (buttonsChanged) {
 800236e:	797b      	ldrb	r3, [r7, #5]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03a      	beq.n	80023ea <menuSaveProfile+0xce>
		if (buttons & BUTTON_UP && menuSaveProfileSelectedProfileIndex > 0) //Scroll up
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <menuSaveProfile+0x78>
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <menuSaveProfile+0xd8>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <menuSaveProfile+0x78>
				{
			menuSaveProfileSelectedProfileIndex--;
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <menuSaveProfile+0xd8>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <menuSaveProfile+0xd8>)
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	e02a      	b.n	80023ea <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_DOWN
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <menuSaveProfile+0x98>
				&& menuSaveProfileSelectedProfileIndex < PROFILE_COUNT - 1) //Scroll down
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <menuSaveProfile+0xd8>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b0e      	cmp	r3, #14
 80023a4:	d806      	bhi.n	80023b4 <menuSaveProfile+0x98>
						{
			menuSaveProfileSelectedProfileIndex++;
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <menuSaveProfile+0xd8>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <menuSaveProfile+0xd8>)
 80023b0:	801a      	strh	r2, [r3, #0]
 80023b2:	e01a      	b.n	80023ea <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_A) //Select
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <menuSaveProfile+0xbc>
		{
			profileSave(menuSaveProfileSelectedProfileIndex);
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <menuSaveProfile+0xd8>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fd03 	bl	8000dd0 <profileSave>
			menuDeactivate(0);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f85a 	bl	8002484 <menuDeactivate>
			screenClearIn(2);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f000 f98d 	bl	80026f0 <screenClearIn>
		{
			menuDeactivate(1);
		}
	}

}
 80023d6:	e008      	b.n	80023ea <menuSaveProfile+0xce>
		} else if (buttons & BUTTON_B) //Cancel
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <menuSaveProfile+0xce>
			menuDeactivate(1);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f000 f84e 	bl	8002484 <menuDeactivate>
}
 80023e8:	e7ff      	b.n	80023ea <menuSaveProfile+0xce>
 80023ea:	bf00      	nop
 80023ec:	3730      	adds	r7, #48	; 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200000da 	.word	0x200000da
 80023f8:	0800a160 	.word	0x0800a160
 80023fc:	0800a150 	.word	0x0800a150

08002400 <menuToggleScreenShowInput>:

//Toggle screen displaying input during normal use
void menuToggleScreenShowInput(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6039      	str	r1, [r7, #0]
 8002408:	4611      	mov	r1, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4603      	mov	r3, r0
 800240e:	80fb      	strh	r3, [r7, #6]
 8002410:	460b      	mov	r3, r1
 8002412:	717b      	strb	r3, [r7, #5]
 8002414:	4613      	mov	r3, r2
 8002416:	713b      	strb	r3, [r7, #4]
	screenSetShowNormalInput(!screenGetShowNormalInput());
 8002418:	f000 f98c 	bl	8002734 <screenGetShowNormalInput>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f98f 	bl	800274c <screenSetShowNormalInput>
	menuDeactivate(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f000 f828 	bl	8002484 <menuDeactivate>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <menuAbout>:

//About
void menuAbout(uint16_t buttons, uint32_t buttonsHoldTime,
		uint8_t buttonsChanged, uint8_t firstRun) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6039      	str	r1, [r7, #0]
 8002444:	4611      	mov	r1, r2
 8002446:	461a      	mov	r2, r3
 8002448:	4603      	mov	r3, r0
 800244a:	80fb      	strh	r3, [r7, #6]
 800244c:	460b      	mov	r3, r1
 800244e:	717b      	strb	r3, [r7, #5]
 8002450:	4613      	mov	r3, r2
 8002452:	713b      	strb	r3, [r7, #4]
	screenWriteTopLine("SNES->Gameport");
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <menuAbout+0x40>)
 8002456:	f000 f989 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine("By Netham45");
 800245a:	4809      	ldr	r0, [pc, #36]	; (8002480 <menuAbout+0x44>)
 800245c:	f000 f9ba 	bl	80027d4 <screenWriteBottomLine>
	if (buttons && buttonsChanged) {
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <menuAbout+0x36>
 8002466:	797b      	ldrb	r3, [r7, #5]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <menuAbout+0x36>
		menuDeactivate(1);
 800246c:	2001      	movs	r0, #1
 800246e:	f000 f809 	bl	8002484 <menuDeactivate>
	}
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	0800a174 	.word	0x0800a174
 8002480:	0800a184 	.word	0x0800a184

08002484 <menuDeactivate>:
//End Submenu Callbacks

//Hide menu, clearMessage to clear the screen immediately, otherwise leave the screen alone
void menuDeactivate(uint8_t _clearMessage) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	menuActive = 0;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <menuDeactivate+0x28>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
	if (_clearMessage)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <menuDeactivate+0x1a>
		screenClear();
 800249a:	f000 f905 	bl	80026a8 <screenClear>
	menuActiveSubmenuCallback = 0;
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <menuDeactivate+0x2c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200000b1 	.word	0x200000b1
 80024b0:	200000bc 	.word	0x200000bc

080024b4 <menuActivate>:

//Show the menu
void menuActivate() {
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	menuActive = 1;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <menuActivate+0x1c>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
	menuActiveSubmenuCallback = 0;
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <menuActivate+0x20>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	200000b1 	.word	0x200000b1
 80024d4:	200000bc 	.word	0x200000bc

080024d8 <menuProcess>:

int menuProcess(uint16_t buttons) {
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]

	uint8_t buttonsChanged = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

	if (menuLastButtonsPressed != buttons) //Check if buttons have changed, if so reset the held timer and set the changed flag
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <menuProcess+0x98>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d009      	beq.n	8002504 <menuProcess+0x2c>
			{
		menuLastButtonsPressedTime = HAL_GetTick();
 80024f0:	f000 faf6 	bl	8002ae0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <menuProcess+0x9c>)
 80024f8:	601a      	str	r2, [r3, #0]
		menuLastButtonsPressed = buttons;
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <menuProcess+0x98>)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	8013      	strh	r3, [r2, #0]
		buttonsChanged = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
	}

	uint32_t buttonsHoldTime = HAL_GetTick() - menuLastButtonsPressedTime; //How long the button has been held
 8002504:	f000 faec 	bl	8002ae0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <menuProcess+0x9c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	613b      	str	r3, [r7, #16]

	if (buttons == (BUTTON_START | BUTTON_SELECT) && buttonsHoldTime > 1000) //If the menu isn't active and START+SELECT are held alone for 1s open it
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d105      	bne.n	8002524 <menuProcess+0x4c>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251e:	d901      	bls.n	8002524 <menuProcess+0x4c>
			{
		menuActivate();
 8002520:	f7ff ffc8 	bl	80024b4 <menuActivate>
	}

	if (!menuActive) {
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <menuProcess+0xa0>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <menuProcess+0x58>
		return 0; //  0 for continue to press buttons on the PC
 800252c:	2300      	movs	r3, #0
 800252e:	e01a      	b.n	8002566 <menuProcess+0x8e>
	}

	screenResetClearTime(); //Clear any timers to turn the screen off
 8002530:	f000 f8f4 	bl	800271c <screenResetClearTime>

	if (menuActiveSubmenuCallback) //Call a submenu
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <menuProcess+0xa4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <menuProcess+0x80>
	{
		void (*callback)(uint16_t buttons, uint32_t buttonsHoldTime,
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <menuProcess+0xa4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
				uint8_t buttonsChanged, uint8_t firstRun) = menuActiveSubmenuCallback;
		callback(buttons, buttonsHoldTime, buttonsChanged,
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <menuProcess+0xa8>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	7dfa      	ldrb	r2, [r7, #23]
 8002548:	88f8      	ldrh	r0, [r7, #6]
 800254a:	68fc      	ldr	r4, [r7, #12]
 800254c:	6939      	ldr	r1, [r7, #16]
 800254e:	47a0      	blx	r4
				mainMenuSubmenuFirstRun);
		mainMenuSubmenuFirstRun = 0;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <menuProcess+0xa8>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e005      	b.n	8002564 <menuProcess+0x8c>
	} else //Render the menu, check the keys
	{
		menuMainMenu(buttons, buttonsHoldTime, buttonsChanged,
 8002558:	7dfa      	ldrb	r2, [r7, #23]
 800255a:	88f8      	ldrh	r0, [r7, #6]
 800255c:	2300      	movs	r3, #0
 800255e:	6939      	ldr	r1, [r7, #16]
 8002560:	f7ff fb5c 	bl	8001c1c <menuMainMenu>
						0);
	}

	return 1; //1 for don't continue
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	200000b8 	.word	0x200000b8
 8002574:	200000b4 	.word	0x200000b4
 8002578:	200000b1 	.word	0x200000b1
 800257c:	200000bc 	.word	0x200000bc
 8002580:	200000c0 	.word	0x200000c0

08002584 <menuInitMenuEntry>:

//Registers a menu entry's name, help message, and callback function
void menuInitMenuEntry(char *name, char *help, void *callback) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	strcpy(menuItems[menuNumEntries].name, name);
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <menuInitMenuEntry+0x68>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	2354      	movs	r3, #84	; 0x54
 8002598:	fb03 f302 	mul.w	r3, r3, r2
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <menuInitMenuEntry+0x6c>)
 800259e:	4413      	add	r3, r2
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f007 f958 	bl	8009858 <strcpy>
	strcpy(menuItems[menuNumEntries].help, help);
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <menuInitMenuEntry+0x68>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	2354      	movs	r3, #84	; 0x54
 80025b0:	fb03 f302 	mul.w	r3, r3, r2
 80025b4:	3310      	adds	r3, #16
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <menuInitMenuEntry+0x6c>)
 80025b8:	4413      	add	r3, r2
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	4618      	mov	r0, r3
 80025be:	f007 f94b 	bl	8009858 <strcpy>
	menuItems[menuNumEntries].callback = callback;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <menuInitMenuEntry+0x68>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <menuInitMenuEntry+0x6c>)
 80025ca:	2354      	movs	r3, #84	; 0x54
 80025cc:	fb03 f301 	mul.w	r3, r3, r1
 80025d0:	4413      	add	r3, r2
 80025d2:	3350      	adds	r3, #80	; 0x50
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
	menuNumEntries++;
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <menuInitMenuEntry+0x68>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b02      	ldr	r3, [pc, #8]	; (80025ec <menuInitMenuEntry+0x68>)
 80025e2:	701a      	strb	r2, [r3, #0]
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200000b0 	.word	0x200000b0
 80025f0:	20007b94 	.word	0x20007b94

080025f4 <menuInit>:

//Register menu entries/callbacks
void menuInit() {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	memset(menuItems, 0, sizeof(menuItems));
 80025f8:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 80025fc:	2100      	movs	r1, #0
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <menuInit+0x5c>)
 8002600:	f007 f901 	bl	8009806 <memset>
	menuInitMenuEntry("Rebind Keys", "Rebind key(s) to other key(s)",
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <menuInit+0x60>)
 8002606:	4914      	ldr	r1, [pc, #80]	; (8002658 <menuInit+0x64>)
 8002608:	4814      	ldr	r0, [pc, #80]	; (800265c <menuInit+0x68>)
 800260a:	f7ff ffbb 	bl	8002584 <menuInitMenuEntry>
			&menuRebindKeys);
	menuInitMenuEntry("View/Edit Binds", "Scroll through binds and edit rapid fire",
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <menuInit+0x6c>)
 8002610:	4914      	ldr	r1, [pc, #80]	; (8002664 <menuInit+0x70>)
 8002612:	4815      	ldr	r0, [pc, #84]	; (8002668 <menuInit+0x74>)
 8002614:	f7ff ffb6 	bl	8002584 <menuInitMenuEntry>
			&menuViewEditBinds);
	menuInitMenuEntry("Clear Binds", "Clear all binds", &menuClearBinds);
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <menuInit+0x78>)
 800261a:	4915      	ldr	r1, [pc, #84]	; (8002670 <menuInit+0x7c>)
 800261c:	4815      	ldr	r0, [pc, #84]	; (8002674 <menuInit+0x80>)
 800261e:	f7ff ffb1 	bl	8002584 <menuInitMenuEntry>
	menuInitMenuEntry("Select Profile", "Select which profile to use",
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <menuInit+0x84>)
 8002624:	4915      	ldr	r1, [pc, #84]	; (800267c <menuInit+0x88>)
 8002626:	4816      	ldr	r0, [pc, #88]	; (8002680 <menuInit+0x8c>)
 8002628:	f7ff ffac 	bl	8002584 <menuInitMenuEntry>
			&menuSelectProfile);
	menuInitMenuEntry("Save Profile", "Save current profile to a slot in Flash", &menuSaveProfile);
 800262c:	4a15      	ldr	r2, [pc, #84]	; (8002684 <menuInit+0x90>)
 800262e:	4916      	ldr	r1, [pc, #88]	; (8002688 <menuInit+0x94>)
 8002630:	4816      	ldr	r0, [pc, #88]	; (800268c <menuInit+0x98>)
 8002632:	f7ff ffa7 	bl	8002584 <menuInitMenuEntry>
	menuInitMenuEntry("Show/Hide Input", "Toggle showing input after binds",
 8002636:	4a16      	ldr	r2, [pc, #88]	; (8002690 <menuInit+0x9c>)
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <menuInit+0xa0>)
 800263a:	4817      	ldr	r0, [pc, #92]	; (8002698 <menuInit+0xa4>)
 800263c:	f7ff ffa2 	bl	8002584 <menuInitMenuEntry>
			&menuToggleScreenShowInput);
	menuInitMenuEntry("About", "About this device", &menuAbout);
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <menuInit+0xa8>)
 8002642:	4917      	ldr	r1, [pc, #92]	; (80026a0 <menuInit+0xac>)
 8002644:	4817      	ldr	r0, [pc, #92]	; (80026a4 <menuInit+0xb0>)
 8002646:	f7ff ff9d 	bl	8002584 <menuInitMenuEntry>
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20007b94 	.word	0x20007b94
 8002654:	08001e91 	.word	0x08001e91
 8002658:	0800a190 	.word	0x0800a190
 800265c:	0800a1b0 	.word	0x0800a1b0
 8002660:	08001fe1 	.word	0x08001fe1
 8002664:	0800a1bc 	.word	0x0800a1bc
 8002668:	0800a1e8 	.word	0x0800a1e8
 800266c:	080021b5 	.word	0x080021b5
 8002670:	0800a1f8 	.word	0x0800a1f8
 8002674:	0800a208 	.word	0x0800a208
 8002678:	08002239 	.word	0x08002239
 800267c:	0800a214 	.word	0x0800a214
 8002680:	0800a230 	.word	0x0800a230
 8002684:	0800231d 	.word	0x0800231d
 8002688:	0800a240 	.word	0x0800a240
 800268c:	0800a268 	.word	0x0800a268
 8002690:	08002401 	.word	0x08002401
 8002694:	0800a278 	.word	0x0800a278
 8002698:	0800a29c 	.word	0x0800a29c
 800269c:	0800243d 	.word	0x0800243d
 80026a0:	0800a2ac 	.word	0x0800a2ac
 80026a4:	0800a2c0 	.word	0x0800a2c0

080026a8 <screenClear>:
uint8_t screenShowNormalInput = 0;

char currentTopLine[SCREEN_CSTR_WIDTH];
char currentBottomLine[SCREEN_CSTR_WIDTH];

void screenClear() {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	lcdSetCursorPosition(0, 0);
 80026ac:	2100      	movs	r1, #0
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff f9f4 	bl	8001a9c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH);
 80026b4:	2110      	movs	r1, #16
 80026b6:	480b      	ldr	r0, [pc, #44]	; (80026e4 <screenClear+0x3c>)
 80026b8:	f7ff fa1c 	bl	8001af4 <lcdPrintStr>
	lcdSetCursorPosition(0, 1);
 80026bc:	2101      	movs	r1, #1
 80026be:	2000      	movs	r0, #0
 80026c0:	f7ff f9ec 	bl	8001a9c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH);
 80026c4:	2110      	movs	r1, #16
 80026c6:	4807      	ldr	r0, [pc, #28]	; (80026e4 <screenClear+0x3c>)
 80026c8:	f7ff fa14 	bl	8001af4 <lcdPrintStr>
	lcdBacklight(LCD_BIT_BACKIGHT_OFF);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff f9bb 	bl	8001a48 <lcdBacklight>
	currentTopLine[0] = 0;
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <screenClear+0x40>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
	currentBottomLine[0] = 0;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <screenClear+0x44>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800a2c8 	.word	0x0800a2c8
 80026e8:	20008628 	.word	0x20008628
 80026ec:	20008614 	.word	0x20008614

080026f0 <screenClearIn>:

void screenClearIn(uint8_t seconds) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
	clearMessageTime = HAL_GetTick() + (seconds * 1000);
 80026fa:	f000 f9f1 	bl	8002ae0 <HAL_GetTick>
 80026fe:	4601      	mov	r1, r0
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	440b      	add	r3, r1
 800270c:	4a02      	ldr	r2, [pc, #8]	; (8002718 <screenClearIn+0x28>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200000dc 	.word	0x200000dc

0800271c <screenResetClearTime>:

void screenResetClearTime() {
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	clearMessageTime = 0;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <screenResetClearTime+0x14>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	200000dc 	.word	0x200000dc

08002734 <screenGetShowNormalInput>:

uint32_t screenGetClearMessageTime() {
	return clearMessageTime;
}

uint8_t screenGetShowNormalInput() {
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	return screenShowNormalInput;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <screenGetShowNormalInput+0x14>)
 800273a:	781b      	ldrb	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200000e0 	.word	0x200000e0

0800274c <screenSetShowNormalInput>:

void screenSetShowNormalInput(uint8_t show) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
	screenShowNormalInput = show;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <screenSetShowNormalInput+0x1c>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	7013      	strb	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	200000e0 	.word	0x200000e0

0800276c <screenWriteTopLine>:

void screenWriteTopLine(char *data)

{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	if (strcmp(currentTopLine, data) != 0) {
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4815      	ldr	r0, [pc, #84]	; (80027cc <screenWriteTopLine+0x60>)
 8002778:	f7fd fd32 	bl	80001e0 <strcmp>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01f      	beq.n	80027c2 <screenWriteTopLine+0x56>
		strcpy(currentTopLine, data);
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4811      	ldr	r0, [pc, #68]	; (80027cc <screenWriteTopLine+0x60>)
 8002786:	f007 f867 	bl	8009858 <strcpy>
		lcdBacklight(LCD_BIT_BACKIGHT_ON);
 800278a:	2008      	movs	r0, #8
 800278c:	f7ff f95c 	bl	8001a48 <lcdBacklight>
		lcdSetCursorPosition(0, 0);
 8002790:	2100      	movs	r1, #0
 8002792:	2000      	movs	r0, #0
 8002794:	f7ff f982 	bl	8001a9c <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) data, strlen(data));
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fd fd2b 	bl	80001f4 <strlen>
 800279e:	4603      	mov	r3, r0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff f9a5 	bl	8001af4 <lcdPrintStr>
		lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH - strlen(data));
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fd fd22 	bl	80001f4 <strlen>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f1c3 0310 	rsb	r3, r3, #16
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <screenWriteTopLine+0x64>)
 80027be:	f7ff f999 	bl	8001af4 <lcdPrintStr>
	}

}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20008628 	.word	0x20008628
 80027d0:	0800a2c8 	.word	0x0800a2c8

080027d4 <screenWriteBottomLine>:

void screenWriteBottomLine(char *data) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	if (strcmp(currentBottomLine, data) != 0) {
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4815      	ldr	r0, [pc, #84]	; (8002834 <screenWriteBottomLine+0x60>)
 80027e0:	f7fd fcfe 	bl	80001e0 <strcmp>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01f      	beq.n	800282a <screenWriteBottomLine+0x56>
		strcpy(currentBottomLine, data);
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4811      	ldr	r0, [pc, #68]	; (8002834 <screenWriteBottomLine+0x60>)
 80027ee:	f007 f833 	bl	8009858 <strcpy>
		lcdBacklight(LCD_BIT_BACKIGHT_ON);
 80027f2:	2008      	movs	r0, #8
 80027f4:	f7ff f928 	bl	8001a48 <lcdBacklight>
		lcdSetCursorPosition(0, 1);
 80027f8:	2101      	movs	r1, #1
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff f94e 	bl	8001a9c <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) data, strlen(data));
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd fcf7 	bl	80001f4 <strlen>
 8002806:	4603      	mov	r3, r0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff f971 	bl	8001af4 <lcdPrintStr>
		lcdPrintStr((uint8_t*) "                ", SCREEN_WIDTH - strlen(data));
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fd fcee 	bl	80001f4 <strlen>
 8002818:	4603      	mov	r3, r0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f1c3 0310 	rsb	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	4619      	mov	r1, r3
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <screenWriteBottomLine+0x64>)
 8002826:	f7ff f965 	bl	8001af4 <lcdPrintStr>
	}
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20008614 	.word	0x20008614
 8002838:	0800a2c8 	.word	0x0800a2c8

0800283c <screenProcess>:

void screenProcess(uint16_t buttons) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
	if (clearMessageTime && (clearMessageTime < HAL_GetTick())) {
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <screenProcess+0x6c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <screenProcess+0x2a>
 800284e:	f000 f947 	bl	8002ae0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <screenProcess+0x6c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d904      	bls.n	8002866 <screenProcess+0x2a>
		screenClear();
 800285c:	f7ff ff24 	bl	80026a8 <screenClear>
		clearMessageTime = 0;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <screenProcess+0x6c>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
	}

	//If no other message is being shown show the currently pressed keys after rebinding
	if (screenShowNormalInput) {
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <screenProcess+0x70>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d018      	beq.n	80028a0 <screenProcess+0x64>
		if (!clearMessageTime) {
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <screenProcess+0x6c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d114      	bne.n	80028a0 <screenProcess+0x64>
			if (buttons) {
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00f      	beq.n	800289c <screenProcess+0x60>
				char buffer[SCREEN_CSTR_WIDTH];
				buttonsToString(buffer, buttons, "\xA5");
 800287c:	88f9      	ldrh	r1, [r7, #6]
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <screenProcess+0x74>)
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fdd1 	bl	800142c <buttonsToString>
				screenWriteTopLine(buffer);
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff6c 	bl	800276c <screenWriteTopLine>
				screenWriteBottomLine("");
 8002894:	4807      	ldr	r0, [pc, #28]	; (80028b4 <screenProcess+0x78>)
 8002896:	f7ff ff9d 	bl	80027d4 <screenWriteBottomLine>
			} else {
				screenClear();
			}
		}
	}
}
 800289a:	e001      	b.n	80028a0 <screenProcess+0x64>
				screenClear();
 800289c:	f7ff ff04 	bl	80026a8 <screenClear>
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200000dc 	.word	0x200000dc
 80028ac:	200000e0 	.word	0x200000e0
 80028b0:	0800a2dc 	.word	0x0800a2dc
 80028b4:	0800a2e0 	.word	0x0800a2e0

080028b8 <snesSetDelayuSTimer>:
#include <snestogameport/snes.h>
//Microsecond Sleep, only used by snes controller polling
TIM_HandleTypeDef *htimdelayus = 0;
void snesSetDelayuSTimer(TIM_HandleTypeDef *_htimdelayus) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	htimdelayus = _htimdelayus;
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <snesSetDelayuSTimer+0x20>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htimdelayus);
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <snesSetDelayuSTimer+0x20>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fe09 	bl	80064e2 <HAL_TIM_Base_Start>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	200000e4 	.word	0x200000e4

080028dc <delayuS>:

void delayuS(uint16_t us) {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htimdelayus, 0);  // set the counter value a 0
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <delayuS+0x30>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htimdelayus) < us)
 80028f0:	bf00      	nop
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <delayuS+0x30>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3f8      	bcc.n	80028f2 <delayuS+0x16>
		;  // wait for the counter to reach the us input in the parameter
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	200000e4 	.word	0x200000e4

08002910 <snesPoll>:

//End Microsecond Sleep

//Query the SNES controller
int snesPoll() {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
	uint16_t buttons = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_SET); //Pulse latch to capture current button state in controller state register
 800291a:	2201      	movs	r2, #1
 800291c:	2110      	movs	r1, #16
 800291e:	4820      	ldr	r0, [pc, #128]	; (80029a0 <snesPoll+0x90>)
 8002920:	f001 f91c 	bl	8003b5c <HAL_GPIO_WritePin>
	delayuS(12); // 12µs delay
 8002924:	200c      	movs	r0, #12
 8002926:	f7ff ffd9 	bl	80028dc <delayuS>
	HAL_GPIO_WritePin(SNES_Latch_GPIO_Port, SNES_Latch_Pin, GPIO_PIN_RESET);
 800292a:	2200      	movs	r2, #0
 800292c:	2110      	movs	r1, #16
 800292e:	481c      	ldr	r0, [pc, #112]	; (80029a0 <snesPoll+0x90>)
 8002930:	f001 f914 	bl	8003b5c <HAL_GPIO_WritePin>
	delayuS(6); // 6µs delay
 8002934:	2006      	movs	r0, #6
 8002936:	f7ff ffd1 	bl	80028dc <delayuS>
	for (int i = 0; i < 16; i++) {
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	e026      	b.n	800298e <snesPoll+0x7e>
		buttons |= ((!HAL_GPIO_ReadPin(SNES_Data_GPIO_Port, SNES_Data_Pin)) << i); //Read button and set the bitmask index, logically inverted coming in from the controller
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	4817      	ldr	r0, [pc, #92]	; (80029a0 <snesPoll+0x90>)
 8002944:	f001 f8f2 	bl	8003b2c <HAL_GPIO_ReadPin>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	b21a      	sxth	r2, r3
 800295e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002962:	4313      	orrs	r3, r2
 8002964:	b21b      	sxth	r3, r3
 8002966:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_RESET); //Pulse clock to advance button being reported
 8002968:	2200      	movs	r2, #0
 800296a:	2120      	movs	r1, #32
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <snesPoll+0x90>)
 800296e:	f001 f8f5 	bl	8003b5c <HAL_GPIO_WritePin>
		delayuS(12);
 8002972:	200c      	movs	r0, #12
 8002974:	f7ff ffb2 	bl	80028dc <delayuS>
		HAL_GPIO_WritePin(SNES_Clock_GPIO_Port, SNES_Clock_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	2120      	movs	r1, #32
 800297c:	4808      	ldr	r0, [pc, #32]	; (80029a0 <snesPoll+0x90>)
 800297e:	f001 f8ed 	bl	8003b5c <HAL_GPIO_WritePin>
		delayuS(12);
 8002982:	200c      	movs	r0, #12
 8002984:	f7ff ffaa 	bl	80028dc <delayuS>
	for (int i = 0; i < 16; i++) {
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b0f      	cmp	r3, #15
 8002992:	ddd5      	ble.n	8002940 <snesPoll+0x30>
	}

	return buttons;
 8002994:	88fb      	ldrh	r3, [r7, #6]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40020000 	.word	0x40020000

080029a4 <snesMain>:
#include <snestogameport/buttons.h>
#include <snestogameport/menu.h>
#include <snestogameport/snes.h>
#include <snestogameport/lcd_hd44780_i2c.h>

void snesMain(I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimdelayus) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]

	snesSetDelayuSTimer(htimdelayus); //Init delayuS timer for snes controller polling
 80029ae:	6838      	ldr	r0, [r7, #0]
 80029b0:	f7ff ff82 	bl	80028b8 <snesSetDelayuSTimer>
	lcdInit(hi2c, (uint8_t) 0x27, (uint8_t) 20, (uint8_t) 4); //Init LCD
 80029b4:	2304      	movs	r3, #4
 80029b6:	2214      	movs	r2, #20
 80029b8:	2127      	movs	r1, #39	; 0x27
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fe98 	bl	80016f0 <lcdInit>
	buttonsGPIODefaultState(); //Init GPIO
 80029c0:	f7fe fb42 	bl	8001048 <buttonsGPIODefaultState>
	profileSelect(0); //Load profile 0
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe fa3d 	bl	8000e44 <profileSelect>
	menuInit(); //Register menu entries
 80029ca:	f7ff fe13 	bl	80025f4 <menuInit>
	
	//Splash
	screenWriteTopLine("SNES -> Gameport");
 80029ce:	4812      	ldr	r0, [pc, #72]	; (8002a18 <snesMain+0x74>)
 80029d0:	f7ff fecc 	bl	800276c <screenWriteTopLine>
	screenWriteBottomLine("By Netham45");
 80029d4:	4811      	ldr	r0, [pc, #68]	; (8002a1c <snesMain+0x78>)
 80029d6:	f7ff fefd 	bl	80027d4 <screenWriteBottomLine>
	screenClearIn(2);
 80029da:	2002      	movs	r0, #2
 80029dc:	f7ff fe88 	bl	80026f0 <screenClearIn>

	while (1) {
		uint16_t buttons = snesPoll(); //Query SNES controller
 80029e0:	f7ff ff96 	bl	8002910 <snesPoll>
 80029e4:	4603      	mov	r3, r0
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	81fb      	strh	r3, [r7, #14]

		//If processMenu returns non-zero then the menu is open and don't process anything else this loop.
		if (menuProcess(buttons))
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fd73 	bl	80024d8 <menuProcess>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10d      	bne.n	8002a14 <snesMain+0x70>
			continue;

		bindProcess(&buttons);
 80029f8:	f107 030e 	add.w	r3, r7, #14
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb79 	bl	80010f4 <bindProcess>
		screenProcess(buttons);
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff19 	bl	800283c <screenProcess>
		buttonsProcess(buttons);
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fc09 	bl	8001224 <buttonsProcess>
 8002a12:	e7e5      	b.n	80029e0 <snesMain+0x3c>
			continue;
 8002a14:	bf00      	nop
	while (1) {
 8002a16:	e7e3      	b.n	80029e0 <snesMain+0x3c>
 8002a18:	0800a2e4 	.word	0x0800a2e4
 8002a1c:	0800a2f8 	.word	0x0800a2f8

08002a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a26:	e003      	b.n	8002a30 <LoopCopyDataInit>

08002a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a2e:	3104      	adds	r1, #4

08002a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a30:	480b      	ldr	r0, [pc, #44]	; (8002a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a38:	d3f6      	bcc.n	8002a28 <CopyDataInit>
  ldr  r2, =_sbss
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a3c:	e002      	b.n	8002a44 <LoopFillZerobss>

08002a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a40:	f842 3b04 	str.w	r3, [r2], #4

08002a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a48:	d3f9      	bcc.n	8002a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a4a:	f7fe f983 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4e:	f006 feab 	bl	80097a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a52:	f7fd fdad 	bl	80005b0 <main>
  bx  lr    
 8002a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a58:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002a5c:	0800a3a8 	.word	0x0800a3a8
  ldr  r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a64:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002a68:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002a6c:	200086a4 	.word	0x200086a4

08002a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC_IRQHandler>
	...

08002a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <HAL_Init+0x40>)
 8002a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_Init+0x40>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_Init+0x40>)
 8002a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_Init+0x40>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <HAL_Init+0x40>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	f000 f8d8 	bl	8002c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fe f87e 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa8:	f7fd ff70 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023c00 	.word	0x40023c00

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	2000863c 	.word	0x2000863c

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000863c 	.word	0x2000863c

08002af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <__NVIC_EnableIRQ+0x38>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	; (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ff4c 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7a:	f7ff ff61 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f7ff ffb1 	bl	8002bec <NVIC_EncodePriority>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff80 	bl	8002b98 <__NVIC_SetPriority>
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff54 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ff0a 	bl	8002ae0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e099      	b.n	8002e0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf8:	e00f      	b.n	8002d1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfa:	f7ff fef1 	bl	8002ae0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d908      	bls.n	8002d1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2203      	movs	r2, #3
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e078      	b.n	8002e0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e8      	bne.n	8002cfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4b38      	ldr	r3, [pc, #224]	; (8002e14 <HAL_DMA_Init+0x158>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d117      	bne.n	8002dde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 faab 	bl	800331c <DMA_CheckFifoParam>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e016      	b.n	8002e0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa62 	bl	80032b0 <DMA_CalcBaseAndBitshift>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	223f      	movs	r2, #63	; 0x3f
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	f010803f 	.word	0xf010803f

08002e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Start_IT+0x26>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e040      	b.n	8002ec0 <HAL_DMA_Start_IT+0xa8>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d12f      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9f4 	bl	8003254 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	223f      	movs	r2, #63	; 0x3f
 8002e72:	409a      	lsls	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0216 	orr.w	r2, r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e005      	b.n	8002ebe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00c      	b.n	8002f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_DMA_IRQHandler+0x258>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a92      	ldr	r2, [pc, #584]	; (8003168 <HAL_DMA_IRQHandler+0x25c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2210      	movs	r2, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	2210      	movs	r2, #16
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e01f      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e016      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0208 	bic.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2220      	movs	r2, #32
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808e 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8086 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2220      	movs	r2, #32
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d136      	bne.n	8003124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0216 	bic.w	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x1da>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0208 	bic.w	r2, r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	223f      	movs	r2, #63	; 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07d      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
        }
        return;
 8003122:	e078      	b.n	8003216 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b00      	cmp	r3, #0
 8003146:	d030      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e02b      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d027      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
 8003162:	e022      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
 8003164:	20000000 	.word	0x20000000
 8003168:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0210 	bic.w	r2, r2, #16
 8003188:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d032      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3301      	adds	r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d307      	bcc.n	80031f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f2      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x2ca>
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003216:	bf00      	nop
    }
  }
}
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop

08003220 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322e:	b2db      	uxtb	r3, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003270:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d108      	bne.n	8003294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003292:	e007      	b.n	80032a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3b10      	subs	r3, #16
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <DMA_CalcBaseAndBitshift+0x64>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <DMA_CalcBaseAndBitshift+0x68>)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d909      	bls.n	80032f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	1d1a      	adds	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	659a      	str	r2, [r3, #88]	; 0x58
 80032f0:	e007      	b.n	8003302 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	aaaaaaab 	.word	0xaaaaaaab
 8003318:	0800a35c 	.word	0x0800a35c

0800331c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d11f      	bne.n	8003376 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d855      	bhi.n	80033e8 <DMA_CheckFifoParam+0xcc>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <DMA_CheckFifoParam+0x28>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003355 	.word	0x08003355
 8003348:	08003367 	.word	0x08003367
 800334c:	08003355 	.word	0x08003355
 8003350:	080033e9 	.word	0x080033e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d045      	beq.n	80033ec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003364:	e042      	b.n	80033ec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800336e:	d13f      	bne.n	80033f0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003374:	e03c      	b.n	80033f0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337e:	d121      	bne.n	80033c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d836      	bhi.n	80033f4 <DMA_CheckFifoParam+0xd8>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <DMA_CheckFifoParam+0x70>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033a3 	.word	0x080033a3
 8003394:	0800339d 	.word	0x0800339d
 8003398:	080033b5 	.word	0x080033b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e02f      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d024      	beq.n	80033f8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b2:	e021      	b.n	80033f8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033bc:	d11e      	bne.n	80033fc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033c2:	e01b      	b.n	80033fc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <DMA_CheckFifoParam+0xb4>
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d003      	beq.n	80033d6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ce:	e018      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      break;
 80033d4:	e015      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00e      	beq.n	8003400 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      break;
 80033e6:	e00b      	b.n	8003400 <DMA_CheckFifoParam+0xe4>
      break;
 80033e8:	bf00      	nop
 80033ea:	e00a      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;
 80033ec:	bf00      	nop
 80033ee:	e008      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;
 80033f0:	bf00      	nop
 80033f2:	e006      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;
 80033f4:	bf00      	nop
 80033f6:	e004      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;
 80033f8:	bf00      	nop
 80033fa:	e002      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;   
 80033fc:	bf00      	nop
 80033fe:	e000      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;
 8003400:	bf00      	nop
    }
  } 
  
  return status; 
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_FLASH_Program+0xa0>)
 8003424:	7e1b      	ldrb	r3, [r3, #24]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_FLASH_Program+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e03b      	b.n	80034a6 <HAL_FLASH_Program+0x96>
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_FLASH_Program+0xa0>)
 8003430:	2201      	movs	r2, #1
 8003432:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003434:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003438:	f000 f870 	bl	800351c <FLASH_WaitForLastOperation>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d12b      	bne.n	800349e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800344c:	783b      	ldrb	r3, [r7, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	68b8      	ldr	r0, [r7, #8]
 8003452:	f000 f919 	bl	8003688 <FLASH_Program_Byte>
 8003456:	e016      	b.n	8003486 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800345e:	883b      	ldrh	r3, [r7, #0]
 8003460:	4619      	mov	r1, r3
 8003462:	68b8      	ldr	r0, [r7, #8]
 8003464:	f000 f8ec 	bl	8003640 <FLASH_Program_HalfWord>
 8003468:	e00d      	b.n	8003486 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d105      	bne.n	800347c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	68b8      	ldr	r0, [r7, #8]
 8003476:	f000 f8c1 	bl	80035fc <FLASH_Program_Word>
 800347a:	e004      	b.n	8003486 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	68b8      	ldr	r0, [r7, #8]
 8003482:	f000 f88b 	bl	800359c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003486:	f24c 3050 	movw	r0, #50000	; 0xc350
 800348a:	f000 f847 	bl	800351c <FLASH_WaitForLastOperation>
 800348e:	4603      	mov	r3, r0
 8003490:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_FLASH_Program+0xa4>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_FLASH_Program+0xa4>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <HAL_FLASH_Program+0xa0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20008640 	.word	0x20008640
 80034b4:	40023c00 	.word	0x40023c00

080034b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_FLASH_Unlock+0x38>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da0b      	bge.n	80034e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_FLASH_Unlock+0x38>)
 80034cc:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_FLASH_Unlock+0x3c>)
 80034ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_FLASH_Unlock+0x38>)
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_FLASH_Unlock+0x40>)
 80034d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_FLASH_Unlock+0x38>)
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da01      	bge.n	80034e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034e2:	79fb      	ldrb	r3, [r7, #7]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40023c00 	.word	0x40023c00
 80034f4:	45670123 	.word	0x45670123
 80034f8:	cdef89ab 	.word	0xcdef89ab

080034fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_FLASH_Lock+0x1c>)
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <HAL_FLASH_Lock+0x1c>)
 8003506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800350a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40023c00 	.word	0x40023c00

0800351c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <FLASH_WaitForLastOperation+0x78>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800352e:	f7ff fad7 	bl	8002ae0 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003534:	e010      	b.n	8003558 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d00c      	beq.n	8003558 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <FLASH_WaitForLastOperation+0x38>
 8003544:	f7ff facc 	bl	8002ae0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d201      	bcs.n	8003558 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e019      	b.n	800358c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e8      	bne.n	8003536 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 8003572:	2201      	movs	r2, #1
 8003574:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003582:	f000 f8a3 	bl	80036cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
  
}  
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20008640 	.word	0x20008640
 8003598:	40023c00 	.word	0x40023c00

0800359c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800359c:	b490      	push	{r4, r7}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <FLASH_Program_DoubleWord+0x5c>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <FLASH_Program_DoubleWord+0x5c>)
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <FLASH_Program_DoubleWord+0x5c>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <FLASH_Program_DoubleWord+0x5c>)
 80035ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <FLASH_Program_DoubleWord+0x5c>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <FLASH_Program_DoubleWord+0x5c>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80035d2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80035d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	0013      	movs	r3, r2
 80035e4:	2400      	movs	r4, #0
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	3204      	adds	r2, #4
 80035ea:	6013      	str	r3, [r2, #0]
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc90      	pop	{r4, r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00

080035fc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <FLASH_Program_Word+0x40>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <FLASH_Program_Word+0x40>)
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <FLASH_Program_Word+0x40>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <FLASH_Program_Word+0x40>)
 8003618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <FLASH_Program_Word+0x40>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	4a06      	ldr	r2, [pc, #24]	; (800363c <FLASH_Program_Word+0x40>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40023c00 	.word	0x40023c00

08003640 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <FLASH_Program_HalfWord+0x44>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <FLASH_Program_HalfWord+0x44>)
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <FLASH_Program_HalfWord+0x44>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4a09      	ldr	r2, [pc, #36]	; (8003684 <FLASH_Program_HalfWord+0x44>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <FLASH_Program_HalfWord+0x44>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4a06      	ldr	r2, [pc, #24]	; (8003684 <FLASH_Program_HalfWord+0x44>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	801a      	strh	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023c00 	.word	0x40023c00

08003688 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <FLASH_Program_Byte+0x40>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <FLASH_Program_Byte+0x40>)
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <FLASH_Program_Byte+0x40>)
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <FLASH_Program_Byte+0x40>)
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <FLASH_Program_Byte+0x40>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <FLASH_Program_Byte+0x40>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	701a      	strb	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00

080036cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	4a2b      	ldr	r2, [pc, #172]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 80036e6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 80036ea:	2210      	movs	r2, #16
 80036ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f043 0308 	orr.w	r3, r3, #8
 8003702:	4a24      	ldr	r2, [pc, #144]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 8003704:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 8003708:	2220      	movs	r2, #32
 800370a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 8003722:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 8003740:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 800375e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 8003762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003766:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <FLASH_SetErrorCode+0xc8>)
 800377e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <FLASH_SetErrorCode+0xc4>)
 8003782:	2202      	movs	r2, #2
 8003784:	60da      	str	r2, [r3, #12]
  }
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40023c00 	.word	0x40023c00
 8003794:	20008640 	.word	0x20008640

08003798 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e010      	b.n	80037d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d103      	bne.n	80037c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80037ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e009      	b.n	80037d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d103      	bne.n	80037d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80037c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e002      	b.n	80037d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80037d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	490f      	ldr	r1, [pc, #60]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4313      	orrs	r3, r2
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <FLASH_Erase_Sector+0x8c>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6113      	str	r3, [r2, #16]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e159      	b.n	8003af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	f040 8148 	bne.w	8003af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d00b      	beq.n	8003882 <HAL_GPIO_Init+0x5a>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d007      	beq.n	8003882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003876:	2b11      	cmp	r3, #17
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b12      	cmp	r3, #18
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0xfc>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b12      	cmp	r3, #18
 8003922:	d123      	bne.n	800396c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a2 	beq.w	8003af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <HAL_GPIO_Init+0x2e4>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a55      	ldr	r2, [pc, #340]	; (8003b0c <HAL_GPIO_Init+0x2e4>)
 80039b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_GPIO_Init+0x2e4>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ca:	4a51      	ldr	r2, [pc, #324]	; (8003b10 <HAL_GPIO_Init+0x2e8>)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_Init+0x202>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_GPIO_Init+0x2f0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x1fe>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a46      	ldr	r2, [pc, #280]	; (8003b1c <HAL_GPIO_Init+0x2f4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x1fa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a45      	ldr	r2, [pc, #276]	; (8003b20 <HAL_GPIO_Init+0x2f8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x1f6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a44      	ldr	r2, [pc, #272]	; (8003b24 <HAL_GPIO_Init+0x2fc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x1f2>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e008      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e006      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e004      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e002      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	f002 0203 	and.w	r2, r2, #3
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	4093      	lsls	r3, r2
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a3c:	4934      	ldr	r1, [pc, #208]	; (8003b10 <HAL_GPIO_Init+0x2e8>)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	3302      	adds	r3, #2
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a6e:	4a2e      	ldr	r2, [pc, #184]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a74:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a98:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <HAL_GPIO_Init+0x300>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	f67f aea2 	bls.w	8003844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b00:	bf00      	nop
 8003b02:	3724      	adds	r7, #36	; 0x24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40020000 	.word	0x40020000
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40020c00 	.word	0x40020c00
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40013c00 	.word	0x40013c00

08003b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	619a      	str	r2, [r3, #24]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e11f      	b.n	8003de2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fc ff14 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f002 fc04 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a7b      	ldr	r2, [pc, #492]	; (8003dec <HAL_I2C_Init+0x25c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d807      	bhi.n	8003c14 <HAL_I2C_Init+0x84>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a7a      	ldr	r2, [pc, #488]	; (8003df0 <HAL_I2C_Init+0x260>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bf94      	ite	ls
 8003c0c:	2301      	movls	r3, #1
 8003c0e:	2300      	movhi	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e006      	b.n	8003c22 <HAL_I2C_Init+0x92>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a77      	ldr	r2, [pc, #476]	; (8003df4 <HAL_I2C_Init+0x264>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0db      	b.n	8003de2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a72      	ldr	r2, [pc, #456]	; (8003df8 <HAL_I2C_Init+0x268>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0c9b      	lsrs	r3, r3, #18
 8003c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a64      	ldr	r2, [pc, #400]	; (8003dec <HAL_I2C_Init+0x25c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d802      	bhi.n	8003c64 <HAL_I2C_Init+0xd4>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	e009      	b.n	8003c78 <HAL_I2C_Init+0xe8>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a63      	ldr	r2, [pc, #396]	; (8003dfc <HAL_I2C_Init+0x26c>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	3301      	adds	r3, #1
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4956      	ldr	r1, [pc, #344]	; (8003dec <HAL_I2C_Init+0x25c>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d80d      	bhi.n	8003cb4 <HAL_I2C_Init+0x124>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e59      	subs	r1, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	bf38      	it	cc
 8003cb0:	2304      	movcc	r3, #4
 8003cb2:	e04f      	b.n	8003d54 <HAL_I2C_Init+0x1c4>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d111      	bne.n	8003ce0 <HAL_I2C_Init+0x150>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e012      	b.n	8003d06 <HAL_I2C_Init+0x176>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Init+0x17e>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e022      	b.n	8003d54 <HAL_I2C_Init+0x1c4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10e      	bne.n	8003d34 <HAL_I2C_Init+0x1a4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e58      	subs	r0, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	440b      	add	r3, r1
 8003d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Init+0x1c4>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	0099      	lsls	r1, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6911      	ldr	r1, [r2, #16]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d2      	ldr	r2, [r2, #12]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	000186a0 	.word	0x000186a0
 8003df0:	001e847f 	.word	0x001e847f
 8003df4:	003d08ff 	.word	0x003d08ff
 8003df8:	431bde83 	.word	0x431bde83
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
 8003e10:	4613      	mov	r3, r2
 8003e12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	f040 80f4 	bne.w	800400e <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e26:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	08db      	lsrs	r3, r3, #3
 8003e2c:	4a7b      	ldr	r2, [pc, #492]	; (800401c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0a1a      	lsrs	r2, r3, #8
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0ca      	b.n	8004010 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d0db      	beq.n	8003e40 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0bc      	b.n	8004010 <HAL_I2C_Master_Transmit_DMA+0x210>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d007      	beq.n	8003ebc <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2221      	movs	r2, #33	; 0x21
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	893a      	ldrh	r2, [r7, #8]
 8003eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a49      	ldr	r2, [pc, #292]	; (8004020 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003efc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003efe:	897a      	ldrh	r2, [r7, #10]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d062      	beq.n	8003fd2 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	4a44      	ldr	r2, [pc, #272]	; (8004024 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	4a43      	ldr	r2, [pc, #268]	; (8004028 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8003f1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	2200      	movs	r2, #0
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	2200      	movs	r2, #0
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	2200      	movs	r2, #0
 8003f32:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f38:	2200      	movs	r2, #0
 8003f3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	4619      	mov	r1, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3310      	adds	r3, #16
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	f7fe ff61 	bl	8002e18 <HAL_DMA_Start_IT>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d124      	bne.n	8003faa <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f96:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	e02f      	b.n	800400a <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0210 	orr.w	r2, r3, #16
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e01e      	b.n	8004010 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004008:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000000 	.word	0x20000000
 800401c:	14f8b589 	.word	0x14f8b589
 8004020:	ffff0000 	.word	0xffff0000
 8004024:	080057c9 	.word	0x080057c9
 8004028:	08005973 	.word	0x08005973

0800402c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b10      	cmp	r3, #16
 800405a:	d003      	beq.n	8004064 <HAL_I2C_EV_IRQHandler+0x38>
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	f040 80bd 	bne.w	80041de <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10d      	bne.n	800409a <HAL_I2C_EV_IRQHandler+0x6e>
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004084:	d003      	beq.n	800408e <HAL_I2C_EV_IRQHandler+0x62>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800408c:	d101      	bne.n	8004092 <HAL_I2C_EV_IRQHandler+0x66>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_I2C_EV_IRQHandler+0x68>
 8004092:	2300      	movs	r3, #0
 8004094:	2b01      	cmp	r3, #1
 8004096:	f000 812e 	beq.w	80042f6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x92>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	0a5b      	lsrs	r3, r3, #9
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f001 fd75 	bl	8005ba0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fd70 	bl	8004b9c <I2C_Master_SB>
 80040bc:	e08e      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	08db      	lsrs	r3, r3, #3
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_I2C_EV_IRQHandler+0xb2>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	0a5b      	lsrs	r3, r3, #9
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fde6 	bl	8004ca8 <I2C_Master_ADD10>
 80040dc:	e07e      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_I2C_EV_IRQHandler+0xd2>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	0a5b      	lsrs	r3, r3, #9
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fe00 	bl	8004cfc <I2C_Master_ADDR>
 80040fc:	e06e      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d037      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004118:	f000 80ef 	beq.w	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	09db      	lsrs	r3, r3, #7
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00f      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x11c>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x11c>
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f9fd 	bl	8004540 <I2C_MasterTransmit_TXE>
 8004146:	e049      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80d2 	beq.w	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	0a5b      	lsrs	r3, r3, #9
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80cb 	beq.w	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b10      	cmp	r3, #16
 8004168:	d103      	bne.n	8004172 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa84 	bl	8004678 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004170:	e0c3      	b.n	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fae8 	bl	8004748 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004178:	e0bf      	b.n	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	f000 80b7 	beq.w	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00f      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0x18c>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	0a9b      	lsrs	r3, r3, #10
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0x18c>
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb58 	bl	8004866 <I2C_MasterReceive_RXNE>
 80041b6:	e011      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 809a 	beq.w	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	0a5b      	lsrs	r3, r3, #9
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8093 	beq.w	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fbf7 	bl	80049c8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041da:	e08e      	b.n	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
 80041dc:	e08d      	b.n	80042fa <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e007      	b.n	8004200 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <HAL_I2C_EV_IRQHandler+0x206>
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	0a5b      	lsrs	r3, r3, #9
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ffb5 	bl	800519a <I2C_Slave_ADDR>
 8004230:	e066      	b.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_I2C_EV_IRQHandler+0x226>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	0a5b      	lsrs	r3, r3, #9
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 ffea 	bl	8005224 <I2C_Slave_STOPF>
 8004250:	e056      	b.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b21      	cmp	r3, #33	; 0x21
 8004256:	d002      	beq.n	800425e <HAL_I2C_EV_IRQHandler+0x232>
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	2b29      	cmp	r3, #41	; 0x29
 800425c:	d125      	bne.n	80042aa <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	09db      	lsrs	r3, r3, #7
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00f      	beq.n	800428a <HAL_I2C_EV_IRQHandler+0x25e>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	0a9b      	lsrs	r3, r3, #10
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_I2C_EV_IRQHandler+0x25e>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fecb 	bl	800501e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004288:	e039      	b.n	80042fe <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d033      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0x2d2>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	0a5b      	lsrs	r3, r3, #9
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02d      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fef8 	bl	8005098 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042a8:	e029      	b.n	80042fe <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	099b      	lsrs	r3, r3, #6
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00f      	beq.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	0a9b      	lsrs	r3, r3, #10
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 ff03 	bl	80050da <I2C_SlaveReceive_RXNE>
 80042d4:	e014      	b.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00e      	beq.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	0a5b      	lsrs	r3, r3, #9
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ff31 	bl	8005156 <I2C_SlaveReceive_BTF>
 80042f4:	e004      	b.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80042f6:	bf00      	nop
 80042f8:	e002      	b.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b08a      	sub	sp, #40	; 0x28
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004328:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <HAL_I2C_ER_IRQHandler+0x4e>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004352:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	0a5b      	lsrs	r3, r3, #9
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <HAL_I2C_ER_IRQHandler+0x78>
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f043 0302 	orr.w	r3, r3, #2
 8004372:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800437c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	0a9b      	lsrs	r3, r3, #10
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03f      	beq.n	800440a <HAL_I2C_ER_IRQHandler+0x104>
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d039      	beq.n	800440a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004396:	7efb      	ldrb	r3, [r7, #27]
 8004398:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80043b0:	7ebb      	ldrb	r3, [r7, #26]
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d112      	bne.n	80043dc <HAL_I2C_ER_IRQHandler+0xd6>
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_I2C_ER_IRQHandler+0xd6>
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	2b21      	cmp	r3, #33	; 0x21
 80043c0:	d008      	beq.n	80043d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b29      	cmp	r3, #41	; 0x29
 80043c6:	d005      	beq.n	80043d4 <HAL_I2C_ER_IRQHandler+0xce>
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b28      	cmp	r3, #40	; 0x28
 80043cc:	d106      	bne.n	80043dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b21      	cmp	r3, #33	; 0x21
 80043d2:	d103      	bne.n	80043dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 f855 	bl	8005484 <I2C_Slave_AF>
 80043da:	e016      	b.n	800440a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ee:	7efb      	ldrb	r3, [r7, #27]
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d002      	beq.n	80043fa <HAL_I2C_ER_IRQHandler+0xf4>
 80043f4:	7efb      	ldrb	r3, [r7, #27]
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d107      	bne.n	800440a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	0adb      	lsrs	r3, r3, #11
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <HAL_I2C_ER_IRQHandler+0x12e>
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004432:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 f88c 	bl	8005564 <I2C_ITError>
  }
}
 800444c:	bf00      	nop
 800444e:	3728      	adds	r7, #40	; 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
 80044b0:	4613      	mov	r3, r2
 80044b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004556:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d150      	bne.n	8004608 <I2C_MasterTransmit_TXE+0xc8>
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b21      	cmp	r3, #33	; 0x21
 800456a:	d14d      	bne.n	8004608 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b08      	cmp	r3, #8
 8004570:	d01d      	beq.n	80045ae <I2C_MasterTransmit_TXE+0x6e>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b20      	cmp	r3, #32
 8004576:	d01a      	beq.n	80045ae <I2C_MasterTransmit_TXE+0x6e>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800457e:	d016      	beq.n	80045ae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2211      	movs	r2, #17
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ff54 	bl	8004454 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045ac:	e060      	b.n	8004670 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045bc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045cc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d107      	bne.n	80045f8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff6f 	bl	80044d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045f6:	e03b      	b.n	8004670 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff27 	bl	8004454 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004606:	e033      	b.n	8004670 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b21      	cmp	r3, #33	; 0x21
 800460c:	d005      	beq.n	800461a <I2C_MasterTransmit_TXE+0xda>
 800460e:	7bbb      	ldrb	r3, [r7, #14]
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d12d      	bne.n	8004670 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b22      	cmp	r3, #34	; 0x22
 8004618:	d12a      	bne.n	8004670 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004634:	e01c      	b.n	8004670 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d103      	bne.n	800464a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f880 	bl	8004748 <I2C_MemoryTransmit_TXE_BTF>
}
 8004648:	e012      	b.n	8004670 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800466e:	e7ff      	b.n	8004670 <I2C_MasterTransmit_TXE+0x130>
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b21      	cmp	r3, #33	; 0x21
 8004690:	d156      	bne.n	8004740 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046c0:	e03e      	b.n	8004740 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d01d      	beq.n	8004704 <I2C_MasterTransmit_BTF+0x8c>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d01a      	beq.n	8004704 <I2C_MasterTransmit_BTF+0x8c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d4:	d016      	beq.n	8004704 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2211      	movs	r2, #17
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fea9 	bl	8004454 <HAL_I2C_MasterTxCpltCallback>
}
 8004702:	e01d      	b.n	8004740 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004712:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe8a 	bl	8004454 <HAL_I2C_MasterTxCpltCallback>
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004756:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10b      	bne.n	8004780 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	b2da      	uxtb	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800477e:	e06e      	b.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	b29b      	uxth	r3, r3
 8004786:	121b      	asrs	r3, r3, #8
 8004788:	b2da      	uxtb	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50
}
 800479a:	e060      	b.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10b      	bne.n	80047bc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047ba:	e050      	b.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d14c      	bne.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b22      	cmp	r3, #34	; 0x22
 80047c8:	d108      	bne.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d8:	601a      	str	r2, [r3, #0]
}
 80047da:	e040      	b.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d015      	beq.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d112      	bne.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004810:	e025      	b.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d120      	bne.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b21      	cmp	r3, #33	; 0x21
 8004820:	d11d      	bne.n	800485e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004830:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004840:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff fe3b 	bl	80044d4 <HAL_I2C_MemTxCpltCallback>
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b22      	cmp	r3, #34	; 0x22
 8004878:	f040 80a2 	bne.w	80049c0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d921      	bls.n	80048ce <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	f040 8082 	bne.w	80049c0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ca:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80048cc:	e078      	b.n	80049c0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d074      	beq.n	80049c0 <I2C_MasterReceive_RXNE+0x15a>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d002      	beq.n	80048e2 <I2C_MasterReceive_RXNE+0x7c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d16e      	bne.n	80049c0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f001 f92a 	bl	8005b3c <I2C_WaitOnSTOPRequestThroughIT>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d142      	bne.n	8004974 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800490c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d10a      	bne.n	800495e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fdc6 	bl	80044e8 <HAL_I2C_MemRxCpltCallback>
}
 800495c:	e030      	b.n	80049c0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2212      	movs	r2, #18
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fd7b 	bl	8004468 <HAL_I2C_MasterRxCpltCallback>
}
 8004972:	e025      	b.n	80049c0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004982:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fd9e 	bl	80044fc <HAL_I2C_ErrorCallback>
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11b      	bne.n	8004a18 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a16:	e0bd      	b.n	8004b94 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d129      	bne.n	8004a76 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a30:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d00a      	beq.n	8004a4e <I2C_MasterReceive_BTF+0x86>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d007      	beq.n	8004a4e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a74:	e08e      	b.n	8004b94 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d176      	bne.n	8004b6e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d002      	beq.n	8004a8c <I2C_MasterReceive_BTF+0xc4>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d108      	bne.n	8004a9e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e019      	b.n	8004ad2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d002      	beq.n	8004aaa <I2C_MasterReceive_BTF+0xe2>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d108      	bne.n	8004abc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e00a      	b.n	8004ad2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d007      	beq.n	8004ad2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b2c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d10a      	bne.n	8004b58 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fcc9 	bl	80044e8 <HAL_I2C_MemRxCpltCallback>
}
 8004b56:	e01d      	b.n	8004b94 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2212      	movs	r2, #18
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fc7e 	bl	8004468 <HAL_I2C_MasterRxCpltCallback>
}
 8004b6c:	e012      	b.n	8004b94 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d117      	bne.n	8004be0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004bca:	e067      	b.n	8004c9c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]
}
 8004bde:	e05d      	b.n	8004c9c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be8:	d133      	bne.n	8004c52 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b21      	cmp	r3, #33	; 0x21
 8004bf4:	d109      	bne.n	8004c0a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c06:	611a      	str	r2, [r3, #16]
 8004c08:	e008      	b.n	8004c1c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <I2C_Master_SB+0x92>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d032      	beq.n	8004c9c <I2C_Master_SB+0x100>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02d      	beq.n	8004c9c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4e:	605a      	str	r2, [r3, #4]
}
 8004c50:	e024      	b.n	8004c9c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10e      	bne.n	8004c78 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	11db      	asrs	r3, r3, #7
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f003 0306 	and.w	r3, r3, #6
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f063 030f 	orn	r3, r3, #15
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]
}
 8004c76:	e011      	b.n	8004c9c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10d      	bne.n	8004c9c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	11db      	asrs	r3, r3, #7
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f063 030e 	orn	r3, r3, #14
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <I2C_Master_ADD10+0x24>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d011      	beq.n	8004cf0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <I2C_Master_ADD10+0x38>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cee:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b091      	sub	sp, #68	; 0x44
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b22      	cmp	r3, #34	; 0x22
 8004d24:	f040 8169 	bne.w	8004ffa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <I2C_Master_ADDR+0x54>
 8004d30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d10b      	bne.n	8004d50 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	e160      	b.n	8005012 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11d      	bne.n	8004d94 <I2C_Master_ADDR+0x98>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d60:	d118      	bne.n	8004d94 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d86:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	651a      	str	r2, [r3, #80]	; 0x50
 8004d92:	e13e      	b.n	8005012 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d113      	bne.n	8004dc6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e115      	b.n	8004ff2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 808a 	bne.w	8004ee6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dd8:	d137      	bne.n	8004e4a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df8:	d113      	bne.n	8004e22 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e08:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	e0e7      	b.n	8004ff2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e22:	2300      	movs	r3, #0
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e0d3      	b.n	8004ff2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d02e      	beq.n	8004eae <I2C_Master_ADDR+0x1b2>
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d02b      	beq.n	8004eae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	2b12      	cmp	r3, #18
 8004e5a:	d102      	bne.n	8004e62 <I2C_Master_ADDR+0x166>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d125      	bne.n	8004eae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d00e      	beq.n	8004e86 <I2C_Master_ADDR+0x18a>
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d00b      	beq.n	8004e86 <I2C_Master_ADDR+0x18a>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d008      	beq.n	8004e86 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e007      	b.n	8004e96 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e94:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	e0a1      	b.n	8004ff2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e085      	b.n	8004ff2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d14d      	bne.n	8004f8c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d016      	beq.n	8004f24 <I2C_Master_ADDR+0x228>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d013      	beq.n	8004f24 <I2C_Master_ADDR+0x228>
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d010      	beq.n	8004f24 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f10:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e007      	b.n	8004f34 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f32:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f42:	d117      	bne.n	8004f74 <I2C_Master_ADDR+0x278>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f4a:	d00b      	beq.n	8004f64 <I2C_Master_ADDR+0x268>
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d008      	beq.n	8004f64 <I2C_Master_ADDR+0x268>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d005      	beq.n	8004f64 <I2C_Master_ADDR+0x268>
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d002      	beq.n	8004f64 <I2C_Master_ADDR+0x268>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d107      	bne.n	8004f74 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	e032      	b.n	8004ff2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f9a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d117      	bne.n	8004fdc <I2C_Master_ADDR+0x2e0>
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb2:	d00b      	beq.n	8004fcc <I2C_Master_ADDR+0x2d0>
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d008      	beq.n	8004fcc <I2C_Master_ADDR+0x2d0>
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d005      	beq.n	8004fcc <I2C_Master_ADDR+0x2d0>
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d002      	beq.n	8004fcc <I2C_Master_ADDR+0x2d0>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d107      	bne.n	8004fdc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fda:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ff8:	e00b      	b.n	8005012 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	e7ff      	b.n	8005012 <I2C_Master_ADDR+0x316>
 8005012:	bf00      	nop
 8005014:	3744      	adds	r7, #68	; 0x44
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02b      	beq.n	8005090 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d114      	bne.n	8005090 <I2C_SlaveTransmit_TXE+0x72>
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b29      	cmp	r3, #41	; 0x29
 800506a:	d111      	bne.n	8005090 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2221      	movs	r2, #33	; 0x21
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2228      	movs	r2, #40	; 0x28
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff f9f6 	bl	800447c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d011      	beq.n	80050ce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02c      	beq.n	800514e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d114      	bne.n	800514e <I2C_SlaveReceive_RXNE+0x74>
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b2a      	cmp	r3, #42	; 0x2a
 8005128:	d111      	bne.n	800514e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2222      	movs	r2, #34	; 0x22
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2228      	movs	r2, #40	; 0x28
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff f9a1 	bl	8004490 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051b4:	2b28      	cmp	r3, #40	; 0x28
 80051b6:	d127      	bne.n	8005208 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	09db      	lsrs	r3, r3, #7
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	81bb      	strh	r3, [r7, #12]
 80051ea:	e002      	b.n	80051f2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051fa:	89ba      	ldrh	r2, [r7, #12]
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff f94f 	bl	80044a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005206:	e008      	b.n	800521a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005232:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005242:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005270:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005280:	d172      	bne.n	8005368 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b22      	cmp	r3, #34	; 0x22
 8005286:	d002      	beq.n	800528e <I2C_Slave_STOPF+0x6a>
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b2a      	cmp	r3, #42	; 0x2a
 800528c:	d135      	bne.n	80052fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd ffaa 	bl	8003220 <HAL_DMA_GetState>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d049      	beq.n	8005366 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	4a69      	ldr	r2, [pc, #420]	; (800547c <I2C_Slave_STOPF+0x258>)
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fd fdf2 	bl	8002ec8 <HAL_DMA_Abort_IT>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d03d      	beq.n	8005366 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052f8:	e035      	b.n	8005366 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b29a      	uxth	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0204 	orr.w	r2, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800532c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd ff74 	bl	8003220 <HAL_DMA_GetState>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d014      	beq.n	8005368 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	4a4e      	ldr	r2, [pc, #312]	; (800547c <I2C_Slave_STOPF+0x258>)
 8005344:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534a:	4618      	mov	r0, r3
 800534c:	f7fd fdbc 	bl	8002ec8 <HAL_DMA_Abort_IT>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
 8005364:	e000      	b.n	8005368 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005366:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03e      	beq.n	80053f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d112      	bne.n	80053a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d112      	bne.n	80053da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f043 0204 	orr.w	r2, r3, #4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8b3 	bl	8005564 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053fe:	e039      	b.n	8005474 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b2a      	cmp	r3, #42	; 0x2a
 8005404:	d109      	bne.n	800541a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2228      	movs	r2, #40	; 0x28
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff f83b 	bl	8004490 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b28      	cmp	r3, #40	; 0x28
 8005424:	d111      	bne.n	800544a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <I2C_Slave_STOPF+0x25c>)
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff f83c 	bl	80044c0 <HAL_I2C_ListenCpltCallback>
}
 8005448:	e014      	b.n	8005474 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	2b22      	cmp	r3, #34	; 0x22
 8005450:	d002      	beq.n	8005458 <I2C_Slave_STOPF+0x234>
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b22      	cmp	r3, #34	; 0x22
 8005456:	d10d      	bne.n	8005474 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff f80e 	bl	8004490 <HAL_I2C_SlaveRxCpltCallback>
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	080059ed 	.word	0x080059ed
 8005480:	ffff0000 	.word	0xffff0000

08005484 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d002      	beq.n	80054a6 <I2C_Slave_AF+0x22>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d129      	bne.n	80054fa <I2C_Slave_AF+0x76>
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b28      	cmp	r3, #40	; 0x28
 80054aa:	d126      	bne.n	80054fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a2c      	ldr	r2, [pc, #176]	; (8005560 <I2C_Slave_AF+0xdc>)
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fe ffe4 	bl	80044c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054f8:	e02e      	b.n	8005558 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b21      	cmp	r3, #33	; 0x21
 80054fe:	d126      	bne.n	800554e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <I2C_Slave_AF+0xdc>)
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2221      	movs	r2, #33	; 0x21
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800552a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005534:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005544:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fe ff98 	bl	800447c <HAL_I2C_SlaveTxCpltCallback>
}
 800554c:	e004      	b.n	8005558 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005556:	615a      	str	r2, [r3, #20]
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	ffff0000 	.word	0xffff0000

08005564 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800557a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	2b10      	cmp	r3, #16
 8005580:	d002      	beq.n	8005588 <I2C_ITError+0x24>
 8005582:	7bbb      	ldrb	r3, [r7, #14]
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d10a      	bne.n	800559e <I2C_ITError+0x3a>
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	2b22      	cmp	r3, #34	; 0x22
 800558c:	d107      	bne.n	800559e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800559c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055a4:	2b28      	cmp	r3, #40	; 0x28
 80055a6:	d107      	bne.n	80055b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2228      	movs	r2, #40	; 0x28
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055b6:	e015      	b.n	80055e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c6:	d00a      	beq.n	80055de <I2C_ITError+0x7a>
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b60      	cmp	r3, #96	; 0x60
 80055cc:	d007      	beq.n	80055de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f2:	d162      	bne.n	80056ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005602:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d020      	beq.n	8005654 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	4a6a      	ldr	r2, [pc, #424]	; (80057c0 <I2C_ITError+0x25c>)
 8005618:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	4618      	mov	r0, r3
 8005620:	f7fd fc52 	bl	8002ec8 <HAL_DMA_Abort_IT>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8089 	beq.w	800573e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800564e:	4610      	mov	r0, r2
 8005650:	4798      	blx	r3
 8005652:	e074      	b.n	800573e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	4a59      	ldr	r2, [pc, #356]	; (80057c0 <I2C_ITError+0x25c>)
 800565a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	4618      	mov	r0, r3
 8005662:	f7fd fc31 	bl	8002ec8 <HAL_DMA_Abort_IT>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d068      	beq.n	800573e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d10b      	bne.n	8005692 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056b4:	4610      	mov	r0, r2
 80056b6:	4798      	blx	r3
 80056b8:	e041      	b.n	800573e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b60      	cmp	r3, #96	; 0x60
 80056c4:	d125      	bne.n	8005712 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d10b      	bne.n	80056fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fe ff00 	bl	8004510 <HAL_I2C_AbortCpltCallback>
 8005710:	e015      	b.n	800573e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d10b      	bne.n	8005738 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fe fedf 	bl	80044fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10e      	bne.n	800576c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b04      	cmp	r3, #4
 800578e:	d113      	bne.n	80057b8 <I2C_ITError+0x254>
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b28      	cmp	r3, #40	; 0x28
 8005794:	d110      	bne.n	80057b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <I2C_ITError+0x260>)
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fe fe84 	bl	80044c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	080059ed 	.word	0x080059ed
 80057c4:	ffff0000 	.word	0xffff0000

080057c8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057dc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057fa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	2200      	movs	r2, #0
 800580a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	2200      	movs	r2, #0
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005822:	2b21      	cmp	r3, #33	; 0x21
 8005824:	d007      	beq.n	8005836 <I2C_DMAXferCplt+0x6e>
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800582c:	2b22      	cmp	r3, #34	; 0x22
 800582e:	d131      	bne.n	8005894 <I2C_DMAXferCplt+0xcc>
 8005830:	7cbb      	ldrb	r3, [r7, #18]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d12e      	bne.n	8005894 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005844:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	2b29      	cmp	r3, #41	; 0x29
 8005850:	d10a      	bne.n	8005868 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2228      	movs	r2, #40	; 0x28
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005860:	6978      	ldr	r0, [r7, #20]
 8005862:	f7fe fe0b 	bl	800447c <HAL_I2C_SlaveTxCpltCallback>
 8005866:	e00c      	b.n	8005882 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b2a      	cmp	r3, #42	; 0x2a
 800586c:	d109      	bne.n	8005882 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2222      	movs	r2, #34	; 0x22
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2228      	movs	r2, #40	; 0x28
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800587c:	6978      	ldr	r0, [r7, #20]
 800587e:	f7fe fe07 	bl	8004490 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005890:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005892:	e06a      	b.n	800596a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d064      	beq.n	800596a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d0:	d009      	beq.n	80058e6 <I2C_DMAXferCplt+0x11e>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d006      	beq.n	80058e6 <I2C_DMAXferCplt+0x11e>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058de:	d002      	beq.n	80058e6 <I2C_DMAXferCplt+0x11e>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d107      	bne.n	80058f6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005904:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005914:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f7fe fde9 	bl	80044fc <HAL_I2C_ErrorCallback>
}
 800592a:	e01e      	b.n	800596a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d10a      	bne.n	8005956 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800594e:	6978      	ldr	r0, [r7, #20]
 8005950:	f7fe fdca 	bl	80044e8 <HAL_I2C_MemRxCpltCallback>
}
 8005954:	e009      	b.n	800596a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2212      	movs	r2, #18
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005964:	6978      	ldr	r0, [r7, #20]
 8005966:	f7fe fd7f 	bl	8004468 <HAL_I2C_MasterRxCpltCallback>
}
 800596a:	bf00      	nop
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	2200      	movs	r2, #0
 800598e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	2200      	movs	r2, #0
 800599e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fd fc4b 	bl	800323c <HAL_DMA_GetError>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d01b      	beq.n	80059e4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f043 0210 	orr.w	r2, r3, #16
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7fe fd8c 	bl	80044fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a06:	4b4b      	ldr	r3, [pc, #300]	; (8005b34 <I2C_DMAAbort+0x148>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	08db      	lsrs	r3, r3, #3
 8005a0c:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <I2C_DMAAbort+0x14c>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0a1a      	lsrs	r2, r3, #8
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00da      	lsls	r2, r3, #3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a32:	e00a      	b.n	8005a4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d0ea      	beq.n	8005a20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	2200      	movs	r2, #0
 8005a58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	2200      	movs	r2, #0
 8005a68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b60      	cmp	r3, #96	; 0x60
 8005aba:	d10e      	bne.n	8005ada <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ad2:	6978      	ldr	r0, [r7, #20]
 8005ad4:	f7fe fd1c 	bl	8004510 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ad8:	e027      	b.n	8005b2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ae0:	2b28      	cmp	r3, #40	; 0x28
 8005ae2:	d117      	bne.n	8005b14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2228      	movs	r2, #40	; 0x28
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b12:	e007      	b.n	8005b24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b24:	6978      	ldr	r0, [r7, #20]
 8005b26:	f7fe fce9 	bl	80044fc <HAL_I2C_ErrorCallback>
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000000 	.word	0x20000000
 8005b38:	14f8b589 	.word	0x14f8b589

08005b3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	08db      	lsrs	r3, r3, #3
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0a1a      	lsrs	r2, r3, #8
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e008      	b.n	8005b8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d0e9      	beq.n	8005b5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	14f8b589 	.word	0x14f8b589

08005ba0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005bb0:	d103      	bne.n	8005bba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bb8:	e007      	b.n	8005bca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005bc2:	d102      	bne.n	8005bca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e25b      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d075      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bf6:	4ba3      	ldr	r3, [pc, #652]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d00c      	beq.n	8005c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c02:	4ba0      	ldr	r3, [pc, #640]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d112      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0e:	4b9d      	ldr	r3, [pc, #628]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1a:	d10b      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	4b99      	ldr	r3, [pc, #612]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05b      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x108>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d157      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e236      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCC_OscConfig+0x74>
 8005c3e:	4b91      	ldr	r3, [pc, #580]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a90      	ldr	r2, [pc, #576]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e01d      	b.n	8005c88 <HAL_RCC_OscConfig+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c54:	d10c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x98>
 8005c56:	4b8b      	ldr	r3, [pc, #556]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a8a      	ldr	r2, [pc, #552]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	4b88      	ldr	r3, [pc, #544]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a87      	ldr	r2, [pc, #540]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e00b      	b.n	8005c88 <HAL_RCC_OscConfig+0xb0>
 8005c70:	4b84      	ldr	r3, [pc, #528]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a83      	ldr	r2, [pc, #524]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b81      	ldr	r3, [pc, #516]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a80      	ldr	r2, [pc, #512]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d013      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c90:	f7fc ff26 	bl	8002ae0 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fc ff22 	bl	8002ae0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e1fb      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b76      	ldr	r3, [pc, #472]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0xc0>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fc ff12 	bl	8002ae0 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc0:	f7fc ff0e 	bl	8002ae0 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	; 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e1e7      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd2:	4b6c      	ldr	r3, [pc, #432]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0xe8>
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d063      	beq.n	8005db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cee:	4b65      	ldr	r3, [pc, #404]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfa:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d11c      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d06:	4b5f      	ldr	r3, [pc, #380]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d116      	bne.n	8005d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d12:	4b5c      	ldr	r3, [pc, #368]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_RCC_OscConfig+0x152>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d001      	beq.n	8005d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e1bb      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4952      	ldr	r1, [pc, #328]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3e:	e03a      	b.n	8005db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d48:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <HAL_RCC_OscConfig+0x2b0>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4e:	f7fc fec7 	bl	8002ae0 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d56:	f7fc fec3 	bl	8002ae0 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e19c      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d68:	4b46      	ldr	r3, [pc, #280]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d74:	4b43      	ldr	r3, [pc, #268]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4940      	ldr	r1, [pc, #256]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
 8005d88:	e015      	b.n	8005db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d8a:	4b3f      	ldr	r3, [pc, #252]	; (8005e88 <HAL_RCC_OscConfig+0x2b0>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fc fea6 	bl	8002ae0 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d98:	f7fc fea2 	bl	8002ae0 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e17b      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005daa:	4b36      	ldr	r3, [pc, #216]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d030      	beq.n	8005e24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dca:	4b30      	ldr	r3, [pc, #192]	; (8005e8c <HAL_RCC_OscConfig+0x2b4>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7fc fe86 	bl	8002ae0 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dd8:	f7fc fe82 	bl	8002ae0 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e15b      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x200>
 8005df6:	e015      	b.n	8005e24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df8:	4b24      	ldr	r3, [pc, #144]	; (8005e8c <HAL_RCC_OscConfig+0x2b4>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7fc fe6f 	bl	8002ae0 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e06:	f7fc fe6b 	bl	8002ae0 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e144      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a0 	beq.w	8005f72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e32:	2300      	movs	r3, #0
 8005e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10f      	bne.n	8005e62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	4a0e      	ldr	r2, [pc, #56]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e50:	6413      	str	r3, [r2, #64]	; 0x40
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <HAL_RCC_OscConfig+0x2b8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d121      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <HAL_RCC_OscConfig+0x2b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <HAL_RCC_OscConfig+0x2b8>)
 8005e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e7a:	f7fc fe31 	bl	8002ae0 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e80:	e011      	b.n	8005ea6 <HAL_RCC_OscConfig+0x2ce>
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800
 8005e88:	42470000 	.word	0x42470000
 8005e8c:	42470e80 	.word	0x42470e80
 8005e90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e94:	f7fc fe24 	bl	8002ae0 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0fd      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea6:	4b81      	ldr	r3, [pc, #516]	; (80060ac <HAL_RCC_OscConfig+0x4d4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d106      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x2f0>
 8005eba:	4b7d      	ldr	r3, [pc, #500]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4a7c      	ldr	r2, [pc, #496]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec6:	e01c      	b.n	8005f02 <HAL_RCC_OscConfig+0x32a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d10c      	bne.n	8005eea <HAL_RCC_OscConfig+0x312>
 8005ed0:	4b77      	ldr	r3, [pc, #476]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	4a76      	ldr	r2, [pc, #472]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ed6:	f043 0304 	orr.w	r3, r3, #4
 8005eda:	6713      	str	r3, [r2, #112]	; 0x70
 8005edc:	4b74      	ldr	r3, [pc, #464]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee0:	4a73      	ldr	r2, [pc, #460]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee8:	e00b      	b.n	8005f02 <HAL_RCC_OscConfig+0x32a>
 8005eea:	4b71      	ldr	r3, [pc, #452]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	4a70      	ldr	r2, [pc, #448]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ef0:	f023 0301 	bic.w	r3, r3, #1
 8005ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef6:	4b6e      	ldr	r3, [pc, #440]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	4a6d      	ldr	r2, [pc, #436]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005efc:	f023 0304 	bic.w	r3, r3, #4
 8005f00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d015      	beq.n	8005f36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0a:	f7fc fde9 	bl	8002ae0 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	e00a      	b.n	8005f28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f12:	f7fc fde5 	bl	8002ae0 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e0bc      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f28:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ee      	beq.n	8005f12 <HAL_RCC_OscConfig+0x33a>
 8005f34:	e014      	b.n	8005f60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f36:	f7fc fdd3 	bl	8002ae0 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fc fdcf 	bl	8002ae0 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e0a6      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f54:	4b56      	ldr	r3, [pc, #344]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ee      	bne.n	8005f3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f66:	4b52      	ldr	r3, [pc, #328]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	4a51      	ldr	r2, [pc, #324]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8092 	beq.w	80060a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f7c:	4b4c      	ldr	r3, [pc, #304]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 030c 	and.w	r3, r3, #12
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d05c      	beq.n	8006042 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d141      	bne.n	8006014 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f90:	4b48      	ldr	r3, [pc, #288]	; (80060b4 <HAL_RCC_OscConfig+0x4dc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f96:	f7fc fda3 	bl	8002ae0 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9e:	f7fc fd9f 	bl	8002ae0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e078      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb0:	4b3f      	ldr	r3, [pc, #252]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f0      	bne.n	8005f9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	019b      	lsls	r3, r3, #6
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	4933      	ldr	r1, [pc, #204]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe6:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCC_OscConfig+0x4dc>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fec:	f7fc fd78 	bl	8002ae0 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff4:	f7fc fd74 	bl	8002ae0 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e04d      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x41c>
 8006012:	e045      	b.n	80060a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006014:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <HAL_RCC_OscConfig+0x4dc>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601a:	f7fc fd61 	bl	8002ae0 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006022:	f7fc fd5d 	bl	8002ae0 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e036      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006034:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f0      	bne.n	8006022 <HAL_RCC_OscConfig+0x44a>
 8006040:	e02e      	b.n	80060a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e029      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800604e:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <HAL_RCC_OscConfig+0x4d8>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	429a      	cmp	r2, r3
 8006060:	d11c      	bne.n	800609c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d115      	bne.n	800609c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006076:	4013      	ands	r3, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800607c:	4293      	cmp	r3, r2
 800607e:	d10d      	bne.n	800609c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800608a:	429a      	cmp	r2, r3
 800608c:	d106      	bne.n	800609c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40007000 	.word	0x40007000
 80060b0:	40023800 	.word	0x40023800
 80060b4:	42470060 	.word	0x42470060

080060b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0cc      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060cc:	4b68      	ldr	r3, [pc, #416]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d90c      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b65      	ldr	r3, [pc, #404]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b63      	ldr	r3, [pc, #396]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0b8      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800610c:	4b59      	ldr	r3, [pc, #356]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a58      	ldr	r2, [pc, #352]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006124:	4b53      	ldr	r3, [pc, #332]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800612e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006130:	4b50      	ldr	r3, [pc, #320]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	494d      	ldr	r1, [pc, #308]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d044      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	4b47      	ldr	r3, [pc, #284]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d119      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d003      	beq.n	8006176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006176:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e06f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006186:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e067      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006196:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 0203 	bic.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4934      	ldr	r1, [pc, #208]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a8:	f7fc fc9a 	bl	8002ae0 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ae:	e00a      	b.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b0:	f7fc fc96 	bl	8002ae0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e04f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 020c 	and.w	r2, r3, #12
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d1eb      	bne.n	80061b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d20c      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e032      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4916      	ldr	r1, [pc, #88]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	490e      	ldr	r1, [pc, #56]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800623e:	f000 f821 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8006242:	4601      	mov	r1, r0
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <HAL_RCC_ClockConfig+0x1c0>)
 8006250:	5cd3      	ldrb	r3, [r2, r3]
 8006252:	fa21 f303 	lsr.w	r3, r1, r3
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <HAL_RCC_ClockConfig+0x1c4>)
 8006258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1c8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fa fca0 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023c00 	.word	0x40023c00
 8006274:	40023800 	.word	0x40023800
 8006278:	0800a340 	.word	0x0800a340
 800627c:	20000000 	.word	0x20000000
 8006280:	20000008 	.word	0x20000008

08006284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	2300      	movs	r3, #0
 8006294:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800629a:	4b50      	ldr	r3, [pc, #320]	; (80063dc <HAL_RCC_GetSysClockFreq+0x158>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d007      	beq.n	80062b6 <HAL_RCC_GetSysClockFreq+0x32>
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d008      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0x38>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f040 808d 	bne.w	80063ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80062b2:	60bb      	str	r3, [r7, #8]
       break;
 80062b4:	e08c      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062b6:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80062b8:	60bb      	str	r3, [r7, #8]
      break;
 80062ba:	e089      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062bc:	4b47      	ldr	r3, [pc, #284]	; (80063dc <HAL_RCC_GetSysClockFreq+0x158>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062c6:	4b45      	ldr	r3, [pc, #276]	; (80063dc <HAL_RCC_GetSysClockFreq+0x158>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d023      	beq.n	800631a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d2:	4b42      	ldr	r3, [pc, #264]	; (80063dc <HAL_RCC_GetSysClockFreq+0x158>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	099b      	lsrs	r3, r3, #6
 80062d8:	f04f 0400 	mov.w	r4, #0
 80062dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	ea03 0501 	and.w	r5, r3, r1
 80062e8:	ea04 0602 	and.w	r6, r4, r2
 80062ec:	4a3d      	ldr	r2, [pc, #244]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80062ee:	fb02 f106 	mul.w	r1, r2, r6
 80062f2:	2200      	movs	r2, #0
 80062f4:	fb02 f205 	mul.w	r2, r2, r5
 80062f8:	440a      	add	r2, r1
 80062fa:	493a      	ldr	r1, [pc, #232]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80062fc:	fba5 0101 	umull	r0, r1, r5, r1
 8006300:	1853      	adds	r3, r2, r1
 8006302:	4619      	mov	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f04f 0400 	mov.w	r4, #0
 800630a:	461a      	mov	r2, r3
 800630c:	4623      	mov	r3, r4
 800630e:	f7f9 ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8006312:	4603      	mov	r3, r0
 8006314:	460c      	mov	r4, r1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e049      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631a:	4b30      	ldr	r3, [pc, #192]	; (80063dc <HAL_RCC_GetSysClockFreq+0x158>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	099b      	lsrs	r3, r3, #6
 8006320:	f04f 0400 	mov.w	r4, #0
 8006324:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	ea03 0501 	and.w	r5, r3, r1
 8006330:	ea04 0602 	and.w	r6, r4, r2
 8006334:	4629      	mov	r1, r5
 8006336:	4632      	mov	r2, r6
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	f04f 0400 	mov.w	r4, #0
 8006340:	0154      	lsls	r4, r2, #5
 8006342:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006346:	014b      	lsls	r3, r1, #5
 8006348:	4619      	mov	r1, r3
 800634a:	4622      	mov	r2, r4
 800634c:	1b49      	subs	r1, r1, r5
 800634e:	eb62 0206 	sbc.w	r2, r2, r6
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	f04f 0400 	mov.w	r4, #0
 800635a:	0194      	lsls	r4, r2, #6
 800635c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006360:	018b      	lsls	r3, r1, #6
 8006362:	1a5b      	subs	r3, r3, r1
 8006364:	eb64 0402 	sbc.w	r4, r4, r2
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	00e2      	lsls	r2, r4, #3
 8006372:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006376:	00d9      	lsls	r1, r3, #3
 8006378:	460b      	mov	r3, r1
 800637a:	4614      	mov	r4, r2
 800637c:	195b      	adds	r3, r3, r5
 800637e:	eb44 0406 	adc.w	r4, r4, r6
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	02a2      	lsls	r2, r4, #10
 800638c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006390:	0299      	lsls	r1, r3, #10
 8006392:	460b      	mov	r3, r1
 8006394:	4614      	mov	r4, r2
 8006396:	4618      	mov	r0, r3
 8006398:	4621      	mov	r1, r4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	461a      	mov	r2, r3
 80063a2:	4623      	mov	r3, r4
 80063a4:	f7f9 ff84 	bl	80002b0 <__aeabi_uldivmod>
 80063a8:	4603      	mov	r3, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_GetSysClockFreq+0x158>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	3301      	adds	r3, #1
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	60bb      	str	r3, [r7, #8]
      break;
 80063c8:	e002      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80063cc:	60bb      	str	r3, [r7, #8]
      break;
 80063ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063d0:	68bb      	ldr	r3, [r7, #8]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800
 80063e0:	00f42400 	.word	0x00f42400
 80063e4:	017d7840 	.word	0x017d7840

080063e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000000 	.word	0x20000000

08006400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006404:	f7ff fff0 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8006408:	4601      	mov	r1, r0
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	0a9b      	lsrs	r3, r3, #10
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	4a03      	ldr	r2, [pc, #12]	; (8006424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006416:	5cd3      	ldrb	r3, [r2, r3]
 8006418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800641c:	4618      	mov	r0, r3
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40023800 	.word	0x40023800
 8006424:	0800a350 	.word	0x0800a350

08006428 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	220f      	movs	r2, #15
 8006436:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006438:	4b12      	ldr	r3, [pc, #72]	; (8006484 <HAL_RCC_GetClockConfig+0x5c>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0203 	and.w	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <HAL_RCC_GetClockConfig+0x5c>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <HAL_RCC_GetClockConfig+0x5c>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <HAL_RCC_GetClockConfig+0x5c>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	08db      	lsrs	r3, r3, #3
 8006462:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <HAL_RCC_GetClockConfig+0x60>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 020f 	and.w	r2, r3, #15
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	601a      	str	r2, [r3, #0]
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800
 8006488:	40023c00 	.word	0x40023c00

0800648c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e01d      	b.n	80064da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fa fb54 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 fa38 	bl	8006940 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d007      	beq.n	8006514 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b06      	cmp	r3, #6
 8006552:	d007      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d122      	bne.n	80065ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b02      	cmp	r3, #2
 8006594:	d11b      	bne.n	80065ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f06f 0202 	mvn.w	r2, #2
 800659e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f9a5 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 80065ba:	e005      	b.n	80065c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f997 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9a8 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d122      	bne.n	8006622 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d11b      	bne.n	8006622 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f06f 0204 	mvn.w	r2, #4
 80065f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f97b 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 800660e:	e005      	b.n	800661c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f96d 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f97e 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b08      	cmp	r3, #8
 800662e:	d122      	bne.n	8006676 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b08      	cmp	r3, #8
 800663c:	d11b      	bne.n	8006676 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f06f 0208 	mvn.w	r2, #8
 8006646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2204      	movs	r2, #4
 800664c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f951 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 8006662:	e005      	b.n	8006670 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f943 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f954 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b10      	cmp	r3, #16
 8006682:	d122      	bne.n	80066ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b10      	cmp	r3, #16
 8006690:	d11b      	bne.n	80066ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0210 	mvn.w	r2, #16
 800669a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2208      	movs	r2, #8
 80066a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f927 	bl	8006904 <HAL_TIM_IC_CaptureCallback>
 80066b6:	e005      	b.n	80066c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f919 	bl	80068f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f92a 	bl	8006918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d10e      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f06f 0201 	mvn.w	r2, #1
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fa f937 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d10e      	bne.n	8006722 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d107      	bne.n	8006722 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 faa1 	bl	8006c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d10e      	bne.n	800674e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d107      	bne.n	800674e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f8ef 	bl	800692c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b20      	cmp	r3, #32
 800675a:	d10e      	bne.n	800677a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d107      	bne.n	800677a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0220 	mvn.w	r2, #32
 8006772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fa6b 	bl	8006c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_TIM_ConfigClockSource+0x18>
 8006796:	2302      	movs	r3, #2
 8006798:	e0a6      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x166>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d067      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x120>
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d80b      	bhi.n	80067ee <HAL_TIM_ConfigClockSource+0x6c>
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d073      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x140>
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d802      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x62>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d06f      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80067e2:	e078      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d06c      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x140>
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	d06a      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067ec:	e073      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ee:	2b70      	cmp	r3, #112	; 0x70
 80067f0:	d00d      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x8c>
 80067f2:	2b70      	cmp	r3, #112	; 0x70
 80067f4:	d804      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x7e>
 80067f6:	2b50      	cmp	r3, #80	; 0x50
 80067f8:	d033      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0xe0>
 80067fa:	2b60      	cmp	r3, #96	; 0x60
 80067fc:	d041      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067fe:	e06a      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006804:	d066      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0x152>
 8006806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680a:	d017      	beq.n	800683c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800680c:	e063      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6899      	ldr	r1, [r3, #8]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f000 f989 	bl	8006b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006830:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	609a      	str	r2, [r3, #8]
      break;
 800683a:	e04c      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6899      	ldr	r1, [r3, #8]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f000 f972 	bl	8006b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800685e:	609a      	str	r2, [r3, #8]
      break;
 8006860:	e039      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	461a      	mov	r2, r3
 8006870:	f000 f8e6 	bl	8006a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2150      	movs	r1, #80	; 0x50
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f93f 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 8006880:	e029      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	f000 f905 	bl	8006a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2160      	movs	r1, #96	; 0x60
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f92f 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 80068a0:	e019      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 f8c6 	bl	8006a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2140      	movs	r1, #64	; 0x40
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f91f 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 80068c0:	e009      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f000 f916 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 80068d2:	e000      	b.n	80068d6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80068d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a34      	ldr	r2, [pc, #208]	; (8006a24 <TIM_Base_SetConfig+0xe4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00f      	beq.n	8006978 <TIM_Base_SetConfig+0x38>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d00b      	beq.n	8006978 <TIM_Base_SetConfig+0x38>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a31      	ldr	r2, [pc, #196]	; (8006a28 <TIM_Base_SetConfig+0xe8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_Base_SetConfig+0x38>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a30      	ldr	r2, [pc, #192]	; (8006a2c <TIM_Base_SetConfig+0xec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_Base_SetConfig+0x38>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a2f      	ldr	r2, [pc, #188]	; (8006a30 <TIM_Base_SetConfig+0xf0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a25      	ldr	r2, [pc, #148]	; (8006a24 <TIM_Base_SetConfig+0xe4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01b      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006998:	d017      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <TIM_Base_SetConfig+0xe8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <TIM_Base_SetConfig+0xec>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <TIM_Base_SetConfig+0xf0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <TIM_Base_SetConfig+0xf4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <TIM_Base_SetConfig+0xf8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_Base_SetConfig+0x8a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <TIM_Base_SetConfig+0xfc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d108      	bne.n	80069dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <TIM_Base_SetConfig+0xe4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d103      	bne.n	8006a10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	615a      	str	r2, [r3, #20]
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400
 8006a3c:	40014800 	.word	0x40014800

08006a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0201 	bic.w	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f023 030a 	bic.w	r3, r3, #10
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f023 0210 	bic.w	r2, r3, #16
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	031b      	lsls	r3, r3, #12
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f043 0307 	orr.w	r3, r3, #7
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	609a      	str	r2, [r3, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e050      	b.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d013      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a15      	ldr	r2, [pc, #84]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10c      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40014000 	.word	0x40014000

08006c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c8e:	f3ef 8305 	mrs	r3, IPSR
 8006c92:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10f      	bne.n	8006cba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9e:	607b      	str	r3, [r7, #4]
  return(result);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8006caa:	603b      	str	r3, [r7, #0]
  return(result);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <osKernelInitialize+0x3a>
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <osKernelInitialize+0x64>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d103      	bne.n	8006cc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006cba:	f06f 0305 	mvn.w	r3, #5
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e00c      	b.n	8006cdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <osKernelInitialize+0x64>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cca:	4b08      	ldr	r3, [pc, #32]	; (8006cec <osKernelInitialize+0x64>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	200000e8 	.word	0x200000e8

08006cf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cf6:	f3ef 8305 	mrs	r3, IPSR
 8006cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10f      	bne.n	8006d22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d02:	f3ef 8310 	mrs	r3, PRIMASK
 8006d06:	607b      	str	r3, [r7, #4]
  return(result);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d12:	603b      	str	r3, [r7, #0]
  return(result);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <osKernelStart+0x3a>
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <osKernelStart+0x68>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d103      	bne.n	8006d2a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006d22:	f06f 0305 	mvn.w	r3, #5
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e010      	b.n	8006d4c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <osKernelStart+0x68>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d109      	bne.n	8006d46 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d32:	f7ff ffa1 	bl	8006c78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <osKernelStart+0x68>)
 8006d38:	2202      	movs	r2, #2
 8006d3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d3c:	f001 f8bc 	bl	8007eb8 <vTaskStartScheduler>
      stat = osOK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e002      	b.n	8006d4c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200000e8 	.word	0x200000e8

08006d5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b090      	sub	sp, #64	; 0x40
 8006d60:	af04      	add	r7, sp, #16
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6c:	f3ef 8305 	mrs	r3, IPSR
 8006d70:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d72:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 808f 	bne.w	8006e98 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d86:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8a:	617b      	str	r3, [r7, #20]
  return(result);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <osThreadNew+0x3e>
 8006d92:	4b44      	ldr	r3, [pc, #272]	; (8006ea4 <osThreadNew+0x148>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d07e      	beq.n	8006e98 <osThreadNew+0x13c>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d07b      	beq.n	8006e98 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006da4:	2318      	movs	r3, #24
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295
 8006db0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d045      	beq.n	8006e44 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <osThreadNew+0x6a>
        name = attr->name;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <osThreadNew+0x90>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	2b38      	cmp	r3, #56	; 0x38
 8006dde:	d805      	bhi.n	8006dec <osThreadNew+0x90>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <osThreadNew+0x94>
        return (NULL);
 8006dec:	2300      	movs	r3, #0
 8006dee:	e054      	b.n	8006e9a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <osThreadNew+0xca>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b5b      	cmp	r3, #91	; 0x5b
 8006e0e:	d90a      	bls.n	8006e26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <osThreadNew+0xca>
        mem = 1;
 8006e20:	2301      	movs	r3, #1
 8006e22:	623b      	str	r3, [r7, #32]
 8006e24:	e010      	b.n	8006e48 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <osThreadNew+0xec>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d108      	bne.n	8006e48 <osThreadNew+0xec>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <osThreadNew+0xec>
          mem = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	e001      	b.n	8006e48 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d110      	bne.n	8006e70 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e56:	9202      	str	r2, [sp, #8]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fddb 	bl	8007a20 <xTaskCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	e013      	b.n	8006e98 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d110      	bne.n	8006e98 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fe23 	bl	8007ad4 <xTaskCreate>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d001      	beq.n	8006e98 <osThreadNew+0x13c>
          hTask = NULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e98:	693b      	ldr	r3, [r7, #16]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3730      	adds	r7, #48	; 0x30
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200000e8 	.word	0x200000e8

08006ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4a07      	ldr	r2, [pc, #28]	; (8006ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4a06      	ldr	r2, [pc, #24]	; (8006ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8006ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2280      	movs	r2, #128	; 0x80
 8006ec4:	601a      	str	r2, [r3, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	200000ec 	.word	0x200000ec
 8006ed8:	20000148 	.word	0x20000148

08006edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a07      	ldr	r2, [pc, #28]	; (8006f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8006eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <vApplicationGetTimerTaskMemory+0x30>)
 8006ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006efa:	601a      	str	r2, [r3, #0]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	20000348 	.word	0x20000348
 8006f0c:	200003a4 	.word	0x200003a4

08006f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f103 0208 	add.w	r2, r3, #8
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f04f 32ff 	mov.w	r2, #4294967295
 8006f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f103 0208 	add.w	r2, r3, #8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f103 0208 	add.w	r2, r3, #8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d103      	bne.n	8006fd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e00c      	b.n	8006fec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e002      	b.n	8006fe0 <vListInsert+0x2e>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d2f6      	bcs.n	8006fda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6892      	ldr	r2, [r2, #8]
 800703a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6852      	ldr	r2, [r2, #4]
 8007044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d103      	bne.n	8007058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60bb      	str	r3, [r7, #8]
 800709e:	e7fe      	b.n	800709e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80070a0:	f002 f88c 	bl	80091bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	68f9      	ldr	r1, [r7, #12]
 80070ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	441a      	add	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	3b01      	subs	r3, #1
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	22ff      	movs	r2, #255	; 0xff
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	22ff      	movs	r2, #255	; 0xff
 80070ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d114      	bne.n	8007120 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01a      	beq.n	8007134 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3310      	adds	r3, #16
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f958 	bl	80083b8 <xTaskRemoveFromEventList>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d012      	beq.n	8007134 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800710e:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <xQueueGenericReset+0xcc>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	e009      	b.n	8007134 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3310      	adds	r3, #16
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fef3 	bl	8006f10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3324      	adds	r3, #36	; 0x24
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff feee 	bl	8006f10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007134:	f002 f870 	bl	8009218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007138:	2301      	movs	r3, #1
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08e      	sub	sp, #56	; 0x38
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <xQueueGenericCreateStatic+0x28>
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
 800716e:	e7fe      	b.n	800716e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <xQueueGenericCreateStatic+0x42>
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
 8007188:	e7fe      	b.n	8007188 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <xQueueGenericCreateStatic+0x4e>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <xQueueGenericCreateStatic+0x52>
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <xQueueGenericCreateStatic+0x54>
 800719a:	2300      	movs	r3, #0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <xQueueGenericCreateStatic+0x6c>
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	e7fe      	b.n	80071b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <xQueueGenericCreateStatic+0x78>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <xQueueGenericCreateStatic+0x7c>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <xQueueGenericCreateStatic+0x7e>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <xQueueGenericCreateStatic+0x96>
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	e7fe      	b.n	80071dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071de:	2350      	movs	r3, #80	; 0x50
 80071e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b50      	cmp	r3, #80	; 0x50
 80071e6:	d009      	beq.n	80071fc <xQueueGenericCreateStatic+0xb4>
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	e7fe      	b.n	80071fa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00d      	beq.n	8007224 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007210:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f805 	bl	800722e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007226:	4618      	mov	r0, r3
 8007228:	3730      	adds	r7, #48	; 0x30
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e002      	b.n	8007250 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800725c:	2101      	movs	r1, #1
 800725e:	69b8      	ldr	r0, [r7, #24]
 8007260:	f7ff ff0a 	bl	8007078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08e      	sub	sp, #56	; 0x38
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007282:	2300      	movs	r3, #0
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	2b00      	cmp	r3, #0
 800728e:	d109      	bne.n	80072a4 <xQueueGenericSend+0x30>
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a2:	e7fe      	b.n	80072a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSend+0x3e>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <xQueueGenericSend+0x42>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <xQueueGenericSend+0x44>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <xQueueGenericSend+0x5c>
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
 80072ce:	e7fe      	b.n	80072ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d103      	bne.n	80072de <xQueueGenericSend+0x6a>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <xQueueGenericSend+0x6e>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <xQueueGenericSend+0x70>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <xQueueGenericSend+0x88>
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	623b      	str	r3, [r7, #32]
 80072fa:	e7fe      	b.n	80072fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072fc:	f001 fa12 	bl	8008724 <xTaskGetSchedulerState>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <xQueueGenericSend+0x98>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <xQueueGenericSend+0x9c>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <xQueueGenericSend+0x9e>
 8007310:	2300      	movs	r3, #0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <xQueueGenericSend+0xb6>
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e7fe      	b.n	8007328 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800732a:	f001 ff47 	bl	80091bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <xQueueGenericSend+0xcc>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d129      	bne.n	8007394 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007346:	f000 f9ff 	bl	8007748 <prvCopyDataToQueue>
 800734a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d010      	beq.n	8007376 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f82d 	bl	80083b8 <xTaskRemoveFromEventList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007364:	4b3f      	ldr	r3, [pc, #252]	; (8007464 <xQueueGenericSend+0x1f0>)
 8007366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	e00a      	b.n	800738c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800737c:	4b39      	ldr	r3, [pc, #228]	; (8007464 <xQueueGenericSend+0x1f0>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800738c:	f001 ff44 	bl	8009218 <vPortExitCritical>
				return pdPASS;
 8007390:	2301      	movs	r3, #1
 8007392:	e063      	b.n	800745c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800739a:	f001 ff3d 	bl	8009218 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	e05c      	b.n	800745c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d106      	bne.n	80073b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073a8:	f107 0314 	add.w	r3, r7, #20
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 f865 	bl	800847c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073b6:	f001 ff2f 	bl	8009218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073ba:	f000 fde1 	bl	8007f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073be:	f001 fefd 	bl	80091bc <vPortEnterCritical>
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c8:	b25b      	sxtb	r3, r3
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d103      	bne.n	80073d8 <xQueueGenericSend+0x164>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073de:	b25b      	sxtb	r3, r3
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d103      	bne.n	80073ee <xQueueGenericSend+0x17a>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ee:	f001 ff13 	bl	8009218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073f2:	1d3a      	adds	r2, r7, #4
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 f854 	bl	80084a8 <xTaskCheckForTimeOut>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d124      	bne.n	8007450 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007408:	f000 fa96 	bl	8007938 <prvIsQueueFull>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d018      	beq.n	8007444 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	3310      	adds	r3, #16
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 ff7e 	bl	800831c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007422:	f000 fa21 	bl	8007868 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007426:	f000 fdb9 	bl	8007f9c <xTaskResumeAll>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f af7c 	bne.w	800732a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007432:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <xQueueGenericSend+0x1f0>)
 8007434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	e772      	b.n	800732a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007446:	f000 fa0f 	bl	8007868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800744a:	f000 fda7 	bl	8007f9c <xTaskResumeAll>
 800744e:	e76c      	b.n	800732a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007452:	f000 fa09 	bl	8007868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007456:	f000 fda1 	bl	8007f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800745a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800745c:	4618      	mov	r0, r3
 800745e:	3738      	adds	r7, #56	; 0x38
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08e      	sub	sp, #56	; 0x38
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	2b00      	cmp	r3, #0
 800747e:	d109      	bne.n	8007494 <xQueueGenericSendFromISR+0x2c>
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
 8007492:	e7fe      	b.n	8007492 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <xQueueGenericSendFromISR+0x3a>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <xQueueGenericSendFromISR+0x3e>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <xQueueGenericSendFromISR+0x40>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <xQueueGenericSendFromISR+0x58>
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	623b      	str	r3, [r7, #32]
 80074be:	e7fe      	b.n	80074be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d103      	bne.n	80074ce <xQueueGenericSendFromISR+0x66>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <xQueueGenericSendFromISR+0x6a>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <xQueueGenericSendFromISR+0x6c>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <xQueueGenericSendFromISR+0x84>
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e7fe      	b.n	80074ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074ec:	f001 ff42 	bl	8009374 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074f0:	f3ef 8211 	mrs	r2, BASEPRI
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	61ba      	str	r2, [r7, #24]
 8007506:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007508:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <xQueueGenericSendFromISR+0xb6>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d12c      	bne.n	8007578 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800752e:	f000 f90b 	bl	8007748 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007532:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d112      	bne.n	8007562 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d016      	beq.n	8007572 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	3324      	adds	r3, #36	; 0x24
 8007548:	4618      	mov	r0, r3
 800754a:	f000 ff35 	bl	80083b8 <xTaskRemoveFromEventList>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	e007      	b.n	8007572 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007562:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007566:	3301      	adds	r3, #1
 8007568:	b2db      	uxtb	r3, r3
 800756a:	b25a      	sxtb	r2, r3
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007572:	2301      	movs	r3, #1
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007576:	e001      	b.n	800757c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007578:	2300      	movs	r3, #0
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007588:	4618      	mov	r0, r3
 800758a:	3738      	adds	r7, #56	; 0x38
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08c      	sub	sp, #48	; 0x30
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800759c:	2300      	movs	r3, #0
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <xQueueReceive+0x2e>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	623b      	str	r3, [r7, #32]
 80075bc:	e7fe      	b.n	80075bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d103      	bne.n	80075cc <xQueueReceive+0x3c>
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <xQueueReceive+0x40>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <xQueueReceive+0x42>
 80075d0:	2300      	movs	r3, #0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <xQueueReceive+0x5a>
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e7fe      	b.n	80075e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ea:	f001 f89b 	bl	8008724 <xTaskGetSchedulerState>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <xQueueReceive+0x6a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <xQueueReceive+0x6e>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <xQueueReceive+0x70>
 80075fe:	2300      	movs	r3, #0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d109      	bne.n	8007618 <xQueueReceive+0x88>
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	e7fe      	b.n	8007616 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007618:	f001 fdd0 	bl	80091bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01f      	beq.n	8007668 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762c:	f000 f8f6 	bl	800781c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	1e5a      	subs	r2, r3, #1
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00f      	beq.n	8007660 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	3310      	adds	r3, #16
 8007644:	4618      	mov	r0, r3
 8007646:	f000 feb7 	bl	80083b8 <xTaskRemoveFromEventList>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d007      	beq.n	8007660 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007650:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <xQueueReceive+0x1b4>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007660:	f001 fdda 	bl	8009218 <vPortExitCritical>
				return pdPASS;
 8007664:	2301      	movs	r3, #1
 8007666:	e069      	b.n	800773c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800766e:	f001 fdd3 	bl	8009218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007672:	2300      	movs	r3, #0
 8007674:	e062      	b.n	800773c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800767c:	f107 0310 	add.w	r3, r7, #16
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fefb 	bl	800847c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800768a:	f001 fdc5 	bl	8009218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800768e:	f000 fc77 	bl	8007f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007692:	f001 fd93 	bl	80091bc <vPortEnterCritical>
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800769c:	b25b      	sxtb	r3, r3
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d103      	bne.n	80076ac <xQueueReceive+0x11c>
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d103      	bne.n	80076c2 <xQueueReceive+0x132>
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076c2:	f001 fda9 	bl	8009218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076c6:	1d3a      	adds	r2, r7, #4
 80076c8:	f107 0310 	add.w	r3, r7, #16
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 feea 	bl	80084a8 <xTaskCheckForTimeOut>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d123      	bne.n	8007722 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076dc:	f000 f916 	bl	800790c <prvIsQueueEmpty>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d017      	beq.n	8007716 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	3324      	adds	r3, #36	; 0x24
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fe14 	bl	800831c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f6:	f000 f8b7 	bl	8007868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076fa:	f000 fc4f 	bl	8007f9c <xTaskResumeAll>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d189      	bne.n	8007618 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007704:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <xQueueReceive+0x1b4>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	e780      	b.n	8007618 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007718:	f000 f8a6 	bl	8007868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800771c:	f000 fc3e 	bl	8007f9c <xTaskResumeAll>
 8007720:	e77a      	b.n	8007618 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007724:	f000 f8a0 	bl	8007868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007728:	f000 fc38 	bl	8007f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800772c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772e:	f000 f8ed 	bl	800790c <prvIsQueueEmpty>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	f43f af6f 	beq.w	8007618 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800773a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800773c:	4618      	mov	r0, r3
 800773e:	3730      	adds	r7, #48	; 0x30
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10d      	bne.n	8007782 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d14d      	bne.n	800780a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fff4 	bl	8008760 <xTaskPriorityDisinherit>
 8007778:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	e043      	b.n	800780a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d119      	bne.n	80077bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6858      	ldr	r0, [r3, #4]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	461a      	mov	r2, r3
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	f002 f82c 	bl	80097f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	441a      	add	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d32b      	bcc.n	800780a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	e026      	b.n	800780a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68d8      	ldr	r0, [r3, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	461a      	mov	r2, r3
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	f002 f812 	bl	80097f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	425b      	negs	r3, r3
 80077d6:	441a      	add	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d207      	bcs.n	80077f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	425b      	negs	r3, r3
 80077f2:	441a      	add	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d105      	bne.n	800780a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	3b01      	subs	r3, #1
 8007808:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007812:	697b      	ldr	r3, [r7, #20]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d018      	beq.n	8007860 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	441a      	add	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	429a      	cmp	r2, r3
 8007846:	d303      	bcc.n	8007850 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68d9      	ldr	r1, [r3, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	461a      	mov	r2, r3
 800785a:	6838      	ldr	r0, [r7, #0]
 800785c:	f001 ffc8 	bl	80097f0 <memcpy>
	}
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007870:	f001 fca4 	bl	80091bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800787c:	e011      	b.n	80078a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d012      	beq.n	80078ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3324      	adds	r3, #36	; 0x24
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fd94 	bl	80083b8 <xTaskRemoveFromEventList>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007896:	f000 fe67 	bl	8008568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	3b01      	subs	r3, #1
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dce9      	bgt.n	800787e <prvUnlockQueue+0x16>
 80078aa:	e000      	b.n	80078ae <prvUnlockQueue+0x46>
					break;
 80078ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	22ff      	movs	r2, #255	; 0xff
 80078b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078b6:	f001 fcaf 	bl	8009218 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078ba:	f001 fc7f 	bl	80091bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078c6:	e011      	b.n	80078ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d012      	beq.n	80078f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3310      	adds	r3, #16
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fd6f 	bl	80083b8 <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078e0:	f000 fe42 	bl	8008568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dce9      	bgt.n	80078c8 <prvUnlockQueue+0x60>
 80078f4:	e000      	b.n	80078f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	22ff      	movs	r2, #255	; 0xff
 80078fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007900:	f001 fc8a 	bl	8009218 <vPortExitCritical>
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007914:	f001 fc52 	bl	80091bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e001      	b.n	800792a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800792a:	f001 fc75 	bl	8009218 <vPortExitCritical>

	return xReturn;
 800792e:	68fb      	ldr	r3, [r7, #12]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007940:	f001 fc3c 	bl	80091bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	429a      	cmp	r2, r3
 800794e:	d102      	bne.n	8007956 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007950:	2301      	movs	r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e001      	b.n	800795a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800795a:	f001 fc5d 	bl	8009218 <vPortExitCritical>

	return xReturn;
 800795e:	68fb      	ldr	r3, [r7, #12]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	e014      	b.n	80079a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007978:	4a0e      	ldr	r2, [pc, #56]	; (80079b4 <vQueueAddToRegistry+0x4c>)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007984:	490b      	ldr	r1, [pc, #44]	; (80079b4 <vQueueAddToRegistry+0x4c>)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <vQueueAddToRegistry+0x4c>)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	4413      	add	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800799a:	e005      	b.n	80079a8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b07      	cmp	r3, #7
 80079a6:	d9e7      	bls.n	8007978 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	20008660 	.word	0x20008660

080079b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80079c8:	f001 fbf8 	bl	80091bc <vPortEnterCritical>
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079d2:	b25b      	sxtb	r3, r3
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d103      	bne.n	80079e2 <vQueueWaitForMessageRestricted+0x2a>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079e8:	b25b      	sxtb	r3, r3
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d103      	bne.n	80079f8 <vQueueWaitForMessageRestricted+0x40>
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079f8:	f001 fc0e 	bl	8009218 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	3324      	adds	r3, #36	; 0x24
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fca9 	bl	8008364 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a12:	6978      	ldr	r0, [r7, #20]
 8007a14:	f7ff ff28 	bl	8007868 <prvUnlockQueue>
	}
 8007a18:	bf00      	nop
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08e      	sub	sp, #56	; 0x38
 8007a24:	af04      	add	r7, sp, #16
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <xTaskCreateStatic+0x28>
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	e7fe      	b.n	8007a46 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d109      	bne.n	8007a62 <xTaskCreateStatic+0x42>
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e7fe      	b.n	8007a60 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a62:	235c      	movs	r3, #92	; 0x5c
 8007a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b5c      	cmp	r3, #92	; 0x5c
 8007a6a:	d009      	beq.n	8007a80 <xTaskCreateStatic+0x60>
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e7fe      	b.n	8007a7e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01e      	beq.n	8007ac6 <xTaskCreateStatic+0xa6>
 8007a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01b      	beq.n	8007ac6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9303      	str	r3, [sp, #12]
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	f107 0314 	add.w	r3, r7, #20
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f850 	bl	8007b5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac0:	f000 f8dc 	bl	8007c7c <prvAddNewTaskToReadyList>
 8007ac4:	e001      	b.n	8007aca <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007aca:	697b      	ldr	r3, [r7, #20]
	}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3728      	adds	r7, #40	; 0x28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08c      	sub	sp, #48	; 0x30
 8007ad8:	af04      	add	r7, sp, #16
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f001 fc81 	bl	80093f0 <pvPortMalloc>
 8007aee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00e      	beq.n	8007b14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007af6:	205c      	movs	r0, #92	; 0x5c
 8007af8:	f001 fc7a 	bl	80093f0 <pvPortMalloc>
 8007afc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30
 8007b0a:	e005      	b.n	8007b18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b0c:	6978      	ldr	r0, [r7, #20]
 8007b0e:	f001 fd31 	bl	8009574 <vPortFree>
 8007b12:	e001      	b.n	8007b18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d017      	beq.n	8007b4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9303      	str	r3, [sp, #12]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f80e 	bl	8007b5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b42:	69f8      	ldr	r0, [r7, #28]
 8007b44:	f000 f89a 	bl	8007c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e002      	b.n	8007b54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b54:	69bb      	ldr	r3, [r7, #24]
	}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b088      	sub	sp, #32
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	461a      	mov	r2, r3
 8007b76:	21a5      	movs	r1, #165	; 0xa5
 8007b78:	f001 fe45 	bl	8009806 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b86:	3b01      	subs	r3, #1
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f023 0307 	bic.w	r3, r3, #7
 8007b94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <prvInitialiseNewTask+0x56>
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	e7fe      	b.n	8007bb2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01f      	beq.n	8007bfa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	e012      	b.n	8007be6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	7819      	ldrb	r1, [r3, #0]
 8007bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3334      	adds	r3, #52	; 0x34
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	3301      	adds	r3, #1
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	2b0f      	cmp	r3, #15
 8007bea:	d9e9      	bls.n	8007bc0 <prvInitialiseNewTask+0x62>
 8007bec:	e000      	b.n	8007bf0 <prvInitialiseNewTask+0x92>
			{
				break;
 8007bee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bf8:	e003      	b.n	8007c02 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	2b37      	cmp	r3, #55	; 0x37
 8007c06:	d901      	bls.n	8007c0c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c08:	2337      	movs	r3, #55	; 0x37
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	3304      	adds	r3, #4
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff f994 	bl	8006f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff f98f 	bl	8006f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	68f9      	ldr	r1, [r7, #12]
 8007c5a:	69b8      	ldr	r0, [r7, #24]
 8007c5c:	f001 f986 	bl	8008f6c <pxPortInitialiseStack>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c72:	bf00      	nop
 8007c74:	3720      	adds	r7, #32
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c84:	f001 fa9a 	bl	80091bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c88:	4b2d      	ldr	r3, [pc, #180]	; (8007d40 <prvAddNewTaskToReadyList+0xc4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	4a2c      	ldr	r2, [pc, #176]	; (8007d40 <prvAddNewTaskToReadyList+0xc4>)
 8007c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c92:	4b2c      	ldr	r3, [pc, #176]	; (8007d44 <prvAddNewTaskToReadyList+0xc8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d109      	bne.n	8007cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c9a:	4a2a      	ldr	r2, [pc, #168]	; (8007d44 <prvAddNewTaskToReadyList+0xc8>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ca0:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <prvAddNewTaskToReadyList+0xc4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d110      	bne.n	8007cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ca8:	f000 fc82 	bl	80085b0 <prvInitialiseTaskLists>
 8007cac:	e00d      	b.n	8007cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cae:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <prvAddNewTaskToReadyList+0xcc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cb6:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <prvAddNewTaskToReadyList+0xc8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d802      	bhi.n	8007cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cc4:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <prvAddNewTaskToReadyList+0xc8>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cca:	4b20      	ldr	r3, [pc, #128]	; (8007d4c <prvAddNewTaskToReadyList+0xd0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	4a1e      	ldr	r2, [pc, #120]	; (8007d4c <prvAddNewTaskToReadyList+0xd0>)
 8007cd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cd4:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <prvAddNewTaskToReadyList+0xd0>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce0:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <prvAddNewTaskToReadyList+0xd4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d903      	bls.n	8007cf0 <prvAddNewTaskToReadyList+0x74>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	4a18      	ldr	r2, [pc, #96]	; (8007d50 <prvAddNewTaskToReadyList+0xd4>)
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <prvAddNewTaskToReadyList+0xd8>)
 8007cfe:	441a      	add	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7ff f92f 	bl	8006f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d0c:	f001 fa84 	bl	8009218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d10:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <prvAddNewTaskToReadyList+0xcc>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <prvAddNewTaskToReadyList+0xc8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d207      	bcs.n	8007d36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <prvAddNewTaskToReadyList+0xdc>)
 8007d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000c78 	.word	0x20000c78
 8007d44:	200007a4 	.word	0x200007a4
 8007d48:	20000c84 	.word	0x20000c84
 8007d4c:	20000c94 	.word	0x20000c94
 8007d50:	20000c80 	.word	0x20000c80
 8007d54:	200007a8 	.word	0x200007a8
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	; 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <vTaskDelayUntil+0x28>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e7fe      	b.n	8007d82 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <vTaskDelayUntil+0x42>
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	e7fe      	b.n	8007d9c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <vTaskDelayUntil+0xe8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <vTaskDelayUntil+0x5e>
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e7fe      	b.n	8007db8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8007dba:	f000 f8e1 	bl	8007f80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007dbe:	4b22      	ldr	r3, [pc, #136]	; (8007e48 <vTaskDelayUntil+0xec>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	4413      	add	r3, r2
 8007dcc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6a3a      	ldr	r2, [r7, #32]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d20b      	bcs.n	8007df0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d211      	bcs.n	8007e06 <vTaskDelayUntil+0xaa>
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d90d      	bls.n	8007e06 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
 8007dee:	e00a      	b.n	8007e06 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d303      	bcc.n	8007e02 <vTaskDelayUntil+0xa6>
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d901      	bls.n	8007e06 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d006      	beq.n	8007e20 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fd0c 	bl	8008838 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007e20:	f000 f8bc 	bl	8007f9c <xTaskResumeAll>
 8007e24:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d107      	bne.n	8007e3c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <vTaskDelayUntil+0xf0>)
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e3c:	bf00      	nop
 8007e3e:	3728      	adds	r7, #40	; 0x28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000ca0 	.word	0x20000ca0
 8007e48:	20000c7c 	.word	0x20000c7c
 8007e4c:	e000ed04 	.word	0xe000ed04

08007e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d016      	beq.n	8007e90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e62:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <vTaskDelay+0x60>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <vTaskDelay+0x2e>
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	60bb      	str	r3, [r7, #8]
 8007e7c:	e7fe      	b.n	8007e7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007e7e:	f000 f87f 	bl	8007f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e82:	2100      	movs	r1, #0
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fcd7 	bl	8008838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e8a:	f000 f887 	bl	8007f9c <xTaskResumeAll>
 8007e8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d107      	bne.n	8007ea6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <vTaskDelay+0x64>)
 8007e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000ca0 	.word	0x20000ca0
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ec6:	463a      	mov	r2, r7
 8007ec8:	1d39      	adds	r1, r7, #4
 8007eca:	f107 0308 	add.w	r3, r7, #8
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe ffea 	bl	8006ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	9202      	str	r2, [sp, #8]
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	460a      	mov	r2, r1
 8007ee6:	4920      	ldr	r1, [pc, #128]	; (8007f68 <vTaskStartScheduler+0xb0>)
 8007ee8:	4820      	ldr	r0, [pc, #128]	; (8007f6c <vTaskStartScheduler+0xb4>)
 8007eea:	f7ff fd99 	bl	8007a20 <xTaskCreateStatic>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	4b1f      	ldr	r3, [pc, #124]	; (8007f70 <vTaskStartScheduler+0xb8>)
 8007ef2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <vTaskStartScheduler+0xb8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007efc:	2301      	movs	r3, #1
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	e001      	b.n	8007f06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d102      	bne.n	8007f12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f0c:	f000 fce8 	bl	80088e0 <xTimerCreateTimerTask>
 8007f10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d115      	bne.n	8007f44 <vTaskStartScheduler+0x8c>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f2a:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <vTaskStartScheduler+0xbc>)
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f32:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <vTaskStartScheduler+0xc0>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f38:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <vTaskStartScheduler+0xc4>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f3e:	f001 f89f 	bl	8009080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f42:	e00d      	b.n	8007f60 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d109      	bne.n	8007f60 <vTaskStartScheduler+0xa8>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	e7fe      	b.n	8007f5e <vTaskStartScheduler+0xa6>
}
 8007f60:	bf00      	nop
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	0800a304 	.word	0x0800a304
 8007f6c:	08008581 	.word	0x08008581
 8007f70:	20000c9c 	.word	0x20000c9c
 8007f74:	20000c98 	.word	0x20000c98
 8007f78:	20000c84 	.word	0x20000c84
 8007f7c:	20000c7c 	.word	0x20000c7c

08007f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f84:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <vTaskSuspendAll+0x18>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	4a03      	ldr	r2, [pc, #12]	; (8007f98 <vTaskSuspendAll+0x18>)
 8007f8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007f8e:	bf00      	nop
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	20000ca0 	.word	0x20000ca0

08007f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007faa:	4b41      	ldr	r3, [pc, #260]	; (80080b0 <xTaskResumeAll+0x114>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <xTaskResumeAll+0x2a>
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	e7fe      	b.n	8007fc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fc6:	f001 f8f9 	bl	80091bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fca:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <xTaskResumeAll+0x114>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4a37      	ldr	r2, [pc, #220]	; (80080b0 <xTaskResumeAll+0x114>)
 8007fd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd4:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <xTaskResumeAll+0x114>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d162      	bne.n	80080a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fdc:	4b35      	ldr	r3, [pc, #212]	; (80080b4 <xTaskResumeAll+0x118>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d05e      	beq.n	80080a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fe4:	e02f      	b.n	8008046 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe6:	4b34      	ldr	r3, [pc, #208]	; (80080b8 <xTaskResumeAll+0x11c>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3318      	adds	r3, #24
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff f816 	bl	8007024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff f811 	bl	8007024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	4b2d      	ldr	r3, [pc, #180]	; (80080bc <xTaskResumeAll+0x120>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d903      	bls.n	8008016 <xTaskResumeAll+0x7a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <xTaskResumeAll+0x120>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4a27      	ldr	r2, [pc, #156]	; (80080c0 <xTaskResumeAll+0x124>)
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3304      	adds	r3, #4
 800802a:	4619      	mov	r1, r3
 800802c:	4610      	mov	r0, r2
 800802e:	f7fe ff9c 	bl	8006f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4b23      	ldr	r3, [pc, #140]	; (80080c4 <xTaskResumeAll+0x128>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d302      	bcc.n	8008046 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008040:	4b21      	ldr	r3, [pc, #132]	; (80080c8 <xTaskResumeAll+0x12c>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008046:	4b1c      	ldr	r3, [pc, #112]	; (80080b8 <xTaskResumeAll+0x11c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1cb      	bne.n	8007fe6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008054:	f000 fb46 	bl	80086e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008058:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <xTaskResumeAll+0x130>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d010      	beq.n	8008086 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008064:	f000 f846 	bl	80080f4 <xTaskIncrementTick>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <xTaskResumeAll+0x12c>)
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3b01      	subs	r3, #1
 8008078:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f1      	bne.n	8008064 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008080:	4b12      	ldr	r3, [pc, #72]	; (80080cc <xTaskResumeAll+0x130>)
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <xTaskResumeAll+0x12c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d009      	beq.n	80080a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800808e:	2301      	movs	r3, #1
 8008090:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <xTaskResumeAll+0x134>)
 8008094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080a2:	f001 f8b9 	bl	8009218 <vPortExitCritical>

	return xAlreadyYielded;
 80080a6:	68bb      	ldr	r3, [r7, #8]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000ca0 	.word	0x20000ca0
 80080b4:	20000c78 	.word	0x20000c78
 80080b8:	20000c38 	.word	0x20000c38
 80080bc:	20000c80 	.word	0x20000c80
 80080c0:	200007a8 	.word	0x200007a8
 80080c4:	200007a4 	.word	0x200007a4
 80080c8:	20000c8c 	.word	0x20000c8c
 80080cc:	20000c88 	.word	0x20000c88
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <xTaskGetTickCount+0x1c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080e0:	687b      	ldr	r3, [r7, #4]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000c7c 	.word	0x20000c7c

080080f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080fe:	4b4e      	ldr	r3, [pc, #312]	; (8008238 <xTaskIncrementTick+0x144>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f040 8088 	bne.w	8008218 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008108:	4b4c      	ldr	r3, [pc, #304]	; (800823c <xTaskIncrementTick+0x148>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3301      	adds	r3, #1
 800810e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008110:	4a4a      	ldr	r2, [pc, #296]	; (800823c <xTaskIncrementTick+0x148>)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11f      	bne.n	800815c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800811c:	4b48      	ldr	r3, [pc, #288]	; (8008240 <xTaskIncrementTick+0x14c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <xTaskIncrementTick+0x46>
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	e7fe      	b.n	8008138 <xTaskIncrementTick+0x44>
 800813a:	4b41      	ldr	r3, [pc, #260]	; (8008240 <xTaskIncrementTick+0x14c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	4b40      	ldr	r3, [pc, #256]	; (8008244 <xTaskIncrementTick+0x150>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a3e      	ldr	r2, [pc, #248]	; (8008240 <xTaskIncrementTick+0x14c>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4a3e      	ldr	r2, [pc, #248]	; (8008244 <xTaskIncrementTick+0x150>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	4b3e      	ldr	r3, [pc, #248]	; (8008248 <xTaskIncrementTick+0x154>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a3c      	ldr	r2, [pc, #240]	; (8008248 <xTaskIncrementTick+0x154>)
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	f000 fac4 	bl	80086e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800815c:	4b3b      	ldr	r3, [pc, #236]	; (800824c <xTaskIncrementTick+0x158>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	429a      	cmp	r2, r3
 8008164:	d349      	bcc.n	80081fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008166:	4b36      	ldr	r3, [pc, #216]	; (8008240 <xTaskIncrementTick+0x14c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008170:	4b36      	ldr	r3, [pc, #216]	; (800824c <xTaskIncrementTick+0x158>)
 8008172:	f04f 32ff 	mov.w	r2, #4294967295
 8008176:	601a      	str	r2, [r3, #0]
					break;
 8008178:	e03f      	b.n	80081fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <xTaskIncrementTick+0x14c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d203      	bcs.n	800819a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008192:	4a2e      	ldr	r2, [pc, #184]	; (800824c <xTaskIncrementTick+0x158>)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008198:	e02f      	b.n	80081fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe ff40 	bl	8007024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3318      	adds	r3, #24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ff37 	bl	8007024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	4b25      	ldr	r3, [pc, #148]	; (8008250 <xTaskIncrementTick+0x15c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d903      	bls.n	80081ca <xTaskIncrementTick+0xd6>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	4a22      	ldr	r2, [pc, #136]	; (8008250 <xTaskIncrementTick+0x15c>)
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4a1f      	ldr	r2, [pc, #124]	; (8008254 <xTaskIncrementTick+0x160>)
 80081d8:	441a      	add	r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3304      	adds	r3, #4
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7fe fec2 	bl	8006f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <xTaskIncrementTick+0x164>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3b8      	bcc.n	8008166 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f8:	e7b5      	b.n	8008166 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081fa:	4b17      	ldr	r3, [pc, #92]	; (8008258 <xTaskIncrementTick+0x164>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008200:	4914      	ldr	r1, [pc, #80]	; (8008254 <xTaskIncrementTick+0x160>)
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d907      	bls.n	8008222 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e004      	b.n	8008222 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008218:	4b10      	ldr	r3, [pc, #64]	; (800825c <xTaskIncrementTick+0x168>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	4a0f      	ldr	r2, [pc, #60]	; (800825c <xTaskIncrementTick+0x168>)
 8008220:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <xTaskIncrementTick+0x16c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800822e:	697b      	ldr	r3, [r7, #20]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000ca0 	.word	0x20000ca0
 800823c:	20000c7c 	.word	0x20000c7c
 8008240:	20000c30 	.word	0x20000c30
 8008244:	20000c34 	.word	0x20000c34
 8008248:	20000c90 	.word	0x20000c90
 800824c:	20000c98 	.word	0x20000c98
 8008250:	20000c80 	.word	0x20000c80
 8008254:	200007a8 	.word	0x200007a8
 8008258:	200007a4 	.word	0x200007a4
 800825c:	20000c88 	.word	0x20000c88
 8008260:	20000c8c 	.word	0x20000c8c

08008264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800826a:	4b27      	ldr	r3, [pc, #156]	; (8008308 <vTaskSwitchContext+0xa4>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008272:	4b26      	ldr	r3, [pc, #152]	; (800830c <vTaskSwitchContext+0xa8>)
 8008274:	2201      	movs	r2, #1
 8008276:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008278:	e040      	b.n	80082fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800827a:	4b24      	ldr	r3, [pc, #144]	; (800830c <vTaskSwitchContext+0xa8>)
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008280:	4b23      	ldr	r3, [pc, #140]	; (8008310 <vTaskSwitchContext+0xac>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e00f      	b.n	80082a8 <vTaskSwitchContext+0x44>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <vTaskSwitchContext+0x3e>
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
 80082a0:	e7fe      	b.n	80082a0 <vTaskSwitchContext+0x3c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	491a      	ldr	r1, [pc, #104]	; (8008314 <vTaskSwitchContext+0xb0>)
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0e5      	beq.n	8008288 <vTaskSwitchContext+0x24>
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4a13      	ldr	r2, [pc, #76]	; (8008314 <vTaskSwitchContext+0xb0>)
 80082c8:	4413      	add	r3, r2
 80082ca:	60bb      	str	r3, [r7, #8]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	3308      	adds	r3, #8
 80082de:	429a      	cmp	r2, r3
 80082e0:	d104      	bne.n	80082ec <vTaskSwitchContext+0x88>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	605a      	str	r2, [r3, #4]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	4a09      	ldr	r2, [pc, #36]	; (8008318 <vTaskSwitchContext+0xb4>)
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	4a06      	ldr	r2, [pc, #24]	; (8008310 <vTaskSwitchContext+0xac>)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6013      	str	r3, [r2, #0]
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20000ca0 	.word	0x20000ca0
 800830c:	20000c8c 	.word	0x20000c8c
 8008310:	20000c80 	.word	0x20000c80
 8008314:	200007a8 	.word	0x200007a8
 8008318:	200007a4 	.word	0x200007a4

0800831c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <vTaskPlaceOnEventList+0x24>
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e7fe      	b.n	800833e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <vTaskPlaceOnEventList+0x44>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3318      	adds	r3, #24
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fe fe32 	bl	8006fb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800834e:	2101      	movs	r1, #1
 8008350:	6838      	ldr	r0, [r7, #0]
 8008352:	f000 fa71 	bl	8008838 <prvAddCurrentTaskToDelayedList>
}
 8008356:	bf00      	nop
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200007a4 	.word	0x200007a4

08008364 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <vTaskPlaceOnEventListRestricted+0x26>
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e7fe      	b.n	8008388 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <vTaskPlaceOnEventListRestricted+0x50>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3318      	adds	r3, #24
 8008390:	4619      	mov	r1, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7fe fde9 	bl	8006f6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	68b8      	ldr	r0, [r7, #8]
 80083a8:	f000 fa46 	bl	8008838 <prvAddCurrentTaskToDelayedList>
	}
 80083ac:	bf00      	nop
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	200007a4 	.word	0x200007a4

080083b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <xTaskRemoveFromEventList+0x2a>
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e7fe      	b.n	80083e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	3318      	adds	r3, #24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fe1c 	bl	8007024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ec:	4b1d      	ldr	r3, [pc, #116]	; (8008464 <xTaskRemoveFromEventList+0xac>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d11d      	bne.n	8008430 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe fe13 	bl	8007024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <xTaskRemoveFromEventList+0xb0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d903      	bls.n	8008412 <xTaskRemoveFromEventList+0x5a>
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840e:	4a16      	ldr	r2, [pc, #88]	; (8008468 <xTaskRemoveFromEventList+0xb0>)
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4a13      	ldr	r2, [pc, #76]	; (800846c <xTaskRemoveFromEventList+0xb4>)
 8008420:	441a      	add	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3304      	adds	r3, #4
 8008426:	4619      	mov	r1, r3
 8008428:	4610      	mov	r0, r2
 800842a:	f7fe fd9e 	bl	8006f6a <vListInsertEnd>
 800842e:	e005      	b.n	800843c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	3318      	adds	r3, #24
 8008434:	4619      	mov	r1, r3
 8008436:	480e      	ldr	r0, [pc, #56]	; (8008470 <xTaskRemoveFromEventList+0xb8>)
 8008438:	f7fe fd97 	bl	8006f6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008440:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <xTaskRemoveFromEventList+0xbc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	429a      	cmp	r2, r3
 8008448:	d905      	bls.n	8008456 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800844a:	2301      	movs	r3, #1
 800844c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800844e:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <xTaskRemoveFromEventList+0xc0>)
 8008450:	2201      	movs	r2, #1
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	e001      	b.n	800845a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800845a:	697b      	ldr	r3, [r7, #20]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000ca0 	.word	0x20000ca0
 8008468:	20000c80 	.word	0x20000c80
 800846c:	200007a8 	.word	0x200007a8
 8008470:	20000c38 	.word	0x20000c38
 8008474:	200007a4 	.word	0x200007a4
 8008478:	20000c8c 	.word	0x20000c8c

0800847c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <vTaskInternalSetTimeOutState+0x24>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <vTaskInternalSetTimeOutState+0x28>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	605a      	str	r2, [r3, #4]
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000c90 	.word	0x20000c90
 80084a4:	20000c7c 	.word	0x20000c7c

080084a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d109      	bne.n	80084cc <xTaskCheckForTimeOut+0x24>
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	e7fe      	b.n	80084ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <xTaskCheckForTimeOut+0x3e>
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e7fe      	b.n	80084e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80084e6:	f000 fe69 	bl	80091bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084ea:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <xTaskCheckForTimeOut+0xb8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008502:	d102      	bne.n	800850a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
 8008508:	e023      	b.n	8008552 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b15      	ldr	r3, [pc, #84]	; (8008564 <xTaskCheckForTimeOut+0xbc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d007      	beq.n	8008526 <xTaskCheckForTimeOut+0x7e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	429a      	cmp	r2, r3
 800851e:	d302      	bcc.n	8008526 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008520:	2301      	movs	r3, #1
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	e015      	b.n	8008552 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	429a      	cmp	r2, r3
 800852e:	d20b      	bcs.n	8008548 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff ff9d 	bl	800847c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	e004      	b.n	8008552 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800854e:	2301      	movs	r3, #1
 8008550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008552:	f000 fe61 	bl	8009218 <vPortExitCritical>

	return xReturn;
 8008556:	69fb      	ldr	r3, [r7, #28]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20000c7c 	.word	0x20000c7c
 8008564:	20000c90 	.word	0x20000c90

08008568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800856c:	4b03      	ldr	r3, [pc, #12]	; (800857c <vTaskMissedYield+0x14>)
 800856e:	2201      	movs	r2, #1
 8008570:	601a      	str	r2, [r3, #0]
}
 8008572:	bf00      	nop
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20000c8c 	.word	0x20000c8c

08008580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008588:	f000 f852 	bl	8008630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800858c:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <prvIdleTask+0x28>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d9f9      	bls.n	8008588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <prvIdleTask+0x2c>)
 8008596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085a4:	e7f0      	b.n	8008588 <prvIdleTask+0x8>
 80085a6:	bf00      	nop
 80085a8:	200007a8 	.word	0x200007a8
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085b6:	2300      	movs	r3, #0
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	e00c      	b.n	80085d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4a12      	ldr	r2, [pc, #72]	; (8008610 <prvInitialiseTaskLists+0x60>)
 80085c8:	4413      	add	r3, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fca0 	bl	8006f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3301      	adds	r3, #1
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b37      	cmp	r3, #55	; 0x37
 80085da:	d9ef      	bls.n	80085bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085dc:	480d      	ldr	r0, [pc, #52]	; (8008614 <prvInitialiseTaskLists+0x64>)
 80085de:	f7fe fc97 	bl	8006f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085e2:	480d      	ldr	r0, [pc, #52]	; (8008618 <prvInitialiseTaskLists+0x68>)
 80085e4:	f7fe fc94 	bl	8006f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085e8:	480c      	ldr	r0, [pc, #48]	; (800861c <prvInitialiseTaskLists+0x6c>)
 80085ea:	f7fe fc91 	bl	8006f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085ee:	480c      	ldr	r0, [pc, #48]	; (8008620 <prvInitialiseTaskLists+0x70>)
 80085f0:	f7fe fc8e 	bl	8006f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085f4:	480b      	ldr	r0, [pc, #44]	; (8008624 <prvInitialiseTaskLists+0x74>)
 80085f6:	f7fe fc8b 	bl	8006f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085fa:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <prvInitialiseTaskLists+0x78>)
 80085fc:	4a05      	ldr	r2, [pc, #20]	; (8008614 <prvInitialiseTaskLists+0x64>)
 80085fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <prvInitialiseTaskLists+0x7c>)
 8008602:	4a05      	ldr	r2, [pc, #20]	; (8008618 <prvInitialiseTaskLists+0x68>)
 8008604:	601a      	str	r2, [r3, #0]
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	200007a8 	.word	0x200007a8
 8008614:	20000c08 	.word	0x20000c08
 8008618:	20000c1c 	.word	0x20000c1c
 800861c:	20000c38 	.word	0x20000c38
 8008620:	20000c4c 	.word	0x20000c4c
 8008624:	20000c64 	.word	0x20000c64
 8008628:	20000c30 	.word	0x20000c30
 800862c:	20000c34 	.word	0x20000c34

08008630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008636:	e019      	b.n	800866c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008638:	f000 fdc0 	bl	80091bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863c:	4b0f      	ldr	r3, [pc, #60]	; (800867c <prvCheckTasksWaitingTermination+0x4c>)
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fceb 	bl	8007024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800864e:	4b0c      	ldr	r3, [pc, #48]	; (8008680 <prvCheckTasksWaitingTermination+0x50>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3b01      	subs	r3, #1
 8008654:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <prvCheckTasksWaitingTermination+0x50>)
 8008656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <prvCheckTasksWaitingTermination+0x54>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <prvCheckTasksWaitingTermination+0x54>)
 8008660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008662:	f000 fdd9 	bl	8009218 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f80e 	bl	8008688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <prvCheckTasksWaitingTermination+0x54>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e1      	bne.n	8008638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000c4c 	.word	0x20000c4c
 8008680:	20000c78 	.word	0x20000c78
 8008684:	20000c60 	.word	0x20000c60

08008688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008696:	2b00      	cmp	r3, #0
 8008698:	d108      	bne.n	80086ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 ff68 	bl	8009574 <vPortFree>
				vPortFree( pxTCB );
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 ff65 	bl	8009574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086aa:	e017      	b.n	80086dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d103      	bne.n	80086be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 ff5c 	bl	8009574 <vPortFree>
	}
 80086bc:	e00e      	b.n	80086dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d009      	beq.n	80086dc <prvDeleteTCB+0x54>
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	e7fe      	b.n	80086da <prvDeleteTCB+0x52>
	}
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ea:	4b0c      	ldr	r3, [pc, #48]	; (800871c <prvResetNextTaskUnblockTime+0x38>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <prvResetNextTaskUnblockTime+0x3c>)
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086fc:	e008      	b.n	8008710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <prvResetNextTaskUnblockTime+0x38>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	4a04      	ldr	r2, [pc, #16]	; (8008720 <prvResetNextTaskUnblockTime+0x3c>)
 800870e:	6013      	str	r3, [r2, #0]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20000c30 	.word	0x20000c30
 8008720:	20000c98 	.word	0x20000c98

08008724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <xTaskGetSchedulerState+0x34>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008732:	2301      	movs	r3, #1
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	e008      	b.n	800874a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008738:	4b08      	ldr	r3, [pc, #32]	; (800875c <xTaskGetSchedulerState+0x38>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008740:	2302      	movs	r3, #2
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	e001      	b.n	800874a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008746:	2300      	movs	r3, #0
 8008748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800874a:	687b      	ldr	r3, [r7, #4]
	}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	20000c84 	.word	0x20000c84
 800875c:	20000ca0 	.word	0x20000ca0

08008760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d054      	beq.n	8008820 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008776:	4b2d      	ldr	r3, [pc, #180]	; (800882c <xTaskPriorityDisinherit+0xcc>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	429a      	cmp	r2, r3
 800877e:	d009      	beq.n	8008794 <xTaskPriorityDisinherit+0x34>
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	e7fe      	b.n	8008792 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <xTaskPriorityDisinherit+0x50>
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	60bb      	str	r3, [r7, #8]
 80087ae:	e7fe      	b.n	80087ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b4:	1e5a      	subs	r2, r3, #1
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d02c      	beq.n	8008820 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d128      	bne.n	8008820 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	3304      	adds	r3, #4
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fc26 	bl	8007024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f0:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <xTaskPriorityDisinherit+0xd0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d903      	bls.n	8008800 <xTaskPriorityDisinherit+0xa0>
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	4a0c      	ldr	r2, [pc, #48]	; (8008830 <xTaskPriorityDisinherit+0xd0>)
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4a09      	ldr	r2, [pc, #36]	; (8008834 <xTaskPriorityDisinherit+0xd4>)
 800880e:	441a      	add	r2, r3
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3304      	adds	r3, #4
 8008814:	4619      	mov	r1, r3
 8008816:	4610      	mov	r0, r2
 8008818:	f7fe fba7 	bl	8006f6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800881c:	2301      	movs	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008820:	697b      	ldr	r3, [r7, #20]
	}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200007a4 	.word	0x200007a4
 8008830:	20000c80 	.word	0x20000c80
 8008834:	200007a8 	.word	0x200007a8

08008838 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008842:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008848:	4b20      	ldr	r3, [pc, #128]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fbe8 	bl	8007024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	d10a      	bne.n	8008872 <prvAddCurrentTaskToDelayedList+0x3a>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008862:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4819      	ldr	r0, [pc, #100]	; (80088d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800886c:	f7fe fb7d 	bl	8006f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008870:	e026      	b.n	80088c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4413      	add	r3, r2
 8008878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	429a      	cmp	r2, r3
 8008888:	d209      	bcs.n	800889e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800888a:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f7fe fb8b 	bl	8006fb2 <vListInsert>
}
 800889c:	e010      	b.n	80088c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800889e:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fe fb81 	bl	8006fb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d202      	bcs.n	80088c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088ba:	4a08      	ldr	r2, [pc, #32]	; (80088dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6013      	str	r3, [r2, #0]
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000c7c 	.word	0x20000c7c
 80088cc:	200007a4 	.word	0x200007a4
 80088d0:	20000c64 	.word	0x20000c64
 80088d4:	20000c34 	.word	0x20000c34
 80088d8:	20000c30 	.word	0x20000c30
 80088dc:	20000c98 	.word	0x20000c98

080088e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088ea:	f000 faff 	bl	8008eec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088ee:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <xTimerCreateTimerTask+0x80>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d021      	beq.n	800893a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088fe:	1d3a      	adds	r2, r7, #4
 8008900:	f107 0108 	add.w	r1, r7, #8
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4618      	mov	r0, r3
 800890a:	f7fe fae7 	bl	8006edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	9202      	str	r2, [sp, #8]
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	2302      	movs	r3, #2
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	460a      	mov	r2, r1
 8008920:	4910      	ldr	r1, [pc, #64]	; (8008964 <xTimerCreateTimerTask+0x84>)
 8008922:	4811      	ldr	r0, [pc, #68]	; (8008968 <xTimerCreateTimerTask+0x88>)
 8008924:	f7ff f87c 	bl	8007a20 <xTaskCreateStatic>
 8008928:	4602      	mov	r2, r0
 800892a:	4b10      	ldr	r3, [pc, #64]	; (800896c <xTimerCreateTimerTask+0x8c>)
 800892c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800892e:	4b0f      	ldr	r3, [pc, #60]	; (800896c <xTimerCreateTimerTask+0x8c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008936:	2301      	movs	r3, #1
 8008938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d109      	bne.n	8008954 <xTimerCreateTimerTask+0x74>
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	e7fe      	b.n	8008952 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008954:	697b      	ldr	r3, [r7, #20]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000cd4 	.word	0x20000cd4
 8008964:	0800a30c 	.word	0x0800a30c
 8008968:	08008aa1 	.word	0x08008aa1
 800896c:	20000cd8 	.word	0x20000cd8

08008970 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	; 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800897e:	2300      	movs	r3, #0
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d109      	bne.n	800899c <xTimerGenericCommand+0x2c>
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	623b      	str	r3, [r7, #32]
 800899a:	e7fe      	b.n	800899a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800899c:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <xTimerGenericCommand+0x94>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d02a      	beq.n	80089fa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	dc18      	bgt.n	80089e8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089b6:	f7ff feb5 	bl	8008724 <xTaskGetSchedulerState>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d109      	bne.n	80089d4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <xTimerGenericCommand+0x94>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	f107 0110 	add.w	r1, r7, #16
 80089c8:	2300      	movs	r3, #0
 80089ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089cc:	f7fe fc52 	bl	8007274 <xQueueGenericSend>
 80089d0:	6278      	str	r0, [r7, #36]	; 0x24
 80089d2:	e012      	b.n	80089fa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089d4:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <xTimerGenericCommand+0x94>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	f107 0110 	add.w	r1, r7, #16
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	f7fe fc48 	bl	8007274 <xQueueGenericSend>
 80089e4:	6278      	str	r0, [r7, #36]	; 0x24
 80089e6:	e008      	b.n	80089fa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <xTimerGenericCommand+0x94>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	f107 0110 	add.w	r1, r7, #16
 80089f0:	2300      	movs	r3, #0
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	f7fe fd38 	bl	8007468 <xQueueGenericSendFromISR>
 80089f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3728      	adds	r7, #40	; 0x28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000cd4 	.word	0x20000cd4

08008a08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <prvProcessExpiredTimer+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe faff 	bl	8007024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d021      	beq.n	8008a78 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	18d1      	adds	r1, r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f000 f8d1 	bl	8008be8 <prvInsertTimerInActiveList>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01e      	beq.n	8008a8a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	2100      	movs	r1, #0
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7ff ff8a 	bl	8008970 <xTimerGenericCommand>
 8008a5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d112      	bne.n	8008a8a <prvProcessExpiredTimer+0x82>
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e7fe      	b.n	8008a76 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	6978      	ldr	r0, [r7, #20]
 8008a90:	4798      	blx	r3
}
 8008a92:	bf00      	nop
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000ccc 	.word	0x20000ccc

08008aa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008aa8:	f107 0308 	add.w	r3, r7, #8
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 f857 	bl	8008b60 <prvGetNextExpireTime>
 8008ab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f803 	bl	8008ac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008abe:	f000 f8d5 	bl	8008c6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ac2:	e7f1      	b.n	8008aa8 <prvTimerTask+0x8>

08008ac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ace:	f7ff fa57 	bl	8007f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f866 	bl	8008ba8 <prvSampleTimeNow>
 8008adc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d130      	bne.n	8008b46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <prvProcessTimerOrBlockTask+0x3c>
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d806      	bhi.n	8008b00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008af2:	f7ff fa53 	bl	8007f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ff85 	bl	8008a08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008afe:	e024      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b06:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <prvProcessTimerOrBlockTask+0x90>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <prvProcessTimerOrBlockTask+0x50>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <prvProcessTimerOrBlockTask+0x52>
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <prvProcessTimerOrBlockTask+0x94>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f7fe ff47 	bl	80079b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b2a:	f7ff fa37 	bl	8007f9c <xTaskResumeAll>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b34:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <prvProcessTimerOrBlockTask+0x98>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
}
 8008b44:	e001      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b46:	f7ff fa29 	bl	8007f9c <xTaskResumeAll>
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000cd0 	.word	0x20000cd0
 8008b58:	20000cd4 	.word	0x20000cd4
 8008b5c:	e000ed04 	.word	0xe000ed04

08008b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <prvGetNextExpireTime+0x44>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <prvGetNextExpireTime+0x16>
 8008b72:	2201      	movs	r2, #1
 8008b74:	e000      	b.n	8008b78 <prvGetNextExpireTime+0x18>
 8008b76:	2200      	movs	r2, #0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b84:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <prvGetNextExpireTime+0x44>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e001      	b.n	8008b94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20000ccc 	.word	0x20000ccc

08008ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bb0:	f7ff fa90 	bl	80080d4 <xTaskGetTickCount>
 8008bb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <prvSampleTimeNow+0x3c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d205      	bcs.n	8008bcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bc0:	f000 f930 	bl	8008e24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bd2:	4a04      	ldr	r2, [pc, #16]	; (8008be4 <prvSampleTimeNow+0x3c>)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000cdc 	.word	0x20000cdc

08008be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d812      	bhi.n	8008c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e01b      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <prvInsertTimerInActiveList+0x7c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	f7fe f9c0 	bl	8006fb2 <vListInsert>
 8008c32:	e012      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d206      	bcs.n	8008c4a <prvInsertTimerInActiveList+0x62>
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d302      	bcc.n	8008c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e007      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c4a:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <prvInsertTimerInActiveList+0x80>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fe f9ac 	bl	8006fb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c5a:	697b      	ldr	r3, [r7, #20]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000cd0 	.word	0x20000cd0
 8008c68:	20000ccc 	.word	0x20000ccc

08008c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08e      	sub	sp, #56	; 0x38
 8008c70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c72:	e0c6      	b.n	8008e02 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da17      	bge.n	8008caa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d109      	bne.n	8008c9a <prvProcessReceivedCommands+0x2e>
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e7fe      	b.n	8008c98 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca0:	6850      	ldr	r0, [r2, #4]
 8008ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca4:	6892      	ldr	r2, [r2, #8]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f2c0 80a7 	blt.w	8008e00 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f9ae 	bl	8007024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cc8:	463b      	mov	r3, r7
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff ff6c 	bl	8008ba8 <prvSampleTimeNow>
 8008cd0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b09      	cmp	r3, #9
 8008cd6:	f200 8094 	bhi.w	8008e02 <prvProcessReceivedCommands+0x196>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <prvProcessReceivedCommands+0x74>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d7b 	.word	0x08008d7b
 8008cf0:	08008d8f 	.word	0x08008d8f
 8008cf4:	08008dd7 	.word	0x08008dd7
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d09 	.word	0x08008d09
 8008d00:	08008d7b 	.word	0x08008d7b
 8008d04:	08008d8f 	.word	0x08008d8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d0e:	f043 0301 	orr.w	r3, r3, #1
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	18d1      	adds	r1, r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d28:	f7ff ff5e 	bl	8008be8 <prvInsertTimerInActiveList>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d067      	beq.n	8008e02 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05c      	beq.n	8008e02 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	441a      	add	r2, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5a:	f7ff fe09 	bl	8008970 <xTimerGenericCommand>
 8008d5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d14d      	bne.n	8008e02 <prvProcessReceivedCommands+0x196>
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	61bb      	str	r3, [r7, #24]
 8008d78:	e7fe      	b.n	8008d78 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d8c:	e039      	b.n	8008e02 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d109      	bne.n	8008dc2 <prvProcessReceivedCommands+0x156>
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	e7fe      	b.n	8008dc0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	699a      	ldr	r2, [r3, #24]
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	18d1      	adds	r1, r2, r3
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd0:	f7ff ff0a 	bl	8008be8 <prvInsertTimerInActiveList>
					break;
 8008dd4:	e015      	b.n	8008e02 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d103      	bne.n	8008dec <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de6:	f000 fbc5 	bl	8009574 <vPortFree>
 8008dea:	e00a      	b.n	8008e02 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008dfe:	e000      	b.n	8008e02 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e02:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <prvProcessReceivedCommands+0x1b4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	1d39      	adds	r1, r7, #4
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fbc0 	bl	8007590 <xQueueReceive>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f47f af2e 	bne.w	8008c74 <prvProcessReceivedCommands+0x8>
	}
}
 8008e18:	bf00      	nop
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000cd4 	.word	0x20000cd4

08008e24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e2a:	e047      	b.n	8008ebc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e2c:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e36:	4b2b      	ldr	r3, [pc, #172]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe f8ed 	bl	8007024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d02d      	beq.n	8008ebc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4413      	add	r3, r2
 8008e68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d90e      	bls.n	8008e90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e7e:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fe f892 	bl	8006fb2 <vListInsert>
 8008e8e:	e015      	b.n	8008ebc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e90:	2300      	movs	r3, #0
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	2300      	movs	r3, #0
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff fd68 	bl	8008970 <xTimerGenericCommand>
 8008ea0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <prvSwitchTimerLists+0x98>
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	e7fe      	b.n	8008eba <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ebc:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1b2      	bne.n	8008e2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <prvSwitchTimerLists+0xc4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008ed2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ed4:	4a04      	ldr	r2, [pc, #16]	; (8008ee8 <prvSwitchTimerLists+0xc4>)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	6013      	str	r3, [r2, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000ccc 	.word	0x20000ccc
 8008ee8:	20000cd0 	.word	0x20000cd0

08008eec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ef2:	f000 f963 	bl	80091bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ef6:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d120      	bne.n	8008f40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008efe:	4814      	ldr	r0, [pc, #80]	; (8008f50 <prvCheckForValidListAndQueue+0x64>)
 8008f00:	f7fe f806 	bl	8006f10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f04:	4813      	ldr	r0, [pc, #76]	; (8008f54 <prvCheckForValidListAndQueue+0x68>)
 8008f06:	f7fe f803 	bl	8006f10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <prvCheckForValidListAndQueue+0x6c>)
 8008f0c:	4a10      	ldr	r2, [pc, #64]	; (8008f50 <prvCheckForValidListAndQueue+0x64>)
 8008f0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f10:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <prvCheckForValidListAndQueue+0x70>)
 8008f12:	4a10      	ldr	r2, [pc, #64]	; (8008f54 <prvCheckForValidListAndQueue+0x68>)
 8008f14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f16:	2300      	movs	r3, #0
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <prvCheckForValidListAndQueue+0x74>)
 8008f1c:	4a11      	ldr	r2, [pc, #68]	; (8008f64 <prvCheckForValidListAndQueue+0x78>)
 8008f1e:	2110      	movs	r1, #16
 8008f20:	200a      	movs	r0, #10
 8008f22:	f7fe f911 	bl	8007148 <xQueueGenericCreateStatic>
 8008f26:	4602      	mov	r2, r0
 8008f28:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008f2a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	490b      	ldr	r1, [pc, #44]	; (8008f68 <prvCheckForValidListAndQueue+0x7c>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe fd14 	bl	8007968 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f40:	f000 f96a 	bl	8009218 <vPortExitCritical>
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000cd4 	.word	0x20000cd4
 8008f50:	20000ca4 	.word	0x20000ca4
 8008f54:	20000cb8 	.word	0x20000cb8
 8008f58:	20000ccc 	.word	0x20000ccc
 8008f5c:	20000cd0 	.word	0x20000cd0
 8008f60:	20000d80 	.word	0x20000d80
 8008f64:	20000ce0 	.word	0x20000ce0
 8008f68:	0800a314 	.word	0x0800a314

08008f6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3b04      	subs	r3, #4
 8008f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f023 0201 	bic.w	r2, r3, #1
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3b04      	subs	r3, #4
 8008f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f9c:	4a0c      	ldr	r2, [pc, #48]	; (8008fd0 <pxPortInitialiseStack+0x64>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3b14      	subs	r3, #20
 8008fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f06f 0202 	mvn.w	r2, #2
 8008fba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3b20      	subs	r3, #32
 8008fc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	08008fd5 	.word	0x08008fd5

08008fd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fde:	4b11      	ldr	r3, [pc, #68]	; (8009024 <prvTaskExitError+0x50>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe6:	d009      	beq.n	8008ffc <prvTaskExitError+0x28>
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e7fe      	b.n	8008ffa <prvTaskExitError+0x26>
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800900e:	bf00      	nop
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0fc      	beq.n	8009010 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000010 	.word	0x20000010
	...

08009030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <pxCurrentTCBConst2>)
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	6808      	ldr	r0, [r1, #0]
 8009036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	f380 8809 	msr	PSP, r0
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f04f 0000 	mov.w	r0, #0
 8009046:	f380 8811 	msr	BASEPRI, r0
 800904a:	4770      	bx	lr
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst2>:
 8009050:	200007a4 	.word	0x200007a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009058:	4808      	ldr	r0, [pc, #32]	; (800907c <prvPortStartFirstTask+0x24>)
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	6800      	ldr	r0, [r0, #0]
 800905e:	f380 8808 	msr	MSP, r0
 8009062:	f04f 0000 	mov.w	r0, #0
 8009066:	f380 8814 	msr	CONTROL, r0
 800906a:	b662      	cpsie	i
 800906c:	b661      	cpsie	f
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	df00      	svc	0
 8009078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800907a:	bf00      	nop
 800907c:	e000ed08 	.word	0xe000ed08

08009080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009086:	4b44      	ldr	r3, [pc, #272]	; (8009198 <xPortStartScheduler+0x118>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a44      	ldr	r2, [pc, #272]	; (800919c <xPortStartScheduler+0x11c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d109      	bne.n	80090a4 <xPortStartScheduler+0x24>
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	613b      	str	r3, [r7, #16]
 80090a2:	e7fe      	b.n	80090a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090a4:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <xPortStartScheduler+0x118>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <xPortStartScheduler+0x120>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d109      	bne.n	80090c2 <xPortStartScheduler+0x42>
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e7fe      	b.n	80090c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090c2:	4b38      	ldr	r3, [pc, #224]	; (80091a4 <xPortStartScheduler+0x124>)
 80090c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	4b30      	ldr	r3, [pc, #192]	; (80091a8 <xPortStartScheduler+0x128>)
 80090e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090ea:	4b30      	ldr	r3, [pc, #192]	; (80091ac <xPortStartScheduler+0x12c>)
 80090ec:	2207      	movs	r2, #7
 80090ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090f0:	e009      	b.n	8009106 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80090f2:	4b2e      	ldr	r3, [pc, #184]	; (80091ac <xPortStartScheduler+0x12c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	4a2c      	ldr	r2, [pc, #176]	; (80091ac <xPortStartScheduler+0x12c>)
 80090fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	b2db      	uxtb	r3, r3
 8009104:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910e:	2b80      	cmp	r3, #128	; 0x80
 8009110:	d0ef      	beq.n	80090f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009112:	4b26      	ldr	r3, [pc, #152]	; (80091ac <xPortStartScheduler+0x12c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f1c3 0307 	rsb	r3, r3, #7
 800911a:	2b04      	cmp	r3, #4
 800911c:	d009      	beq.n	8009132 <xPortStartScheduler+0xb2>
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	e7fe      	b.n	8009130 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009132:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <xPortStartScheduler+0x12c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <xPortStartScheduler+0x12c>)
 800913a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <xPortStartScheduler+0x12c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009144:	4a19      	ldr	r2, [pc, #100]	; (80091ac <xPortStartScheduler+0x12c>)
 8009146:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	b2da      	uxtb	r2, r3
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009150:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <xPortStartScheduler+0x130>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <xPortStartScheduler+0x130>)
 8009156:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800915a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800915c:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <xPortStartScheduler+0x130>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <xPortStartScheduler+0x130>)
 8009162:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009166:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009168:	f000 f8d6 	bl	8009318 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800916c:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <xPortStartScheduler+0x134>)
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009172:	f000 f8f5 	bl	8009360 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <xPortStartScheduler+0x138>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a0f      	ldr	r2, [pc, #60]	; (80091b8 <xPortStartScheduler+0x138>)
 800917c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009180:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009182:	f7ff ff69 	bl	8009058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009186:	f7ff f86d 	bl	8008264 <vTaskSwitchContext>
	prvTaskExitError();
 800918a:	f7ff ff23 	bl	8008fd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000ed00 	.word	0xe000ed00
 800919c:	410fc271 	.word	0x410fc271
 80091a0:	410fc270 	.word	0x410fc270
 80091a4:	e000e400 	.word	0xe000e400
 80091a8:	20000dd0 	.word	0x20000dd0
 80091ac:	20000dd4 	.word	0x20000dd4
 80091b0:	e000ed20 	.word	0xe000ed20
 80091b4:	20000010 	.word	0x20000010
 80091b8:	e000ef34 	.word	0xe000ef34

080091bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091d4:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <vPortEnterCritical+0x54>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	4a0d      	ldr	r2, [pc, #52]	; (8009210 <vPortEnterCritical+0x54>)
 80091dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091de:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <vPortEnterCritical+0x54>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d10e      	bne.n	8009204 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <vPortEnterCritical+0x58>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <vPortEnterCritical+0x48>
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	e7fe      	b.n	8009202 <vPortEnterCritical+0x46>
	}
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	20000010 	.word	0x20000010
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800921e:	4b11      	ldr	r3, [pc, #68]	; (8009264 <vPortExitCritical+0x4c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <vPortExitCritical+0x22>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	e7fe      	b.n	8009238 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <vPortExitCritical+0x4c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3b01      	subs	r3, #1
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <vPortExitCritical+0x4c>)
 8009242:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <vPortExitCritical+0x4c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <vPortExitCritical+0x3e>
 800924c:	2300      	movs	r3, #0
 800924e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000010 	.word	0x20000010
	...

08009270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009270:	f3ef 8009 	mrs	r0, PSP
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <pxCurrentTCBConst>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	f01e 0f10 	tst.w	lr, #16
 8009280:	bf08      	it	eq
 8009282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	6010      	str	r0, [r2, #0]
 800928c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009294:	f380 8811 	msr	BASEPRI, r0
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f7fe ffe0 	bl	8008264 <vTaskSwitchContext>
 80092a4:	f04f 0000 	mov.w	r0, #0
 80092a8:	f380 8811 	msr	BASEPRI, r0
 80092ac:	bc09      	pop	{r0, r3}
 80092ae:	6819      	ldr	r1, [r3, #0]
 80092b0:	6808      	ldr	r0, [r1, #0]
 80092b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b6:	f01e 0f10 	tst.w	lr, #16
 80092ba:	bf08      	it	eq
 80092bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092c0:	f380 8809 	msr	PSP, r0
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	f3af 8000 	nop.w

080092d0 <pxCurrentTCBConst>:
 80092d0:	200007a4 	.word	0x200007a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092f0:	f7fe ff00 	bl	80080f4 <xTaskIncrementTick>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <SysTick_Handler+0x3c>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800931c:	4b0b      	ldr	r3, [pc, #44]	; (800934c <vPortSetupTimerInterrupt+0x34>)
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009322:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <vPortSetupTimerInterrupt+0x38>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <vPortSetupTimerInterrupt+0x3c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a0a      	ldr	r2, [pc, #40]	; (8009358 <vPortSetupTimerInterrupt+0x40>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	099b      	lsrs	r3, r3, #6
 8009334:	4a09      	ldr	r2, [pc, #36]	; (800935c <vPortSetupTimerInterrupt+0x44>)
 8009336:	3b01      	subs	r3, #1
 8009338:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800933a:	4b04      	ldr	r3, [pc, #16]	; (800934c <vPortSetupTimerInterrupt+0x34>)
 800933c:	2207      	movs	r2, #7
 800933e:	601a      	str	r2, [r3, #0]
}
 8009340:	bf00      	nop
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	e000e010 	.word	0xe000e010
 8009350:	e000e018 	.word	0xe000e018
 8009354:	20000000 	.word	0x20000000
 8009358:	10624dd3 	.word	0x10624dd3
 800935c:	e000e014 	.word	0xe000e014

08009360 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009360:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009370 <vPortEnableVFP+0x10>
 8009364:	6801      	ldr	r1, [r0, #0]
 8009366:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800936a:	6001      	str	r1, [r0, #0]
 800936c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800936e:	bf00      	nop
 8009370:	e000ed88 	.word	0xe000ed88

08009374 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800937a:	f3ef 8305 	mrs	r3, IPSR
 800937e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b0f      	cmp	r3, #15
 8009384:	d913      	bls.n	80093ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009386:	4a16      	ldr	r2, [pc, #88]	; (80093e0 <vPortValidateInterruptPriority+0x6c>)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009390:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <vPortValidateInterruptPriority+0x70>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	7afa      	ldrb	r2, [r7, #11]
 8009396:	429a      	cmp	r2, r3
 8009398:	d209      	bcs.n	80093ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e7fe      	b.n	80093ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093ae:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <vPortValidateInterruptPriority+0x74>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <vPortValidateInterruptPriority+0x78>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d909      	bls.n	80093d2 <vPortValidateInterruptPriority+0x5e>
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	e7fe      	b.n	80093d0 <vPortValidateInterruptPriority+0x5c>
	}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	e000e3f0 	.word	0xe000e3f0
 80093e4:	20000dd0 	.word	0x20000dd0
 80093e8:	e000ed0c 	.word	0xe000ed0c
 80093ec:	20000dd4 	.word	0x20000dd4

080093f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093fc:	f7fe fdc0 	bl	8007f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009400:	4b57      	ldr	r3, [pc, #348]	; (8009560 <pvPortMalloc+0x170>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009408:	f000 f90c 	bl	8009624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800940c:	4b55      	ldr	r3, [pc, #340]	; (8009564 <pvPortMalloc+0x174>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4013      	ands	r3, r2
 8009414:	2b00      	cmp	r3, #0
 8009416:	f040 808c 	bne.w	8009532 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01c      	beq.n	800945a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009420:	2208      	movs	r2, #8
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4413      	add	r3, r2
 8009426:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	2b00      	cmp	r3, #0
 8009430:	d013      	beq.n	800945a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f023 0307 	bic.w	r3, r3, #7
 8009438:	3308      	adds	r3, #8
 800943a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <pvPortMalloc+0x6a>
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e7fe      	b.n	8009458 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d068      	beq.n	8009532 <pvPortMalloc+0x142>
 8009460:	4b41      	ldr	r3, [pc, #260]	; (8009568 <pvPortMalloc+0x178>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d863      	bhi.n	8009532 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800946a:	4b40      	ldr	r3, [pc, #256]	; (800956c <pvPortMalloc+0x17c>)
 800946c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800946e:	4b3f      	ldr	r3, [pc, #252]	; (800956c <pvPortMalloc+0x17c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009474:	e004      	b.n	8009480 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d903      	bls.n	8009492 <pvPortMalloc+0xa2>
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f1      	bne.n	8009476 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009492:	4b33      	ldr	r3, [pc, #204]	; (8009560 <pvPortMalloc+0x170>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009498:	429a      	cmp	r2, r3
 800949a:	d04a      	beq.n	8009532 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2208      	movs	r2, #8
 80094a2:	4413      	add	r3, r2
 80094a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	2308      	movs	r3, #8
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d91e      	bls.n	80094fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4413      	add	r3, r2
 80094c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <pvPortMalloc+0xf4>
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	613b      	str	r3, [r7, #16]
 80094e2:	e7fe      	b.n	80094e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094f6:	69b8      	ldr	r0, [r7, #24]
 80094f8:	f000 f8f6 	bl	80096e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094fc:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <pvPortMalloc+0x178>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	4a18      	ldr	r2, [pc, #96]	; (8009568 <pvPortMalloc+0x178>)
 8009508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800950a:	4b17      	ldr	r3, [pc, #92]	; (8009568 <pvPortMalloc+0x178>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b18      	ldr	r3, [pc, #96]	; (8009570 <pvPortMalloc+0x180>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d203      	bcs.n	800951e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <pvPortMalloc+0x178>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a15      	ldr	r2, [pc, #84]	; (8009570 <pvPortMalloc+0x180>)
 800951c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	4b10      	ldr	r3, [pc, #64]	; (8009564 <pvPortMalloc+0x174>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	431a      	orrs	r2, r3
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009532:	f7fe fd33 	bl	8007f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <pvPortMalloc+0x164>
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0x162>
	return pvReturn;
 8009554:	69fb      	ldr	r3, [r7, #28]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3728      	adds	r7, #40	; 0x28
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200049e0 	.word	0x200049e0
 8009564:	200049ec 	.word	0x200049ec
 8009568:	200049e4 	.word	0x200049e4
 800956c:	200049d8 	.word	0x200049d8
 8009570:	200049e8 	.word	0x200049e8

08009574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d046      	beq.n	8009614 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009586:	2308      	movs	r3, #8
 8009588:	425b      	negs	r3, r3
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4413      	add	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	4b20      	ldr	r3, [pc, #128]	; (800961c <vPortFree+0xa8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4013      	ands	r3, r2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <vPortFree+0x42>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e7fe      	b.n	80095b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d009      	beq.n	80095d2 <vPortFree+0x5e>
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	60bb      	str	r3, [r7, #8]
 80095d0:	e7fe      	b.n	80095d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <vPortFree+0xa8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4013      	ands	r3, r2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d019      	beq.n	8009614 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d115      	bne.n	8009614 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <vPortFree+0xa8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	43db      	mvns	r3, r3
 80095f2:	401a      	ands	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095f8:	f7fe fcc2 	bl	8007f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <vPortFree+0xac>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4413      	add	r3, r2
 8009606:	4a06      	ldr	r2, [pc, #24]	; (8009620 <vPortFree+0xac>)
 8009608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800960a:	6938      	ldr	r0, [r7, #16]
 800960c:	f000 f86c 	bl	80096e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009610:	f7fe fcc4 	bl	8007f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009614:	bf00      	nop
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	200049ec 	.word	0x200049ec
 8009620:	200049e4 	.word	0x200049e4

08009624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800962a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800962e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009630:	4b27      	ldr	r3, [pc, #156]	; (80096d0 <prvHeapInit+0xac>)
 8009632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3307      	adds	r3, #7
 8009642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0307 	bic.w	r3, r3, #7
 800964a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	4a1f      	ldr	r2, [pc, #124]	; (80096d0 <prvHeapInit+0xac>)
 8009654:	4413      	add	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800965c:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <prvHeapInit+0xb0>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <prvHeapInit+0xb0>)
 8009664:	2200      	movs	r2, #0
 8009666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009670:	2208      	movs	r2, #8
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <prvHeapInit+0xb4>)
 8009684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009686:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <prvHeapInit+0xb4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2200      	movs	r2, #0
 800968c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800968e:	4b12      	ldr	r3, [pc, #72]	; (80096d8 <prvHeapInit+0xb4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096a4:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <prvHeapInit+0xb4>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <prvHeapInit+0xb8>)
 80096b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4a09      	ldr	r2, [pc, #36]	; (80096e0 <prvHeapInit+0xbc>)
 80096ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096bc:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <prvHeapInit+0xc0>)
 80096be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	20000dd8 	.word	0x20000dd8
 80096d4:	200049d8 	.word	0x200049d8
 80096d8:	200049e0 	.word	0x200049e0
 80096dc:	200049e8 	.word	0x200049e8
 80096e0:	200049e4 	.word	0x200049e4
 80096e4:	200049ec 	.word	0x200049ec

080096e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096f0:	4b28      	ldr	r3, [pc, #160]	; (8009794 <prvInsertBlockIntoFreeList+0xac>)
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e002      	b.n	80096fc <prvInsertBlockIntoFreeList+0x14>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d8f7      	bhi.n	80096f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4413      	add	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d108      	bne.n	800972a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	441a      	add	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	441a      	add	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d118      	bne.n	8009770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <prvInsertBlockIntoFreeList+0xb0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d00d      	beq.n	8009766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	441a      	add	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	e008      	b.n	8009778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <prvInsertBlockIntoFreeList+0xb0>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e003      	b.n	8009778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d002      	beq.n	8009786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	200049d8 	.word	0x200049d8
 8009798:	200049e0 	.word	0x200049e0

0800979c <__errno>:
 800979c:	4b01      	ldr	r3, [pc, #4]	; (80097a4 <__errno+0x8>)
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000014 	.word	0x20000014

080097a8 <__libc_init_array>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	4e0d      	ldr	r6, [pc, #52]	; (80097e0 <__libc_init_array+0x38>)
 80097ac:	4c0d      	ldr	r4, [pc, #52]	; (80097e4 <__libc_init_array+0x3c>)
 80097ae:	1ba4      	subs	r4, r4, r6
 80097b0:	10a4      	asrs	r4, r4, #2
 80097b2:	2500      	movs	r5, #0
 80097b4:	42a5      	cmp	r5, r4
 80097b6:	d109      	bne.n	80097cc <__libc_init_array+0x24>
 80097b8:	4e0b      	ldr	r6, [pc, #44]	; (80097e8 <__libc_init_array+0x40>)
 80097ba:	4c0c      	ldr	r4, [pc, #48]	; (80097ec <__libc_init_array+0x44>)
 80097bc:	f000 fc30 	bl	800a020 <_init>
 80097c0:	1ba4      	subs	r4, r4, r6
 80097c2:	10a4      	asrs	r4, r4, #2
 80097c4:	2500      	movs	r5, #0
 80097c6:	42a5      	cmp	r5, r4
 80097c8:	d105      	bne.n	80097d6 <__libc_init_array+0x2e>
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097d0:	4798      	blx	r3
 80097d2:	3501      	adds	r5, #1
 80097d4:	e7ee      	b.n	80097b4 <__libc_init_array+0xc>
 80097d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097da:	4798      	blx	r3
 80097dc:	3501      	adds	r5, #1
 80097de:	e7f2      	b.n	80097c6 <__libc_init_array+0x1e>
 80097e0:	0800a3a0 	.word	0x0800a3a0
 80097e4:	0800a3a0 	.word	0x0800a3a0
 80097e8:	0800a3a0 	.word	0x0800a3a0
 80097ec:	0800a3a4 	.word	0x0800a3a4

080097f0 <memcpy>:
 80097f0:	b510      	push	{r4, lr}
 80097f2:	1e43      	subs	r3, r0, #1
 80097f4:	440a      	add	r2, r1
 80097f6:	4291      	cmp	r1, r2
 80097f8:	d100      	bne.n	80097fc <memcpy+0xc>
 80097fa:	bd10      	pop	{r4, pc}
 80097fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009804:	e7f7      	b.n	80097f6 <memcpy+0x6>

08009806 <memset>:
 8009806:	4402      	add	r2, r0
 8009808:	4603      	mov	r3, r0
 800980a:	4293      	cmp	r3, r2
 800980c:	d100      	bne.n	8009810 <memset+0xa>
 800980e:	4770      	bx	lr
 8009810:	f803 1b01 	strb.w	r1, [r3], #1
 8009814:	e7f9      	b.n	800980a <memset+0x4>
	...

08009818 <siprintf>:
 8009818:	b40e      	push	{r1, r2, r3}
 800981a:	b500      	push	{lr}
 800981c:	b09c      	sub	sp, #112	; 0x70
 800981e:	ab1d      	add	r3, sp, #116	; 0x74
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	9006      	str	r0, [sp, #24]
 8009824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <siprintf+0x38>)
 800982a:	9107      	str	r1, [sp, #28]
 800982c:	9104      	str	r1, [sp, #16]
 800982e:	4909      	ldr	r1, [pc, #36]	; (8009854 <siprintf+0x3c>)
 8009830:	f853 2b04 	ldr.w	r2, [r3], #4
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	a902      	add	r1, sp, #8
 800983c:	f000 f86e 	bl	800991c <_svfiprintf_r>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	b01c      	add	sp, #112	; 0x70
 8009848:	f85d eb04 	ldr.w	lr, [sp], #4
 800984c:	b003      	add	sp, #12
 800984e:	4770      	bx	lr
 8009850:	20000014 	.word	0x20000014
 8009854:	ffff0208 	.word	0xffff0208

08009858 <strcpy>:
 8009858:	4603      	mov	r3, r0
 800985a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800985e:	f803 2b01 	strb.w	r2, [r3], #1
 8009862:	2a00      	cmp	r2, #0
 8009864:	d1f9      	bne.n	800985a <strcpy+0x2>
 8009866:	4770      	bx	lr

08009868 <__ssputs_r>:
 8009868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	688e      	ldr	r6, [r1, #8]
 800986e:	429e      	cmp	r6, r3
 8009870:	4682      	mov	sl, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4690      	mov	r8, r2
 8009876:	4699      	mov	r9, r3
 8009878:	d837      	bhi.n	80098ea <__ssputs_r+0x82>
 800987a:	898a      	ldrh	r2, [r1, #12]
 800987c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009880:	d031      	beq.n	80098e6 <__ssputs_r+0x7e>
 8009882:	6825      	ldr	r5, [r4, #0]
 8009884:	6909      	ldr	r1, [r1, #16]
 8009886:	1a6f      	subs	r7, r5, r1
 8009888:	6965      	ldr	r5, [r4, #20]
 800988a:	2302      	movs	r3, #2
 800988c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009890:	fb95 f5f3 	sdiv	r5, r5, r3
 8009894:	f109 0301 	add.w	r3, r9, #1
 8009898:	443b      	add	r3, r7
 800989a:	429d      	cmp	r5, r3
 800989c:	bf38      	it	cc
 800989e:	461d      	movcc	r5, r3
 80098a0:	0553      	lsls	r3, r2, #21
 80098a2:	d530      	bpl.n	8009906 <__ssputs_r+0x9e>
 80098a4:	4629      	mov	r1, r5
 80098a6:	f000 fb21 	bl	8009eec <_malloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	b950      	cbnz	r0, 80098c4 <__ssputs_r+0x5c>
 80098ae:	230c      	movs	r3, #12
 80098b0:	f8ca 3000 	str.w	r3, [sl]
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c4:	463a      	mov	r2, r7
 80098c6:	6921      	ldr	r1, [r4, #16]
 80098c8:	f7ff ff92 	bl	80097f0 <memcpy>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	6126      	str	r6, [r4, #16]
 80098da:	6165      	str	r5, [r4, #20]
 80098dc:	443e      	add	r6, r7
 80098de:	1bed      	subs	r5, r5, r7
 80098e0:	6026      	str	r6, [r4, #0]
 80098e2:	60a5      	str	r5, [r4, #8]
 80098e4:	464e      	mov	r6, r9
 80098e6:	454e      	cmp	r6, r9
 80098e8:	d900      	bls.n	80098ec <__ssputs_r+0x84>
 80098ea:	464e      	mov	r6, r9
 80098ec:	4632      	mov	r2, r6
 80098ee:	4641      	mov	r1, r8
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	f000 fa93 	bl	8009e1c <memmove>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	60a3      	str	r3, [r4, #8]
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	441e      	add	r6, r3
 8009900:	6026      	str	r6, [r4, #0]
 8009902:	2000      	movs	r0, #0
 8009904:	e7dc      	b.n	80098c0 <__ssputs_r+0x58>
 8009906:	462a      	mov	r2, r5
 8009908:	f000 fb4a 	bl	8009fa0 <_realloc_r>
 800990c:	4606      	mov	r6, r0
 800990e:	2800      	cmp	r0, #0
 8009910:	d1e2      	bne.n	80098d8 <__ssputs_r+0x70>
 8009912:	6921      	ldr	r1, [r4, #16]
 8009914:	4650      	mov	r0, sl
 8009916:	f000 fa9b 	bl	8009e50 <_free_r>
 800991a:	e7c8      	b.n	80098ae <__ssputs_r+0x46>

0800991c <_svfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	461d      	mov	r5, r3
 8009922:	898b      	ldrh	r3, [r1, #12]
 8009924:	061f      	lsls	r7, r3, #24
 8009926:	b09d      	sub	sp, #116	; 0x74
 8009928:	4680      	mov	r8, r0
 800992a:	460c      	mov	r4, r1
 800992c:	4616      	mov	r6, r2
 800992e:	d50f      	bpl.n	8009950 <_svfiprintf_r+0x34>
 8009930:	690b      	ldr	r3, [r1, #16]
 8009932:	b96b      	cbnz	r3, 8009950 <_svfiprintf_r+0x34>
 8009934:	2140      	movs	r1, #64	; 0x40
 8009936:	f000 fad9 	bl	8009eec <_malloc_r>
 800993a:	6020      	str	r0, [r4, #0]
 800993c:	6120      	str	r0, [r4, #16]
 800993e:	b928      	cbnz	r0, 800994c <_svfiprintf_r+0x30>
 8009940:	230c      	movs	r3, #12
 8009942:	f8c8 3000 	str.w	r3, [r8]
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	e0c8      	b.n	8009ade <_svfiprintf_r+0x1c2>
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	6163      	str	r3, [r4, #20]
 8009950:	2300      	movs	r3, #0
 8009952:	9309      	str	r3, [sp, #36]	; 0x24
 8009954:	2320      	movs	r3, #32
 8009956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800995a:	2330      	movs	r3, #48	; 0x30
 800995c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009960:	9503      	str	r5, [sp, #12]
 8009962:	f04f 0b01 	mov.w	fp, #1
 8009966:	4637      	mov	r7, r6
 8009968:	463d      	mov	r5, r7
 800996a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800996e:	b10b      	cbz	r3, 8009974 <_svfiprintf_r+0x58>
 8009970:	2b25      	cmp	r3, #37	; 0x25
 8009972:	d13e      	bne.n	80099f2 <_svfiprintf_r+0xd6>
 8009974:	ebb7 0a06 	subs.w	sl, r7, r6
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x76>
 800997a:	4653      	mov	r3, sl
 800997c:	4632      	mov	r2, r6
 800997e:	4621      	mov	r1, r4
 8009980:	4640      	mov	r0, r8
 8009982:	f7ff ff71 	bl	8009868 <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80a4 	beq.w	8009ad4 <_svfiprintf_r+0x1b8>
 800998c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998e:	4453      	add	r3, sl
 8009990:	9309      	str	r3, [sp, #36]	; 0x24
 8009992:	783b      	ldrb	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 809d 	beq.w	8009ad4 <_svfiprintf_r+0x1b8>
 800999a:	2300      	movs	r3, #0
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099ac:	931a      	str	r3, [sp, #104]	; 0x68
 80099ae:	462f      	mov	r7, r5
 80099b0:	2205      	movs	r2, #5
 80099b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099b6:	4850      	ldr	r0, [pc, #320]	; (8009af8 <_svfiprintf_r+0x1dc>)
 80099b8:	f7f6 fc2a 	bl	8000210 <memchr>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	b9d0      	cbnz	r0, 80099f6 <_svfiprintf_r+0xda>
 80099c0:	06d9      	lsls	r1, r3, #27
 80099c2:	bf44      	itt	mi
 80099c4:	2220      	movmi	r2, #32
 80099c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ca:	071a      	lsls	r2, r3, #28
 80099cc:	bf44      	itt	mi
 80099ce:	222b      	movmi	r2, #43	; 0x2b
 80099d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099d4:	782a      	ldrb	r2, [r5, #0]
 80099d6:	2a2a      	cmp	r2, #42	; 0x2a
 80099d8:	d015      	beq.n	8009a06 <_svfiprintf_r+0xea>
 80099da:	9a07      	ldr	r2, [sp, #28]
 80099dc:	462f      	mov	r7, r5
 80099de:	2000      	movs	r0, #0
 80099e0:	250a      	movs	r5, #10
 80099e2:	4639      	mov	r1, r7
 80099e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099e8:	3b30      	subs	r3, #48	; 0x30
 80099ea:	2b09      	cmp	r3, #9
 80099ec:	d94d      	bls.n	8009a8a <_svfiprintf_r+0x16e>
 80099ee:	b1b8      	cbz	r0, 8009a20 <_svfiprintf_r+0x104>
 80099f0:	e00f      	b.n	8009a12 <_svfiprintf_r+0xf6>
 80099f2:	462f      	mov	r7, r5
 80099f4:	e7b8      	b.n	8009968 <_svfiprintf_r+0x4c>
 80099f6:	4a40      	ldr	r2, [pc, #256]	; (8009af8 <_svfiprintf_r+0x1dc>)
 80099f8:	1a80      	subs	r0, r0, r2
 80099fa:	fa0b f000 	lsl.w	r0, fp, r0
 80099fe:	4318      	orrs	r0, r3
 8009a00:	9004      	str	r0, [sp, #16]
 8009a02:	463d      	mov	r5, r7
 8009a04:	e7d3      	b.n	80099ae <_svfiprintf_r+0x92>
 8009a06:	9a03      	ldr	r2, [sp, #12]
 8009a08:	1d11      	adds	r1, r2, #4
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	9103      	str	r1, [sp, #12]
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	db01      	blt.n	8009a16 <_svfiprintf_r+0xfa>
 8009a12:	9207      	str	r2, [sp, #28]
 8009a14:	e004      	b.n	8009a20 <_svfiprintf_r+0x104>
 8009a16:	4252      	negs	r2, r2
 8009a18:	f043 0302 	orr.w	r3, r3, #2
 8009a1c:	9207      	str	r2, [sp, #28]
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	783b      	ldrb	r3, [r7, #0]
 8009a22:	2b2e      	cmp	r3, #46	; 0x2e
 8009a24:	d10c      	bne.n	8009a40 <_svfiprintf_r+0x124>
 8009a26:	787b      	ldrb	r3, [r7, #1]
 8009a28:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2a:	d133      	bne.n	8009a94 <_svfiprintf_r+0x178>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	9203      	str	r2, [sp, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bfb8      	it	lt
 8009a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a3c:	3702      	adds	r7, #2
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	4d2e      	ldr	r5, [pc, #184]	; (8009afc <_svfiprintf_r+0x1e0>)
 8009a42:	7839      	ldrb	r1, [r7, #0]
 8009a44:	2203      	movs	r2, #3
 8009a46:	4628      	mov	r0, r5
 8009a48:	f7f6 fbe2 	bl	8000210 <memchr>
 8009a4c:	b138      	cbz	r0, 8009a5e <_svfiprintf_r+0x142>
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	1b40      	subs	r0, r0, r5
 8009a52:	fa03 f000 	lsl.w	r0, r3, r0
 8009a56:	9b04      	ldr	r3, [sp, #16]
 8009a58:	4303      	orrs	r3, r0
 8009a5a:	3701      	adds	r7, #1
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	7839      	ldrb	r1, [r7, #0]
 8009a60:	4827      	ldr	r0, [pc, #156]	; (8009b00 <_svfiprintf_r+0x1e4>)
 8009a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a66:	2206      	movs	r2, #6
 8009a68:	1c7e      	adds	r6, r7, #1
 8009a6a:	f7f6 fbd1 	bl	8000210 <memchr>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d038      	beq.n	8009ae4 <_svfiprintf_r+0x1c8>
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <_svfiprintf_r+0x1e8>)
 8009a74:	bb13      	cbnz	r3, 8009abc <_svfiprintf_r+0x1a0>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	3307      	adds	r3, #7
 8009a7a:	f023 0307 	bic.w	r3, r3, #7
 8009a7e:	3308      	adds	r3, #8
 8009a80:	9303      	str	r3, [sp, #12]
 8009a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a84:	444b      	add	r3, r9
 8009a86:	9309      	str	r3, [sp, #36]	; 0x24
 8009a88:	e76d      	b.n	8009966 <_svfiprintf_r+0x4a>
 8009a8a:	fb05 3202 	mla	r2, r5, r2, r3
 8009a8e:	2001      	movs	r0, #1
 8009a90:	460f      	mov	r7, r1
 8009a92:	e7a6      	b.n	80099e2 <_svfiprintf_r+0xc6>
 8009a94:	2300      	movs	r3, #0
 8009a96:	3701      	adds	r7, #1
 8009a98:	9305      	str	r3, [sp, #20]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	250a      	movs	r5, #10
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aa4:	3a30      	subs	r2, #48	; 0x30
 8009aa6:	2a09      	cmp	r2, #9
 8009aa8:	d903      	bls.n	8009ab2 <_svfiprintf_r+0x196>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0c8      	beq.n	8009a40 <_svfiprintf_r+0x124>
 8009aae:	9105      	str	r1, [sp, #20]
 8009ab0:	e7c6      	b.n	8009a40 <_svfiprintf_r+0x124>
 8009ab2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4607      	mov	r7, r0
 8009aba:	e7f0      	b.n	8009a9e <_svfiprintf_r+0x182>
 8009abc:	ab03      	add	r3, sp, #12
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <_svfiprintf_r+0x1ec>)
 8009ac4:	a904      	add	r1, sp, #16
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f3af 8000 	nop.w
 8009acc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ad0:	4681      	mov	r9, r0
 8009ad2:	d1d6      	bne.n	8009a82 <_svfiprintf_r+0x166>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	065b      	lsls	r3, r3, #25
 8009ad8:	f53f af35 	bmi.w	8009946 <_svfiprintf_r+0x2a>
 8009adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ade:	b01d      	add	sp, #116	; 0x74
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	ab03      	add	r3, sp, #12
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <_svfiprintf_r+0x1ec>)
 8009aec:	a904      	add	r1, sp, #16
 8009aee:	4640      	mov	r0, r8
 8009af0:	f000 f882 	bl	8009bf8 <_printf_i>
 8009af4:	e7ea      	b.n	8009acc <_svfiprintf_r+0x1b0>
 8009af6:	bf00      	nop
 8009af8:	0800a364 	.word	0x0800a364
 8009afc:	0800a36a 	.word	0x0800a36a
 8009b00:	0800a36e 	.word	0x0800a36e
 8009b04:	00000000 	.word	0x00000000
 8009b08:	08009869 	.word	0x08009869

08009b0c <_printf_common>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	4691      	mov	r9, r2
 8009b12:	461f      	mov	r7, r3
 8009b14:	688a      	ldr	r2, [r1, #8]
 8009b16:	690b      	ldr	r3, [r1, #16]
 8009b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	bfb8      	it	lt
 8009b20:	4613      	movlt	r3, r2
 8009b22:	f8c9 3000 	str.w	r3, [r9]
 8009b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	b112      	cbz	r2, 8009b36 <_printf_common+0x2a>
 8009b30:	3301      	adds	r3, #1
 8009b32:	f8c9 3000 	str.w	r3, [r9]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	0699      	lsls	r1, r3, #26
 8009b3a:	bf42      	ittt	mi
 8009b3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b40:	3302      	addmi	r3, #2
 8009b42:	f8c9 3000 	strmi.w	r3, [r9]
 8009b46:	6825      	ldr	r5, [r4, #0]
 8009b48:	f015 0506 	ands.w	r5, r5, #6
 8009b4c:	d107      	bne.n	8009b5e <_printf_common+0x52>
 8009b4e:	f104 0a19 	add.w	sl, r4, #25
 8009b52:	68e3      	ldr	r3, [r4, #12]
 8009b54:	f8d9 2000 	ldr.w	r2, [r9]
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	42ab      	cmp	r3, r5
 8009b5c:	dc28      	bgt.n	8009bb0 <_printf_common+0xa4>
 8009b5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b62:	6822      	ldr	r2, [r4, #0]
 8009b64:	3300      	adds	r3, #0
 8009b66:	bf18      	it	ne
 8009b68:	2301      	movne	r3, #1
 8009b6a:	0692      	lsls	r2, r2, #26
 8009b6c:	d42d      	bmi.n	8009bca <_printf_common+0xbe>
 8009b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b72:	4639      	mov	r1, r7
 8009b74:	4630      	mov	r0, r6
 8009b76:	47c0      	blx	r8
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d020      	beq.n	8009bbe <_printf_common+0xb2>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	68e5      	ldr	r5, [r4, #12]
 8009b80:	f8d9 2000 	ldr.w	r2, [r9]
 8009b84:	f003 0306 	and.w	r3, r3, #6
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	bf08      	it	eq
 8009b8c:	1aad      	subeq	r5, r5, r2
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	bf0c      	ite	eq
 8009b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b98:	2500      	movne	r5, #0
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	bfc4      	itt	gt
 8009b9e:	1a9b      	subgt	r3, r3, r2
 8009ba0:	18ed      	addgt	r5, r5, r3
 8009ba2:	f04f 0900 	mov.w	r9, #0
 8009ba6:	341a      	adds	r4, #26
 8009ba8:	454d      	cmp	r5, r9
 8009baa:	d11a      	bne.n	8009be2 <_printf_common+0xd6>
 8009bac:	2000      	movs	r0, #0
 8009bae:	e008      	b.n	8009bc2 <_printf_common+0xb6>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	47c0      	blx	r8
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d103      	bne.n	8009bc6 <_printf_common+0xba>
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc6:	3501      	adds	r5, #1
 8009bc8:	e7c3      	b.n	8009b52 <_printf_common+0x46>
 8009bca:	18e1      	adds	r1, r4, r3
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	2030      	movs	r0, #48	; 0x30
 8009bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd4:	4422      	add	r2, r4
 8009bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bde:	3302      	adds	r3, #2
 8009be0:	e7c5      	b.n	8009b6e <_printf_common+0x62>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4622      	mov	r2, r4
 8009be6:	4639      	mov	r1, r7
 8009be8:	4630      	mov	r0, r6
 8009bea:	47c0      	blx	r8
 8009bec:	3001      	adds	r0, #1
 8009bee:	d0e6      	beq.n	8009bbe <_printf_common+0xb2>
 8009bf0:	f109 0901 	add.w	r9, r9, #1
 8009bf4:	e7d8      	b.n	8009ba8 <_printf_common+0x9c>
	...

08009bf8 <_printf_i>:
 8009bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c00:	460c      	mov	r4, r1
 8009c02:	7e09      	ldrb	r1, [r1, #24]
 8009c04:	b085      	sub	sp, #20
 8009c06:	296e      	cmp	r1, #110	; 0x6e
 8009c08:	4617      	mov	r7, r2
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	4698      	mov	r8, r3
 8009c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c10:	f000 80b3 	beq.w	8009d7a <_printf_i+0x182>
 8009c14:	d822      	bhi.n	8009c5c <_printf_i+0x64>
 8009c16:	2963      	cmp	r1, #99	; 0x63
 8009c18:	d036      	beq.n	8009c88 <_printf_i+0x90>
 8009c1a:	d80a      	bhi.n	8009c32 <_printf_i+0x3a>
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	f000 80b9 	beq.w	8009d94 <_printf_i+0x19c>
 8009c22:	2958      	cmp	r1, #88	; 0x58
 8009c24:	f000 8083 	beq.w	8009d2e <_printf_i+0x136>
 8009c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c30:	e032      	b.n	8009c98 <_printf_i+0xa0>
 8009c32:	2964      	cmp	r1, #100	; 0x64
 8009c34:	d001      	beq.n	8009c3a <_printf_i+0x42>
 8009c36:	2969      	cmp	r1, #105	; 0x69
 8009c38:	d1f6      	bne.n	8009c28 <_printf_i+0x30>
 8009c3a:	6820      	ldr	r0, [r4, #0]
 8009c3c:	6813      	ldr	r3, [r2, #0]
 8009c3e:	0605      	lsls	r5, r0, #24
 8009c40:	f103 0104 	add.w	r1, r3, #4
 8009c44:	d52a      	bpl.n	8009c9c <_printf_i+0xa4>
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	da03      	bge.n	8009c56 <_printf_i+0x5e>
 8009c4e:	222d      	movs	r2, #45	; 0x2d
 8009c50:	425b      	negs	r3, r3
 8009c52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c56:	486f      	ldr	r0, [pc, #444]	; (8009e14 <_printf_i+0x21c>)
 8009c58:	220a      	movs	r2, #10
 8009c5a:	e039      	b.n	8009cd0 <_printf_i+0xd8>
 8009c5c:	2973      	cmp	r1, #115	; 0x73
 8009c5e:	f000 809d 	beq.w	8009d9c <_printf_i+0x1a4>
 8009c62:	d808      	bhi.n	8009c76 <_printf_i+0x7e>
 8009c64:	296f      	cmp	r1, #111	; 0x6f
 8009c66:	d020      	beq.n	8009caa <_printf_i+0xb2>
 8009c68:	2970      	cmp	r1, #112	; 0x70
 8009c6a:	d1dd      	bne.n	8009c28 <_printf_i+0x30>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	f043 0320 	orr.w	r3, r3, #32
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	e003      	b.n	8009c7e <_printf_i+0x86>
 8009c76:	2975      	cmp	r1, #117	; 0x75
 8009c78:	d017      	beq.n	8009caa <_printf_i+0xb2>
 8009c7a:	2978      	cmp	r1, #120	; 0x78
 8009c7c:	d1d4      	bne.n	8009c28 <_printf_i+0x30>
 8009c7e:	2378      	movs	r3, #120	; 0x78
 8009c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c84:	4864      	ldr	r0, [pc, #400]	; (8009e18 <_printf_i+0x220>)
 8009c86:	e055      	b.n	8009d34 <_printf_i+0x13c>
 8009c88:	6813      	ldr	r3, [r2, #0]
 8009c8a:	1d19      	adds	r1, r3, #4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6011      	str	r1, [r2, #0]
 8009c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e08c      	b.n	8009db6 <_printf_i+0x1be>
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6011      	str	r1, [r2, #0]
 8009ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ca4:	bf18      	it	ne
 8009ca6:	b21b      	sxthne	r3, r3
 8009ca8:	e7cf      	b.n	8009c4a <_printf_i+0x52>
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	1d18      	adds	r0, r3, #4
 8009cb0:	6010      	str	r0, [r2, #0]
 8009cb2:	0628      	lsls	r0, r5, #24
 8009cb4:	d501      	bpl.n	8009cba <_printf_i+0xc2>
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	e002      	b.n	8009cc0 <_printf_i+0xc8>
 8009cba:	0668      	lsls	r0, r5, #25
 8009cbc:	d5fb      	bpl.n	8009cb6 <_printf_i+0xbe>
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	4854      	ldr	r0, [pc, #336]	; (8009e14 <_printf_i+0x21c>)
 8009cc2:	296f      	cmp	r1, #111	; 0x6f
 8009cc4:	bf14      	ite	ne
 8009cc6:	220a      	movne	r2, #10
 8009cc8:	2208      	moveq	r2, #8
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cd0:	6865      	ldr	r5, [r4, #4]
 8009cd2:	60a5      	str	r5, [r4, #8]
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	f2c0 8095 	blt.w	8009e04 <_printf_i+0x20c>
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	f021 0104 	bic.w	r1, r1, #4
 8009ce0:	6021      	str	r1, [r4, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d13d      	bne.n	8009d62 <_printf_i+0x16a>
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f040 808e 	bne.w	8009e08 <_printf_i+0x210>
 8009cec:	4665      	mov	r5, ip
 8009cee:	2a08      	cmp	r2, #8
 8009cf0:	d10b      	bne.n	8009d0a <_printf_i+0x112>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	07db      	lsls	r3, r3, #31
 8009cf6:	d508      	bpl.n	8009d0a <_printf_i+0x112>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	6862      	ldr	r2, [r4, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	bfde      	ittt	le
 8009d00:	2330      	movle	r3, #48	; 0x30
 8009d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d0a:	ebac 0305 	sub.w	r3, ip, r5
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	f8cd 8000 	str.w	r8, [sp]
 8009d14:	463b      	mov	r3, r7
 8009d16:	aa03      	add	r2, sp, #12
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff fef6 	bl	8009b0c <_printf_common>
 8009d20:	3001      	adds	r0, #1
 8009d22:	d14d      	bne.n	8009dc0 <_printf_i+0x1c8>
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295
 8009d28:	b005      	add	sp, #20
 8009d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	4839      	ldr	r0, [pc, #228]	; (8009e14 <_printf_i+0x21c>)
 8009d30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d34:	6813      	ldr	r3, [r2, #0]
 8009d36:	6821      	ldr	r1, [r4, #0]
 8009d38:	1d1d      	adds	r5, r3, #4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6015      	str	r5, [r2, #0]
 8009d3e:	060a      	lsls	r2, r1, #24
 8009d40:	d50b      	bpl.n	8009d5a <_printf_i+0x162>
 8009d42:	07ca      	lsls	r2, r1, #31
 8009d44:	bf44      	itt	mi
 8009d46:	f041 0120 	orrmi.w	r1, r1, #32
 8009d4a:	6021      	strmi	r1, [r4, #0]
 8009d4c:	b91b      	cbnz	r3, 8009d56 <_printf_i+0x15e>
 8009d4e:	6822      	ldr	r2, [r4, #0]
 8009d50:	f022 0220 	bic.w	r2, r2, #32
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	2210      	movs	r2, #16
 8009d58:	e7b7      	b.n	8009cca <_printf_i+0xd2>
 8009d5a:	064d      	lsls	r5, r1, #25
 8009d5c:	bf48      	it	mi
 8009d5e:	b29b      	uxthmi	r3, r3
 8009d60:	e7ef      	b.n	8009d42 <_printf_i+0x14a>
 8009d62:	4665      	mov	r5, ip
 8009d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d68:	fb02 3311 	mls	r3, r2, r1, r3
 8009d6c:	5cc3      	ldrb	r3, [r0, r3]
 8009d6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d72:	460b      	mov	r3, r1
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d1f5      	bne.n	8009d64 <_printf_i+0x16c>
 8009d78:	e7b9      	b.n	8009cee <_printf_i+0xf6>
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	6825      	ldr	r5, [r4, #0]
 8009d7e:	6961      	ldr	r1, [r4, #20]
 8009d80:	1d18      	adds	r0, r3, #4
 8009d82:	6010      	str	r0, [r2, #0]
 8009d84:	0628      	lsls	r0, r5, #24
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	d501      	bpl.n	8009d8e <_printf_i+0x196>
 8009d8a:	6019      	str	r1, [r3, #0]
 8009d8c:	e002      	b.n	8009d94 <_printf_i+0x19c>
 8009d8e:	066a      	lsls	r2, r5, #25
 8009d90:	d5fb      	bpl.n	8009d8a <_printf_i+0x192>
 8009d92:	8019      	strh	r1, [r3, #0]
 8009d94:	2300      	movs	r3, #0
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	4665      	mov	r5, ip
 8009d9a:	e7b9      	b.n	8009d10 <_printf_i+0x118>
 8009d9c:	6813      	ldr	r3, [r2, #0]
 8009d9e:	1d19      	adds	r1, r3, #4
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	681d      	ldr	r5, [r3, #0]
 8009da4:	6862      	ldr	r2, [r4, #4]
 8009da6:	2100      	movs	r1, #0
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7f6 fa31 	bl	8000210 <memchr>
 8009dae:	b108      	cbz	r0, 8009db4 <_printf_i+0x1bc>
 8009db0:	1b40      	subs	r0, r0, r5
 8009db2:	6060      	str	r0, [r4, #4]
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	6123      	str	r3, [r4, #16]
 8009db8:	2300      	movs	r3, #0
 8009dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dbe:	e7a7      	b.n	8009d10 <_printf_i+0x118>
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	47c0      	blx	r8
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d0aa      	beq.n	8009d24 <_printf_i+0x12c>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	079b      	lsls	r3, r3, #30
 8009dd2:	d413      	bmi.n	8009dfc <_printf_i+0x204>
 8009dd4:	68e0      	ldr	r0, [r4, #12]
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	4298      	cmp	r0, r3
 8009dda:	bfb8      	it	lt
 8009ddc:	4618      	movlt	r0, r3
 8009dde:	e7a3      	b.n	8009d28 <_printf_i+0x130>
 8009de0:	2301      	movs	r3, #1
 8009de2:	464a      	mov	r2, r9
 8009de4:	4639      	mov	r1, r7
 8009de6:	4630      	mov	r0, r6
 8009de8:	47c0      	blx	r8
 8009dea:	3001      	adds	r0, #1
 8009dec:	d09a      	beq.n	8009d24 <_printf_i+0x12c>
 8009dee:	3501      	adds	r5, #1
 8009df0:	68e3      	ldr	r3, [r4, #12]
 8009df2:	9a03      	ldr	r2, [sp, #12]
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	dcf2      	bgt.n	8009de0 <_printf_i+0x1e8>
 8009dfa:	e7eb      	b.n	8009dd4 <_printf_i+0x1dc>
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	f104 0919 	add.w	r9, r4, #25
 8009e02:	e7f5      	b.n	8009df0 <_printf_i+0x1f8>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1ac      	bne.n	8009d62 <_printf_i+0x16a>
 8009e08:	7803      	ldrb	r3, [r0, #0]
 8009e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e12:	e76c      	b.n	8009cee <_printf_i+0xf6>
 8009e14:	0800a375 	.word	0x0800a375
 8009e18:	0800a386 	.word	0x0800a386

08009e1c <memmove>:
 8009e1c:	4288      	cmp	r0, r1
 8009e1e:	b510      	push	{r4, lr}
 8009e20:	eb01 0302 	add.w	r3, r1, r2
 8009e24:	d807      	bhi.n	8009e36 <memmove+0x1a>
 8009e26:	1e42      	subs	r2, r0, #1
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d00a      	beq.n	8009e42 <memmove+0x26>
 8009e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e34:	e7f8      	b.n	8009e28 <memmove+0xc>
 8009e36:	4283      	cmp	r3, r0
 8009e38:	d9f5      	bls.n	8009e26 <memmove+0xa>
 8009e3a:	1881      	adds	r1, r0, r2
 8009e3c:	1ad2      	subs	r2, r2, r3
 8009e3e:	42d3      	cmn	r3, r2
 8009e40:	d100      	bne.n	8009e44 <memmove+0x28>
 8009e42:	bd10      	pop	{r4, pc}
 8009e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e4c:	e7f7      	b.n	8009e3e <memmove+0x22>
	...

08009e50 <_free_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4605      	mov	r5, r0
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d045      	beq.n	8009ee4 <_free_r+0x94>
 8009e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5c:	1f0c      	subs	r4, r1, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfb8      	it	lt
 8009e62:	18e4      	addlt	r4, r4, r3
 8009e64:	f000 f8d2 	bl	800a00c <__malloc_lock>
 8009e68:	4a1f      	ldr	r2, [pc, #124]	; (8009ee8 <_free_r+0x98>)
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	b933      	cbnz	r3, 8009e7e <_free_r+0x2e>
 8009e70:	6063      	str	r3, [r4, #4]
 8009e72:	6014      	str	r4, [r2, #0]
 8009e74:	4628      	mov	r0, r5
 8009e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e7a:	f000 b8c8 	b.w	800a00e <__malloc_unlock>
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	d90c      	bls.n	8009e9c <_free_r+0x4c>
 8009e82:	6821      	ldr	r1, [r4, #0]
 8009e84:	1862      	adds	r2, r4, r1
 8009e86:	4293      	cmp	r3, r2
 8009e88:	bf04      	itt	eq
 8009e8a:	681a      	ldreq	r2, [r3, #0]
 8009e8c:	685b      	ldreq	r3, [r3, #4]
 8009e8e:	6063      	str	r3, [r4, #4]
 8009e90:	bf04      	itt	eq
 8009e92:	1852      	addeq	r2, r2, r1
 8009e94:	6022      	streq	r2, [r4, #0]
 8009e96:	6004      	str	r4, [r0, #0]
 8009e98:	e7ec      	b.n	8009e74 <_free_r+0x24>
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	b10a      	cbz	r2, 8009ea4 <_free_r+0x54>
 8009ea0:	42a2      	cmp	r2, r4
 8009ea2:	d9fa      	bls.n	8009e9a <_free_r+0x4a>
 8009ea4:	6819      	ldr	r1, [r3, #0]
 8009ea6:	1858      	adds	r0, r3, r1
 8009ea8:	42a0      	cmp	r0, r4
 8009eaa:	d10b      	bne.n	8009ec4 <_free_r+0x74>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	4401      	add	r1, r0
 8009eb0:	1858      	adds	r0, r3, r1
 8009eb2:	4282      	cmp	r2, r0
 8009eb4:	6019      	str	r1, [r3, #0]
 8009eb6:	d1dd      	bne.n	8009e74 <_free_r+0x24>
 8009eb8:	6810      	ldr	r0, [r2, #0]
 8009eba:	6852      	ldr	r2, [r2, #4]
 8009ebc:	605a      	str	r2, [r3, #4]
 8009ebe:	4401      	add	r1, r0
 8009ec0:	6019      	str	r1, [r3, #0]
 8009ec2:	e7d7      	b.n	8009e74 <_free_r+0x24>
 8009ec4:	d902      	bls.n	8009ecc <_free_r+0x7c>
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	e7d3      	b.n	8009e74 <_free_r+0x24>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	1821      	adds	r1, r4, r0
 8009ed0:	428a      	cmp	r2, r1
 8009ed2:	bf04      	itt	eq
 8009ed4:	6811      	ldreq	r1, [r2, #0]
 8009ed6:	6852      	ldreq	r2, [r2, #4]
 8009ed8:	6062      	str	r2, [r4, #4]
 8009eda:	bf04      	itt	eq
 8009edc:	1809      	addeq	r1, r1, r0
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	605c      	str	r4, [r3, #4]
 8009ee2:	e7c7      	b.n	8009e74 <_free_r+0x24>
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	bf00      	nop
 8009ee8:	200049f0 	.word	0x200049f0

08009eec <_malloc_r>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	1ccd      	adds	r5, r1, #3
 8009ef0:	f025 0503 	bic.w	r5, r5, #3
 8009ef4:	3508      	adds	r5, #8
 8009ef6:	2d0c      	cmp	r5, #12
 8009ef8:	bf38      	it	cc
 8009efa:	250c      	movcc	r5, #12
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	4606      	mov	r6, r0
 8009f00:	db01      	blt.n	8009f06 <_malloc_r+0x1a>
 8009f02:	42a9      	cmp	r1, r5
 8009f04:	d903      	bls.n	8009f0e <_malloc_r+0x22>
 8009f06:	230c      	movs	r3, #12
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	f000 f87d 	bl	800a00c <__malloc_lock>
 8009f12:	4a21      	ldr	r2, [pc, #132]	; (8009f98 <_malloc_r+0xac>)
 8009f14:	6814      	ldr	r4, [r2, #0]
 8009f16:	4621      	mov	r1, r4
 8009f18:	b991      	cbnz	r1, 8009f40 <_malloc_r+0x54>
 8009f1a:	4c20      	ldr	r4, [pc, #128]	; (8009f9c <_malloc_r+0xb0>)
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	b91b      	cbnz	r3, 8009f28 <_malloc_r+0x3c>
 8009f20:	4630      	mov	r0, r6
 8009f22:	f000 f863 	bl	8009fec <_sbrk_r>
 8009f26:	6020      	str	r0, [r4, #0]
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 f85e 	bl	8009fec <_sbrk_r>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d124      	bne.n	8009f7e <_malloc_r+0x92>
 8009f34:	230c      	movs	r3, #12
 8009f36:	6033      	str	r3, [r6, #0]
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 f868 	bl	800a00e <__malloc_unlock>
 8009f3e:	e7e4      	b.n	8009f0a <_malloc_r+0x1e>
 8009f40:	680b      	ldr	r3, [r1, #0]
 8009f42:	1b5b      	subs	r3, r3, r5
 8009f44:	d418      	bmi.n	8009f78 <_malloc_r+0x8c>
 8009f46:	2b0b      	cmp	r3, #11
 8009f48:	d90f      	bls.n	8009f6a <_malloc_r+0x7e>
 8009f4a:	600b      	str	r3, [r1, #0]
 8009f4c:	50cd      	str	r5, [r1, r3]
 8009f4e:	18cc      	adds	r4, r1, r3
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 f85c 	bl	800a00e <__malloc_unlock>
 8009f56:	f104 000b 	add.w	r0, r4, #11
 8009f5a:	1d23      	adds	r3, r4, #4
 8009f5c:	f020 0007 	bic.w	r0, r0, #7
 8009f60:	1ac3      	subs	r3, r0, r3
 8009f62:	d0d3      	beq.n	8009f0c <_malloc_r+0x20>
 8009f64:	425a      	negs	r2, r3
 8009f66:	50e2      	str	r2, [r4, r3]
 8009f68:	e7d0      	b.n	8009f0c <_malloc_r+0x20>
 8009f6a:	428c      	cmp	r4, r1
 8009f6c:	684b      	ldr	r3, [r1, #4]
 8009f6e:	bf16      	itet	ne
 8009f70:	6063      	strne	r3, [r4, #4]
 8009f72:	6013      	streq	r3, [r2, #0]
 8009f74:	460c      	movne	r4, r1
 8009f76:	e7eb      	b.n	8009f50 <_malloc_r+0x64>
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6849      	ldr	r1, [r1, #4]
 8009f7c:	e7cc      	b.n	8009f18 <_malloc_r+0x2c>
 8009f7e:	1cc4      	adds	r4, r0, #3
 8009f80:	f024 0403 	bic.w	r4, r4, #3
 8009f84:	42a0      	cmp	r0, r4
 8009f86:	d005      	beq.n	8009f94 <_malloc_r+0xa8>
 8009f88:	1a21      	subs	r1, r4, r0
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f82e 	bl	8009fec <_sbrk_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d0cf      	beq.n	8009f34 <_malloc_r+0x48>
 8009f94:	6025      	str	r5, [r4, #0]
 8009f96:	e7db      	b.n	8009f50 <_malloc_r+0x64>
 8009f98:	200049f0 	.word	0x200049f0
 8009f9c:	200049f4 	.word	0x200049f4

08009fa0 <_realloc_r>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	460e      	mov	r6, r1
 8009fa8:	b921      	cbnz	r1, 8009fb4 <_realloc_r+0x14>
 8009faa:	4611      	mov	r1, r2
 8009fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fb0:	f7ff bf9c 	b.w	8009eec <_malloc_r>
 8009fb4:	b922      	cbnz	r2, 8009fc0 <_realloc_r+0x20>
 8009fb6:	f7ff ff4b 	bl	8009e50 <_free_r>
 8009fba:	4625      	mov	r5, r4
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc0:	f000 f826 	bl	800a010 <_malloc_usable_size_r>
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d20f      	bcs.n	8009fe8 <_realloc_r+0x48>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4638      	mov	r0, r7
 8009fcc:	f7ff ff8e 	bl	8009eec <_malloc_r>
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d0f2      	beq.n	8009fbc <_realloc_r+0x1c>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4622      	mov	r2, r4
 8009fda:	f7ff fc09 	bl	80097f0 <memcpy>
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ff35 	bl	8009e50 <_free_r>
 8009fe6:	e7e9      	b.n	8009fbc <_realloc_r+0x1c>
 8009fe8:	4635      	mov	r5, r6
 8009fea:	e7e7      	b.n	8009fbc <_realloc_r+0x1c>

08009fec <_sbrk_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4c06      	ldr	r4, [pc, #24]	; (800a008 <_sbrk_r+0x1c>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	6023      	str	r3, [r4, #0]
 8009ff8:	f7f6 fe76 	bl	8000ce8 <_sbrk>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_sbrk_r+0x1a>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	b103      	cbz	r3, 800a006 <_sbrk_r+0x1a>
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	200086a0 	.word	0x200086a0

0800a00c <__malloc_lock>:
 800a00c:	4770      	bx	lr

0800a00e <__malloc_unlock>:
 800a00e:	4770      	bx	lr

0800a010 <_malloc_usable_size_r>:
 800a010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a014:	1f18      	subs	r0, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfbc      	itt	lt
 800a01a:	580b      	ldrlt	r3, [r1, r0]
 800a01c:	18c0      	addlt	r0, r0, r3
 800a01e:	4770      	bx	lr

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
